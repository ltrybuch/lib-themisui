module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 307);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.core.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(605);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 573:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! jquery */ 3);

/***/ },

/***/ 605:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(573)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "core",
	    name: "Core",
	    category: "framework",
	    description: "The core of the Kendo framework."
	};

	/*jshint eqnull: true, loopfunc: true, evil: true, boss: true, freeze: false*/
	(function($, window, undefined) {
	    var kendo = window.kendo = window.kendo || { cultures: {} },
	        extend = $.extend,
	        each = $.each,
	        isArray = $.isArray,
	        proxy = $.proxy,
	        noop = $.noop,
	        math = Math,
	        Template,
	        JSON = window.JSON || {},
	        support = {},
	        percentRegExp = /%/,
	        formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
	        boxShadowRegExp = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i,
	        numberRegExp = /^(\+|-?)\d+(\.?)\d*$/,
	        FUNCTION = "function",
	        STRING = "string",
	        NUMBER = "number",
	        OBJECT = "object",
	        NULL = "null",
	        BOOLEAN = "boolean",
	        UNDEFINED = "undefined",
	        getterCache = {},
	        setterCache = {},
	        slice = [].slice;

	    kendo.version = "$KENDO_VERSION".replace(/^\s+|\s+$/g, '');

	    function Class() {}

	    Class.extend = function(proto) {
	        var base = function() {},
	            member,
	            that = this,
	            subclass = proto && proto.init ? proto.init : function () {
	                that.apply(this, arguments);
	            },
	            fn;

	        base.prototype = that.prototype;
	        fn = subclass.fn = subclass.prototype = new base();

	        for (member in proto) {
	            if (proto[member] != null && proto[member].constructor === Object) {
	                // Merge object members
	                fn[member] = extend(true, {}, base.prototype[member], proto[member]);
	            } else {
	                fn[member] = proto[member];
	            }
	        }

	        fn.constructor = subclass;
	        subclass.extend = that.extend;

	        return subclass;
	    };

	    Class.prototype._initOptions = function(options) {
	        this.options = deepExtend({}, this.options, options);
	    };

	    var isFunction = kendo.isFunction = function(fn) {
	        return typeof fn === "function";
	    };

	    var preventDefault = function() {
	        this._defaultPrevented = true;
	    };

	    var isDefaultPrevented = function() {
	        return this._defaultPrevented === true;
	    };

	    var Observable = Class.extend({
	        init: function() {
	            this._events = {};
	        },

	        bind: function(eventName, handlers, one) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                original,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;

	            if (handlers === undefined) {
	                for (idx in eventName) {
	                    that.bind(idx, eventName[idx]);
	                }
	                return that;
	            }

	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];

	                handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    if (one) {
	                        original = handler;
	                        handler = function() {
	                            that.unbind(eventName, handler);
	                            original.apply(that, arguments);
	                        };
	                        handler.original = original;
	                    }
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.push(handler);
	                }
	            }

	            return that;
	        },

	        one: function(eventNames, handlers) {
	            return this.bind(eventNames, handlers, true);
	        },

	        first: function(eventName, handlers) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;

	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];

	                handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.unshift(handler);
	                }
	            }

	            return that;
	        },

	        trigger: function(eventName, e) {
	            var that = this,
	                events = that._events[eventName],
	                idx,
	                length;

	            if (events) {
	                e = e || {};

	                e.sender = that;

	                e._defaultPrevented = false;

	                e.preventDefault = preventDefault;

	                e.isDefaultPrevented = isDefaultPrevented;

	                events = events.slice();

	                for (idx = 0, length = events.length; idx < length; idx++) {
	                    events[idx].call(that, e);
	                }

	                return e._defaultPrevented === true;
	            }

	            return false;
	        },

	        unbind: function(eventName, handler) {
	            var that = this,
	                events = that._events[eventName],
	                idx;

	            if (eventName === undefined) {
	                that._events = {};
	            } else if (events) {
	                if (handler) {
	                    for (idx = events.length - 1; idx >= 0; idx--) {
	                        if (events[idx] === handler || events[idx].original === handler) {
	                            events.splice(idx, 1);
	                        }
	                    }
	                } else {
	                    that._events[eventName] = [];
	                }
	            }

	            return that;
	        }
	    });


	     function compilePart(part, stringPart) {
	         if (stringPart) {
	             return "'" +
	                 part.split("'").join("\\'")
	                     .split('\\"').join('\\\\\\"')
	                     .replace(/\n/g, "\\n")
	                     .replace(/\r/g, "\\r")
	                     .replace(/\t/g, "\\t") + "'";
	         } else {
	             var first = part.charAt(0),
	                 rest = part.substring(1);

	             if (first === "=") {
	                 return "+(" + rest + ")+";
	             } else if (first === ":") {
	                 return "+$kendoHtmlEncode(" + rest + ")+";
	             } else {
	                 return ";" + part + ";$kendoOutput+=";
	             }
	         }
	     }

	    var argumentNameRegExp = /^\w+/,
	        encodeRegExp = /\$\{([^}]*)\}/g,
	        escapedCurlyRegExp = /\\\}/g,
	        curlyRegExp = /__CURLY__/g,
	        escapedSharpRegExp = /\\#/g,
	        sharpRegExp = /__SHARP__/g,
	        zeros = ["", "0", "00", "000", "0000"];

	    Template = {
	        paramName: "data", // name of the parameter of the generated template
	        useWithBlock: true, // whether to wrap the template in a with() block
	        render: function(template, data) {
	            var idx,
	                length,
	                html = "";

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                html += template(data[idx]);
	            }

	            return html;
	        },
	        compile: function(template, options) {
	            var settings = extend({}, this, options),
	                paramName = settings.paramName,
	                argumentName = paramName.match(argumentNameRegExp)[0],
	                useWithBlock = settings.useWithBlock,
	                functionBody = "var $kendoOutput, $kendoHtmlEncode = kendo.htmlEncode;",
	                fn,
	                parts,
	                idx;

	            if (isFunction(template)) {
	                return template;
	            }

	            functionBody += useWithBlock ? "with(" + paramName + "){" : "";

	            functionBody += "$kendoOutput=";

	            parts = template
	                .replace(escapedCurlyRegExp, "__CURLY__")
	                .replace(encodeRegExp, "#=$kendoHtmlEncode($1)#")
	                .replace(curlyRegExp, "}")
	                .replace(escapedSharpRegExp, "__SHARP__")
	                .split("#");

	            for (idx = 0; idx < parts.length; idx ++) {
	                functionBody += compilePart(parts[idx], idx % 2 === 0);
	            }

	            functionBody += useWithBlock ? ";}" : ";";

	            functionBody += "return $kendoOutput;";

	            functionBody = functionBody.replace(sharpRegExp, "#");

	            try {
	                fn = new Function(argumentName, functionBody);
	                fn._slotCount = Math.floor(parts.length / 2);
	                return fn;
	            } catch(e) {
	                throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
	            }
	        }
	    };

	function pad(number, digits, end) {
	    number = number + "";
	    digits = digits || 2;
	    end = digits - number.length;

	    if (end) {
	        return zeros[digits].substring(0, end) + number;
	    }

	    return number;
	}

	    //JSON stringify
	(function() {
	    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        gap,
	        indent,
	        meta = {
	            "\b": "\\b",
	            "\t": "\\t",
	            "\n": "\\n",
	            "\f": "\\f",
	            "\r": "\\r",
	            "\"" : '\\"',
	            "\\": "\\\\"
	        },
	        rep,
	        toString = {}.toString;


	    if (typeof Date.prototype.toJSON !== FUNCTION) {

	        Date.prototype.toJSON = function () {
	            var that = this;

	            return isFinite(that.valueOf()) ?
	                pad(that.getUTCFullYear(), 4) + "-" +
	                pad(that.getUTCMonth() + 1)   + "-" +
	                pad(that.getUTCDate())        + "T" +
	                pad(that.getUTCHours())       + ":" +
	                pad(that.getUTCMinutes())     + ":" +
	                pad(that.getUTCSeconds())     + "Z" : null;
	        };

	        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
	            return this.valueOf();
	        };
	    }

	    function quote(string) {
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? "\"" + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === STRING ? c :
	                "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + "\"" : "\"" + string + "\"";
	    }

	    function str(key, holder) {
	        var i,
	            k,
	            v,
	            length,
	            mind = gap,
	            partial,
	            value = holder[key],
	            type;

	        if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
	            value = value.toJSON(key);
	        }

	        if (typeof rep === FUNCTION) {
	            value = rep.call(holder, key, value);
	        }

	        type = typeof value;
	        if (type === STRING) {
	            return quote(value);
	        } else if (type === NUMBER) {
	            return isFinite(value) ? String(value) : NULL;
	        } else if (type === BOOLEAN || type === NULL) {
	            return String(value);
	        } else if (type === OBJECT) {
	            if (!value) {
	                return NULL;
	            }
	            gap += indent;
	            partial = [];
	            if (toString.apply(value) === "[object Array]") {
	                length = value.length;
	                for (i = 0; i < length; i++) {
	                    partial[i] = str(i, value) || NULL;
	                }
	                v = partial.length === 0 ? "[]" : gap ?
	                    "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
	                    "[" + partial.join(",") + "]";
	                gap = mind;
	                return v;
	            }
	            if (rep && typeof rep === OBJECT) {
	                length = rep.length;
	                for (i = 0; i < length; i++) {
	                    if (typeof rep[i] === STRING) {
	                        k = rep[i];
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            } else {
	                for (k in value) {
	                    if (Object.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            }

	            v = partial.length === 0 ? "{}" : gap ?
	                "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
	                "{" + partial.join(",") + "}";
	            gap = mind;
	            return v;
	        }
	    }

	    if (typeof JSON.stringify !== FUNCTION) {
	        JSON.stringify = function (value, replacer, space) {
	            var i;
	            gap = "";
	            indent = "";

	            if (typeof space === NUMBER) {
	                for (i = 0; i < space; i += 1) {
	                    indent += " ";
	                }

	            } else if (typeof space === STRING) {
	                indent = space;
	            }

	            rep = replacer;
	            if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
	                throw new Error("JSON.stringify");
	            }

	            return str("", {"": value});
	        };
	    }
	})();

	// Date and Number formatting
	(function() {
	    var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g,
	        standardFormatRegExp =  /^(n|c|p|e)(\d*)$/i,
	        literalRegExp = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g,
	        commaRegExp = /\,/g,
	        EMPTY = "",
	        POINT = ".",
	        COMMA = ",",
	        SHARP = "#",
	        ZERO = "0",
	        PLACEHOLDER = "??",
	        EN = "en-US",
	        objectToString = {}.toString;

	    //cultures
	    kendo.cultures["en-US"] = {
	        name: EN,
	        numberFormat: {
	            pattern: ["-n"],
	            decimals: 2,
	            ",": ",",
	            ".": ".",
	            groupSize: [3],
	            percent: {
	                pattern: ["-n %", "n %"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "%"
	            },
	            currency: {
	                name: "US Dollar",
	                abbr: "USD",
	                pattern: ["($n)", "$n"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "$"
	            }
	        },
	        calendars: {
	            standard: {
	                days: {
	                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	                    namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
	                },
	                months: {
	                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	                },
	                AM: [ "AM", "am", "AM" ],
	                PM: [ "PM", "pm", "PM" ],
	                patterns: {
	                    d: "M/d/yyyy",
	                    D: "dddd, MMMM dd, yyyy",
	                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
	                    g: "M/d/yyyy h:mm tt",
	                    G: "M/d/yyyy h:mm:ss tt",
	                    m: "MMMM dd",
	                    M: "MMMM dd",
	                    s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
	                    t: "h:mm tt",
	                    T: "h:mm:ss tt",
	                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
	                    y: "MMMM, yyyy",
	                    Y: "MMMM, yyyy"
	                },
	                "/": "/",
	                ":": ":",
	                firstDay: 0,
	                twoDigitYearMax: 2029
	            }
	        }
	    };


	     function findCulture(culture) {
	        if (culture) {
	            if (culture.numberFormat) {
	                return culture;
	            }

	            if (typeof culture === STRING) {
	                var cultures = kendo.cultures;
	                return cultures[culture] || cultures[culture.split("-")[0]] || null;
	            }

	            return null;
	        }

	        return null;
	    }

	    function getCulture(culture) {
	        if (culture) {
	            culture = findCulture(culture);
	        }

	        return culture || kendo.cultures.current;
	    }

	    kendo.culture = function(cultureName) {
	        var cultures = kendo.cultures, culture;

	        if (cultureName !== undefined) {
	            culture = findCulture(cultureName) || cultures[EN];
	            culture.calendar = culture.calendars.standard;
	            cultures.current = culture;
	        } else {
	            return cultures.current;
	        }
	    };

	    kendo.findCulture = findCulture;
	    kendo.getCulture = getCulture;

	    //set current culture to en-US.
	    kendo.culture(EN);

	    function formatDate(date, format, culture) {
	        culture = getCulture(culture);

	        var calendar = culture.calendars.standard,
	            days = calendar.days,
	            months = calendar.months;

	        format = calendar.patterns[format] || format;

	        return format.replace(dateFormatRegExp, function (match) {
	            var minutes;
	            var result;
	            var sign;

	            if (match === "d") {
	                result = date.getDate();
	            } else if (match === "dd") {
	                result = pad(date.getDate());
	            } else if (match === "ddd") {
	                result = days.namesAbbr[date.getDay()];
	            } else if (match === "dddd") {
	                result = days.names[date.getDay()];
	            } else if (match === "M") {
	                result = date.getMonth() + 1;
	            } else if (match === "MM") {
	                result = pad(date.getMonth() + 1);
	            } else if (match === "MMM") {
	                result = months.namesAbbr[date.getMonth()];
	            } else if (match === "MMMM") {
	                result = months.names[date.getMonth()];
	            } else if (match === "yy") {
	                result = pad(date.getFullYear() % 100);
	            } else if (match === "yyyy") {
	                result = pad(date.getFullYear(), 4);
	            } else if (match === "h" ) {
	                result = date.getHours() % 12 || 12;
	            } else if (match === "hh") {
	                result = pad(date.getHours() % 12 || 12);
	            } else if (match === "H") {
	                result = date.getHours();
	            } else if (match === "HH") {
	                result = pad(date.getHours());
	            } else if (match === "m") {
	                result = date.getMinutes();
	            } else if (match === "mm") {
	                result = pad(date.getMinutes());
	            } else if (match === "s") {
	                result = date.getSeconds();
	            } else if (match === "ss") {
	                result = pad(date.getSeconds());
	            } else if (match === "f") {
	                result = math.floor(date.getMilliseconds() / 100);
	            } else if (match === "ff") {
	                result = date.getMilliseconds();
	                if (result > 99) {
	                    result = math.floor(result / 10);
	                }
	                result = pad(result);
	            } else if (match === "fff") {
	                result = pad(date.getMilliseconds(), 3);
	            } else if (match === "tt") {
	                result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
	            } else if (match === "zzz") {
	                minutes = date.getTimezoneOffset();
	                sign = minutes < 0;

	                result = math.abs(minutes / 60).toString().split(".")[0];
	                minutes = math.abs(minutes) - (result * 60);

	                result = (sign ? "+" : "-") + pad(result);
	                result += ":" + pad(minutes);
	            } else if (match === "zz" || match === "z") {
	                result = date.getTimezoneOffset() / 60;
	                sign = result < 0;

	                result = math.abs(result).toString().split(".")[0];
	                result = (sign ? "+" : "-") + (match === "zz" ? pad(result) : result);
	            }

	            return result !== undefined ? result : match.slice(1, match.length - 1);
	        });
	    }

	    //number formatting
	    function formatNumber(number, format, culture) {
	        culture = getCulture(culture);

	        var numberFormat = culture.numberFormat,
	            decimal = numberFormat[POINT],
	            precision = numberFormat.decimals,
	            pattern = numberFormat.pattern[0],
	            literals = [],
	            symbol,
	            isCurrency, isPercent,
	            customPrecision,
	            formatAndPrecision,
	            negative = number < 0,
	            integer,
	            fraction,
	            integerLength,
	            fractionLength,
	            replacement = EMPTY,
	            value = EMPTY,
	            idx,
	            length,
	            ch,
	            hasGroup,
	            hasNegativeFormat,
	            decimalIndex,
	            sharpIndex,
	            zeroIndex,
	            hasZero, hasSharp,
	            percentIndex,
	            currencyIndex,
	            startZeroIndex,
	            start = -1,
	            end;

	        //return empty string if no number
	        if (number === undefined) {
	            return EMPTY;
	        }

	        if (!isFinite(number)) {
	            return number;
	        }

	        //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
	        if (!format) {
	            return culture.name.length ? number.toLocaleString() : number.toString();
	        }

	        formatAndPrecision = standardFormatRegExp.exec(format);

	        // standard formatting
	        if (formatAndPrecision) {
	            format = formatAndPrecision[1].toLowerCase();

	            isCurrency = format === "c";
	            isPercent = format === "p";

	            if (isCurrency || isPercent) {
	                //get specific number format information if format is currency or percent
	                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	                decimal = numberFormat[POINT];
	                precision = numberFormat.decimals;
	                symbol = numberFormat.symbol;
	                pattern = numberFormat.pattern[negative ? 0 : 1];
	            }

	            customPrecision = formatAndPrecision[2];

	            if (customPrecision) {
	                precision = +customPrecision;
	            }

	            //return number in exponential format
	            if (format === "e") {
	                return customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.
	            }

	            // multiply if format is percent
	            if (isPercent) {
	                number *= 100;
	            }

	            number = round(number, precision);
	            negative = number < 0;
	            number = number.split(POINT);

	            integer = number[0];
	            fraction = number[1];

	            //exclude "-" if number is negative.
	            if (negative) {
	                integer = integer.substring(1);
	            }

	            value = groupInteger(integer, 0, integer.length, numberFormat);

	            if (fraction) {
	                value += decimal + fraction;
	            }

	            if (format === "n" && !negative) {
	                return value;
	            }

	            number = EMPTY;

	            for (idx = 0, length = pattern.length; idx < length; idx++) {
	                ch = pattern.charAt(idx);

	                if (ch === "n") {
	                    number += value;
	                } else if (ch === "$" || ch === "%") {
	                    number += symbol;
	                } else {
	                    number += ch;
	                }
	            }

	            return number;
	        }

	        //custom formatting
	        //
	        //separate format by sections.

	        //make number positive
	        if (negative) {
	            number = -number;
	        }

	        if (format.indexOf("'") > -1 || format.indexOf("\"") > -1 || format.indexOf("\\") > -1) {
	            format = format.replace(literalRegExp, function (match) {
	                var quoteChar = match.charAt(0).replace("\\", ""),
	                    literal = match.slice(1).replace(quoteChar, "");

	                literals.push(literal);

	                return PLACEHOLDER;
	            });
	        }

	        format = format.split(";");
	        if (negative && format[1]) {
	            //get negative format
	            format = format[1];
	            hasNegativeFormat = true;
	        } else if (number === 0) {
	            //format for zeros
	            format = format[2] || format[0];
	            if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
	                //return format if it is string constant.
	                return format;
	            }
	        } else {
	            format = format[0];
	        }

	        percentIndex = format.indexOf("%");
	        currencyIndex = format.indexOf("$");

	        isPercent = percentIndex != -1;
	        isCurrency = currencyIndex != -1;

	        //multiply number if the format has percent
	        if (isPercent) {
	            number *= 100;
	        }

	        if (isCurrency && format[currencyIndex - 1] === "\\") {
	            format = format.split("\\").join("");
	            isCurrency = false;
	        }

	        if (isCurrency || isPercent) {
	            //get specific number format information if format is currency or percent
	            numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	            decimal = numberFormat[POINT];
	            precision = numberFormat.decimals;
	            symbol = numberFormat.symbol;
	        }

	        hasGroup = format.indexOf(COMMA) > -1;
	        if (hasGroup) {
	            format = format.replace(commaRegExp, EMPTY);
	        }

	        decimalIndex = format.indexOf(POINT);
	        length = format.length;

	        if (decimalIndex != -1) {
	            fraction = number.toString().split("e");
	            if (fraction[1]) {
	                fraction = round(number, Math.abs(fraction[1]));
	            } else {
	                fraction = fraction[0];
	            }
	            fraction = fraction.split(POINT)[1] || EMPTY;
	            zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;
	            sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;
	            hasZero = zeroIndex > -1;
	            hasSharp = sharpIndex > -1;
	            idx = fraction.length;

	            if (!hasZero && !hasSharp) {
	                format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);
	                length = format.length;
	                decimalIndex = -1;
	                idx = 0;
	            } if (hasZero && zeroIndex > sharpIndex) {
	                idx = zeroIndex;
	            } else if (sharpIndex > zeroIndex) {
	                if (hasSharp && idx > sharpIndex) {
	                    idx = sharpIndex;
	                } else if (hasZero && idx < zeroIndex) {
	                    idx = zeroIndex;
	                }
	            }

	            if (idx > -1) {
	                number = round(number, idx);
	            }
	        } else {
	            number = round(number);
	        }

	        sharpIndex = format.indexOf(SHARP);
	        startZeroIndex = zeroIndex = format.indexOf(ZERO);

	        //define the index of the first digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            start = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            start = sharpIndex;
	        } else {
	            start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
	        }

	        sharpIndex = format.lastIndexOf(SHARP);
	        zeroIndex = format.lastIndexOf(ZERO);

	        //define the index of the last digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            end = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            end = sharpIndex;
	        } else {
	            end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
	        }

	        if (start == length) {
	            end = start;
	        }

	        if (start != -1) {
	            value = number.toString().split(POINT);
	            integer = value[0];
	            fraction = value[1] || EMPTY;

	            integerLength = integer.length;
	            fractionLength = fraction.length;

	            if (negative && (number * -1) >= 0) {
	                negative = false;
	            }

	            number = format.substring(0, start);

	            if (negative && !hasNegativeFormat) {
	                number += "-";
	            }

	            for (idx = start; idx < length; idx++) {
	                ch = format.charAt(idx);

	                if (decimalIndex == -1) {
	                    if (end - idx < integerLength) {
	                        number += integer;
	                        break;
	                    }
	                } else {
	                    if (zeroIndex != -1 && zeroIndex < idx) {
	                        replacement = EMPTY;
	                    }

	                    if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
	                        number += integer;
	                        idx = decimalIndex;
	                    }

	                    if (decimalIndex === idx) {
	                        number += (fraction ? decimal : EMPTY) + fraction;
	                        idx += end - decimalIndex + 1;
	                        continue;
	                    }
	                }

	                if (ch === ZERO) {
	                    number += ch;
	                    replacement = ch;
	                } else if (ch === SHARP) {
	                    number += replacement;
	                }
	            }

	            if (hasGroup) {
	                number = groupInteger(number, start + (negative ? 1 : 0), Math.max(end, (integerLength + start)), numberFormat);
	            }

	            if (end >= start) {
	                number += format.substring(end + 1);
	            }

	            //replace symbol placeholders
	            if (isCurrency || isPercent) {
	                value = EMPTY;
	                for (idx = 0, length = number.length; idx < length; idx++) {
	                    ch = number.charAt(idx);
	                    value += (ch === "$" || ch === "%") ? symbol : ch;
	                }
	                number = value;
	            }

	            length = literals.length;

	            if (length) {
	                for (idx = 0; idx < length; idx++) {
	                    number = number.replace(PLACEHOLDER, literals[idx]);
	                }
	            }
	        }

	        return number;
	    }

	    var groupInteger = function(number, start, end, numberFormat) {
	        var decimalIndex = number.indexOf(numberFormat[POINT]);
	        var groupSizes = numberFormat.groupSize.slice();
	        var groupSize = groupSizes.shift();
	        var integer, integerLength;
	        var idx, parts, value;
	        var newGroupSize;

	        end = decimalIndex !== -1 ? decimalIndex : end + 1;

	        integer = number.substring(start, end);
	        integerLength = integer.length;

	        if (integerLength >= groupSize) {
	            idx = integerLength;
	            parts = [];

	            while (idx > -1) {
	                value = integer.substring(idx - groupSize, idx);
	                if (value) {
	                    parts.push(value);
	                }
	                idx -= groupSize;
	                newGroupSize = groupSizes.shift();
	                groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;

	                if (groupSize === 0) {
	                    parts.push(integer.substring(0, idx));
	                    break;
	                }
	            }

	            integer = parts.reverse().join(numberFormat[COMMA]);
	            number = number.substring(0, start) + integer + number.substring(end);
	        }

	        return number;
	    };

	    var round = function(value, precision) {
	        precision = precision || 0;

	        value = value.toString().split('e');
	        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));

	        value = value.toString().split('e');
	        value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));

	        return value.toFixed(Math.min(precision, 20));
	    };

	    var toString = function(value, fmt, culture) {
	        if (fmt) {
	            if (objectToString.call(value) === "[object Date]") {
	                return formatDate(value, fmt, culture);
	            } else if (typeof value === NUMBER) {
	                return formatNumber(value, fmt, culture);
	            }
	        }

	        return value !== undefined ? value : "";
	    };

	    kendo.format = function(fmt) {
	        var values = arguments;

	        return fmt.replace(formatRegExp, function(match, index, placeholderFormat) {
	            var value = values[parseInt(index, 10) + 1];

	            return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
	        });
	    };

	    kendo._extractFormat = function (format) {
	        if (format.slice(0,3) === "{0:") {
	            format = format.slice(3, format.length - 1);
	        }

	        return format;
	    };

	    kendo._activeElement = function() {
	        try {
	            return document.activeElement;
	        } catch(e) {
	            return document.documentElement.activeElement;
	        }
	    };

	    kendo._round = round;
	    kendo._outerWidth = function (element, includeMargin) { return $(element).outerWidth(includeMargin || false) || 0; };
	    kendo._outerHeight = function (element, includeMargin) { return $(element).outerHeight(includeMargin || false) || 0; };
	    kendo.toString = toString;
	})();


	(function() {
	    var nonBreakingSpaceRegExp = /\u00A0/g,
	        exponentRegExp = /[eE][\-+]?[0-9]+/,
	        shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
	        longTimeZoneRegExp = /[+|\-]\d{1,2}:?\d{2}/,
	        dateRegExp = /^\/Date\((.*?)\)\/$/,
	        offsetRegExp = /[+-]\d*/,
	        FORMATS_SEQUENCE = [ [], [ "G", "g", "F" ], [ "D", "d", "y", "m", "T", "t" ] ],
	        STANDARD_FORMATS = [
	            [
	            "yyyy-MM-ddTHH:mm:ss.fffffffzzz",
	            "yyyy-MM-ddTHH:mm:ss.fffffff",
	            "yyyy-MM-ddTHH:mm:ss.fffzzz",
	            "yyyy-MM-ddTHH:mm:ss.fff",
	            "ddd MMM dd yyyy HH:mm:ss",
	            "yyyy-MM-ddTHH:mm:sszzz",
	            "yyyy-MM-ddTHH:mmzzz",
	            "yyyy-MM-ddTHH:mmzz",
	            "yyyy-MM-ddTHH:mm:ss",
	            "yyyy-MM-dd HH:mm:ss",
	            "yyyy/MM/dd HH:mm:ss"
	            ], [
	            "yyyy-MM-ddTHH:mm",
	            "yyyy-MM-dd HH:mm",
	            "yyyy/MM/dd HH:mm"
	            ], [
	            "yyyy/MM/dd",
	            "yyyy-MM-dd",
	            "HH:mm:ss",
	            "HH:mm"
	            ]
	        ],
	        numberRegExp = {
	            2: /^\d{1,2}/,
	            3: /^\d{1,3}/,
	            4: /^\d{4}/
	        },
	        objectToString = {}.toString;

	    function outOfRange(value, start, end) {
	        return !(value >= start && value <= end);
	    }

	    function designatorPredicate(designator) {
	        return designator.charAt(0);
	    }

	    function mapDesignators(designators) {
	        return $.map(designators, designatorPredicate);
	    }

	    //if date's day is different than the typed one - adjust
	    function adjustDST(date, hours) {
	        if (!hours && date.getHours() === 23) {
	            date.setHours(date.getHours() + 2);
	        }
	    }

	    function lowerArray(data) {
	        var idx = 0,
	            length = data.length,
	            array = [];

	        for (; idx < length; idx++) {
	            array[idx] = (data[idx] + "").toLowerCase();
	        }

	        return array;
	    }

	    function lowerLocalInfo(localInfo) {
	        var newLocalInfo = {}, property;

	        for (property in localInfo) {
	            newLocalInfo[property] = lowerArray(localInfo[property]);
	        }

	        return newLocalInfo;
	    }

	    function parseExact(value, format, culture) {
	        if (!value) {
	            return null;
	        }

	        var lookAhead = function (match) {
	                var i = 0;
	                while (format[idx] === match) {
	                    i++;
	                    idx++;
	                }
	                if (i > 0) {
	                    idx -= 1;
	                }
	                return i;
	            },
	            getNumber = function(size) {
	                var rg = numberRegExp[size] || new RegExp('^\\d{1,' + size + '}'),
	                    match = value.substr(valueIdx, size).match(rg);

	                if (match) {
	                    match = match[0];
	                    valueIdx += match.length;
	                    return parseInt(match, 10);
	                }
	                return null;
	            },
	            getIndexByName = function (names, lower) {
	                var i = 0,
	                    length = names.length,
	                    name, nameLength,
	                    matchLength = 0,
	                    matchIdx = 0,
	                    subValue;

	                for (; i < length; i++) {
	                    name = names[i];
	                    nameLength = name.length;
	                    subValue = value.substr(valueIdx, nameLength);

	                    if (lower) {
	                        subValue = subValue.toLowerCase();
	                    }

	                    if (subValue == name && nameLength > matchLength) {
	                        matchLength = nameLength;
	                        matchIdx = i;
	                    }
	                }

	                if (matchLength) {
	                    valueIdx += matchLength;
	                    return matchIdx + 1;
	                }

	                return null;
	            },
	            checkLiteral = function() {
	                var result = false;
	                if (value.charAt(valueIdx) === format[idx]) {
	                    valueIdx++;
	                    result = true;
	                }
	                return result;
	            },
	            calendar = culture.calendars.standard,
	            year = null,
	            month = null,
	            day = null,
	            hours = null,
	            minutes = null,
	            seconds = null,
	            milliseconds = null,
	            idx = 0,
	            valueIdx = 0,
	            literal = false,
	            date = new Date(),
	            twoDigitYearMax = calendar.twoDigitYearMax || 2029,
	            defaultYear = date.getFullYear(),
	            ch, count, length, pattern,
	            pmHour, UTC, matches,
	            amDesignators, pmDesignators,
	            hoursOffset, minutesOffset,
	            hasTime, match;

	        if (!format) {
	            format = "d"; //shord date format
	        }

	        //if format is part of the patterns get real format
	        pattern = calendar.patterns[format];
	        if (pattern) {
	            format = pattern;
	        }

	        format = format.split("");
	        length = format.length;

	        for (; idx < length; idx++) {
	            ch = format[idx];

	            if (literal) {
	                if (ch === "'") {
	                    literal = false;
	                } else {
	                    checkLiteral();
	                }
	            } else {
	                if (ch === "d") {
	                    count = lookAhead("d");
	                    if (!calendar._lowerDays) {
	                        calendar._lowerDays = lowerLocalInfo(calendar.days);
	                    }

	                    if (day !== null && count > 2) {
	                        continue;
	                    }

	                    day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? "namesAbbr" : "names"], true);

	                    if (day === null || outOfRange(day, 1, 31)) {
	                        return null;
	                    }
	                } else if (ch === "M") {
	                    count = lookAhead("M");
	                    if (!calendar._lowerMonths) {
	                        calendar._lowerMonths = lowerLocalInfo(calendar.months);
	                    }
	                    month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);

	                    if (month === null || outOfRange(month, 1, 12)) {
	                        return null;
	                    }
	                    month -= 1; //because month is zero based
	                } else if (ch === "y") {
	                    count = lookAhead("y");
	                    year = getNumber(count);

	                    if (year === null) {
	                        return null;
	                    }

	                    if (count == 2) {
	                        if (typeof twoDigitYearMax === "string") {
	                            twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);
	                        }

	                        year = (defaultYear - defaultYear % 100) + year;
	                        if (year > twoDigitYearMax) {
	                            year -= 100;
	                        }
	                    }
	                } else if (ch === "h" ) {
	                    lookAhead("h");
	                    hours = getNumber(2);
	                    if (hours == 12) {
	                        hours = 0;
	                    }
	                    if (hours === null || outOfRange(hours, 0, 11)) {
	                        return null;
	                    }
	                } else if (ch === "H") {
	                    lookAhead("H");
	                    hours = getNumber(2);
	                    if (hours === null || outOfRange(hours, 0, 23)) {
	                        return null;
	                    }
	                } else if (ch === "m") {
	                    lookAhead("m");
	                    minutes = getNumber(2);
	                    if (minutes === null || outOfRange(minutes, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "s") {
	                    lookAhead("s");
	                    seconds = getNumber(2);
	                    if (seconds === null || outOfRange(seconds, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "f") {
	                    count = lookAhead("f");

	                    match = value.substr(valueIdx, count).match(numberRegExp[3]);
	                    milliseconds = getNumber(count); //move value index position

	                    if (milliseconds !== null) {
	                        milliseconds = parseFloat("0." + match[0], 10);
	                        milliseconds = kendo._round(milliseconds, 3);
	                        milliseconds *= 1000;
	                    }

	                    if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
	                        return null;
	                    }

	                } else if (ch === "t") {
	                    count = lookAhead("t");
	                    amDesignators = calendar.AM;
	                    pmDesignators = calendar.PM;

	                    if (count === 1) {
	                        amDesignators = mapDesignators(amDesignators);
	                        pmDesignators = mapDesignators(pmDesignators);
	                    }

	                    pmHour = getIndexByName(pmDesignators);
	                    if (!pmHour && !getIndexByName(amDesignators)) {
	                        return null;
	                    }
	                }
	                else if (ch === "z") {
	                    UTC = true;
	                    count = lookAhead("z");

	                    if (value.substr(valueIdx, 1) === "Z") {
	                        checkLiteral();
	                        continue;
	                    }

	                    matches = value.substr(valueIdx, 6)
	                                   .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);

	                    if (!matches) {
	                        return null;
	                    }

	                    matches = matches[0].split(":");

	                    hoursOffset = matches[0];
	                    minutesOffset = matches[1];

	                    if (!minutesOffset && hoursOffset.length > 3) { //(+|-)[hh][mm] format is used
	                        valueIdx = hoursOffset.length - 2;
	                        minutesOffset = hoursOffset.substring(valueIdx);
	                        hoursOffset = hoursOffset.substring(0, valueIdx);
	                    }

	                    hoursOffset = parseInt(hoursOffset, 10);
	                    if (outOfRange(hoursOffset, -12, 13)) {
	                        return null;
	                    }

	                    if (count > 2) {
	                        minutesOffset = parseInt(minutesOffset, 10);
	                        if (isNaN(minutesOffset) || outOfRange(minutesOffset, 0, 59)) {
	                            return null;
	                        }
	                    }
	                } else if (ch === "'") {
	                    literal = true;
	                    checkLiteral();
	                } else if (!checkLiteral()) {
	                    return null;
	                }
	            }
	        }

	        hasTime = hours !== null || minutes !== null || seconds || null;

	        if (year === null && month === null && day === null && hasTime) {
	            year = defaultYear;
	            month = date.getMonth();
	            day = date.getDate();
	        } else {
	            if (year === null) {
	                year = defaultYear;
	            }

	            if (day === null) {
	                day = 1;
	            }
	        }

	        if (pmHour && hours < 12) {
	            hours += 12;
	        }

	        if (UTC) {
	            if (hoursOffset) {
	                hours += -hoursOffset;
	            }

	            if (minutesOffset) {
	                minutes += -minutesOffset;
	            }

	            value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
	        } else {
	            value = new Date(year, month, day, hours, minutes, seconds, milliseconds);
	            adjustDST(value, hours);
	        }

	        if (year < 100) {
	            value.setFullYear(year);
	        }

	        if (value.getDate() !== day && UTC === undefined) {
	            return null;
	        }

	        return value;
	    }

	    function parseMicrosoftFormatOffset(offset) {
	        var sign = offset.substr(0, 1) === "-" ? -1 : 1;

	        offset = offset.substring(1);
	        offset = (parseInt(offset.substr(0, 2), 10) * 60) + parseInt(offset.substring(2), 10);

	        return sign * offset;
	    }

	    function getDefaultFormats(culture) {
	        var length = math.max(FORMATS_SEQUENCE.length, STANDARD_FORMATS.length);
	        var patterns = culture.calendar.patterns;
	        var cultureFormats, formatIdx, idx;
	        var formats = [];

	        for (idx = 0; idx < length; idx++) {
	            cultureFormats = FORMATS_SEQUENCE[idx];
	            for (formatIdx = 0; formatIdx < cultureFormats.length; formatIdx++) {
	                formats.push(patterns[cultureFormats[formatIdx]]);
	            }
	            formats = formats.concat(STANDARD_FORMATS[idx]);
	        }

	        return formats;
	    }

	    kendo.parseDate = function(value, formats, culture) {
	        if (objectToString.call(value) === "[object Date]") {
	            return value;
	        }

	        var idx = 0;
	        var date = null;
	        var length;
	        var tzoffset;

	        if (value && value.indexOf("/D") === 0) {
	            date = dateRegExp.exec(value);
	            if (date) {
	                date = date[1];
	                tzoffset = offsetRegExp.exec(date.substring(1));

	                date = new Date(parseInt(date, 10));

	                if (tzoffset) {
	                    tzoffset = parseMicrosoftFormatOffset(tzoffset[0]);
	                    date = kendo.timezone.apply(date, 0);
	                    date = kendo.timezone.convert(date, 0, -1 * tzoffset);
	                }

	                return date;
	            }
	        }

	        culture = kendo.getCulture(culture);

	        if (!formats) {
	            formats = getDefaultFormats(culture);
	        }

	        formats = isArray(formats) ? formats: [formats];
	        length = formats.length;

	        for (; idx < length; idx++) {
	            date = parseExact(value, formats[idx], culture);
	            if (date) {
	                return date;
	            }
	        }

	        return date;
	    };

	    kendo.parseInt = function(value, culture) {
	        var result = kendo.parseFloat(value, culture);
	        if (result) {
	            result = result | 0;
	        }
	        return result;
	    };

	    kendo.parseFloat = function(value, culture, format) {
	        if (!value && value !== 0) {
	           return null;
	        }

	        if (typeof value === NUMBER) {
	           return value;
	        }

	        value = value.toString();
	        culture = kendo.getCulture(culture);

	        var number = culture.numberFormat,
	            percent = number.percent,
	            currency = number.currency,
	            symbol = currency.symbol,
	            percentSymbol = percent.symbol,
	            negative = value.indexOf("-"),
	            parts, isPercent;

	        //handle exponential number
	        if (exponentRegExp.test(value)) {
	            value = parseFloat(value.replace(number["."], "."));
	            if (isNaN(value)) {
	                value = null;
	            }
	            return value;
	        }

	        if (negative > 0) {
	            return null;
	        } else {
	            negative = negative > -1;
	        }

	        if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
	            number = currency;
	            parts = number.pattern[0].replace("$", symbol).split("n");
	            if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
	                value = value.replace(parts[0], "").replace(parts[1], "");
	                negative = true;
	            }
	        } else if (value.indexOf(percentSymbol) > -1) {
	            isPercent = true;
	            number = percent;
	            symbol = percentSymbol;
	        }

	        value = value.replace("-", "")
	                     .replace(symbol, "")
	                     .replace(nonBreakingSpaceRegExp, " ")
	                     .split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
	                     .replace(number["."], ".");

	        value = parseFloat(value);

	        if (isNaN(value)) {
	            value = null;
	        } else if (negative) {
	            value *= -1;
	        }

	        if (value && isPercent) {
	            value /= 100;
	        }

	        return value;
	    };
	})();

	    function getShadows(element) {
	        var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
	            radius = shadow ? shadow.match(boxShadowRegExp) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ],
	            blur = math.max((+radius[3]), +(radius[4] || 0));

	        return {
	            left: (-radius[1]) + blur,
	            right: (+radius[1]) + blur,
	            bottom: (+radius[2]) + blur
	        };
	    }

	    function wrap(element, autosize) {
	        var browser = support.browser,
	            percentage,
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight;

	        if (!element.parent().hasClass("k-animation-container")) {
	            var width = element[0].style.width,
	                height = element[0].style.height,
	                percentWidth = percentRegExp.test(width),
	                percentHeight = percentRegExp.test(height);

	            percentage = percentWidth || percentHeight;

	            if (!percentWidth && (!autosize || (autosize && width))) { width = outerWidth(element); }
	            if (!percentHeight && (!autosize || (autosize && height))) { height = outerHeight(element); }

	            element.wrap(
	                         $("<div/>")
	                         .addClass("k-animation-container")
	                         .css({
	                             width: width,
	                             height: height
	                         }));

	            if (percentage) {
	                element.css({
	                    width: "100%",
	                    height: "100%",
	                    boxSizing: "border-box",
	                    mozBoxSizing: "border-box",
	                    webkitBoxSizing: "border-box"
	                });
	            }
	        } else {
	            var wrapper = element.parent(".k-animation-container"),
	                wrapperStyle = wrapper[0].style;

	            if (wrapper.is(":hidden")) {
	                wrapper.show();
	            }

	            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);

	            if (!percentage) {
	                wrapper.css({
	                    width: outerWidth(element),
	                    height: outerHeight(element),
	                    boxSizing: "content-box",
	                    mozBoxSizing: "content-box",
	                    webkitBoxSizing: "content-box"
	                });
	            }
	        }

	        if (browser.msie && math.floor(browser.version) <= 7) {
	            element.css({ zoom: 1 });
	            element.children(".k-menu").width(element.width());
	        }

	        return element.parent();
	    }

	    function deepExtend(destination) {
	        var i = 1,
	            length = arguments.length;

	        for (i = 1; i < length; i++) {
	            deepExtendOne(destination, arguments[i]);
	        }

	        return destination;
	    }

	    function deepExtendOne(destination, source) {
	        var ObservableArray = kendo.data.ObservableArray,
	            LazyObservableArray = kendo.data.LazyObservableArray,
	            DataSource = kendo.data.DataSource,
	            HierarchicalDataSource = kendo.data.HierarchicalDataSource,
	            property,
	            propValue,
	            propType,
	            propInit,
	            destProp;

	        for (property in source) {
	            propValue = source[property];
	            propType = typeof propValue;

	            if (propType === OBJECT && propValue !== null) {
	                propInit = propValue.constructor;
	            } else {
	                propInit = null;
	            }

	            if (propInit &&
	                propInit !== Array && propInit !== ObservableArray && propInit !== LazyObservableArray &&
	                propInit !== DataSource && propInit !== HierarchicalDataSource && propInit !== RegExp) {

	                if (propValue instanceof Date) {
	                    destination[property] = new Date(propValue.getTime());
	                } else if (isFunction(propValue.clone)) {
	                    destination[property] = propValue.clone();
	                } else {
	                    destProp = destination[property];
	                    if (typeof (destProp) === OBJECT) {
	                        destination[property] = destProp || {};
	                    } else {
	                        destination[property] = {};
	                    }
	                    deepExtendOne(destination[property], propValue);
	                }
	            } else if (propType !== UNDEFINED) {
	                destination[property] = propValue;
	            }
	        }

	        return destination;
	    }

	    function testRx(agent, rxs, dflt) {
	        for (var rx in rxs) {
	            if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
	                return rx;
	            }
	        }
	        return dflt !== undefined ? dflt : agent;
	    }

	    function toHyphens(str) {
	        return str.replace(/([a-z][A-Z])/g, function (g) {
	            return g.charAt(0) + '-' + g.charAt(1).toLowerCase();
	        });
	    }

	    function toCamelCase(str) {
	        return str.replace(/\-(\w)/g, function (strMatch, g1) {
	            return g1.toUpperCase();
	        });
	    }

	    function getComputedStyles(element, properties) {
	        var styles = {}, computedStyle;

	        if (document.defaultView && document.defaultView.getComputedStyle) {
	            computedStyle = document.defaultView.getComputedStyle(element, "");

	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle.getPropertyValue(value);
	                });
	            }
	        } else {
	            computedStyle = element.currentStyle;

	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle[toCamelCase(value)];
	                });
	            }
	        }

	        if (!kendo.size(styles)) {
	            styles = computedStyle;
	        }

	        return styles;
	    }

	    function isScrollable(element) {
	        if (element && element.className && typeof(element.className) === "string" && element.className.indexOf("k-auto-scrollable") > -1) {
	            return true;
	        }

	        var overflow = getComputedStyles(element, ["overflow"]).overflow;
	        return overflow == "auto" || overflow == "scroll";
	    }

	    function scrollLeft(element, value) {
	        var webkit = support.browser.webkit;
	        var mozila = support.browser.mozilla;
	        var el = element instanceof $ ? element[0] : element;
	        var isRtl;

	        if (!element) {
	            return;
	        }

	        isRtl = support.isRtl(element);

	        if (value !== undefined) {
	            if (isRtl && webkit) {
	                el.scrollLeft = el.scrollWidth - el.clientWidth - value;
	            } else if (isRtl && mozila) {
	                el.scrollLeft = -value;
	            } else {
	                el.scrollLeft = value;
	            }
	        } else {
	            if (isRtl && webkit) {
	                return el.scrollWidth - el.clientWidth - el.scrollLeft;
	            } else {
	                return Math.abs(el.scrollLeft);
	            }
	        }
	    }

	    (function () {
	        support._scrollbar = undefined;

	        support.scrollbar = function (refresh) {
	            if (!isNaN(support._scrollbar) && !refresh) {
	                return support._scrollbar;
	            } else {
	                var div = document.createElement("div"),
	                    result;

	                div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
	                div.innerHTML = "&nbsp;";
	                document.body.appendChild(div);

	                support._scrollbar = result = div.offsetWidth - div.scrollWidth;

	                document.body.removeChild(div);

	                return result;
	            }
	        };

	        support.isRtl = function(element) {
	            return $(element).closest(".k-rtl").length > 0;
	        };

	        var table = document.createElement("table");

	        // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
	        try {
	            table.innerHTML = "<tr><td></td></tr>";

	            support.tbodyInnerHtml = true;
	        } catch (e) {
	            support.tbodyInnerHtml = false;
	        }

	        support.touch = "ontouchstart" in window;

	        var docStyle = document.documentElement.style;
	        var transitions = support.transitions = false,
	            transforms = support.transforms = false,
	            elementProto = "HTMLElement" in window ? HTMLElement.prototype : [];

	        support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in docStyle || "msPerspective" in docStyle;
	        support.cssFlexbox = ("flexWrap" in docStyle) || ("WebkitFlexWrap" in docStyle) || ("msFlexWrap" in docStyle);

	        each([ "Moz", "webkit", "O", "ms" ], function () {
	            var prefix = this.toString(),
	                hasTransitions = typeof table.style[prefix + "Transition"] === STRING;

	            if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
	                var lowPrefix = prefix.toLowerCase();

	                transforms = {
	                    css: (lowPrefix != "ms") ? "-" + lowPrefix + "-" : "",
	                    prefix: prefix,
	                    event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
	                };

	                if (hasTransitions) {
	                    transitions = transforms;
	                    transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
	                }

	                return false;
	            }
	        });

	        table = null;

	        support.transforms = transforms;
	        support.transitions = transitions;

	        support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;

	        try {
	            support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;
	            support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;
	        } catch(e) {
	            //window.outerWidth throws error when in IE showModalDialog.
	            support.screenWidth = window.screen.availWidth;
	            support.screenHeight = window.screen.availHeight;
	        }

	        support.detectOS = function (ua) {
	            var os = false, minorVersion, match = [],
	                notAndroidPhone = !/mobile safari/i.test(ua),
	                agentRxs = {
	                    wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
	                    fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
	                    android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
	                    iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
	                    ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
	                    meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
	                    webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
	                    blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
	                    playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
	                    windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
	                    tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
	                    sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
	                    ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
	                },
	                osRxs = {
	                    ios: /^i(phone|pad|pod)$/i,
	                    android: /^android|fire$/i,
	                    blackberry: /^blackberry|playbook/i,
	                    windows: /windows/,
	                    wp: /wp/,
	                    flat: /sailfish|ffos|tizen/i,
	                    meego: /meego/
	                },
	                formFactorRxs = {
	                    tablet: /playbook|ipad|fire/i
	                },
	                browserRxs = {
	                    omini: /Opera\sMini/i,
	                    omobile: /Opera\sMobi/i,
	                    firefox: /Firefox|Fennec/i,
	                    mobilesafari: /version\/.*safari/i,
	                    ie: /MSIE|Windows\sPhone/i,
	                    chrome: /chrome|crios/i,
	                    webkit: /webkit/i
	                };

	            for (var agent in agentRxs) {
	                if (agentRxs.hasOwnProperty(agent)) {
	                    match = ua.match(agentRxs[agent]);
	                    if (match) {
	                        if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows

	                        os = {};
	                        os.device = agent;
	                        os.tablet = testRx(agent, formFactorRxs, false);
	                        os.browser = testRx(ua, browserRxs, "default");
	                        os.name = testRx(agent, osRxs);
	                        os[os.name] = true;
	                        os.majorVersion = match[2];
	                        os.minorVersion = match[3].replace("_", ".");
	                        minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
	                        os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
	                        os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.
	                        os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.

	                        if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {
	                            os.tablet = agent;
	                        }

	                        break;
	                    }
	                }
	            }
	            return os;
	        };

	        var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);

	        support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;

	        support.hasNativeScrolling = false;

	        if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {
	            support.hasNativeScrolling = mobileOS;
	        }

	        support.delayedClick = function() {

	            // only the mobile devices with touch events do this.
	            if (support.touch) {
	                // All iOS devices so far (by the time I am writing this, iOS 9.0.2 is the latest),
	                // delay their click events.
	                if (mobileOS.ios) {
	                    return true;
	                }

	                if (mobileOS.android) {

	                    if (!support.browser.chrome) { // older webkits and webviews delay the click
	                        return true;
	                    }

	                    // from here on, we deal with Chrome on Android.
	                    if (support.browser.version < 32) {
	                        return false;
	                    }

	                    // Chrome 32+ does conditional fast clicks if the view port is not user scalable.
	                    return !($("meta[name=viewport]").attr("content") || "").match(/user-scalable=no/i);
	                }
	            }

	            return false;
	        };

	        support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);

	        support.detectBrowser = function(ua) {
	            var browser = false, match = [],
	                browserRxs = {
	                    edge: /(edge)[ \/]([\w.]+)/i,
	                    webkit: /(chrome)[ \/]([\w.]+)/i,
	                    safari: /(webkit)[ \/]([\w.]+)/i,
	                    opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
	                    msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
	                    mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
	                };

	            for (var agent in browserRxs) {
	                if (browserRxs.hasOwnProperty(agent)) {
	                    match = ua.match(browserRxs[agent]);
	                    if (match) {
	                        browser = {};
	                        browser[agent] = true;
	                        browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
	                        browser.version = parseInt(document.documentMode || match[2], 10);

	                        break;
	                    }
	                }
	            }

	            return browser;
	        };

	        support.browser = support.detectBrowser(navigator.userAgent);

	        support.detectClipboardAccess = function() {
	            var commands = {
	                copy: document.queryCommandSupported ? document.queryCommandSupported("copy") : false,
	                cut: document.queryCommandSupported ? document.queryCommandSupported("cut") : false,
	                paste : document.queryCommandSupported ? document.queryCommandSupported("paste") : false
	            };

	            if (support.browser.chrome) {
	                //not using queryCommandSupported due to chromium issues 476508 and 542948
	                commands.paste = false;
	                if(support.browser.version >= 43) {
	                    commands.copy = true;
	                    commands.cut = true;
	                }
	            }

	            return commands;
	        };

	        support.clipboard = support.detectClipboardAccess();

	        support.zoomLevel = function() {
	            try {
	                var browser = support.browser;
	                var ie11WidthCorrection = 0;
	                var docEl = document.documentElement;

	                if (browser.msie && browser.version == 11 && docEl.scrollHeight > docEl.clientHeight && !support.touch) {
	                    ie11WidthCorrection = support.scrollbar();
	                }

	                return support.touch ? (docEl.clientWidth / window.innerWidth) :
	                       browser.msie && browser.version >= 10 ? (((top || window).document.documentElement.offsetWidth + ie11WidthCorrection) / (top || window).innerWidth) : 1;
	            } catch(e) {
	                return 1;
	            }
	        };

	        support.cssBorderSpacing = typeof docStyle.borderSpacing != "undefined" && !(support.browser.msie && support.browser.version < 8);

	        (function(browser) {
	            // add browser-specific CSS class
	            var cssClass = "",
	                docElement = $(document.documentElement),
	                majorVersion = parseInt(browser.version, 10);

	            if (browser.msie) {
	                cssClass = "ie";
	            } else if (browser.mozilla) {
	                cssClass = "ff";
	            } else if (browser.safari) {
	                cssClass = "safari";
	            } else if (browser.webkit) {
	                cssClass = "webkit";
	            } else if (browser.opera) {
	                cssClass = "opera";
	            } else if (browser.edge) {
	                cssClass = "edge";
	            }

	            if (cssClass) {
	                cssClass = "k-" + cssClass + " k-" + cssClass + majorVersion;
	            }
	            if (support.mobileOS) {
	                cssClass += " k-mobile";
	            }

	            if (!support.cssFlexbox) {
	                cssClass += " k-no-flexbox";
	            }

	            docElement.addClass(cssClass);
	        })(support.browser);

	        support.eventCapture = document.documentElement.addEventListener;

	        var input = document.createElement("input");

	        support.placeholder = "placeholder" in input;
	        support.propertyChangeEvent = "onpropertychange" in input;

	        support.input = (function() {
	            var types = ["number", "date", "time", "month", "week", "datetime", "datetime-local"];
	            var length = types.length;
	            var value = "test";
	            var result = {};
	            var idx = 0;
	            var type;

	            for (;idx < length; idx++) {
	                type = types[idx];
	                input.setAttribute("type", type);
	                input.value = value;

	                result[type.replace("-", "")] = input.type !== "text" && input.value !== value;
	            }

	            return result;
	        })();

	        input.style.cssText = "float:left;";

	        support.cssFloat = !!input.style.cssFloat;

	        input = null;

	        support.stableSort = (function() {
	            // Chrome sort is not stable for more than *10* items
	            // IE9+ sort is not stable for than *512* items
	            var threshold = 513;

	            var sorted = [{
	                index: 0,
	                field: "b"
	            }];

	            for (var i = 1; i < threshold; i++) {
	                sorted.push({
	                    index: i,
	                    field: "a"
	                });
	            }

	            sorted.sort(function(a, b) {
	                return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);
	            });

	            return sorted[0].index === 1;
	        })();

	        support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||
	                                  elementProto.msMatchesSelector || elementProto.oMatchesSelector ||
	                                  elementProto.matchesSelector || elementProto.matches ||
	          function( selector ) {
	              var nodeList = document.querySelectorAll ? ( this.parentNode || document ).querySelectorAll( selector ) || [] : $(selector),
	                  i = nodeList.length;

	              while (i--) {
	                  if (nodeList[i] == this) {
	                      return true;
	                  }
	              }

	              return false;
	          };

	        support.pushState = window.history && window.history.pushState;

	        var documentMode = document.documentMode;

	        support.hashChange = ("onhashchange" in window) && !(support.browser.msie && (!documentMode || documentMode <= 8)); // old IE detection

	        support.customElements = ("registerElement" in window.document);

	        var chrome = support.browser.chrome;
	        support.msPointers = !chrome && window.MSPointerEvent;
	        support.pointers = !chrome && window.PointerEvent;
	        support.kineticScrollNeeded = mobileOS && (support.touch || support.msPointers || support.pointers);
	    })();


	    function size(obj) {
	        var result = 0, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
	                result++;
	            }
	        }

	        return result;
	    }

	    function getOffset(element, type, positioned) {
	        if (!type) {
	            type = "offset";
	        }

	        var offset = element[type]();
	        // clone ClientRect object to JS object (jQuery3)
	        var result = {
	            top: offset.top,
	            right: offset.right,
	            bottom: offset.bottom,
	            left: offset.left
	        };

	        // IE10 touch zoom is living in a separate viewport
	        if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {
	            var sign = support.isRtl(element) ? 1 : -1;
	            result.top -= (window.pageYOffset + (sign * document.documentElement.scrollTop));
	            result.left -= (window.pageXOffset + (sign * document.documentElement.scrollLeft));
	        }

	        return result;
	    }

	    var directions = {
	        left: { reverse: "right" },
	        right: { reverse: "left" },
	        down: { reverse: "up" },
	        up: { reverse: "down" },
	        top: { reverse: "bottom" },
	        bottom: { reverse: "top" },
	        "in": { reverse: "out" },
	        out: { reverse: "in" }
	    };

	    function parseEffects(input) {
	        var effects = {};

	        each((typeof input === "string" ? input.split(" ") : input), function(idx) {
	            effects[idx] = this;
	        });

	        return effects;
	    }

	    function fx(element) {
	        return new kendo.effects.Element(element);
	    }

	    var effects = {};

	    $.extend(effects, {
	        enabled: true,
	        Element: function(element) {
	            this.element = $(element);
	        },

	        promise: function(element, options) {
	            if (!element.is(":visible")) {
	                element.css({ display: element.data("olddisplay") || "block" }).css("display");
	            }

	            if (options.hide) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            if (options.init) {
	                options.init();
	            }

	            if (options.completeCallback) {
	                options.completeCallback(element); // call the external complete callback with the element
	            }

	            element.dequeue();
	        },

	        disable: function() {
	            this.enabled = false;
	            this.promise = this.promiseShim;
	        },

	        enable: function() {
	            this.enabled = true;
	            this.promise = this.animatedPromise;
	        }
	    });

	    effects.promiseShim = effects.promise;

	    function prepareAnimationOptions(options, duration, reverse, complete) {
	        if (typeof options === STRING) {
	            // options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")

	            // only callback is provided e.g. animate(element, options, function() {});
	            if (isFunction(duration)) {
	                complete = duration;
	                duration = 400;
	                reverse = false;
	            }

	            if (isFunction(reverse)) {
	                complete = reverse;
	                reverse = false;
	            }

	            if (typeof duration === BOOLEAN){
	                reverse = duration;
	                duration = 400;
	            }

	            options = {
	                effects: options,
	                duration: duration,
	                reverse: reverse,
	                complete: complete
	            };
	        }

	        return extend({
	            //default options
	            effects: {},
	            duration: 400, //jQuery default duration
	            reverse: false,
	            init: noop,
	            teardown: noop,
	            hide: false
	        }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.

	    }

	    function animate(element, options, duration, reverse, complete) {
	        var idx = 0,
	            length = element.length,
	            instance;

	        for (; idx < length; idx ++) {
	            instance = $(element[idx]);
	            instance.queue(function() {
	                effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));
	            });
	        }

	        return element;
	    }

	    function toggleClass(element, classes, options, add) {
	        if (classes) {
	            classes = classes.split(" ");

	            each(classes, function(idx, value) {
	                element.toggleClass(value, add);
	            });
	        }

	        return element;
	    }

	    if (!("kendoAnimate" in $.fn)) {
	        extend($.fn, {
	            kendoStop: function(clearQueue, gotoEnd) {
	                return this.stop(clearQueue, gotoEnd);
	            },

	            kendoAnimate: function(options, duration, reverse, complete) {
	                return animate(this, options, duration, reverse, complete);
	            },

	            kendoAddClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, true);
	            },

	            kendoRemoveClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, false);
	            },
	            kendoToggleClass: function(classes, options, toggle){
	                return kendo.toggleClass(this, classes, options, toggle);
	            }
	        });
	    }

	    var ampRegExp = /&/g,
	        ltRegExp = /</g,
	        quoteRegExp = /"/g,
	        aposRegExp = /'/g,
	        gtRegExp = />/g;
	    function htmlEncode(value) {
	        return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
	    }

	    var eventTarget = function (e) {
	        return e.target;
	    };

	    if (support.touch) {

	        eventTarget = function(e) {
	            var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;

	            return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;
	        };

	        each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function(m, value) {
	            $.fn[value] = function(callback) {
	                return this.bind(value, callback);
	            };
	        });
	    }

	    if (support.touch) {
	        if (!support.mobileOS) {
	            support.mousedown = "mousedown touchstart";
	            support.mouseup = "mouseup touchend";
	            support.mousemove = "mousemove touchmove";
	            support.mousecancel = "mouseleave touchcancel";
	            support.click = "click";
	            support.resize = "resize";
	        } else {
	            support.mousedown = "touchstart";
	            support.mouseup = "touchend";
	            support.mousemove = "touchmove";
	            support.mousecancel = "touchcancel";
	            support.click = "touchend";
	            support.resize = "orientationchange";
	        }
	    } else if (support.pointers) {
	        support.mousemove = "pointermove";
	        support.mousedown = "pointerdown";
	        support.mouseup = "pointerup";
	        support.mousecancel = "pointercancel";
	        support.click = "pointerup";
	        support.resize = "orientationchange resize";
	    } else if (support.msPointers) {
	        support.mousemove = "MSPointerMove";
	        support.mousedown = "MSPointerDown";
	        support.mouseup = "MSPointerUp";
	        support.mousecancel = "MSPointerCancel";
	        support.click = "MSPointerUp";
	        support.resize = "orientationchange resize";
	    } else {
	        support.mousemove = "mousemove";
	        support.mousedown = "mousedown";
	        support.mouseup = "mouseup";
	        support.mousecancel = "mouseleave";
	        support.click = "click";
	        support.resize = "resize";
	    }

	    var wrapExpression = function(members, paramName) {
	        var result = paramName || "d",
	            index,
	            idx,
	            length,
	            member,
	            count = 1;

	        for (idx = 0, length = members.length; idx < length; idx++) {
	            member = members[idx];
	            if (member !== "") {
	                index = member.indexOf("[");

	                if (index !== 0) {
	                    if (index == -1) {
	                        member = "." + member;
	                    } else {
	                        count++;
	                        member = "." + member.substring(0, index) + " || {})" + member.substring(index);
	                    }
	                }

	                count++;
	                result += member + ((idx < length - 1) ? " || {})" : ")");
	            }
	        }
	        return new Array(count).join("(") + result;
	    },
	    localUrlRe = /^([a-z]+:)?\/\//i;

	    extend(kendo, {
	        widgets: [],
	        _widgetRegisteredCallbacks: [],
	        ui: kendo.ui || {},
	        fx: kendo.fx || fx,
	        effects: kendo.effects || effects,
	        mobile: kendo.mobile || { },
	        data: kendo.data || {},
	        dataviz: kendo.dataviz || {},
	        drawing: kendo.drawing || {},
	        spreadsheet: { messages: {} },
	        keys: {
	            INSERT: 45,
	            DELETE: 46,
	            BACKSPACE: 8,
	            TAB: 9,
	            ENTER: 13,
	            ESC: 27,
	            LEFT: 37,
	            UP: 38,
	            RIGHT: 39,
	            DOWN: 40,
	            END: 35,
	            HOME: 36,
	            SPACEBAR: 32,
	            PAGEUP: 33,
	            PAGEDOWN: 34,
	            F2: 113,
	            F10: 121,
	            F12: 123,
	            NUMPAD_PLUS: 107,
	            NUMPAD_MINUS: 109,
	            NUMPAD_DOT: 110
	        },
	        support: kendo.support || support,
	        animate: kendo.animate || animate,
	        ns: "",
	        attr: function(value) {
	            return "data-" + kendo.ns + value;
	        },
	        getShadows: getShadows,
	        wrap: wrap,
	        deepExtend: deepExtend,
	        getComputedStyles: getComputedStyles,
	        webComponents: kendo.webComponents || [],
	        isScrollable: isScrollable,
	        scrollLeft: scrollLeft,
	        size: size,
	        toCamelCase: toCamelCase,
	        toHyphens: toHyphens,
	        getOffset: kendo.getOffset || getOffset,
	        parseEffects: kendo.parseEffects || parseEffects,
	        toggleClass: kendo.toggleClass || toggleClass,
	        directions: kendo.directions || directions,
	        Observable: Observable,
	        Class: Class,
	        Template: Template,
	        template: proxy(Template.compile, Template),
	        render: proxy(Template.render, Template),
	        stringify: proxy(JSON.stringify, JSON),
	        eventTarget: eventTarget,
	        htmlEncode: htmlEncode,
	        isLocalUrl: function(url) {
	            return url && !localUrlRe.test(url);
	        },

	        expr: function(expression, safe, paramName) {
	            expression = expression || "";

	            if (typeof safe == STRING) {
	                paramName = safe;
	                safe = false;
	            }

	            paramName = paramName || "d";

	            if (expression && expression.charAt(0) !== "[") {
	                expression = "." + expression;
	            }

	            if (safe) {
	                expression = expression.replace(/"([^.]*)\.([^"]*)"/g,'"$1_$DOT$_$2"');
	                expression = expression.replace(/'([^.]*)\.([^']*)'/g,"'$1_$DOT$_$2'");
	                expression = wrapExpression(expression.split("."), paramName);
	                expression = expression.replace(/_\$DOT\$_/g, ".");
	            } else {
	                expression = paramName + expression;
	            }

	            return expression;
	        },

	        getter: function(expression, safe) {
	            var key = expression + safe;
	            return getterCache[key] = getterCache[key] || new Function("d", "return " + kendo.expr(expression, safe));
	        },

	        setter: function(expression) {
	            return setterCache[expression] = setterCache[expression] || new Function("d,value", kendo.expr(expression) + "=value");
	        },

	        accessor: function(expression) {
	            return {
	                get: kendo.getter(expression),
	                set: kendo.setter(expression)
	            };
	        },

	        guid: function() {
	            var id = "", i, random;

	            for (i = 0; i < 32; i++) {
	                random = math.random() * 16 | 0;

	                if (i == 8 || i == 12 || i == 16 || i == 20) {
	                    id += "-";
	                }
	                id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
	            }

	            return id;
	        },

	        roleSelector: function(role) {
	            return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
	        },

	        directiveSelector: function(directives) {
	            var selectors = directives.split(" ");

	            if (selectors) {
	                for (var i = 0; i < selectors.length; i++) {
	                    if (selectors[i] != "view") {
	                        selectors[i] = selectors[i].replace(/(\w*)(view|bar|strip|over)$/, "$1-$2");
	                    }
	                }
	            }

	            return selectors.join(" ").replace(/(\S+)/g, "kendo-mobile-$1,").slice(0, -1);
	        },

	        triggeredByInput: function(e) {
	            return (/^(label|input|textarea|select)$/i).test(e.target.tagName);
	        },

	        onWidgetRegistered: function(callback) {
	            for (var i = 0, len = kendo.widgets.length; i < len; i++) {
	                callback(kendo.widgets[i]);
	            }

	            kendo._widgetRegisteredCallbacks.push(callback);
	        },

	        logToConsole: function(message, type) {
	            var console = window.console;

	            if (!kendo.suppressLog && typeof(console) != "undefined" && console.log) {
	                console[type || "log"](message);
	            }
	        }
	    });

	    var Widget = Observable.extend( {
	        init: function(element, options) {
	            var that = this;

	            that.element = kendo.jQuery(element).handler(that);

	            that.angular("init", options);

	            Observable.fn.init.call(that);

	            var dataSource = options ? options.dataSource : null;

	            if (dataSource) {
	                // avoid deep cloning the data source
	                options = extend({}, options, { dataSource: {} });
	            }

	            options = that.options = extend(true, {}, that.options, options);

	            if (dataSource) {
	                options.dataSource = dataSource;
	            }

	            if (!that.element.attr(kendo.attr("role"))) {
	                that.element.attr(kendo.attr("role"), (options.name || "").toLowerCase());
	            }

	            that.element.data("kendo" + options.prefix + options.name, that);

	            that.bind(that.events, options);
	        },

	        events: [],

	        options: {
	            prefix: ""
	        },

	        _hasBindingTarget: function() {
	            return !!this.element[0].kendoBindingTarget;
	        },

	        _tabindex: function(target) {
	            target = target || this.wrapper;

	            var element = this.element,
	                TABINDEX = "tabindex",
	                tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);

	            element.removeAttr(TABINDEX);

	            target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
	        },

	        setOptions: function(options) {
	            this._setEvents(options);
	            $.extend(this.options, options);
	        },

	        _setEvents: function(options) {
	            var that = this,
	                idx = 0,
	                length = that.events.length,
	                e;

	            for (; idx < length; idx ++) {
	                e = that.events[idx];
	                if (that.options[e] && options[e]) {
	                    that.unbind(e, that.options[e]);
	                }
	            }

	            that.bind(that.events, options);
	        },

	        resize: function(force) {
	            var size = this.getSize(),
	                currentSize = this._size;

	            if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
	                this._size = size;
	                this._resize(size, force);
	                this.trigger("resize", size);
	            }
	        },

	        getSize: function() {
	            return kendo.dimensions(this.element);
	        },

	        size: function(size) {
	            if (!size) {
	                return this.getSize();
	            } else {
	                this.setSize(size);
	            }
	        },

	        setSize: $.noop,
	        _resize: $.noop,

	        destroy: function() {
	            var that = this;

	            that.element.removeData("kendo" + that.options.prefix + that.options.name);
	            that.element.removeData("handler");
	            that.unbind();
	        },
	        _destroy: function() {
	            this.destroy();
	        },
	        angular: function(){},

	        _muteAngularRebind: function(callback) {
	            this._muteRebind = true;

	            callback.call(this);

	            this._muteRebind = false;
	        }
	    });

	    var DataBoundWidget = Widget.extend({
	        // Angular consumes these.
	        dataItems: function() {
	            return this.dataSource.flatView();
	        },

	        _angularItems: function(cmd) {
	            var that = this;
	            that.angular(cmd, function(){
	                return {
	                    elements: that.items(),
	                    data: $.map(that.dataItems(), function(dataItem){
	                        return { dataItem: dataItem };
	                    })
	                };
	            });
	        }
	    });

	    kendo.dimensions = function(element, dimensions) {
	        var domElement = element[0];

	        if (dimensions) {
	            element.css(dimensions);
	        }

	        return { width: domElement.offsetWidth, height: domElement.offsetHeight };
	    };

	    kendo.notify = noop;

	    var templateRegExp = /template$/i,
	        jsonRegExp = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/,
	        jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]*\]$/,
	        dashRegExp = /([A-Z])/g;

	    function parseOption(element, option) {
	        var value;

	        if (option.indexOf("data") === 0) {
	            option = option.substring(4);
	            option = option.charAt(0).toLowerCase() + option.substring(1);
	        }

	        option = option.replace(dashRegExp, "-$1");
	        value = element.getAttribute("data-" + kendo.ns + option);

	        if (value === null) {
	            value = undefined;
	        } else if (value === "null") {
	            value = null;
	        } else if (value === "true") {
	            value = true;
	        } else if (value === "false") {
	            value = false;
	        } else if (numberRegExp.test(value)) {
	            value = parseFloat(value);
	        } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
	            value = new Function("return (" + value + ")")();
	        }

	        return value;
	    }

	    function parseOptions(element, options) {
	        var result = {},
	            option,
	            value;

	        for (option in options) {
	            value = parseOption(element, option);

	            if (value !== undefined) {

	                if (templateRegExp.test(option)) {
	                    if(typeof value === "string") {
	                        value = kendo.template($("#" + value).html());
	                    } else {
	                        value = element.getAttribute(option);
	                    }
	                }

	                result[option] = value;
	            }
	        }

	        return result;
	    }

	    kendo.initWidget = function(element, options, roles) {
	        var result,
	            option,
	            widget,
	            idx,
	            length,
	            role,
	            value,
	            dataSource,
	            fullPath,
	            widgetKeyRegExp;

	        // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
	        if (!roles) {
	            roles = kendo.ui.roles;
	        } else if (roles.roles) {
	            roles = roles.roles;
	        }

	        element = element.nodeType ? element : element[0];

	        role = element.getAttribute("data-" + kendo.ns + "role");

	        if (!role) {
	            return;
	        }

	        fullPath = role.indexOf(".") === -1;

	        // look for any widget that may be already instantiated based on this role.
	        // The prefix used is unknown, hence the regexp
	        //

	        if (fullPath) {
	            widget = roles[role];
	        } else { // full namespace path - like kendo.ui.Widget
	            widget = kendo.getter(role)(window);
	        }

	        var data = $(element).data(),
	            widgetKey = widget ? "kendo" + widget.fn.options.prefix + widget.fn.options.name : "";

	        if (fullPath) {
	            widgetKeyRegExp = new RegExp("^kendo.*" + role + "$", "i");
	        } else { // full namespace path - like kendo.ui.Widget
	            widgetKeyRegExp = new RegExp("^" + widgetKey + "$", "i");
	        }

	        for(var key in data) {
	            if (key.match(widgetKeyRegExp)) {
	                // we have detected a widget of the same kind - save its reference, we will set its options
	                if (key === widgetKey) {
	                    result = data[key];
	                } else {
	                    return data[key];
	                }
	            }
	        }

	        if (!widget) {
	            return;
	        }

	        dataSource = parseOption(element, "dataSource");

	        options = $.extend({}, parseOptions(element, widget.fn.options), options);

	        if (dataSource) {
	            if (typeof dataSource === STRING) {
	                options.dataSource = kendo.getter(dataSource)(window);
	            } else {
	                options.dataSource = dataSource;
	            }
	        }

	        for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
	            option = widget.fn.events[idx];

	            value = parseOption(element, option);

	            if (value !== undefined) {
	                options[option] = kendo.getter(value)(window);
	            }
	        }

	        if (!result) {
	            result = new widget(element, options);
	        } else if (!$.isEmptyObject(options)) {
	            result.setOptions(options);
	        }

	        return result;
	    };

	    kendo.rolesFromNamespaces = function(namespaces) {
	        var roles = [],
	            idx,
	            length;

	        if (!namespaces[0]) {
	            namespaces = [kendo.ui, kendo.dataviz.ui];
	        }

	        for (idx = 0, length = namespaces.length; idx < length; idx ++) {
	            roles[idx] = namespaces[idx].roles;
	        }

	        return extend.apply(null, [{}].concat(roles.reverse()));
	    };

	    kendo.init = function(element) {
	        var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));

	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            kendo.initWidget(this, {}, roles);
	        });
	    };

	    kendo.destroy = function(element) {
	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            var data = $(this).data();

	            for (var key in data) {
	                if (key.indexOf("kendo") === 0 && typeof data[key].destroy === FUNCTION) {
	                    data[key].destroy();
	                }
	            }
	        });
	    };

	    function containmentComparer(a, b) {
	        return $.contains(a, b) ? -1 : 1;
	    }

	    function resizableWidget() {
	        var widget = $(this);
	        return ($.inArray(widget.attr("data-" + kendo.ns + "role"), ["slider", "rangeslider"]) > -1) || widget.is(":visible");
	    }

	    kendo.resize = function(element, force) {
	        var widgets = $(element).find("[data-" + kendo.ns + "role]").addBack().filter(resizableWidget);

	        if (!widgets.length) {
	            return;
	        }

	        // sort widgets based on their parent-child relation
	        var widgetsArray = $.makeArray(widgets);
	        widgetsArray.sort(containmentComparer);

	        // resize widgets
	        $.each(widgetsArray, function () {
	            var widget = kendo.widgetInstance($(this));
	            if (widget) {
	                widget.resize(force);
	            }
	        });
	    };

	    kendo.parseOptions = parseOptions;

	    extend(kendo.ui, {
	        Widget: Widget,
	        DataBoundWidget: DataBoundWidget,
	        roles: {},
	        progress: function(container, toggle) {
	            var mask = container.find(".k-loading-mask"),
	                support = kendo.support,
	                browser = support.browser,
	                isRtl, leftRight, webkitCorrection, containerScrollLeft;

	            if (toggle) {
	                if (!mask.length) {
	                    isRtl = support.isRtl(container);
	                    leftRight = isRtl ? "right" : "left";
	                    containerScrollLeft = container.scrollLeft();
	                    webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;

	                    mask = $("<div class='k-loading-mask'><span class='k-loading-text'>" + kendo.ui.progress.messages.loading + "</span><div class='k-loading-image'/><div class='k-loading-color'/></div>")
	                        .width("100%").height("100%")
	                        .css("top", container.scrollTop())
	                        .css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)
	                        .prependTo(container);
	                }
	            } else if (mask) {
	                mask.remove();
	            }
	        },
	        plugin: function(widget, register, prefix) {
	            var name = widget.fn.options.name,
	                getter;

	            register = register || kendo.ui;
	            prefix = prefix || "";

	            register[name] = widget;

	            register.roles[name.toLowerCase()] = widget;

	            getter = "getKendo" + prefix + name;
	            name = "kendo" + prefix + name;

	            var widgetEntry = { name: name, widget: widget, prefix: prefix || "" };
	            kendo.widgets.push(widgetEntry);

	            for (var i = 0, len = kendo._widgetRegisteredCallbacks.length; i < len; i++) {
	                kendo._widgetRegisteredCallbacks[i](widgetEntry);
	            }

	            $.fn[name] = function(options) {
	                var value = this,
	                    args;

	                if (typeof options === STRING) {
	                    args = slice.call(arguments, 1);

	                    this.each(function(){
	                        var widget = $.data(this, name),
	                            method,
	                            result;

	                        if (!widget) {
	                            throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
	                        }

	                        method = widget[options];

	                        if (typeof method !== FUNCTION) {
	                            throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
	                        }

	                        result = method.apply(widget, args);

	                        if (result !== undefined) {
	                            value = result;
	                            return false;
	                        }
	                    });
	                } else {
	                    this.each(function() {
	                        return new widget(this, options);
	                    });
	                }

	                return value;
	            };

	            $.fn[name].widget = widget;

	            $.fn[getter] = function() {
	                return this.data(name);
	            };
	        }
	    });

	    kendo.ui.progress.messages = {
	        loading: "Loading..."
	    };

	    var ContainerNullObject = { bind: function () { return this; }, nullObject: true, options: {} };

	    var MobileWidget = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            this.element.autoApplyNS();
	            this.wrapper = this.element;
	            this.element.addClass("km-widget");
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.element.kendoDestroy();
	        },

	        options: {
	            prefix: "Mobile"
	        },

	        events: [],

	        view: function() {
	            var viewElement = this.element.closest(kendo.roleSelector("view splitview modalview drawer"));
	            return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;
	        },

	        viewHasNativeScrolling: function() {
	            var view = this.view();
	            return view && view.options.useNativeScrolling;
	        },

	        container: function() {
	            var element = this.element.closest(kendo.roleSelector("view layout modalview drawer splitview"));
	            return kendo.widgetInstance(element.eq(0), kendo.mobile.ui) || ContainerNullObject;
	        }
	    });

	    extend(kendo.mobile, {
	        init: function(element) {
	            kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
	        },

	        appLevelNativeScrolling: function() {
	            return kendo.mobile.application && kendo.mobile.application.options && kendo.mobile.application.options.useNativeScrolling;
	        },

	        roles: {},

	        ui: {
	            Widget: MobileWidget,
	            DataBoundWidget: DataBoundWidget.extend(MobileWidget.prototype),
	            roles: {},
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
	            }
	        }
	    });

	    deepExtend(kendo.dataviz, {
	        init: function(element) {
	            kendo.init(element, kendo.dataviz.ui);
	        },
	        ui: {
	            roles: {},
	            themes: {},
	            views: [],
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.dataviz.ui);
	            }
	        },
	        roles: {}
	    });

	    kendo.touchScroller = function(elements, options) {
	        // return the first touch scroller
	        if (!options){ options = {}; }

	        options.useNative = true;

	        return $(elements).map(function(idx, element) {
	            element = $(element);
	            if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
	                element.kendoMobileScroller(options);
	                return element.data("kendoMobileScroller");
	            } else {
	                return false;
	            }
	        })[0];
	    };

	    kendo.preventDefault = function(e) {
	        e.preventDefault();
	    };

	    kendo.widgetInstance = function(element, suites) {
	        var role = element.data(kendo.ns + "role"),
	            widgets = [], i, length;

	        if (role) {
	            // HACK!!! mobile view scroller widgets are instantiated on data-role="content" elements. We need to discover them when resizing.
	            if (role === "content") {
	                role = "scroller";
	            }

	            if (suites) {
	                if (suites[0]) {
	                    for (i = 0, length = suites.length; i < length; i ++) {
	                        widgets.push(suites[i].roles[role]);
	                    }
	                } else {
	                    widgets.push(suites.roles[role]);
	                }
	            }
	            else {
	                widgets = [ kendo.ui.roles[role], kendo.dataviz.ui.roles[role],  kendo.mobile.ui.roles[role] ];
	            }

	            if (role.indexOf(".") >= 0) {
	                widgets = [ kendo.getter(role)(window) ];
	            }

	            for (i = 0, length = widgets.length; i < length; i ++) {
	                var widget = widgets[i];
	                if (widget) {
	                    var instance = element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
	                    if (instance) {
	                        return instance;
	                    }
	                }
	            }
	        }
	    };

	    kendo.onResize = function(callback) {
	        var handler = callback;
	        if (support.mobileOS.android) {
	            handler = function() { setTimeout(callback, 600); };
	        }

	        $(window).on(support.resize, handler);
	        return handler;
	    };

	    kendo.unbindResize = function(callback) {
	        $(window).off(support.resize, callback);
	    };

	    kendo.attrValue = function(element, key) {
	        return element.data(kendo.ns + key);
	    };

	    kendo.days = {
	        Sunday: 0,
	        Monday: 1,
	        Tuesday: 2,
	        Wednesday: 3,
	        Thursday: 4,
	        Friday: 5,
	        Saturday: 6
	    };

	    function focusable(element, isTabIndexNotNaN) {
	        var nodeName = element.nodeName.toLowerCase();

	        return (/input|select|textarea|button|object/.test(nodeName) ?
	                !element.disabled :
	                "a" === nodeName ?
	                element.href || isTabIndexNotNaN :
	                isTabIndexNotNaN
	               ) &&
	            visible(element);
	    }

	    function visible(element) {
	        return $.expr.filters.visible(element) &&
	            !$(element).parents().addBack().filter(function() {
	                return $.css(this,"visibility") === "hidden";
	            }).length;
	    }

	    $.extend($.expr[ ":" ], {
	        kendoFocusable: function(element) {
	            var idx = $.attr(element, "tabindex");
	            return focusable(element, !isNaN(idx) && idx > -1);
	        }
	    });

	    var MOUSE_EVENTS = ["mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click"];
	    var EXCLUDE_BUST_CLICK_SELECTOR = "label, input, [data-rel=external]";

	    var MouseEventNormalizer = {
	        setupMouseMute: function() {
	            var idx = 0,
	                length = MOUSE_EVENTS.length,
	                element = document.documentElement;

	            if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {
	                return;
	            }

	            MouseEventNormalizer.mouseTrap = true;

	            MouseEventNormalizer.bustClick = false;
	            MouseEventNormalizer.captureMouse = false;

	            var handler = function(e) {
	                if (MouseEventNormalizer.captureMouse) {
	                    if (e.type === "click") {
	                        if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                    } else {
	                        e.stopPropagation();
	                    }
	                }
	            };

	            for (; idx < length; idx++) {
	                element.addEventListener(MOUSE_EVENTS[idx], handler, true);
	            }
	        },

	        muteMouse: function(e) {
	            MouseEventNormalizer.captureMouse = true;
	            if (e.data.bustClick) {
	                MouseEventNormalizer.bustClick = true;
	            }
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	        },

	        unMuteMouse: function() {
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	            MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function() {
	                MouseEventNormalizer.captureMouse = false;
	                MouseEventNormalizer.bustClick = false;
	            }, 400);
	        }
	    };

	    var eventMap = {
	        down: "touchstart mousedown",
	        move: "mousemove touchmove",
	        up: "mouseup touchend touchcancel",
	        cancel: "mouseleave touchcancel"
	    };

	    if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {
	        eventMap = {
	            down: "touchstart",
	            move: "touchmove",
	            up: "touchend touchcancel",
	            cancel: "touchcancel"
	        };
	    } else if (support.pointers) {
	        eventMap = {
	            down: "pointerdown",
	            move: "pointermove",
	            up: "pointerup",
	            cancel: "pointercancel pointerleave"
	        };
	    } else if (support.msPointers) {
	        eventMap = {
	            down: "MSPointerDown",
	            move: "MSPointerMove",
	            up: "MSPointerUp",
	            cancel: "MSPointerCancel MSPointerLeave"
	        };
	    }

	    if (support.msPointers && !("onmspointerenter" in window)) { // IE10
	        // Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks
	        $.each({
	            MSPointerEnter: "MSPointerOver",
	            MSPointerLeave: "MSPointerOut"
	        }, function( orig, fix ) {
	            $.event.special[ orig ] = {
	                delegateType: fix,
	                bindType: fix,

	                handle: function( event ) {
	                    var ret,
	                        target = this,
	                        related = event.relatedTarget,
	                        handleObj = event.handleObj;

	                    // For mousenter/leave call the handler if related is outside the target.
	                    // NB: No relatedTarget if the mouse left/entered the browser window
	                    if ( !related || (related !== target && !$.contains( target, related )) ) {
	                        event.type = handleObj.origType;
	                        ret = handleObj.handler.apply( this, arguments );
	                        event.type = fix;
	                    }
	                    return ret;
	                }
	            };
	        });
	    }


	    var getEventMap = function(e) { return (eventMap[e] || e); },
	        eventRegEx = /([^ ]+)/g;

	    kendo.applyEventMap = function(events, ns) {
	        events = events.replace(eventRegEx, getEventMap);

	        if (ns) {
	            events = events.replace(eventRegEx, "$1." + ns);
	        }

	        return events;
	    };

	    var on = $.fn.on;

	    function kendoJQuery(selector, context) {
	        return new kendoJQuery.fn.init(selector, context);
	    }

	    extend(true, kendoJQuery, $);

	    kendoJQuery.fn = kendoJQuery.prototype = new $();

	    kendoJQuery.fn.constructor = kendoJQuery;

	    kendoJQuery.fn.init = function(selector, context) {
	        if (context && context instanceof $ && !(context instanceof kendoJQuery)) {
	            context = kendoJQuery(context);
	        }

	        return $.fn.init.call(this, selector, context, rootjQuery);
	    };

	    kendoJQuery.fn.init.prototype = kendoJQuery.fn;

	    var rootjQuery = kendoJQuery(document);

	    extend(kendoJQuery.fn, {
	        handler: function(handler) {
	            this.data("handler", handler);
	            return this;
	        },

	        autoApplyNS: function(ns) {
	            this.data("kendoNS", ns || kendo.guid());
	            return this;
	        },

	        on: function() {
	            var that = this,
	                ns = that.data("kendoNS");

	            // support for event map signature
	            if (arguments.length === 1) {
	                return on.call(that, arguments[0]);
	            }

	            var context = that,
	                args = slice.call(arguments);

	            if (typeof args[args.length -1] === UNDEFINED) {
	                args.pop();
	            }

	            var callback =  args[args.length - 1],
	                events = kendo.applyEventMap(args[0], ns);

	            // setup mouse trap
	            if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {
	                MouseEventNormalizer.setupMouseMute();

	                var selector = args.length === 2 ? null : args[1],
	                    bustClick = events.indexOf("click") > -1 && events.indexOf("touchend") > -1;

	                on.call(this,
	                    {
	                        touchstart: MouseEventNormalizer.muteMouse,
	                        touchend: MouseEventNormalizer.unMuteMouse
	                    },
	                    selector,
	                    {
	                        bustClick: bustClick
	                    });
	            }

	            if (typeof callback === STRING) {
	                context = that.data("handler");
	                callback = context[callback];

	                args[args.length - 1] = function(e) {
	                    callback.call(context, e);
	                };
	            }

	            args[0] = events;

	            on.apply(that, args);

	            return that;
	        },

	        kendoDestroy: function(ns) {
	            ns = ns || this.data("kendoNS");

	            if (ns) {
	                this.off("." + ns);
	            }

	            return this;
	        }
	    });

	    kendo.jQuery = kendoJQuery;
	    kendo.eventMap = eventMap;

	    kendo.timezone = (function(){
	        var months =  { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
	        var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };

	        function ruleToDate(year, rule) {
	            var date;
	            var targetDay;
	            var ourDay;
	            var month = rule[3];
	            var on = rule[4];
	            var time = rule[5];
	            var cache = rule[8];

	            if (!cache) {
	                rule[8] = cache = {};
	            }

	            if (cache[year]) {
	                return cache[year];
	            }

	            if (!isNaN(on)) {
	                date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));
	            } else if (on.indexOf("last") === 0) {
	                date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));

	                targetDay = days[on.substr(4, 3)];
	                ourDay = date.getUTCDay();

	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
	            } else if (on.indexOf(">=") >= 0) {
	                date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));

	                targetDay = days[on.substr(0, 3)];
	                ourDay = date.getUTCDay();

	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
	            }

	            return cache[year] = date;
	        }

	        function findRule(utcTime, rules, zone) {
	            rules = rules[zone];

	            if (!rules) {
	                var time = zone.split(":");
	                var offset = 0;

	                if (time.length > 1) {
	                    offset = time[0] * 60 + Number(time[1]);
	                }

	                return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];
	            }

	            var year = new Date(utcTime).getUTCFullYear();

	            rules = jQuery.grep(rules, function(rule) {
	                var from = rule[0];
	                var to = rule[1];

	                return from <= year && (to >= year || (from == year && to == "only") || to == "max");
	            });

	            rules.push(utcTime);

	            rules.sort(function(a, b) {
	                if (typeof a != "number") {
	                    a = Number(ruleToDate(year, a));
	                }

	                if (typeof b != "number") {
	                    b = Number(ruleToDate(year, b));
	                }

	                return a - b;
	            });

	            var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];

	            return isNaN(rule) ? rule : null;
	        }

	        function findZone(utcTime, zones, timezone) {
	            var zoneRules = zones[timezone];

	            if (typeof zoneRules === "string") {
	                zoneRules = zones[zoneRules];
	            }

	            if (!zoneRules) {
	                throw new Error('Timezone "' + timezone + '" is either incorrect, or kendo.timezones.min.js is not included.');
	            }

	            for (var idx = zoneRules.length - 1; idx >= 0; idx--) {
	                var until = zoneRules[idx][3];

	                if (until && utcTime > until) {
	                    break;
	                }
	            }

	            var zone = zoneRules[idx + 1];

	            if (!zone) {
	                throw new Error('Timezone "' + timezone + '" not found on ' + utcTime + ".");
	            }

	            return zone;
	        }

	        function zoneAndRule(utcTime, zones, rules, timezone) {
	            if (typeof utcTime != NUMBER) {
	                utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),
	                    utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),
	                    utcTime.getSeconds(), utcTime.getMilliseconds());
	            }

	            var zone = findZone(utcTime, zones, timezone);

	            return {
	                zone: zone,
	                rule: findRule(utcTime, rules, zone[1])
	            };
	        }

	        function offset(utcTime, timezone) {
	            if (timezone == "Etc/UTC" || timezone == "Etc/GMT") {
	                return 0;
	            }

	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;

	            return kendo.parseFloat(rule? zone[0] - rule[6] : zone[0]);
	        }

	        function abbr(utcTime, timezone) {
	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;

	            var base = zone[2];

	            if (base.indexOf("/") >= 0) {
	                return base.split("/")[rule && +rule[6] ? 1 : 0];
	            } else if (base.indexOf("%s") >= 0) {
	                return base.replace("%s", (!rule || rule[7] == "-") ? '' : rule[7]);
	            }

	            return base;
	        }

	        function convert(date, fromOffset, toOffset) {
	            if (typeof fromOffset == STRING) {
	                fromOffset = this.offset(date, fromOffset);
	            }

	            if (typeof toOffset == STRING) {
	                toOffset = this.offset(date, toOffset);
	            }

	            var fromLocalOffset = date.getTimezoneOffset();

	            date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);

	            var toLocalOffset = date.getTimezoneOffset();

	            return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);
	        }

	        function apply(date, timezone) {
	           return this.convert(date, date.getTimezoneOffset(), timezone);
	        }

	        function remove(date, timezone) {
	           return this.convert(date, timezone, date.getTimezoneOffset());
	        }

	        function toLocalDate(time) {
	            return this.apply(new Date(time), "Etc/UTC");
	        }

	        return {
	           zones: {},
	           rules: {},
	           offset: offset,
	           convert: convert,
	           apply: apply,
	           remove: remove,
	           abbr: abbr,
	           toLocalDate: toLocalDate
	        };
	    })();

	    kendo.date = (function(){
	        var MS_PER_MINUTE = 60000,
	            MS_PER_DAY = 86400000;

	        function adjustDST(date, hours) {
	            if (hours === 0 && date.getHours() === 23) {
	                date.setHours(date.getHours() + 2);
	                return true;
	            }

	            return false;
	        }

	        function setDayOfWeek(date, day, dir) {
	            var hours = date.getHours();

	            dir = dir || 1;
	            day = ((day - date.getDay()) + (7 * dir)) % 7;

	            date.setDate(date.getDate() + day);
	            adjustDST(date, hours);
	        }

	        function dayOfWeek(date, day, dir) {
	            date = new Date(date);
	            setDayOfWeek(date, day, dir);
	            return date;
	        }

	        function firstDayOfMonth(date) {
	            return new Date(
	                date.getFullYear(),
	                date.getMonth(),
	                1
	            );
	        }

	        function lastDayOfMonth(date) {
	            var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),
	                first = firstDayOfMonth(date),
	                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

	            if (timeOffset) {
	                last.setHours(first.getHours() + (timeOffset / 60));
	            }

	            return last;
	        }
	        //returns 0 for first week
	        function weekInYear(date, weekStart){
	            var year, days;

	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
	            adjustDST(date, 0);

	            year = date.getFullYear();

	            if (weekStart !== undefined) {
	                setDayOfWeek(date, weekStart, -1);
	                date.setDate(date.getDate() + 4);
	            } else {
	                date.setDate(date.getDate() + (4 - (date.getDay() || 7)));
	            }

	            adjustDST(date, 0);
	            days = Math.floor((date.getTime() - new Date(year, 0, 1, -6)) / 86400000);

	            return 1 + Math.floor(days / 7);
	        }

	        function getDate(date) {
	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
	            adjustDST(date, 0);
	            return date;
	        }

	        function toUtcTime(date) {
	            return Date.UTC(date.getFullYear(), date.getMonth(),
	                        date.getDate(), date.getHours(), date.getMinutes(),
	                        date.getSeconds(), date.getMilliseconds());
	        }

	        function getMilliseconds(date) {
	            return date.getTime() - getDate(date);
	        }

	        function isInTimeRange(value, min, max) {
	            var msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                msValue;

	            if (!value || msMin == msMax) {
	                return true;
	            }

	            if (min >= max) {
	                max += MS_PER_DAY;
	            }

	            msValue = getMilliseconds(value);

	            if (msMin > msValue) {
	                msValue += MS_PER_DAY;
	            }

	            if (msMax < msMin) {
	                msMax += MS_PER_DAY;
	            }

	            return msValue >= msMin && msValue <= msMax;
	        }

	        function isInDateRange(value, min, max) {
	            var msMin = min.getTime(),
	                msMax = max.getTime(),
	                msValue;

	            if (msMin >= msMax) {
	                msMax += MS_PER_DAY;
	            }

	            msValue = value.getTime();

	            return msValue >= msMin && msValue <= msMax;
	        }

	        function addDays(date, offset) {
	            var hours = date.getHours();
	                date = new Date(date);

	            setTime(date, offset * MS_PER_DAY);
	            adjustDST(date, hours);
	            return date;
	        }

	        function setTime(date, milliseconds, ignoreDST) {
	            var offset = date.getTimezoneOffset();
	            var difference;

	            date.setTime(date.getTime() + milliseconds);

	            if (!ignoreDST) {
	                difference = date.getTimezoneOffset() - offset;
	                date.setTime(date.getTime() + difference * MS_PER_MINUTE);
	            }
	        }

	        function setHours(date, time) {
	            date = new Date(kendo.date.getDate(date).getTime() + kendo.date.getMilliseconds(time));
	            adjustDST(date, time.getHours());
	            return date;
	        }

	        function today() {
	            return getDate(new Date());
	        }

	        function isToday(date) {
	           return getDate(date).getTime() == today().getTime();
	        }

	        function toInvariantTime(date) {
	            var staticDate = new Date(1980, 1, 1, 0, 0, 0);

	            if (date) {
	                staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
	            }

	            return staticDate;
	        }

	        return {
	            adjustDST: adjustDST,
	            dayOfWeek: dayOfWeek,
	            setDayOfWeek: setDayOfWeek,
	            getDate: getDate,
	            isInDateRange: isInDateRange,
	            isInTimeRange: isInTimeRange,
	            isToday: isToday,
	            nextDay: function(date) {
	                return addDays(date, 1);
	            },
	            previousDay: function(date) {
	                return addDays(date, -1);
	            },
	            toUtcTime: toUtcTime,
	            MS_PER_DAY: MS_PER_DAY,
	            MS_PER_HOUR: 60 * MS_PER_MINUTE,
	            MS_PER_MINUTE: MS_PER_MINUTE,
	            setTime: setTime,
	            setHours: setHours,
	            addDays: addDays,
	            today: today,
	            toInvariantTime: toInvariantTime,
	            firstDayOfMonth: firstDayOfMonth,
	            lastDayOfMonth: lastDayOfMonth,
	            weekInYear: weekInYear,
	            getMilliseconds: getMilliseconds
	        };
	    })();


	    kendo.stripWhitespace = function(element) {
	        if (document.createNodeIterator) {
	            var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function(node) {
	                    return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
	                }, false);

	            while (iterator.nextNode()) {
	                if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {
	                    iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);
	                }
	            }
	        } else { // IE7/8 support
	            for (var i = 0; i < element.childNodes.length; i++) {
	                var child = element.childNodes[i];

	                if (child.nodeType == 3 && !/\S/.test(child.nodeValue)) {
	                    element.removeChild(child);
	                    i--;
	                }

	                if (child.nodeType == 1) {
	                    kendo.stripWhitespace(child);
	                }
	            }
	        }
	    };

	    var animationFrame  = window.requestAnimationFrame       ||
	                          window.webkitRequestAnimationFrame ||
	                          window.mozRequestAnimationFrame    ||
	                          window.oRequestAnimationFrame      ||
	                          window.msRequestAnimationFrame     ||
	                          function(callback){ setTimeout(callback, 1000 / 60); };

	    kendo.animationFrame = function(callback) {
	        animationFrame.call(window, callback);
	    };

	    var animationQueue = [];

	    kendo.queueAnimation = function(callback) {
	        animationQueue[animationQueue.length] = callback;
	        if (animationQueue.length === 1) {
	            kendo.runNextAnimation();
	        }
	    };

	    kendo.runNextAnimation = function() {
	        kendo.animationFrame(function() {
	            if (animationQueue[0]) {
	                animationQueue.shift()();
	                if (animationQueue[0]) {
	                    kendo.runNextAnimation();
	                }
	            }
	        });
	    };

	    kendo.parseQueryStringParams = function(url) {
	        var queryString = url.split('?')[1] || "",
	            params = {},
	            paramParts = queryString.split(/&|=/),
	            length = paramParts.length,
	            idx = 0;

	        for (; idx < length; idx += 2) {
	            if(paramParts[idx] !== "") {
	                params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);
	            }
	        }

	        return params;
	    };

	    kendo.elementUnderCursor = function(e) {
	        if (typeof e.x.client != "undefined") {
	            return document.elementFromPoint(e.x.client, e.y.client);
	        }
	    };

	    kendo.wheelDeltaY = function(jQueryEvent) {
	        var e = jQueryEvent.originalEvent,
	            deltaY = e.wheelDeltaY,
	            delta;

	            if (e.wheelDelta) { // Webkit and IE
	                if (deltaY === undefined || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)
	                    delta = e.wheelDelta;
	                }
	            } else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera
	                delta = (-e.detail) * 10;
	            }

	        return delta;
	    };

	    kendo.throttle = function(fn, delay) {
	        var timeout;
	        var lastExecTime = 0;

	        if (!delay || delay <= 0) {
	            return fn;
	        }

	        var throttled = function() {
	            var that = this;
	            var elapsed = +new Date() - lastExecTime;
	            var args = arguments;

	            function exec() {
	                fn.apply(that, args);
	                lastExecTime = +new Date();
	            }

	            // first execution
	            if (!lastExecTime) {
	                return exec();
	            }

	            if (timeout) {
	                clearTimeout(timeout);
	            }

	            if (elapsed > delay) {
	                exec();
	            } else {
	                timeout = setTimeout(exec, delay - elapsed);
	            }
	        };

	        throttled.cancel = function() {
	            clearTimeout(timeout);
	        };

	        return throttled;
	    };


	    kendo.caret = function (element, start, end) {
	        var rangeElement;
	        var isPosition = start !== undefined;

	        if (end === undefined) {
	            end = start;
	        }

	        if (element[0]) {
	            element = element[0];
	        }

	        if (isPosition && element.disabled) {
	            return;
	        }

	        try {
	            if (element.selectionStart !== undefined) {
	                if (isPosition) {
	                    element.focus();
	                    element.setSelectionRange(start, end);
	                } else {
	                    start = [element.selectionStart, element.selectionEnd];
	                }
	            } else if (document.selection) {
	                if ($(element).is(":visible")) {
	                    element.focus();
	                }

	                rangeElement = element.createTextRange();

	                if (isPosition) {
	                    rangeElement.collapse(true);
	                    rangeElement.moveStart("character", start);
	                    rangeElement.moveEnd("character", end - start);
	                    rangeElement.select();
	                } else {
	                    var rangeDuplicated = rangeElement.duplicate(),
	                        selectionStart, selectionEnd;

	                        rangeElement.moveToBookmark(document.selection.createRange().getBookmark());
	                        rangeDuplicated.setEndPoint('EndToStart', rangeElement);
	                        selectionStart = rangeDuplicated.text.length;
	                        selectionEnd = selectionStart + rangeElement.text.length;

	                    start = [selectionStart, selectionEnd];
	                }
	            }
	        } catch(e) {
	            /* element is not focused or it is not in the DOM */
	            start = [];
	        }

	        return start;
	    };

	    kendo.compileMobileDirective = function(element, scope) {
	        var angular = window.angular;

	        element.attr("data-" + kendo.ns + "role", element[0].tagName.toLowerCase().replace('kendo-mobile-', '').replace('-', ''));

	        angular.element(element).injector().invoke(["$compile", function($compile) {
	            $compile(element)(scope);

	            if (!/^\$(digest|apply)$/.test(scope.$$phase)) {
	                scope.$digest();
	            }
	        }]);

	        return kendo.widgetInstance(element, kendo.mobile.ui);
	    };

	    kendo.antiForgeryTokens = function() {
	        var tokens = { },
	            csrf_token = $("meta[name=csrf-token],meta[name=_csrf]").attr("content"),
	            csrf_param = $("meta[name=csrf-param],meta[name=_csrf_header]").attr("content");

	        $("input[name^='__RequestVerificationToken']").each(function() {
	            tokens[this.name] = this.value;
	        });

	        if (csrf_param !== undefined && csrf_token !== undefined) {
	          tokens[csrf_param] = csrf_token;
	        }

	        return tokens;
	    };

	    kendo.cycleForm = function(form) {
	        var firstElement = form.find("input, .k-widget").first();
	        var lastElement = form.find("button, .k-button").last();

	        function focus(el) {
	            var widget = kendo.widgetInstance(el);

	            if (widget && widget.focus) {
	              widget.focus();
	            } else {
	              el.focus();
	            }
	        }

	        lastElement.on("keydown", function(e) {
	          if (e.keyCode == kendo.keys.TAB && !e.shiftKey) {
	            e.preventDefault();
	            focus(firstElement);
	          }
	        });

	        firstElement.on("keydown", function(e) {
	          if (e.keyCode == kendo.keys.TAB && e.shiftKey) {
	            e.preventDefault();
	            focus(lastElement);
	          }
	        });
	    };

	    // kendo.saveAs -----------------------------------------------
	    (function() {
	        function postToProxy(dataURI, fileName, proxyURL, proxyTarget) {
	            var form = $("<form>").attr({
	                action: proxyURL,
	                method: "POST",
	                target: proxyTarget
	            });

	            var data = kendo.antiForgeryTokens();
	            data.fileName = fileName;

	            var parts = dataURI.split(";base64,");
	            data.contentType = parts[0].replace("data:", "");
	            data.base64 = parts[1];

	            for (var name in data) {
	                if (data.hasOwnProperty(name)) {
	                    $('<input>').attr({
	                        value: data[name],
	                        name: name,
	                        type: "hidden"
	                    }).appendTo(form);
	                }
	            }

	            form.appendTo("body").submit().remove();
	        }

	        var fileSaver = document.createElement("a");
	        var downloadAttribute = "download" in fileSaver && !kendo.support.browser.edge;

	        function saveAsBlob(dataURI, fileName) {
	            var blob = dataURI; // could be a Blob object

	            if (typeof dataURI == "string") {
	                var parts = dataURI.split(";base64,");
	                var contentType = parts[0];
	                var base64 = atob(parts[1]);
	                var array = new Uint8Array(base64.length);

	                for (var idx = 0; idx < base64.length; idx++) {
	                    array[idx] = base64.charCodeAt(idx);
	                }
	                blob = new Blob([array.buffer], { type: contentType });
	            }

	            navigator.msSaveBlob(blob, fileName);
	        }

	        function saveAsDataURI(dataURI, fileName) {
	            if (window.Blob && dataURI instanceof Blob) {
	                dataURI = URL.createObjectURL(dataURI);
	            }

	            fileSaver.download = fileName;
	            fileSaver.href = dataURI;

	            var e = document.createEvent("MouseEvents");
	            e.initMouseEvent("click", true, false, window,
	                0, 0, 0, 0, 0, false, false, false, false, 0, null);

	            fileSaver.dispatchEvent(e);
	            setTimeout(function(){
	                URL.revokeObjectURL(dataURI);
	            });
	        }

	        kendo.saveAs = function(options) {
	            var save = postToProxy;

	            if (!options.forceProxy) {
	                if (downloadAttribute) {
	                    save = saveAsDataURI;
	                } else if (navigator.msSaveBlob) {
	                    save = saveAsBlob;
	                }
	            }

	            save(options.dataURI, options.fileName, options.proxyURL, options.proxyTarget);
	        };
	    })();

	    // kendo proxySetters
	    kendo.proxyModelSetters = function proxyModelSetters(data) {
	        var observable = {};

	        Object.keys(data || {}).forEach(function(property) {
	          Object.defineProperty(observable, property, {
	            get: function() {
	              return data[property];
	            },
	            set: function(value) {
	              data[property] = value;
	              data.dirty = true;
	            }
	          });
	        });

	        return observable;
	    };

	})(jQuery, window);

	return window.kendo;

	}, __webpack_require__(3));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(573)))

/***/ }

/******/ });

/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./~/moment/moment.js ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

function isUndefined(input) {
    return input === void 0;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            __webpack_require__(/*! ./locale */ 38)("./" + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
        hooks.createFromInputFallback(config);
    }
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (typeof(input) === 'object') {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString () {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$1 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this[units + 's']();
}

function makeGetter(name) {
    return function () {
        return this._data[name];
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
}

function humanize (withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 43)(module)))

/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!**************************!*\
  !*** external "angular" ***!
  \**************************/
/***/ (function(module, exports) {

module.exports = require("angular");

/***/ }),
/* 3 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./~/jquery/dist/jquery.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v1.12.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-03-17T17:44Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.2",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE6-10
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE11 only
	// In IE 11 fullscreen elements inside of an iframe have
	// 100x too small dimensions (gh-1764).
	if ( document.msFullscreenElement && window.top !== window ) {

		// Support: IE11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
		}
	}

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));


/***/ }),
/* 4 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.popup.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(813);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 813:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "popup",
	    name: "Pop-up",
	    category: "framework",
	    depends: [ "core" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        support = kendo.support,
	        getOffset = kendo.getOffset,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        OPEN = "open",
	        CLOSE = "close",
	        DEACTIVATE = "deactivate",
	        ACTIVATE = "activate",
	        CENTER = "center",
	        LEFT = "left",
	        RIGHT = "right",
	        TOP = "top",
	        BOTTOM = "bottom",
	        ABSOLUTE = "absolute",
	        HIDDEN = "hidden",
	        BODY = "body",
	        LOCATION = "location",
	        POSITION = "position",
	        VISIBLE = "visible",
	        EFFECTS = "effects",
	        ACTIVE = "k-state-active",
	        ACTIVEBORDER = "k-state-border",
	        ACTIVEBORDERREGEXP = /k-state-border-(\w+)/,
	        ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
	        MOUSEDOWN = "down",
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        WINDOW = $(window),
	        SCROLL = "scroll",
	        cssPrefix = support.transitions.css,
	        TRANSFORM = cssPrefix + "transform",
	        extend = $.extend,
	        NS = ".kendoPopup",
	        styles = ["font-size",
	                  "font-family",
	                  "font-stretch",
	                  "font-style",
	                  "font-weight",
	                  "line-height"];

	    function contains(container, target) {
	        if (!container || !target) {
	            return false;
	        }
	        return container === target || $.contains(container, target);
	    }

	    var Popup = Widget.extend({
	        init: function(element, options) {
	            var that = this, parentPopup;

	            options = options || {};

	            if (options.isRtl) {
	                options.origin = options.origin || BOTTOM + " " + RIGHT;
	                options.position = options.position || TOP + " " + RIGHT;
	            }

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            that.collisions = options.collision ? options.collision.split(" ") : [];
	            that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());

	            if (that.collisions.length === 1) {
	                that.collisions.push(that.collisions[0]);
	            }

	            parentPopup = $(that.options.anchor).closest(".k-popup,.k-group").filter(":not([class^=km-])"); // When popup is in another popup, make it relative.

	            options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || document.body);

	            that.element.hide()
	                .addClass("k-popup k-group k-reset")
	                .toggleClass("k-rtl", !!options.isRtl)
	                .css({ position : ABSOLUTE })
	                .appendTo(options.appendTo)
	                .on("mouseenter" + NS, function() {
	                    that._hovered = true;
	                })
	                .on("mouseleave" + NS, function() {
	                    that._hovered = false;
	                });

	            that.wrapper = $();

	            if (options.animation === false) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }

	            extend(options.animation.open, {
	                complete: function() {
	                    that.wrapper.css({ overflow: VISIBLE }); // Forcing refresh causes flickering in mobile.
	                    that._activated = true;
	                    that._trigger(ACTIVATE);
	                }
	            });

	            extend(options.animation.close, {
	                complete: function() {
	                    that._animationClose();
	                }
	            });

	            that._mousedownProxy = function(e) {
	                that._mousedown(e);
	            };

	            if (support.mobileOS.android) {
	                that._resizeProxy = function(e) {
	                    setTimeout(function() {
	                        that._resize(e);
	                    }, 600); //Logic from kendo.onResize
	                };
	            } else {
	                that._resizeProxy = function(e) {
	                    that._resize(e);
	                };
	            }

	            if (options.toggleTarget) {
	                $(options.toggleTarget).on(options.toggleEvent + NS, $.proxy(that.toggle, that));
	            }
	        },

	        events: [
	            OPEN,
	            ACTIVATE,
	            CLOSE,
	            DEACTIVATE
	        ],

	        options: {
	            name: "Popup",
	            toggleEvent: "click",
	            origin: BOTTOM + " " + LEFT,
	            position: TOP + " " + LEFT,
	            anchor: BODY,
	            appendTo: null,
	            collision: "flip fit",
	            viewport: window,
	            copyAnchorStyles: true,
	            autosize: false,
	            modal: false,
	            adjustSize: {
	                width: 0,
	                height: 0
	            },
	            animation: {
	                open: {
	                    effects: "slideIn:down",
	                    transition: true,
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100,
	                    hide: true
	                }
	            }
	        },

	        _animationClose: function() {
	            var that = this;
	            var location = that.wrapper.data(LOCATION);

	            that.wrapper.hide();

	            if (location) {
	                that.wrapper.css(location);
	            }

	            if (that.options.anchor != BODY) {
	                that._hideDirClass();
	            }

	            that._closing = false;
	            that._trigger(DEACTIVATE);
	        },

	        destroy: function() {
	            var that = this,
	                options = that.options,
	                element = that.element.off(NS),
	                parent;

	            Widget.fn.destroy.call(that);

	            if (options.toggleTarget) {
	                $(options.toggleTarget).off(NS);
	            }

	            if (!options.modal) {
	                DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy);
	                that._toggleResize(false);
	            }

	            kendo.destroy(that.element.children());
	            element.removeData();

	            if (options.appendTo[0] === document.body) {
	                parent = element.parent(".k-animation-container");

	                if (parent[0]) {
	                    parent.remove();
	                } else {
	                    element.remove();
	                }
	            }
	        },

	        open: function(x, y) {
	            var that = this,
	                fixed = { isFixed: !isNaN(parseInt(y,10)), x: x, y: y },
	                element = that.element,
	                options = that.options,
	                animation, wrapper,
	                anchor = $(options.anchor),
	                mobile = element[0] && element.hasClass("km-widget");

	            if (!that.visible()) {
	                if (options.copyAnchorStyles) {
	                    if (mobile && styles[0] == "font-size") {
	                        styles.shift();
	                    }
	                    element.css(kendo.getComputedStyles(anchor[0], styles));
	                }

	                if (element.data("animating") || that._trigger(OPEN)) {
	                    return;
	                }

	                that._activated = false;

	                if (!options.modal) {
	                    DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy)
	                                .bind(that.downEvent, that._mousedownProxy);

	                    // this binding hangs iOS in editor
	                    // all elements in IE7/8 fire resize event, causing mayhem
	                    that._toggleResize(false);
	                    that._toggleResize(true);
	                }

	                that.wrapper = wrapper = kendo.wrap(element, options.autosize)
	                                        .css({
	                                            overflow: HIDDEN,
	                                            display: "block",
	                                            position: ABSOLUTE
	                                        });

	                if (support.mobileOS.android) {
	                    wrapper.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
	                }

	                wrapper.css(POSITION);

	                if ($(options.appendTo)[0] == document.body) {
	                    wrapper.css(TOP, "-10000px");
	                }

	                that.flipped = that._position(fixed);
	                animation = that._openAnimation();

	                if (options.anchor != BODY) {
	                    that._showDirClass(animation);
	                }

	                element.data(EFFECTS, animation.effects)
	                       .kendoStop(true)
	                       .kendoAnimate(animation);
	            }
	        },

	        _openAnimation: function() {
	            var animation = extend(true, {}, this.options.animation.open);
	            animation.effects = kendo.parseEffects(animation.effects, this.flipped);

	            return animation;
	        },

	        _hideDirClass: function() {
	            var anchor = $(this.options.anchor);
	            var direction = ((anchor.attr("class") || "").match(ACTIVEBORDERREGEXP) || ["", "down"])[1];
	            var dirClass = ACTIVEBORDER + "-" + direction;

	            anchor
	                .removeClass(dirClass)
	                .children(ACTIVECHILDREN)
	                .removeClass(ACTIVE)
	                .removeClass(dirClass);

	            this.element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	        },

	        _showDirClass: function(animation) {
	            var direction = animation.effects.slideIn ? animation.effects.slideIn.direction : "down";
	            var dirClass = ACTIVEBORDER + "-" + direction;

	            $(this.options.anchor)
	                .addClass(dirClass)
	                .children(ACTIVECHILDREN)
	                .addClass(ACTIVE)
	                .addClass(dirClass);

	            this.element.addClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	        },

	        position: function() {
	            if (this.visible()) {
	                this.flipped = this._position();
	                //this._hideDirClass();
	                //this._showDirClass(this._openAnimation());
	            }
	        },

	        toggle: function() {
	            var that = this;

	            that[that.visible() ? CLOSE : OPEN]();
	        },

	        visible: function() {
	            return this.element.is(":" + VISIBLE);
	        },

	        close: function(skipEffects) {
	            var that = this,
	                options = that.options, wrap,
	                animation, openEffects, closeEffects;

	            if (that.visible()) {
	                wrap = (that.wrapper[0] ? that.wrapper : kendo.wrap(that.element).hide());

	                that._toggleResize(false);

	                if (that._closing || that._trigger(CLOSE)) {
	                    that._toggleResize(true);
	                    return;
	                }

	                // Close all inclusive popups.
	                that.element.find(".k-popup").each(function () {
	                    var that = $(this),
	                        popup = that.data("kendoPopup");

	                    if (popup) {
	                        popup.close(skipEffects);
	                    }
	                });

	                DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy);

	                if (skipEffects) {
	                    animation = { hide: true, effects: {} };
	                } else {
	                    animation = extend(true, {}, options.animation.close);
	                    openEffects = that.element.data(EFFECTS);
	                    closeEffects = animation.effects;

	                    if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
	                        animation.effects = openEffects;
	                        animation.reverse = true;
	                    }

	                    that._closing = true;
	                }

	                that.element.kendoStop(true);
	                wrap.css({ overflow: HIDDEN }); // stop callback will remove hidden overflow
	                that.element.kendoAnimate(animation);

	                if (skipEffects) {
	                    that._animationClose();
	                }
	            }
	        },

	        _trigger: function(ev) {
	            return this.trigger(ev, { type: ev });
	        },

	        _resize: function(e) {
	            var that = this;

	            if (support.resize.indexOf(e.type) !== -1) {
	                clearTimeout(that._resizeTimeout);
	                that._resizeTimeout = setTimeout(function() {
	                    that._position();
	                    that._resizeTimeout = null;
	                }, 50);
	            } else {
	                if (!that._hovered || (that._activated && that.element.hasClass("k-list-container"))) {
	                    that.close();
	                }
	            }
	        },

	        _toggleResize: function(toggle) {
	            var method = toggle ? "on" : "off";
	            var eventNames = support.resize;

	            if (!(support.mobileOS.ios || support.mobileOS.android)) {
	                eventNames += " " + SCROLL;
	            }

	            this._scrollableParents()[method](SCROLL, this._resizeProxy);
	            WINDOW[method](eventNames, this._resizeProxy);
	        },

	        _mousedown: function(e) {
	            var that = this,
	                container = that.element[0],
	                options = that.options,
	                anchor = $(options.anchor)[0],
	                toggleTarget = options.toggleTarget,
	                target = kendo.eventTarget(e),
	                popup = $(target).closest(".k-popup"),
	                mobile = popup.parent().parent(".km-shim").length;

	            popup = popup[0];
	            if (!mobile && popup && popup !== that.element[0]){
	                return;
	            }

	            // This MAY result in popup not closing in certain cases.
	            if ($(e.target).closest("a").data("rel") === "popover") {
	                return;
	            }

	            if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
	                that.close();
	            }
	        },

	        _fit: function(position, size, viewPortSize) {
	            var output = 0;

	            if (position + size > viewPortSize) {
	                output = viewPortSize - (position + size);
	            }

	            if (position < 0) {
	                output = -position;
	            }

	            return output;
	        },

	        _flip: function(offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
	            var output = 0;
	                boxSize = boxSize || size;

	            if (position !== origin && position !== CENTER && origin !== CENTER) {
	                if (offset + boxSize > viewPortSize) {
	                    output += -(anchorSize + size);
	                }

	                if (offset + output < 0) {
	                    output += anchorSize + size;
	                }
	            }
	            return output;
	        },

	        _scrollableParents: function() {
	            return $(this.options.anchor)
	                       .parentsUntil("body")
	                       .filter(function(index, element) {
	                           return kendo.isScrollable(element);
	                       });
	        },

	        _position: function(fixed) {
	            var that = this,
	                //element = that.element.css(POSITION, ""), /* fixes telerik/kendo-ui-core#790, comes from telerik/kendo#615 */
	                element = that.element,
	                wrapper = that.wrapper,
	                options = that.options,
	                viewport = $(options.viewport),
	                zoomLevel = support.zoomLevel(),
	                isWindow = !!((viewport[0] == window) && window.innerWidth && (zoomLevel <= 1.02)),
	                anchor = $(options.anchor),
	                origins = options.origin.toLowerCase().split(" "),
	                positions = options.position.toLowerCase().split(" "),
	                collisions = that.collisions,
	                siblingContainer, parents,
	                parentZIndex, zIndex = 10002,
	                idx = 0,
	                docEl = document.documentElement,
	                length, viewportOffset, viewportWidth, viewportHeight;

	            if (options.viewport === window) {
	                viewportOffset = {
	                    top: (window.pageYOffset || document.documentElement.scrollTop || 0),
	                    left: (window.pageXOffset || document.documentElement.scrollLeft || 0)
	                };
	            } else {
	                viewportOffset = viewport.offset();
	            }

	            if (isWindow) {
	                viewportWidth = window.innerWidth;
	                viewportHeight = window.innerHeight;
	            } else {
	                viewportWidth = viewport.width();
	                viewportHeight = viewport.height();
	            }

	            if (isWindow && docEl.scrollHeight - docEl.clientHeight > 0) {
	                viewportWidth -= kendo.support.scrollbar();
	            }

	            siblingContainer = anchor.parents().filter(wrapper.siblings());

	            if (siblingContainer[0]) {
	                parentZIndex = Math.max(Number(siblingContainer.css("zIndex")), 0);

	                // set z-index to be more than that of the container/sibling
	                // compensate with more units for window z-stack
	                if (parentZIndex) {
	                    zIndex = parentZIndex + 10;
	                } else {
	                    parents = anchor.parentsUntil(siblingContainer);
	                    for (length = parents.length; idx < length; idx++) {
	                        parentZIndex = Number($(parents[idx]).css("zIndex"));
	                        if (parentZIndex && zIndex < parentZIndex) {
	                            zIndex = parentZIndex + 10;
	                        }
	                    }
	                }
	            }

	            wrapper.css("zIndex", zIndex);

	            if (fixed && fixed.isFixed) {
	                wrapper.css({ left: fixed.x, top: fixed.y });
	            } else {
	                wrapper.css(that._align(origins, positions));
	            }

	            var pos = getOffset(wrapper, POSITION, anchor[0] === wrapper.offsetParent()[0]),
	                offset = getOffset(wrapper),
	                anchorParent = anchor.offsetParent().parent(".k-animation-container,.k-popup,.k-group"); // If the parent is positioned, get the current positions

	            if (anchorParent.length) {
	                pos = getOffset(wrapper, POSITION, true);
	                offset = getOffset(wrapper);
	            }

	            offset.top -= viewportOffset.top;
	            offset.left -= viewportOffset.left;

	            if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
	                wrapper.data(LOCATION, extend({}, pos));
	            }

	            var offsets = extend({}, offset),
	                location = extend({}, pos),
	                adjustSize = options.adjustSize;

	            if (collisions[0] === "fit") {
	                location.top += that._fit(offsets.top, outerHeight(wrapper) + adjustSize.height, viewportHeight / zoomLevel);
	            }

	            if (collisions[1] === "fit") {
	                location.left += that._fit(offsets.left, outerWidth(wrapper) + adjustSize.width, viewportWidth / zoomLevel);
	            }

	            var flipPos = extend({}, location);
	            var elementHeight = outerHeight(element);
	            var wrapperHeight =  outerHeight(wrapper);

	            if (!wrapper.height() && elementHeight) {
	                wrapperHeight = wrapperHeight + elementHeight;
	            }

	            if (collisions[0] === "flip") {
	                location.top += that._flip(offsets.top, elementHeight, outerHeight(anchor), viewportHeight / zoomLevel, origins[0], positions[0], wrapperHeight);
	            }

	            if (collisions[1] === "flip") {
	                location.left += that._flip(offsets.left, outerWidth(element), outerWidth(anchor), viewportWidth / zoomLevel, origins[1], positions[1], outerWidth(wrapper));
	            }

	            element.css(POSITION, ABSOLUTE);
	            wrapper.css(location);

	            return (location.left != flipPos.left || location.top != flipPos.top);
	        },

	        _align: function(origin, position) {
	            var that = this,
	                element = that.wrapper,
	                anchor = $(that.options.anchor),
	                verticalOrigin = origin[0],
	                horizontalOrigin = origin[1],
	                verticalPosition = position[0],
	                horizontalPosition = position[1],
	                anchorOffset = getOffset(anchor),
	                appendTo = $(that.options.appendTo),
	                appendToOffset,
	                width = outerWidth(element),
	                height = outerHeight(element),
	                anchorWidth = outerWidth(anchor),
	                anchorHeight = outerHeight(anchor),
	                top = anchorOffset.top,
	                left = anchorOffset.left,
	                round = Math.round;

	            if (appendTo[0] != document.body) {
	                appendToOffset = getOffset(appendTo);
	                top -= appendToOffset.top;
	                left -= appendToOffset.left;
	            }


	            if (verticalOrigin === BOTTOM) {
	                top += anchorHeight;
	            }

	            if (verticalOrigin === CENTER) {
	                top += round(anchorHeight / 2);
	            }

	            if (verticalPosition === BOTTOM) {
	                top -= height;
	            }

	            if (verticalPosition === CENTER) {
	                top -= round(height / 2);
	            }

	            if (horizontalOrigin === RIGHT) {
	                left += anchorWidth;
	            }

	            if (horizontalOrigin === CENTER) {
	                left += round(anchorWidth / 2);
	            }

	            if (horizontalPosition === RIGHT) {
	                left -= width;
	            }

	            if (horizontalPosition === CENTER) {
	                left -= round(width / 2);
	            }

	            return {
	                top: top,
	                left: left
	            };
	        }
	    });

	    ui.plugin(Popup);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 5 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./~/keycode/index.js ***!
  \****************************/
/***/ (function(module, exports) {

// Source: http://jsfiddle.net/vWx8V/
// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */

exports = module.exports = function(searchInput) {
  // Keyboard Events
  if (searchInput && 'object' === typeof searchInput) {
    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
    if (hasKeyCode) searchInput = hasKeyCode
  }

  // Numbers
  if ('number' === typeof searchInput) return names[searchInput]

  // Everything else (cast to string)
  var search = String(searchInput)

  // check codes
  var foundNamedKey = codes[search.toLowerCase()]
  if (foundNamedKey) return foundNamedKey

  // check aliases
  var foundNamedKey = aliases[search.toLowerCase()]
  if (foundNamedKey) return foundNamedKey

  // weird character?
  if (search.length === 1) return search.charCodeAt(0)

  return undefined
}

/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */

var codes = exports.code = exports.codes = {
  'backspace': 8,
  'tab': 9,
  'enter': 13,
  'shift': 16,
  'ctrl': 17,
  'alt': 18,
  'pause/break': 19,
  'caps lock': 20,
  'esc': 27,
  'space': 32,
  'page up': 33,
  'page down': 34,
  'end': 35,
  'home': 36,
  'left': 37,
  'up': 38,
  'right': 39,
  'down': 40,
  'insert': 45,
  'delete': 46,
  'command': 91,
  'left command': 91,
  'right command': 93,
  'numpad *': 106,
  'numpad +': 107,
  'numpad -': 109,
  'numpad .': 110,
  'numpad /': 111,
  'num lock': 144,
  'scroll lock': 145,
  'my computer': 182,
  'my calculator': 183,
  ';': 186,
  '=': 187,
  ',': 188,
  '-': 189,
  '.': 190,
  '/': 191,
  '`': 192,
  '[': 219,
  '\\': 220,
  ']': 221,
  "'": 222
}

// Helper aliases

var aliases = exports.aliases = {
  'windows': 91,
  '⇧': 16,
  '⌥': 18,
  '⌃': 17,
  '⌘': 91,
  'ctl': 17,
  'control': 17,
  'option': 18,
  'pause': 19,
  'break': 19,
  'caps': 20,
  'return': 13,
  'escape': 27,
  'spc': 32,
  'pgup': 33,
  'pgdn': 34,
  'ins': 45,
  'del': 46,
  'cmd': 91
}


/*!
 * Programatically add the following
 */

// lower case chars
for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

// numbers
for (var i = 48; i < 58; i++) codes[i - 48] = i

// function keys
for (i = 1; i < 13; i++) codes['f'+i] = i + 111

// numpad keys
for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */

var names = exports.names = exports.title = {} // title for backward compat

// Create reverse mapping
for (i in codes) names[codes[i]] = i

// Add aliases
for (var alias in aliases) {
  codes[alias] = aliases[alias]
}


/***/ }),
/* 6 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.data.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(606);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 606:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(607), __webpack_require__(608) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data",
	    name: "Data source",
	    category: "framework",
	    description: "Powerful component for using local and remote data.Fully supports CRUD, Sorting, Paging, Filtering, Grouping, and Aggregates.",
	    depends: [ "core" ],
	    features: [ {
	        id: "data-odata",
	        name: "OData",
	        description: "Support for accessing Open Data Protocol (OData) services.",
	        depends: [ "data.odata" ]
	    }, {
	        id: "data-signalr",
	        name: "SignalR",
	        description: "Support for binding to SignalR hubs.",
	        depends: [ "data.signalr" ]
	    }, {
	        id: "data-XML",
	        name: "XML",
	        description: "Support for binding to XML.",
	        depends: [ "data.xml" ]
	    }]
	};

	/*jshint eqnull: true, loopfunc: true, evil: true */
	(function($, undefined) {
	    var extend = $.extend,
	        proxy = $.proxy,
	        isPlainObject = $.isPlainObject,
	        isEmptyObject = $.isEmptyObject,
	        isArray = $.isArray,
	        grep = $.grep,
	        ajax = $.ajax,
	        map,
	        each = $.each,
	        noop = $.noop,
	        kendo = window.kendo,
	        isFunction = kendo.isFunction,
	        Observable = kendo.Observable,
	        Class = kendo.Class,
	        STRING = "string",
	        FUNCTION = "function",
	        CREATE = "create",
	        READ = "read",
	        UPDATE = "update",
	        DESTROY = "destroy",
	        CHANGE = "change",
	        SYNC = "sync",
	        GET = "get",
	        ERROR = "error",
	        REQUESTSTART = "requestStart",
	        PROGRESS = "progress",
	        REQUESTEND = "requestEnd",
	        crud = [CREATE, READ, UPDATE, DESTROY],
	        identity = function(o) { return o; },
	        getter = kendo.getter,
	        stringify = kendo.stringify,
	        math = Math,
	        push = [].push,
	        join = [].join,
	        pop = [].pop,
	        splice = [].splice,
	        shift = [].shift,
	        slice = [].slice,
	        unshift = [].unshift,
	        toString = {}.toString,
	        stableSort = kendo.support.stableSort,
	        dateRegExp = /^\/Date\((.*?)\)\/$/;

	    var ObservableArray = Observable.extend({
	        init: function(array, type) {
	            var that = this;

	            that.type = type || ObservableObject;

	            Observable.fn.init.call(that);

	            that.length = array.length;

	            that.wrapAll(array, that);
	        },

	        at: function(index) {
	            return this[index];
	        },

	        toJSON: function() {
	            var idx, length = this.length, value, json = new Array(length);

	            for (idx = 0; idx < length; idx++){
	                value = this[idx];

	                if (value instanceof ObservableObject) {
	                    value = value.toJSON();
	                }

	                json[idx] = value;
	            }

	            return json;
	        },

	        parent: noop,

	        wrapAll: function(source, target) {
	            var that = this,
	                idx,
	                length,
	                parent = function() {
	                    return that;
	                };

	            target = target || [];

	            for (idx = 0, length = source.length; idx < length; idx++) {
	                target[idx] = that.wrap(source[idx], parent);
	            }

	            return target;
	        },

	        wrap: function(object, parent) {
	            var that = this,
	                observable;

	            if (object !== null && toString.call(object) === "[object Object]") {
	                observable = object instanceof that.type || object instanceof Model;

	                if (!observable) {
	                    object = object instanceof ObservableObject ? object.toJSON() : object;
	                    object = new that.type(object);
	                }

	                object.parent = parent;

	                object.bind(CHANGE, function(e) {
	                    that.trigger(CHANGE, {
	                        field: e.field,
	                        node: e.node,
	                        index: e.index,
	                        items: e.items || [this],
	                        action: e.node ? (e.action || "itemloaded") : "itemchange"
	                    });
	                });
	            }

	            return object;
	        },

	        push: function() {
	            var index = this.length,
	                items = this.wrapAll(arguments),
	                result;

	            result = push.apply(this, items);

	            this.trigger(CHANGE, {
	                action: "add",
	                index: index,
	                items: items
	            });

	            return result;
	        },

	        slice: slice,

	        sort: [].sort,

	        join: join,

	        pop: function() {
	            var length = this.length, result = pop.apply(this);

	            if (length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: length - 1,
	                    items:[result]
	                });
	            }

	            return result;
	        },

	        splice: function(index, howMany, item) {
	            var items = this.wrapAll(slice.call(arguments, 2)),
	                result, i, len;

	            result = splice.apply(this, [index, howMany].concat(items));

	            if (result.length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: index,
	                    items: result
	                });

	                for (i = 0, len = result.length; i < len; i++) {
	                    if (result[i] && result[i].children) {
	                        result[i].unbind(CHANGE);
	                    }
	                }
	            }

	            if (item) {
	                this.trigger(CHANGE, {
	                    action: "add",
	                    index: index,
	                    items: items
	                });
	            }
	            return result;
	        },

	        shift: function() {
	            var length = this.length, result = shift.apply(this);

	            if (length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: 0,
	                    items:[result]
	                });
	            }

	            return result;
	        },

	        unshift: function() {
	            var items = this.wrapAll(arguments),
	                result;

	            result = unshift.apply(this, items);

	            this.trigger(CHANGE, {
	                action: "add",
	                index: 0,
	                items: items
	            });

	            return result;
	        },

	        indexOf: function(item) {
	            var that = this,
	                idx,
	                length;

	            for (idx = 0, length = that.length; idx < length; idx++) {
	                if (that[idx] === item) {
	                    return idx;
	                }
	            }
	            return -1;
	        },

	        forEach: function(callback) {
	            var idx = 0,
	                length = this.length;

	            for (; idx < length; idx++) {
	                callback(this[idx], idx, this);
	            }
	        },

	        map: function(callback) {
	            var idx = 0,
	                result = [],
	                length = this.length;

	            for (; idx < length; idx++) {
	                result[idx] = callback(this[idx], idx, this);
	            }

	            return result;
	        },

	        reduce: function(callback) {
	            var idx = 0,
	                result,
	                length = this.length;

	            if (arguments.length == 2) {
	                result = arguments[1];
	            } else if (idx < length) {
	                result = this[idx++];
	            }

	            for (; idx < length; idx++) {
	                result = callback(result, this[idx], idx, this);
	            }

	            return result;
	        },

	        reduceRight: function(callback) {
	            var idx = this.length - 1,
	                result;

	            if (arguments.length == 2) {
	                result = arguments[1];
	            } else if (idx > 0) {
	                result = this[idx--];
	            }

	            for (; idx >= 0; idx--) {
	                result = callback(result, this[idx], idx, this);
	            }

	            return result;
	        },

	        filter: function(callback) {
	            var idx = 0,
	                result = [],
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    result[result.length] = item;
	                }
	            }

	            return result;
	        },

	        find: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    return item;
	                }
	            }
	        },

	        every: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (!callback(item, idx, this)) {
	                    return false;
	                }
	            }

	            return true;
	        },

	        some: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    return true;
	                }
	            }

	            return false;
	        },

	        // non-standard collection methods
	        remove: function(item) {
	            var idx = this.indexOf(item);

	            if (idx !== -1) {
	                this.splice(idx, 1);
	            }
	        },

	        empty: function() {
	            this.splice(0, this.length);
	        }
	    });

	    // Polyfill for Symbol.iterator
	    if (typeof Symbol !== "undefined" && Symbol.iterator && !ObservableArray.prototype[Symbol.iterator]) {
	        ObservableArray.prototype[Symbol.iterator] = [][Symbol.iterator];
	    }

	    var LazyObservableArray = ObservableArray.extend({
	        init: function(data, type) {
	            Observable.fn.init.call(this);

	            this.type = type || ObservableObject;

	            for (var idx = 0; idx < data.length; idx++) {
	                this[idx] = data[idx];
	            }

	            this.length = idx;
	            this._parent = proxy(function() { return this; }, this);
	        },
	        at: function(index) {
	            var item = this[index];

	            if (!(item instanceof this.type)) {
	                item = this[index] = this.wrap(item, this._parent);
	            } else {
	                item.parent = this._parent;
	            }

	            return item;
	        }
	    });

	    function eventHandler(context, type, field, prefix) {
	        return function(e) {
	            var event = {}, key;

	            for (key in e) {
	                event[key] = e[key];
	            }

	            if (prefix) {
	                event.field = field + "." + e.field;
	            } else {
	                event.field = field;
	            }

	            if (type == CHANGE && context._notifyChange) {
	                context._notifyChange(event);
	            }

	            context.trigger(type, event);
	        };
	    }

	    var ObservableObject = Observable.extend({
	        init: function(value) {
	            var that = this,
	                member,
	                field,
	                parent = function() {
	                    return that;
	                };

	            Observable.fn.init.call(this);

	            this._handlers = {};

	            for (field in value) {
	                member = value[field];

	                if (typeof member === "object" && member && !member.getTime && field.charAt(0) != "_") {
	                    member = that.wrap(member, field, parent);
	                }

	                that[field] = member;
	            }

	            that.uid = kendo.guid();
	        },

	        shouldSerialize: function(field) {
	            return this.hasOwnProperty(field) && field !== "_handlers" && field !== "_events" && typeof this[field] !== FUNCTION && field !== "uid";
	        },

	        forEach: function(f) {
	            for (var i in this) {
	                if (this.shouldSerialize(i)) {
	                    f(this[i], i);
	                }
	            }
	        },

	        toJSON: function() {
	            var result = {}, value, field;

	            for (field in this) {
	                if (this.shouldSerialize(field)) {
	                    value = this[field];

	                    if (value instanceof ObservableObject || value instanceof ObservableArray) {
	                        value = value.toJSON();
	                    }

	                    result[field] = value;
	                }
	            }

	            return result;
	        },

	        get: function(field) {
	            var that = this, result;

	            that.trigger(GET, { field: field });

	            if (field === "this") {
	                result = that;
	            } else {
	                result = kendo.getter(field, true)(that);
	            }

	            return result;
	        },

	        _set: function(field, value) {
	            var that = this;
	            var composite = field.indexOf(".") >= 0;

	            if (composite) {
	                var paths = field.split("."),
	                    path = "";

	                while (paths.length > 1) {
	                    path += paths.shift();
	                    var obj = kendo.getter(path, true)(that);
	                    if (obj instanceof ObservableObject) {
	                        obj.set(paths.join("."), value);
	                        return composite;
	                    }
	                    path += ".";
	                }
	            }

	            kendo.setter(field)(that, value);

	            return composite;
	        },

	        set: function(field, value) {
	            var that = this,
	                isSetPrevented = false,
	                composite = field.indexOf(".") >= 0,
	                current = kendo.getter(field, true)(that);

	            if (current !== value) {
	                if (current instanceof Observable && this._handlers[field]) {
	                    if (this._handlers[field].get) {
	                       current.unbind(GET, this._handlers[field].get);
	                    }
	                    current.unbind(CHANGE, this._handlers[field].change);
	                }

	                isSetPrevented = that.trigger("set", { field: field, value: value });

	                if (!isSetPrevented) {
	                    if (!composite) {
	                        value = that.wrap(value, field, function() { return that; });
	                    }
	                    if (!that._set(field, value) || field.indexOf("(") >= 0 || field.indexOf("[") >= 0) {
	                        that.trigger(CHANGE, { field: field });
	                    }
	                }
	            }

	            return isSetPrevented;
	        },

	        parent: noop,

	        wrap: function(object, field, parent) {
	            var that = this;
	            var get;
	            var change;
	            var type = toString.call(object);

	            if (object != null && (type === "[object Object]" || type === "[object Array]")) {
	                var isObservableArray = object instanceof ObservableArray;
	                var isDataSource = object instanceof DataSource;

	                if (type === "[object Object]" && !isDataSource && !isObservableArray) {
	                    if (!(object instanceof ObservableObject)) {
	                        object = new ObservableObject(object);
	                    }

	                    get = eventHandler(that, GET, field, true);
	                    object.bind(GET, get);
	                    change = eventHandler(that, CHANGE, field, true);
	                    object.bind(CHANGE, change);

	                    that._handlers[field] = { get: get, change: change };
	                } else if (type === "[object Array]" || isObservableArray || isDataSource) {
	                    if (!isObservableArray && !isDataSource) {
	                        object = new ObservableArray(object);
	                    }

	                    change = eventHandler(that, CHANGE, field, false);

	                    object.bind(CHANGE, change);

	                    that._handlers[field] = { change: change };
	                }

	                object.parent = parent;
	            }

	            return object;
	        }
	    });

	    function equal(x, y) {
	        if (x === y) {
	            return true;
	        }

	        var xtype = $.type(x), ytype = $.type(y), field;

	        if (xtype !== ytype) {
	            return false;
	        }

	        if (xtype === "date") {
	            return x.getTime() === y.getTime();
	        }

	        if (xtype !== "object" && xtype !== "array") {
	            return false;
	        }

	        for (field in x) {
	            if (!equal(x[field], y[field])) {
	                return false;
	            }
	        }

	        return true;
	    }

	    var parsers = {
	        "number": function(value) {
	            return kendo.parseFloat(value);
	        },

	        "date": function(value) {
	            return kendo.parseDate(value);
	        },

	        "boolean": function(value) {
	            if (typeof value === STRING) {
	                return value.toLowerCase() === "true";
	            }
	            return value != null ? !!value : value;
	        },

	        "string": function(value) {
	            return value != null ? (value + "") : value;
	        },

	        "default": function(value) {
	            return value;
	        }
	    };

	    var defaultValues = {
	        "string": "",
	        "number": 0,
	        "date": new Date(),
	        "boolean": false,
	        "default": ""
	    };

	    function getFieldByName(obj, name) {
	        var field,
	            fieldName;

	        for (fieldName in obj) {
	            field = obj[fieldName];
	            if (isPlainObject(field) && field.field && field.field === name) {
	                return field;
	            } else if (field === name) {
	                return field;
	            }
	        }
	        return null;
	    }

	    var Model = ObservableObject.extend({
	        init: function(data) {
	            var that = this;

	            if (!data || $.isEmptyObject(data)) {
	                data = $.extend({}, that.defaults, data);

	                if (that._initializers) {
	                    for (var idx = 0; idx < that._initializers.length; idx++) {
	                         var name = that._initializers[idx];
	                         data[name] = that.defaults[name]();
	                    }
	                }
	            }

	            ObservableObject.fn.init.call(that, data);

	            that.dirty = false;

	            if (that.idField) {
	                that.id = that.get(that.idField);

	                if (that.id === undefined) {
	                    that.id = that._defaultId;
	                }
	            }
	        },

	        shouldSerialize: function(field) {
	            return ObservableObject.fn.shouldSerialize.call(this, field) && field !== "uid" && !(this.idField !== "id" && field === "id") && field !== "dirty" && field !== "_accessors";
	        },

	        _parse: function(field, value) {
	            var that = this,
	                fieldName = field,
	                fields = (that.fields || {}),
	                parse;

	            field = fields[field];
	            if (!field) {
	                field = getFieldByName(fields, fieldName);
	            }
	            if (field) {
	                parse = field.parse;
	                if (!parse && field.type) {
	                    parse = parsers[field.type.toLowerCase()];
	                }
	            }

	            return parse ? parse(value) : value;
	        },

	        _notifyChange: function(e) {
	            var action = e.action;

	            if (action == "add" || action == "remove") {
	                this.dirty = true;
	            }
	        },

	        editable: function(field) {
	            field = (this.fields || {})[field];
	            return field ? field.editable !== false : true;
	        },

	        set: function(field, value, initiator) {
	            var that = this;
	            var dirty = that.dirty;

	            if (that.editable(field)) {
	                value = that._parse(field, value);

	                if (!equal(value, that.get(field))) {
	                    that.dirty = true;

	                    if (ObservableObject.fn.set.call(that, field, value, initiator) && !dirty) {
	                        that.dirty = dirty;
	                    }
	                }
	            }
	        },

	        accept: function(data) {
	            var that = this,
	                parent = function() { return that; },
	                field;

	            for (field in data) {
	                var value = data[field];

	                if (field.charAt(0) != "_") {
	                    value = that.wrap(data[field], field, parent);
	                }

	                that._set(field, value);
	            }

	            if (that.idField) {
	                that.id = that.get(that.idField);
	            }

	            that.dirty = false;
	        },

	        isNew: function() {
	            return this.id === this._defaultId;
	        }
	    });

	    Model.define = function(base, options) {
	        if (options === undefined) {
	            options = base;
	            base = Model;
	        }

	        var model,
	            proto = extend({ defaults: {} }, options),
	            name,
	            field,
	            type,
	            value,
	            idx,
	            length,
	            fields = {},
	            originalName,
	            id = proto.id,
	            functionFields = [];

	        if (id) {
	            proto.idField = id;
	        }

	        if (proto.id) {
	            delete proto.id;
	        }

	        if (id) {
	            proto.defaults[id] = proto._defaultId = "";
	        }

	        if (toString.call(proto.fields) === "[object Array]") {
	            for (idx = 0, length = proto.fields.length; idx < length; idx++) {
	                field = proto.fields[idx];
	                if (typeof field === STRING) {
	                    fields[field] = {};
	                } else if (field.field) {
	                    fields[field.field] = field;
	                }
	            }
	            proto.fields = fields;
	        }

	        for (name in proto.fields) {
	            field = proto.fields[name];
	            type = field.type || "default";
	            value = null;
	            originalName = name;

	            name = typeof (field.field) === STRING ? field.field : name;

	            if (!field.nullable) {
	                value = proto.defaults[originalName !== name ? originalName : name] = field.defaultValue !== undefined ? field.defaultValue : defaultValues[type.toLowerCase()];

	                if (typeof value === "function") {
	                    functionFields.push(name);
	                }
	            }

	            if (options.id === name) {
	                proto._defaultId = value;
	            }

	            proto.defaults[originalName !== name ? originalName : name] = value;

	            field.parse = field.parse || parsers[type];
	        }

	        if (functionFields.length > 0) {
	            proto._initializers = functionFields;
	        }

	        model = base.extend(proto);
	        model.define = function(options) {
	            return Model.define(model, options);
	        };

	        if (proto.fields) {
	            model.fields = proto.fields;
	            model.idField = proto.idField;
	        }

	        return model;
	    };

	    var Comparer = {
	        selector: function(field) {
	            return isFunction(field) ? field : getter(field);
	        },

	        compare: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                a = selector(a);
	                b = selector(b);

	                if (a == null && b == null) {
	                    return 0;
	                }

	                if (a == null) {
	                    return -1;
	                }

	                if (b == null) {
	                    return 1;
	                }

	                if (a.localeCompare) {
	                    return a.localeCompare(b);
	                }

	                return a > b ? 1 : (a < b ? -1 : 0);
	            };
	        },

	        create: function(sort) {
	            var compare = sort.compare || this.compare(sort.field);

	            if (sort.dir == "desc") {
	                return function(a, b) {
	                    return compare(b, a, true);
	                };
	            }

	            return compare;
	        },

	        combine: function(comparers) {
	            return function(a, b) {
	                var result = comparers[0](a, b),
	                    idx,
	                    length;

	                for (idx = 1, length = comparers.length; idx < length; idx ++) {
	                    result = result || comparers[idx](a, b);
	                }

	                return result;
	            };
	        }
	    };

	    var StableComparer = extend({}, Comparer, {
	        asc: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                var valueA = selector(a);
	                var valueB = selector(b);

	                if (valueA && valueA.getTime && valueB && valueB.getTime) {
	                    valueA = valueA.getTime();
	                    valueB = valueB.getTime();
	                }

	                if (valueA === valueB) {
	                    return a.__position - b.__position;
	                }

	                if (valueA == null) {
	                    return -1;
	                }

	                if (valueB == null) {
	                    return 1;
	                }

	                if (valueA.localeCompare) {
	                    return valueA.localeCompare(valueB);
	                }

	                return valueA > valueB ? 1 : -1;
	            };
	        },

	        desc: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                var valueA = selector(a);
	                var valueB = selector(b);

	                if (valueA && valueA.getTime && valueB && valueB.getTime) {
	                    valueA = valueA.getTime();
	                    valueB = valueB.getTime();
	                }

	                if (valueA === valueB) {
	                    return a.__position - b.__position;
	                }

	                if (valueA == null) {
	                    return 1;
	                }

	                if (valueB == null) {
	                    return -1;
	                }

	                if (valueB.localeCompare) {
	                    return valueB.localeCompare(valueA);
	                }

	                return valueA < valueB ? 1 : -1;
	            };
	        },
	        create: function(sort) {
	           return this[sort.dir](sort.field);
	        }
	    });

	    map = function (array, callback) {
	        var idx, length = array.length, result = new Array(length);

	        for (idx = 0; idx < length; idx++) {
	            result[idx] = callback(array[idx], idx, array);
	        }

	        return result;
	    };

	    var operators = (function(){

	        function quote(str) {
	            if (typeof str == "string") {
	                str = str.replace(/[\r\n]+/g, "");
	            }
	            return JSON.stringify(str);
	        }

	        function textOp(impl) {
	            return function(a, b, ignore) {
	                b += "";
	                if (ignore) {
	                    a = "(" + a + " || '').toLowerCase()";
	                    b = b.toLowerCase();
	                }
	                return impl(a, quote(b), ignore);
	            };
	        }

	        function operator(op, a, b, ignore) {
	            if (b != null) {
	                if (typeof b === STRING) {
	                    var date = dateRegExp.exec(b);
	                    if (date) {
	                        b = new Date(+date[1]);
	                    } else if (ignore) {
	                        b = quote(b.toLowerCase());
	                        a = "((" + a + " || '')+'').toLowerCase()";
	                    } else {
	                        b = quote(b);
	                    }
	                }

	                if (b.getTime) {
	                    //b looks like a Date
	                    a = "(" + a + "&&" + a + ".getTime?" + a + ".getTime():" + a + ")";
	                    b = b.getTime();
	                }
	            }

	            return a + " " + op + " " + b;
	        }

	        function getMatchRegexp(pattern) {
	            // take a pattern, as supported by Excel match filter, and
	            // convert it to the equivalent JS regular expression.
	            // Excel patterns support:
	            //
	            //   * - match any sequence of characters
	            //   ? - match a single character
	            //
	            // to match a literal * or ?, they must be prefixed by a tilde (~)
	            for (var rx = "/^", esc = false, i = 0; i < pattern.length; ++i) {
	                var ch = pattern.charAt(i);
	                if (esc) {
	                    rx += "\\" + ch;
	                } else if (ch == "~") {
	                    esc = true;
	                    continue;
	                } else if (ch == "*") {
	                    rx += ".*";
	                } else if (ch == "?") {
	                    rx += ".";
	                } else if (".+^$()[]{}|\\/\n\r\u2028\u2029\xA0".indexOf(ch) >= 0) {
	                    rx += "\\" + ch;
	                } else {
	                    rx += ch;
	                }
	                esc = false;
	            }
	            return rx + "$/";
	        }

	        return {
	            quote: function(value) {
	                if (value && value.getTime) {
	                    return "new Date(" + value.getTime() + ")";
	                }
	                return quote(value);
	            },
	            eq: function(a, b, ignore) {
	                return operator("==", a, b, ignore);
	            },
	            neq: function(a, b, ignore) {
	                return operator("!=", a, b, ignore);
	            },
	            gt: function(a, b, ignore) {
	                return operator(">", a, b, ignore);
	            },
	            gte: function(a, b, ignore) {
	                return operator(">=", a, b, ignore);
	            },
	            lt: function(a, b, ignore) {
	                return operator("<", a, b, ignore);
	            },
	            lte: function(a, b, ignore) {
	                return operator("<=", a, b, ignore);
	            },
	            startswith: textOp(function(a, b) {
	                return a + ".lastIndexOf(" + b + ", 0) == 0";
	            }),
	            doesnotstartwith: textOp(function(a, b) {
	                return a + ".lastIndexOf(" + b + ", 0) == -1";
	            }),
	            endswith: textOp(function(a, b) {
	                var n = b ? b.length - 2 : 0;
	                return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") >= 0";
	            }),
	            doesnotendwith: textOp(function(a, b) {
	                var n = b ? b.length - 2 : 0;
	                return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") < 0";
	            }),
	            contains: textOp(function(a, b) {
	                return a + ".indexOf(" + b + ") >= 0";
	            }),
	            doesnotcontain: textOp(function(a, b) {
	                return a + ".indexOf(" + b + ") == -1";
	            }),
	            matches: textOp(function(a, b){
	                b = b.substring(1, b.length - 1);
	                return getMatchRegexp(b) + ".test(" + a + ")";
	            }),
	            doesnotmatch: textOp(function(a, b){
	                b = b.substring(1, b.length - 1);
	                return "!" + getMatchRegexp(b) + ".test(" + a + ")";
	            }),
	            isempty: function(a) {
	                return a + " === ''";
	            },
	            isnotempty: function(a) {
	                return a + " !== ''";
	            },
	            isnull: function(a) {
	                return "(" + a + " == null)";
	            },
	            isnotnull: function(a) {
	                return "(" + a + " != null)";
	            }
	        };
	    })();

	    function Query(data) {
	        this.data = data || [];
	    }

	    Query.filterExpr = function(expression) {
	        var expressions = [],
	            logic = { and: " && ", or: " || " },
	            idx,
	            length,
	            filter,
	            expr,
	            fieldFunctions = [],
	            operatorFunctions = [],
	            field,
	            operator,
	            filters = expression.filters;

	        for (idx = 0, length = filters.length; idx < length; idx++) {
	            filter = filters[idx];
	            field = filter.field;
	            operator = filter.operator;

	            if (filter.filters) {
	                expr = Query.filterExpr(filter);
	                //Nested function fields or operators - update their index e.g. __o[0] -> __o[1]
	                filter = expr.expression
	                .replace(/__o\[(\d+)\]/g, function(match, index) {
	                    index = +index;
	                    return "__o[" + (operatorFunctions.length + index) + "]";
	                })
	                .replace(/__f\[(\d+)\]/g, function(match, index) {
	                    index = +index;
	                    return "__f[" + (fieldFunctions.length + index) + "]";
	                });

	                operatorFunctions.push.apply(operatorFunctions, expr.operators);
	                fieldFunctions.push.apply(fieldFunctions, expr.fields);
	            } else {
	                if (typeof field === FUNCTION) {
	                    expr = "__f[" + fieldFunctions.length +"](d)";
	                    fieldFunctions.push(field);
	                } else {
	                    expr = kendo.expr(field);
	                }

	                if (typeof operator === FUNCTION) {
	                    filter = "__o[" + operatorFunctions.length + "](" + expr + ", " + operators.quote(filter.value) + ")";
	                    operatorFunctions.push(operator);
	                } else {
	                    filter = operators[(operator || "eq").toLowerCase()](expr, filter.value, filter.ignoreCase !== undefined? filter.ignoreCase : true);
	                }
	            }

	            expressions.push(filter);
	        }

	        return  { expression: "(" + expressions.join(logic[expression.logic]) + ")", fields: fieldFunctions, operators: operatorFunctions };
	    };

	    function normalizeSort(field, dir) {
	        if (field) {
	            var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
	            descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

	            return grep(descriptors, function(d) { return !!d.dir; });
	        }
	    }

	    var operatorMap = {
	        "==": "eq",
	        equals: "eq",
	        isequalto: "eq",
	        equalto: "eq",
	        equal: "eq",
	        "!=": "neq",
	        ne: "neq",
	        notequals: "neq",
	        isnotequalto: "neq",
	        notequalto: "neq",
	        notequal: "neq",
	        "<": "lt",
	        islessthan: "lt",
	        lessthan: "lt",
	        less: "lt",
	        "<=": "lte",
	        le: "lte",
	        islessthanorequalto: "lte",
	        lessthanequal: "lte",
	        ">": "gt",
	        isgreaterthan: "gt",
	        greaterthan: "gt",
	        greater: "gt",
	        ">=": "gte",
	        isgreaterthanorequalto: "gte",
	        greaterthanequal: "gte",
	        ge: "gte",
	        notsubstringof: "doesnotcontain",
	        isnull: "isnull",
	        isempty: "isempty",
	        isnotempty: "isnotempty"
	    };

	    function normalizeOperator(expression) {
	        var idx,
	        length,
	        filter,
	        operator,
	        filters = expression.filters;

	        if (filters) {
	            for (idx = 0, length = filters.length; idx < length; idx++) {
	                filter = filters[idx];
	                operator = filter.operator;

	                if (operator && typeof operator === STRING) {
	                    filter.operator = operatorMap[operator.toLowerCase()] || operator;
	                }

	                normalizeOperator(filter);
	            }
	        }
	    }

	    function normalizeFilter(expression) {
	        if (expression && !isEmptyObject(expression)) {
	            if (isArray(expression) || !expression.filters) {
	                expression = {
	                    logic: "and",
	                    filters: isArray(expression) ? expression : [expression]
	                };
	            }

	            normalizeOperator(expression);

	            return expression;
	        }
	    }

	    Query.normalizeFilter = normalizeFilter;

	    function compareDescriptor(f1, f2) {
	        if (f1.logic || f2.logic) {
	            return false;
	        }

	        return f1.field === f2.field && f1.value === f2.value && f1.operator === f2.operator;
	    }

	    function normalizeDescriptor(filter) {
	        filter = filter || {};

	        if (isEmptyObject(filter)) {
	            return { logic: "and", filters: [] };
	        }

	        return normalizeFilter(filter);
	    }

	    function fieldComparer(a, b) {
	        if (b.logic || (a.field > b.field)) {
	            return 1;
	        } else if (a.field < b.field) {
	            return -1;
	        } else {
	            return 0;
	        }
	    }

	    function compareFilters(expr1, expr2) {
	        expr1 = normalizeDescriptor(expr1);
	        expr2 = normalizeDescriptor(expr2);

	        if (expr1.logic !== expr2.logic) {
	            return false;
	        }

	        var f1, f2;
	        var filters1 = (expr1.filters || []).slice();
	        var filters2 = (expr2.filters || []).slice();

	        if (filters1.length !== filters2.length) {
	            return false;
	        }

	        filters1 = filters1.sort(fieldComparer);
	        filters2 = filters2.sort(fieldComparer);

	        for (var idx = 0; idx < filters1.length; idx++) {
	            f1 = filters1[idx];
	            f2 = filters2[idx];

	            if (f1.logic && f2.logic) {
	                if (!compareFilters(f1, f2)) {
	                    return false;
	                }
	            } else if (!compareDescriptor(f1, f2)) {
	                return false;
	            }
	        }

	        return true;
	    }

	    Query.compareFilters = compareFilters;

	    function normalizeAggregate(expressions) {
	        return isArray(expressions) ? expressions : [expressions];
	    }

	    function normalizeGroup(field, dir) {
	        var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
	        descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

	        return map(descriptors, function(d) { return { field: d.field, dir: d.dir || "asc", aggregates: d.aggregates }; });
	    }

	    Query.prototype = {
	        toArray: function () {
	            return this.data;
	        },
	        range: function(index, count) {
	            return new Query(this.data.slice(index, index + count));
	        },
	        skip: function (count) {
	            return new Query(this.data.slice(count));
	        },
	        take: function (count) {
	            return new Query(this.data.slice(0, count));
	        },
	        select: function (selector) {
	            return new Query(map(this.data, selector));
	        },
	        order: function(selector, dir) {
	            var sort = { dir: dir };

	            if (selector) {
	                if (selector.compare) {
	                    sort.compare = selector.compare;
	                } else {
	                    sort.field = selector;
	                }
	            }

	            return new Query(this.data.slice(0).sort(Comparer.create(sort)));
	        },
	        orderBy: function(selector) {
	            return this.order(selector, "asc");
	        },
	        orderByDescending: function(selector) {
	            return this.order(selector, "desc");
	        },
	        sort: function(field, dir, comparer) {
	            var idx,
	            length,
	            descriptors = normalizeSort(field, dir),
	            comparers = [];

	            comparer = comparer || Comparer;

	            if (descriptors.length) {
	                for (idx = 0, length = descriptors.length; idx < length; idx++) {
	                    comparers.push(comparer.create(descriptors[idx]));
	                }

	                return this.orderBy({ compare: comparer.combine(comparers) });
	            }

	            return this;
	        },

	        filter: function(expressions) {
	            var idx,
	            current,
	            length,
	            compiled,
	            predicate,
	            data = this.data,
	            fields,
	            operators,
	            result = [],
	            filter;

	            expressions = normalizeFilter(expressions);

	            if (!expressions || expressions.filters.length === 0) {
	                return this;
	            }

	            compiled = Query.filterExpr(expressions);
	            fields = compiled.fields;
	            operators = compiled.operators;

	            predicate = filter = new Function("d, __f, __o", "return " + compiled.expression);

	            if (fields.length || operators.length) {
	                filter = function(d) {
	                    return predicate(d, fields, operators);
	                };
	            }


	            for (idx = 0, length = data.length; idx < length; idx++) {
	                current = data[idx];

	                if (filter(current)) {
	                    result.push(current);
	                }
	            }

	            return new Query(result);
	        },

	        group: function(descriptors, allData) {
	            descriptors =  normalizeGroup(descriptors || []);
	            allData = allData || this.data;

	            var that = this,
	            result = new Query(that.data),
	            descriptor;

	            if (descriptors.length > 0) {
	                descriptor = descriptors[0];
	                result = result.groupBy(descriptor).select(function(group) {
	                    var data = new Query(allData).filter([ { field: group.field, operator: "eq", value: group.value, ignoreCase: false } ]);
	                    return {
	                        field: group.field,
	                        value: group.value,
	                        items: descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), data.toArray()).toArray() : group.items,
	                        hasSubgroups: descriptors.length > 1,
	                        aggregates: data.aggregate(descriptor.aggregates)
	                    };
	                });
	            }
	            return result;
	        },

	        groupBy: function(descriptor) {
	            if (isEmptyObject(descriptor) || !this.data.length) {
	                return new Query([]);
	            }

	            var field = descriptor.field,
	                sorted = this._sortForGrouping(field, descriptor.dir || "asc"),
	                accessor = kendo.accessor(field),
	                item,
	                groupValue = accessor.get(sorted[0], field),
	                group = {
	                    field: field,
	                    value: groupValue,
	                    items: []
	                },
	                currentValue,
	                idx,
	                len,
	                result = [group];

	            for(idx = 0, len = sorted.length; idx < len; idx++) {
	                item = sorted[idx];
	                currentValue = accessor.get(item, field);
	                if(!groupValueComparer(groupValue, currentValue)) {
	                    groupValue = currentValue;
	                    group = {
	                        field: field,
	                        value: groupValue,
	                        items: []
	                    };
	                    result.push(group);
	                }
	                group.items.push(item);
	            }
	            return new Query(result);
	        },

	        _sortForGrouping: function(field, dir) {
	            var idx, length,
	                data = this.data;

	            if (!stableSort) {
	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    data[idx].__position = idx;
	                }

	                data = new Query(data).sort(field, dir, StableComparer).toArray();

	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    delete data[idx].__position;
	                }
	                return data;
	            }
	            return this.sort(field, dir).toArray();
	        },

	        aggregate: function (aggregates) {
	            var idx,
	                len,
	                result = {},
	                state = {};

	            if (aggregates && aggregates.length) {
	                for(idx = 0, len = this.data.length; idx < len; idx++) {
	                    calculateAggregate(result, aggregates, this.data[idx], idx, len, state);
	                }
	            }
	            return result;
	        }
	    };

	    function groupValueComparer(a, b) {
	        if (a && a.getTime && b && b.getTime) {
	            return a.getTime() === b.getTime();
	        }
	        return a === b;
	    }

	    function calculateAggregate(accumulator, aggregates, item, index, length, state) {
	        aggregates = aggregates || [];
	        var idx,
	            aggr,
	            functionName,
	            len = aggregates.length;

	        for (idx = 0; idx < len; idx++) {
	            aggr = aggregates[idx];
	            functionName = aggr.aggregate;
	            var field = aggr.field;
	            accumulator[field] = accumulator[field] || {};
	            state[field] = state[field] || {};
	            state[field][functionName] = state[field][functionName] || {};
	            accumulator[field][functionName] = functions[functionName.toLowerCase()](accumulator[field][functionName], item, kendo.accessor(field), index, length, state[field][functionName]);
	        }
	    }

	    var functions = {
	        sum: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator)) {
	                accumulator = value;
	            } else if (isNumber(value)) {
	                accumulator += value;
	            }

	            return accumulator;
	        },
	        count: function(accumulator) {
	            return (accumulator || 0) + 1;
	        },
	        average: function(accumulator, item, accessor, index, length, state) {
	            var value = accessor.get(item);

	            if (state.count === undefined) {
	                state.count = 0;
	            }

	            if (!isNumber(accumulator)) {
	                accumulator = value;
	            } else if (isNumber(value)) {
	                accumulator += value;
	            }

	            if (isNumber(value)) {
	                state.count++;
	            }

	            if(index == length - 1 && isNumber(accumulator)) {
	                accumulator = accumulator / state.count;
	            }
	            return accumulator;
	        },
	        max: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator) && !isDate(accumulator)) {
	                accumulator = value;
	            }

	            if(accumulator < value && (isNumber(value) || isDate(value))) {
	                accumulator = value;
	            }
	            return accumulator;
	        },
	        min: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator) && !isDate(accumulator)) {
	                accumulator = value;
	            }

	            if(accumulator > value && (isNumber(value) || isDate(value))) {
	                accumulator = value;
	            }
	            return accumulator;
	        }
	    };

	    function isNumber(val) {
	        return typeof val === "number" && !isNaN(val);
	    }

	    function isDate(val) {
	        return val && val.getTime;
	    }

	    function toJSON(array) {
	        var idx, length = array.length, result = new Array(length);

	        for (idx = 0; idx < length; idx++) {
	            result[idx] = array[idx].toJSON();
	        }

	        return result;
	    }

	    Query.process = function(data, options) {
	        options = options || {};

	        var query = new Query(data),
	            group = options.group,
	            sort = normalizeGroup(group || []).concat(normalizeSort(options.sort || [])),
	            total,
	            filterCallback = options.filterCallback,
	            filter = options.filter,
	            skip = options.skip,
	            take = options.take;

	        if (filter) {
	            query = query.filter(filter);

	            if (filterCallback) {
	                query = filterCallback(query);
	            }

	            total = query.toArray().length;
	        }

	        if (sort) {
	            query = query.sort(sort);

	            if (group) {
	                data = query.toArray();
	            }
	        }

	        if (skip !== undefined && take !== undefined) {
	            query = query.range(skip, take);
	        }

	        if (group) {
	            query = query.group(group, data);
	        }

	        return {
	            total: total,
	            data: query.toArray()
	        };
	    };

	    var LocalTransport = Class.extend({
	        init: function(options) {
	            this.data = options.data;
	        },

	        read: function(options) {
	            options.success(this.data);
	        },
	        update: function(options) {
	            options.success(options.data);
	        },
	        create: function(options) {
	            options.success(options.data);
	        },
	        destroy: function(options) {
	            options.success(options.data);
	        }
	    });

	    var RemoteTransport = Class.extend( {
	        init: function(options) {
	            var that = this, parameterMap;

	            options = that.options = extend({}, that.options, options);

	            each(crud, function(index, type) {
	                if (typeof options[type] === STRING) {
	                    options[type] = {
	                        url: options[type]
	                    };
	                }
	            });

	            that.cache = options.cache? Cache.create(options.cache) : {
	                find: noop,
	                add: noop
	            };

	            parameterMap = options.parameterMap;

	            if (isFunction(options.push)) {
	                that.push = options.push;
	            }

	            if (!that.push) {
	                that.push = identity;
	            }

	            that.parameterMap = isFunction(parameterMap) ? parameterMap : function(options) {
	                var result = {};

	                each(options, function(option, value) {
	                    if (option in parameterMap) {
	                        option = parameterMap[option];
	                        if (isPlainObject(option)) {
	                            value = option.value(value);
	                            option = option.key;
	                        }
	                    }

	                    result[option] = value;
	                });

	                return result;
	            };
	        },

	        options: {
	            parameterMap: identity
	        },

	        create: function(options) {
	            return ajax(this.setup(options, CREATE));
	        },

	        read: function(options) {
	            var that = this,
	                success,
	                error,
	                result,
	                cache = that.cache;

	            options = that.setup(options, READ);

	            success = options.success || noop;
	            error = options.error || noop;

	            result = cache.find(options.data);

	            if(result !== undefined) {
	                success(result);
	            } else {
	                options.success = function(result) {
	                    cache.add(options.data, result);

	                    success(result);
	                };

	                $.ajax(options);
	            }
	        },

	        update: function(options) {
	            return ajax(this.setup(options, UPDATE));
	        },

	        destroy: function(options) {
	            return ajax(this.setup(options, DESTROY));
	        },

	        setup: function(options, type) {
	            options = options || {};

	            var that = this,
	                parameters,
	                operation = that.options[type],
	                data = isFunction(operation.data) ? operation.data(options.data) : operation.data;

	            options = extend(true, {}, operation, options);
	            parameters = extend(true, {}, data, options.data);

	            options.data = that.parameterMap(parameters, type);

	            if (isFunction(options.url)) {
	                options.url = options.url(parameters);
	            }

	            return options;
	        }
	    });

	    var Cache = Class.extend({
	        init: function() {
	            this._store = {};
	        },
	        add: function(key, data) {
	            if(key !== undefined) {
	                this._store[stringify(key)] = data;
	            }
	        },
	        find: function(key) {
	            return this._store[stringify(key)];
	        },
	        clear: function() {
	            this._store = {};
	        },
	        remove: function(key) {
	            delete this._store[stringify(key)];
	        }
	    });

	    Cache.create = function(options) {
	        var store = {
	            "inmemory": function() { return new Cache(); }
	        };

	        if (isPlainObject(options) && isFunction(options.find)) {
	            return options;
	        }

	        if (options === true) {
	            return new Cache();
	        }

	        return store[options]();
	    };

	    function serializeRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            getter,
	            originalName,
	            idx,
	            setters = {},
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];
	            for (getter in getters) {
	                originalName = fieldNames[getter];

	                if (originalName && originalName !== getter) {
	                    if (!setters[originalName]) {
	                        setters[originalName] = kendo.setter(originalName);
	                    }
	                    setters[originalName](record, getters[getter](record));
	                    delete record[getter];
	                }
	            }
	        }
	    }

	    function convertRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            getter,
	            originalName,
	            idx,
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];
	            for (getter in getters) {
	                record[getter] = modelInstance._parse(getter, getters[getter](record));

	                originalName = fieldNames[getter];
	                if (originalName && originalName !== getter) {
	                    delete record[originalName];
	                }
	            }
	        }
	    }

	    function convertGroup(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            idx,
	            fieldName,
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];

	            fieldName = originalFieldNames[record.field];
	            if (fieldName && fieldName != record.field) {
	                record.field = fieldName;
	            }

	            record.value = modelInstance._parse(record.field, record.value);

	            if (record.hasSubgroups) {
	                convertGroup(record.items, getters, modelInstance, originalFieldNames, fieldNames);
	            } else {
	                convertRecords(record.items, getters, modelInstance, originalFieldNames, fieldNames);
	            }
	        }
	    }

	    function wrapDataAccess(originalFunction, model, converter, getters, originalFieldNames, fieldNames) {
	        return function(data) {
	            data = originalFunction(data);

	            if (data && !isEmptyObject(getters)) {
	                if (toString.call(data) !== "[object Array]" && !(data instanceof ObservableArray)) {
	                    data = [data];
	                }

	                converter(data, getters, new model(), originalFieldNames, fieldNames);
	            }

	            return data || [];
	        };
	    }

	    var DataReader = Class.extend({
	        init: function(schema) {
	            var that = this, member, get, model, base;

	            schema = schema || {};

	            for (member in schema) {
	                get = schema[member];

	                that[member] = typeof get === STRING ? getter(get) : get;
	            }

	            base = schema.modelBase || Model;

	            if (isPlainObject(that.model)) {
	                that.model = model = base.define(that.model);
	            }

	            var dataFunction = proxy(that.data, that);

	            that._dataAccessFunction = dataFunction;

	            if (that.model) {
	                var groupsFunction = proxy(that.groups, that),
	                    serializeFunction = proxy(that.serialize, that),
	                    originalFieldNames = {},
	                    getters = {},
	                    serializeGetters = {},
	                    fieldNames = {},
	                    shouldSerialize = false,
	                    fieldName;

	                model = that.model;

	                if (model.fields) {
	                    each(model.fields, function(field, value) {
	                        var fromName;

	                        fieldName = field;

	                        if (isPlainObject(value) && value.field) {
	                            fieldName = value.field;
	                        } else if (typeof value === STRING) {
	                            fieldName = value;
	                        }

	                        if (isPlainObject(value) && value.from) {
	                            fromName = value.from;
	                        }

	                        shouldSerialize = shouldSerialize || (fromName && fromName !== field) || fieldName !== field;

	                        getters[field] = getter(fromName || fieldName);
	                        serializeGetters[field] = getter(field);
	                        originalFieldNames[fromName || fieldName] = field;
	                        fieldNames[field] = fromName || fieldName;
	                    });

	                    if (!schema.serialize && shouldSerialize) {
	                        that.serialize = wrapDataAccess(serializeFunction, model, serializeRecords, serializeGetters, originalFieldNames, fieldNames);
	                    }
	                }

	                that._dataAccessFunction = dataFunction;
	                that.data = wrapDataAccess(dataFunction, model, convertRecords, getters, originalFieldNames, fieldNames);
	                that.groups = wrapDataAccess(groupsFunction, model, convertGroup, getters, originalFieldNames, fieldNames);
	            }
	        },
	        errors: function(data) {
	            return data ? data.errors : null;
	        },
	        parse: identity,
	        data: identity,
	        total: function(data) {
	            return data.length;
	        },
	        groups: identity,
	        aggregates: function() {
	            return {};
	        },
	        serialize: function(data) {
	            return data;
	        }
	    });

	    function mergeGroups(target, dest, skip, take) {
	        var group,
	            idx = 0,
	            items;

	        while (dest.length && take) {
	            group = dest[idx];
	            items = group.items;

	            var length = items.length;

	            if (target && target.field === group.field && target.value === group.value) {
	                if (target.hasSubgroups && target.items.length) {
	                    mergeGroups(target.items[target.items.length - 1], group.items, skip, take);
	                } else {
	                    items = items.slice(skip, skip + take);
	                    target.items = target.items.concat(items);
	                }
	                dest.splice(idx--, 1);
	            } else if (group.hasSubgroups && items.length) {
	                mergeGroups(group, items, skip, take);
	                if (!group.items.length) {
	                    dest.splice(idx--, 1);
	                }
	            } else {
	                items = items.slice(skip, skip + take);
	                group.items = items;

	                if (!group.items.length) {
	                    dest.splice(idx--, 1);
	                }
	            }

	            if (items.length === 0) {
	                skip -= length;
	            } else {
	                skip = 0;
	                take -= items.length;
	            }

	            if (++idx >= dest.length) {
	                break;
	            }
	        }

	        if (idx < dest.length) {
	            dest.splice(idx, dest.length - idx);
	        }
	    }

	    function flattenGroups(data) {
	        var idx,
	            result = [],
	            length,
	            items,
	            itemIndex;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            var group = data.at(idx);
	            if (group.hasSubgroups) {
	                result = result.concat(flattenGroups(group.items));
	            } else {
	                items = group.items;
	                for (itemIndex = 0; itemIndex < items.length; itemIndex++) {
	                    result.push(items.at(itemIndex));
	                }
	            }
	        }
	        return result;
	    }

	    function wrapGroupItems(data, model) {
	        var idx, length, group;
	        if (model) {
	            for (idx = 0, length = data.length; idx < length; idx++) {
	                group = data.at(idx);

	                if (group.hasSubgroups) {
	                    wrapGroupItems(group.items, model);
	                } else {
	                    group.items = new LazyObservableArray(group.items, model);
	                }
	            }
	        }
	    }

	    function eachGroupItems(data, func) {
	        for (var idx = 0, length = data.length; idx < length; idx++) {
	            if (data[idx].hasSubgroups) {
	                if (eachGroupItems(data[idx].items, func)) {
	                    return true;
	                }
	            } else if (func(data[idx].items, data[idx])) {
	                return true;
	            }
	        }
	    }

	    function replaceInRanges(ranges, data, item, observable) {
	        for (var idx = 0; idx < ranges.length; idx++) {
	            if (ranges[idx].data === data) {
	                break;
	            }
	            if (replaceInRange(ranges[idx].data, item, observable)) {
	                break;
	            }
	        }
	    }

	    function replaceInRange(items, item, observable) {
	        for (var idx = 0, length = items.length; idx < length; idx++) {
	            if (items[idx] && items[idx].hasSubgroups) {
	                return replaceInRange(items[idx].items, item, observable);
	            } else if (items[idx] === item || items[idx] === observable) {
	               items[idx] = observable;
	               return true;
	            }
	        }
	    }

	    function replaceWithObservable(view, data, ranges, type, serverGrouping) {
	        for (var viewIndex = 0, length = view.length; viewIndex < length; viewIndex++) {
	            var item = view[viewIndex];

	            if (!item || item instanceof type) {
	                continue;
	            }

	            if (item.hasSubgroups !== undefined && !serverGrouping) {
	                replaceWithObservable(item.items, data, ranges, type, serverGrouping);
	            } else {
	                for (var idx = 0; idx < data.length; idx++) {
	                    if (data[idx] === item) {
	                        view[viewIndex] = data.at(idx);
	                        replaceInRanges(ranges, data, item, view[viewIndex]);
	                        break;
	                    }
	                }
	            }
	        }
	    }

	    function removeModel(data, model) {
	        var idx, length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            var dataItem = data.at(idx);
	            if (dataItem.uid == model.uid) {
	                data.splice(idx, 1);
	                return dataItem;
	            }
	        }
	    }

	    function indexOfPristineModel(data, model) {
	        if (model) {
	            return indexOf(data, function(item) {
	                return (item.uid && item.uid == model.uid) || (item[model.idField] === model.id && model.id !== model._defaultId);
	            });
	        }
	        return -1;
	    }

	    function indexOfModel(data, model) {
	        if (model) {
	            return indexOf(data, function(item) {
	                return item.uid == model.uid;
	            });
	        }
	        return -1;
	    }

	    function indexOf(data, comparer) {
	        var idx, length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            if (comparer(data[idx])) {
	                return idx;
	            }
	        }

	        return -1;
	    }

	    function fieldNameFromModel(fields, name) {
	        if (fields && !isEmptyObject(fields)) {
	            var descriptor = fields[name];
	            var fieldName;
	            if (isPlainObject(descriptor)) {
	                fieldName = descriptor.from || descriptor.field || name;
	            } else {
	                fieldName = fields[name] || name;
	            }

	            if (isFunction(fieldName)) {
	                return name;
	            }

	            return fieldName;
	        }
	        return name;
	    }

	    function convertFilterDescriptorsField(descriptor, model) {
	        var idx,
	            length,
	            target = {};

	        for (var field in descriptor) {
	            if (field !== "filters") {
	                target[field] = descriptor[field];
	            }
	        }

	        if (descriptor.filters) {
	            target.filters = [];
	            for (idx = 0, length = descriptor.filters.length; idx < length; idx++) {
	                target.filters[idx] = convertFilterDescriptorsField(descriptor.filters[idx], model);
	            }
	        } else {
	            target.field = fieldNameFromModel(model.fields, target.field);
	        }
	        return target;
	    }

	    function convertDescriptorsField(descriptors, model) {
	        var idx,
	            length,
	            result = [],
	            target,
	            descriptor;

	        for (idx = 0, length = descriptors.length; idx < length; idx ++) {
	            target = {};

	            descriptor = descriptors[idx];

	            for (var field in descriptor) {
	                target[field] = descriptor[field];
	            }

	            target.field = fieldNameFromModel(model.fields, target.field);

	            if (target.aggregates && isArray(target.aggregates)) {
	                target.aggregates = convertDescriptorsField(target.aggregates, model);
	            }
	            result.push(target);
	        }
	        return result;
	    }

	    var DataSource = Observable.extend({
	        init: function(options) {
	            var that = this, model, data;

	            if (options) {
	                data = options.data;
	            }

	            options = that.options = extend({}, that.options, options);

	            that._map = {};
	            that._prefetch = {};
	            that._data = [];
	            that._pristineData = [];
	            that._ranges = [];
	            that._view = [];
	            that._pristineTotal = 0;
	            that._destroyed = [];
	            that._pageSize = options.pageSize;
	            that._page = options.page  || (options.pageSize ? 1 : undefined);
	            that._sort = normalizeSort(options.sort);
	            that._filter = normalizeFilter(options.filter);
	            that._group = normalizeGroup(options.group);
	            that._aggregate = options.aggregate;
	            that._total = options.total;

	            that._shouldDetachObservableParents = true;

	            Observable.fn.init.call(that);

	            that.transport = Transport.create(options, data, that);

	            if (isFunction(that.transport.push)) {
	                that.transport.push({
	                    pushCreate: proxy(that._pushCreate, that),
	                    pushUpdate: proxy(that._pushUpdate, that),
	                    pushDestroy: proxy(that._pushDestroy, that)
	                });
	            }

	            if (options.offlineStorage != null) {
	                if (typeof options.offlineStorage == "string") {
	                    var key = options.offlineStorage;

	                    that._storage = {
	                        getItem: function() {
	                            return JSON.parse(localStorage.getItem(key));
	                        },
	                        setItem: function(item) {
	                            localStorage.setItem(key, stringify(that.reader.serialize(item)));
	                        }
	                    };
	                } else {
	                    that._storage = options.offlineStorage;
	                }
	            }

	            that.reader = new kendo.data.readers[options.schema.type || "json" ](options.schema);

	            model = that.reader.model || {};

	            that._detachObservableParents();

	            that._data = that._observe(that._data);
	            that._online = true;

	            that.bind(["push", ERROR, CHANGE, REQUESTSTART, SYNC, REQUESTEND, PROGRESS], options);
	        },

	        options: {
	            data: null,
	            schema: {
	               modelBase: Model
	            },
	            offlineStorage: null,
	            serverSorting: false,
	            serverPaging: false,
	            serverFiltering: false,
	            serverGrouping: false,
	            serverAggregates: false,
	            batch: false
	        },

	        clone: function() {
	            return this;
	        },

	        online: function(value) {
	            if (value !== undefined) {
	                if (this._online != value) {
	                    this._online = value;

	                    if (value) {
	                        return this.sync();
	                    }
	                }

	                return $.Deferred().resolve().promise();
	            } else {
	                return this._online;
	            }
	        },

	        offlineData: function(state) {
	            if (this.options.offlineStorage == null) {
	                return null;
	            }

	            if (state !== undefined) {
	                return this._storage.setItem(state);
	            }

	            return this._storage.getItem() || [];
	        },

	        _isServerGrouped: function() {
	            var group = this.group() || [];

	            return this.options.serverGrouping && group.length;
	        },

	        _pushCreate: function(result) {
	            this._push(result, "pushCreate");
	        },

	        _pushUpdate: function(result) {
	            this._push(result, "pushUpdate");
	        },

	        _pushDestroy: function(result) {
	            this._push(result, "pushDestroy");
	        },

	        _push: function(result, operation) {
	            var data = this._readData(result);

	            if (!data) {
	                data = result;
	            }

	            this[operation](data);
	        },

	        _flatData: function(data, skip) {
	            if (data) {
	                if (this._isServerGrouped()) {
	                    return flattenGroups(data);
	                }

	                if (!skip) {
	                    for (var idx = 0; idx < data.length; idx++) {
	                        data.at(idx);
	                    }
	                }
	            }

	            return data;
	        },

	        parent: noop,

	        get: function(id) {
	            var idx, length, data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].id == id) {
	                    return data[idx];
	                }
	            }
	        },

	        getByUid: function(id) {
	            var idx, length, data = this._flatData(this._data);

	            if (!data) {
	                return;
	            }

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].uid == id) {
	                    return data[idx];
	                }
	            }
	        },

	        indexOf: function(model) {
	            return indexOfModel(this._data, model);
	        },

	        at: function(index) {
	            return this._data.at(index);
	        },

	        data: function(value) {
	            var that = this;
	            if (value !== undefined) {
	                that._detachObservableParents();
	                that._data = this._observe(value);

	                that._pristineData = value.slice(0);

	                that._storeData();

	                that._ranges = [];
	                that.trigger("reset");
	                that._addRange(that._data);

	                that._total = that._data.length;
	                that._pristineTotal = that._total;

	                that._process(that._data);
	            } else {
	                if (that._data) {
	                    for (var idx = 0; idx < that._data.length; idx++) {
	                        that._data.at(idx);
	                    }
	                }

	                return that._data;
	            }
	        },

	        view: function(value) {
	            if (value === undefined) {
	                return this._view;
	            } else {
	                this._view = this._observeView(value);
	            }
	        },

	        _observeView: function(data) {
	            var that = this;
	            replaceWithObservable(data, that._data, that._ranges, that.reader.model || ObservableObject, that._isServerGrouped());

	            var view = new LazyObservableArray(data, that.reader.model);
	            view.parent = function() { return that.parent(); };
	            return view;
	        },

	        flatView: function() {
	            var groups = this.group() || [];

	            if (groups.length) {
	                return flattenGroups(this._view);
	            } else {
	                return this._view;
	            }
	        },

	        add: function(model) {
	            return this.insert(this._data.length, model);
	        },

	        _createNewModel: function(model) {
	            if (this.reader.model) {
	                return new this.reader.model(model);
	            }

	            if (model instanceof ObservableObject) {
	                return model;
	            }

	            return new ObservableObject(model);
	        },

	        insert: function(index, model) {
	            if (!model) {
	                model = index;
	                index = 0;
	            }

	            if (!(model instanceof Model)) {
	                model = this._createNewModel(model);
	            }

	            if (this._isServerGrouped()) {
	                this._data.splice(index, 0, this._wrapInEmptyGroup(model));
	            } else {
	                this._data.splice(index, 0, model);
	            }

	            return model;
	        },

	        pushCreate: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var pushed = [];
	            var autoSync = this.options.autoSync;
	            this.options.autoSync = false;

	            try {
	                for (var idx = 0; idx < items.length; idx ++) {
	                    var item = items[idx];

	                    var result = this.add(item);

	                    pushed.push(result);

	                    var pristine = result.toJSON();

	                    if (this._isServerGrouped()) {
	                        pristine = this._wrapInEmptyGroup(pristine);
	                    }

	                    this._pristineData.push(pristine);
	                }
	            } finally {
	                this.options.autoSync = autoSync;
	            }

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "create",
	                    items: pushed
	                });
	            }
	        },

	        pushUpdate: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var pushed = [];

	            for (var idx = 0; idx < items.length; idx ++) {
	                var item = items[idx];
	                var model = this._createNewModel(item);

	                var target = this.get(model.id);

	                if (target) {
	                    pushed.push(target);

	                    target.accept(item);

	                    target.trigger(CHANGE);

	                    this._updatePristineForModel(target, item);
	                } else {
	                    this.pushCreate(item);
	                }
	            }

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "update",
	                    items: pushed
	                });
	            }
	        },

	        pushDestroy: function(items) {
	            var pushed = this._removeItems(items);

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "destroy",
	                    items: pushed
	                });
	            }
	        },

	        _removeItems: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var destroyed = [];
	            var autoSync = this.options.autoSync;
	            this.options.autoSync = false;
	            try {
	                for (var idx = 0; idx < items.length; idx ++) {
	                    var item = items[idx];
	                    var model = this._createNewModel(item);
	                    var found = false;

	                    this._eachItem(this._data, function(items){
	                        for (var idx = 0; idx < items.length; idx++) {
	                            var item = items.at(idx);
	                            if (item.id === model.id) {
	                                destroyed.push(item);
	                                items.splice(idx, 1);
	                                found = true;
	                                break;
	                            }
	                        }
	                    });

	                    if (found) {
	                        this._removePristineForModel(model);
	                        this._destroyed.pop();
	                    }
	                }
	            } finally {
	                this.options.autoSync = autoSync;
	            }

	            return destroyed;
	        },

	        remove: function(model) {
	            var result,
	                that = this,
	                hasGroups = that._isServerGrouped();

	            this._eachItem(that._data, function(items) {
	                result = removeModel(items, model);
	                if (result && hasGroups) {
	                    if (!result.isNew || !result.isNew()) {
	                        that._destroyed.push(result);
	                    }
	                    return true;
	                }
	            });

	            this._removeModelFromRanges(model);

	            this._updateRangesLength();

	            return model;
	        },

	        destroyed: function() {
	            return this._destroyed;
	        },

	        created: function() {
	            var idx,
	                length,
	                result = [],
	                data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].isNew && data[idx].isNew()) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        updated: function() {
	            var idx,
	                length,
	                result = [],
	                data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if ((data[idx].isNew && !data[idx].isNew()) && data[idx].dirty) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        sync: function() {
	            var that = this,
	                created = [],
	                updated = [],
	                destroyed = that._destroyed;

	            var promise = $.Deferred().resolve().promise();

	            if (that.online()) {

	                if (!that.reader.model) {
	                    return promise;
	                }

	                created = that.created();
	                updated = that.updated();

	                var promises = [];

	                if (that.options.batch && that.transport.submit) {
	                    promises = that._sendSubmit(created, updated, destroyed);
	                } else {
	                    promises.push.apply(promises, that._send("create", created));
	                    promises.push.apply(promises, that._send("update", updated));
	                    promises.push.apply(promises, that._send("destroy", destroyed));
	                }

	                promise = $.when
	                 .apply(null, promises)
	                 .then(function() {
	                    var idx, length;

	                    for (idx = 0, length = arguments.length; idx < length; idx++){
	                        if (arguments[idx]) {
	                            that._accept(arguments[idx]);
	                        }
	                    }

	                    that._storeData(true);

	                    that._change({ action: "sync" });

	                    that.trigger(SYNC);
	                });
	            } else {
	                that._storeData(true);

	                that._change({ action: "sync" });
	            }

	            return promise;
	        },

	        cancelChanges: function(model) {
	            var that = this;

	            if (model instanceof kendo.data.Model) {
	                that._cancelModel(model);
	            } else {
	                that._destroyed = [];
	                that._detachObservableParents();
	                that._data = that._observe(that._pristineData);
	                if (that.options.serverPaging) {
	                    that._total = that._pristineTotal;
	                }

	                that._ranges = [];
	                that._addRange(that._data);

	                that._change();

	                that._markOfflineUpdatesAsDirty();
	            }
	        },

	        _markOfflineUpdatesAsDirty: function() {
	            var that = this;

	            if (that.options.offlineStorage != null) {
	                that._eachItem(that._data, function(items) {
	                    for (var idx = 0; idx < items.length; idx++) {
	                        var item = items.at(idx);
	                        if (item.__state__ == "update" || item.__state__ == "create") {
	                            item.dirty = true;
	                        }
	                    }
	                });
	            }
	        },

	        hasChanges: function() {
	            var idx,
	                length,
	                data = this._flatData(this._data);

	            if (this._destroyed.length) {
	                return true;
	            }

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if ((data[idx].isNew && data[idx].isNew()) || data[idx].dirty) {
	                    return true;
	                }
	            }

	            return false;
	        },

	        _accept: function(result) {
	            var that = this,
	                models = result.models,
	                response = result.response,
	                idx = 0,
	                serverGroup = that._isServerGrouped(),
	                pristine = that._pristineData,
	                type = result.type,
	                length;

	            that.trigger(REQUESTEND, { response: response, type: type });

	            if (response && !isEmptyObject(response)) {
	                response = that.reader.parse(response);

	                if (that._handleCustomErrors(response)) {
	                    return;
	                }

	                response = that.reader.data(response);

	                if (!isArray(response)) {
	                    response = [response];
	                }
	            } else {
	                response = $.map(models, function(model) { return model.toJSON(); } );
	            }

	            if (type === "destroy") {
	                that._destroyed = [];
	            }

	            for (idx = 0, length = models.length; idx < length; idx++) {
	                if (type !== "destroy") {
	                    models[idx].accept(response[idx]);

	                    if (type === "create") {
	                        pristine.push(serverGroup ? that._wrapInEmptyGroup(models[idx]) : response[idx]);
	                    } else if (type === "update") {
	                        that._updatePristineForModel(models[idx], response[idx]);
	                    }
	                } else {
	                    that._removePristineForModel(models[idx]);
	                }
	            }
	        },

	        _updatePristineForModel: function(model, values) {
	            this._executeOnPristineForModel(model, function(index, items) {
	                kendo.deepExtend(items[index], values);
	            });
	        },

	        _executeOnPristineForModel: function(model, callback) {
	            this._eachPristineItem(
	                function(items) {
	                    var index = indexOfPristineModel(items, model);
	                    if (index > -1) {
	                        callback(index, items);
	                        return true;
	                    }
	                });
	        },

	        _removePristineForModel: function(model) {
	            this._executeOnPristineForModel(model, function(index, items) {
	                items.splice(index, 1);
	            });
	        },

	        _readData: function(data) {
	            var read = !this._isServerGrouped() ? this.reader.data : this.reader.groups;
	            return read.call(this.reader, data);
	        },

	        _eachPristineItem: function(callback) {
	            this._eachItem(this._pristineData, callback);
	        },

	       _eachItem: function(data, callback) {
	            if (data && data.length) {
	                if (this._isServerGrouped()) {
	                    eachGroupItems(data, callback);
	                } else {
	                    callback(data);
	                }
	            }
	        },

	        _pristineForModel: function(model) {
	            var pristine,
	                idx,
	                callback = function(items) {
	                    idx = indexOfPristineModel(items, model);
	                    if (idx > -1) {
	                        pristine = items[idx];
	                        return true;
	                    }
	                };

	            this._eachPristineItem(callback);

	            return pristine;
	        },

	        _cancelModel: function(model) {
	            var pristine = this._pristineForModel(model);

	            this._eachItem(this._data, function(items) {
	                var idx = indexOfModel(items, model);
	                if (idx >= 0) {
	                    if (pristine && (!model.isNew() || pristine.__state__)) {
	                        items[idx].accept(pristine);

	                        if (pristine.__state__ == "update") {
	                            items[idx].dirty = true;
	                        }

	                    } else {
	                        items.splice(idx, 1);
	                    }
	                }
	            });
	        },

	        _submit: function(promises, data) {
	            var that = this;

	            that.trigger(REQUESTSTART, { type: "submit" });

	            that.transport.submit(extend({
	                success: function(response, type) {
	                    var promise = $.grep(promises, function(x) {
	                        return x.type == type;
	                    })[0];

	                    if (promise) {
	                        promise.resolve({
	                            response: response,
	                            models: promise.models,
	                            type: type
	                        });
	                    }
	                },
	                error: function(response, status, error) {
	                    for (var idx = 0; idx < promises.length; idx++) {
	                        promises[idx].reject(response);
	                    }

	                    that.error(response, status, error);
	                }
	            }, data));
	        },

	        _sendSubmit: function(created, updated, destroyed) {
	            var that = this,
	                promises = [];

	            if (that.options.batch) {
	                if (created.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "create";
	                        deferred.models = created;
	                    }));
	                }

	                if (updated.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "update";
	                        deferred.models = updated;
	                    }));
	                }

	                if (destroyed.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "destroy";
	                        deferred.models = destroyed;
	                    }));
	                }

	                that._submit(promises, {
	                    data: {
	                        created: that.reader.serialize(toJSON(created)),
	                        updated: that.reader.serialize(toJSON(updated)),
	                        destroyed: that.reader.serialize(toJSON(destroyed))
	                    }
	                });
	            }

	            return promises;
	        },

	        _promise: function(data, models, type) {
	            var that = this;

	            return $.Deferred(function(deferred) {
	                that.trigger(REQUESTSTART, { type: type });

	                that.transport[type].call(that.transport, extend({
	                    success: function(response) {
	                        deferred.resolve({
	                            response: response,
	                            models: models,
	                            type: type
	                        });
	                    },
	                    error: function(response, status, error) {
	                        deferred.reject(response);
	                        that.error(response, status, error);
	                    }
	                }, data));
	            }).promise();
	        },

	        _send: function(method, data) {
	            var that = this,
	                idx,
	                length,
	                promises = [],
	                converted = that.reader.serialize(toJSON(data));

	            if (that.options.batch) {
	                if (data.length) {
	                    promises.push(that._promise( { data: { models: converted } }, data , method));
	                }
	            } else {
	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    promises.push(that._promise( { data: converted[idx] }, [ data[idx] ], method));
	                }
	            }

	            return promises;
	        },

	        read: function(data) {
	            var that = this, params = that._params(data);
	            var deferred = $.Deferred();

	            that._queueRequest(params, function() {
	                var isPrevented = that.trigger(REQUESTSTART, { type: "read" });
	                if (!isPrevented) {
	                    that.trigger(PROGRESS);

	                    that._ranges = [];
	                    that.trigger("reset");
	                    if (that.online()) {
	                        that.transport.read({
	                            data: params,
	                            success: function(data) {
	                                that._ranges = [];
	                                that.success(data, params);

	                                deferred.resolve();
	                            },
	                            error: function() {
	                                var args = slice.call(arguments);

	                                that.error.apply(that, args);

	                                deferred.reject.apply(deferred, args);
	                            }
	                        });
	                    } else if (that.options.offlineStorage != null){
	                        that.success(that.offlineData(), params);

	                        deferred.resolve();
	                    }
	                } else {
	                    that._dequeueRequest();

	                    deferred.resolve(isPrevented);
	                }
	            });

	            return deferred.promise();
	        },

	        _readAggregates: function(data) {
	            return this.reader.aggregates(data);
	        },

	        success: function(data) {
	            var that = this,
	                options = that.options;

	            that.trigger(REQUESTEND, { response: data, type: "read" });

	            if (that.online()) {
	                data = that.reader.parse(data);

	                if (that._handleCustomErrors(data)) {
	                    that._dequeueRequest();
	                    return;
	                }

	                that._total = that.reader.total(data);

	                if (that._aggregate && options.serverAggregates) {
	                    that._aggregateResult = that._readAggregates(data);
	                }

	                data = that._readData(data);
	                that._destroyed = [];
	            } else {
	                data = that._readData(data);

	                var items = [];
	                var itemIds = {};
	                var model = that.reader.model;
	                var idField = model ? model.idField : "id";
	                var idx;

	                for (idx = 0; idx < this._destroyed.length; idx++) {
	                    var id = this._destroyed[idx][idField];
	                    itemIds[id] = id;
	                }

	                for (idx = 0; idx < data.length; idx++) {
	                    var item = data[idx];
	                    var state = item.__state__;
	                    if (state == "destroy") {
	                        if (!itemIds[item[idField]]) {
	                            this._destroyed.push(this._createNewModel(item));
	                        }
	                    } else {
	                        items.push(item);
	                    }
	                }

	                data = items;

	                that._total = data.length;
	            }

	            that._pristineTotal = that._total;

	            that._pristineData = data.slice(0);

	            that._detachObservableParents();

	            that._data = that._observe(data);

	            that._markOfflineUpdatesAsDirty();

	            that._storeData();

	            that._addRange(that._data);

	            that._process(that._data);

	            that._dequeueRequest();
	        },

	        _detachObservableParents: function() {
	            if (this._data && this._shouldDetachObservableParents) {
	                for (var idx = 0; idx < this._data.length; idx++) {
	                    if (this._data[idx].parent) {
	                        this._data[idx].parent = noop;
	                    }
	                }
	            }
	        },

	        _storeData: function(updatePristine) {
	            var serverGrouping = this._isServerGrouped();
	            var model = this.reader.model;

	            function items(data) {
	                var state = [];

	                for (var idx = 0; idx < data.length; idx++) {
	                    var dataItem = data.at(idx);
	                    var item = dataItem.toJSON();

	                    if (serverGrouping && dataItem.items) {
	                        item.items = items(dataItem.items);
	                    } else {
	                        item.uid = dataItem.uid;

	                        if (model) {
	                            if (dataItem.isNew()) {
	                                item.__state__ = "create";
	                            } else if (dataItem.dirty) {
	                                item.__state__ = "update";
	                            }
	                        }
	                    }
	                    state.push(item);
	                }

	                return state;
	            }

	            if (this.options.offlineStorage != null) {
	                var state = items(this._data);

	                var destroyed = [];

	                for (var idx = 0; idx < this._destroyed.length; idx++) {
	                    var item = this._destroyed[idx].toJSON();
	                    item.__state__ = "destroy";
	                    destroyed.push(item);
	                }

	                this.offlineData(state.concat(destroyed));

	                if (updatePristine) {
	                    this._pristineData = this._readData(state);
	                }
	            }
	        },

	        _addRange: function(data) {
	            var that = this,
	                start = that._skip || 0,
	                end = start + that._flatData(data, true).length;

	            that._ranges.push({ start: start, end: end, data: data, timestamp: new Date().getTime() });
	            that._ranges.sort( function(x, y) { return x.start - y.start; } );
	        },

	        error: function(xhr, status, errorThrown) {
	            this._dequeueRequest();
	            this.trigger(REQUESTEND, { });
	            this.trigger(ERROR, { xhr: xhr, status: status, errorThrown: errorThrown });
	        },

	        _params: function(data) {
	            var that = this,
	                options =  extend({
	                    take: that.take(),
	                    skip: that.skip(),
	                    page: that.page(),
	                    pageSize: that.pageSize(),
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                }, data);

	            if (!that.options.serverPaging) {
	                delete options.take;
	                delete options.skip;
	                delete options.page;
	                delete options.pageSize;
	            }

	            if (!that.options.serverGrouping) {
	                delete options.group;
	            } else if (that.reader.model && options.group) {
	                options.group = convertDescriptorsField(options.group, that.reader.model);
	            }

	            if (!that.options.serverFiltering) {
	                delete options.filter;
	            } else if (that.reader.model && options.filter) {
	               options.filter = convertFilterDescriptorsField(options.filter, that.reader.model);
	            }

	            if (!that.options.serverSorting) {
	                delete options.sort;
	            } else if (that.reader.model && options.sort) {
	                options.sort = convertDescriptorsField(options.sort, that.reader.model);
	            }

	            if (!that.options.serverAggregates) {
	                delete options.aggregate;
	            } else if (that.reader.model && options.aggregate) {
	                options.aggregate = convertDescriptorsField(options.aggregate, that.reader.model);
	            }

	            return options;
	        },

	        _queueRequest: function(options, callback) {
	            var that = this;
	            if (!that._requestInProgress) {
	                that._requestInProgress = true;
	                that._pending = undefined;
	                callback();
	            } else {
	                that._pending = { callback: proxy(callback, that), options: options };
	            }
	        },

	        _dequeueRequest: function() {
	            var that = this;
	            that._requestInProgress = false;
	            if (that._pending) {
	                that._queueRequest(that._pending.options, that._pending.callback);
	            }
	        },

	        _handleCustomErrors: function(response) {
	            if (this.reader.errors) {
	                var errors = this.reader.errors(response);
	                if (errors) {
	                    this.trigger(ERROR, { xhr: null, status: "customerror", errorThrown: "custom error", errors: errors });
	                    return true;
	                }
	            }
	            return false;
	        },

	        _shouldWrap: function(data) {
	            var model = this.reader.model;

	            if (model && data.length) {
	                return !(data[0] instanceof model);
	            }

	            return false;
	        },

	        _observe: function(data) {
	            var that = this,
	                model = that.reader.model;

	            that._shouldDetachObservableParents = true;

	            if (data instanceof ObservableArray) {
	                that._shouldDetachObservableParents = false;
	                if (that._shouldWrap(data)) {
	                    data.type = that.reader.model;
	                    data.wrapAll(data, data);
	                }
	            } else {
	                var arrayType = that.pageSize() && !that.options.serverPaging ? LazyObservableArray : ObservableArray;
	                data = new arrayType(data, that.reader.model);
	                data.parent = function() { return that.parent(); };
	            }

	            if (that._isServerGrouped()) {
	                wrapGroupItems(data, model);
	            }

	            if (that._changeHandler && that._data && that._data instanceof ObservableArray) {
	                that._data.unbind(CHANGE, that._changeHandler);
	            } else {
	                that._changeHandler = proxy(that._change, that);
	            }

	            return data.bind(CHANGE, that._changeHandler);
	        },

	        _updateTotalForAction: function(action, items) {
	            var that = this;

	            var total = parseInt(that._total, 10);

	            if (!isNumber(that._total)) {
	                total = parseInt(that._pristineTotal, 10);
	            }
	            if (action === "add") {
	                total += items.length;
	            } else if (action === "remove") {
	                total -= items.length;
	            } else if (action !== "itemchange" && action !== "sync" && !that.options.serverPaging) {
	                total = that._pristineTotal;
	            } else if (action === "sync") {
	                total = that._pristineTotal = parseInt(that._total, 10);
	            }

	            that._total = total;
	        },

	        _change: function(e) {
	            var that = this, idx, length, action = e ? e.action : "";

	            if (action === "remove") {
	                for (idx = 0, length = e.items.length; idx < length; idx++) {
	                    if (!e.items[idx].isNew || !e.items[idx].isNew()) {
	                        that._destroyed.push(e.items[idx]);
	                    }
	                }
	            }

	            if (that.options.autoSync && (action === "add" || action === "remove" || action === "itemchange")) {

	                var handler = function(args) {
	                    if (args.action === "sync") {
	                        that.unbind("change", handler);
	                        that._updateTotalForAction(action, e.items);
	                    }
	                };

	                that.first("change", handler);

	                that.sync();

	            } else {
	                that._updateTotalForAction(action, e ? e.items : []);

	                that._process(that._data, e);
	            }
	        },

	        _calculateAggregates: function (data, options) {
	            options = options || {};

	            var query = new Query(data),
	                aggregates = options.aggregate,
	                filter = options.filter;

	            if (filter) {
	                query = query.filter(filter);
	            }

	            return query.aggregate(aggregates);
	        },

	        _process: function (data, e) {
	            var that = this,
	                options = {},
	                result;

	            if (that.options.serverPaging !== true) {
	                options.skip = that._skip;
	                options.take = that._take || that._pageSize;

	                if(options.skip === undefined && that._page !== undefined && that._pageSize !== undefined) {
	                    options.skip = (that._page - 1) * that._pageSize;
	                }
	            }

	            if (that.options.serverSorting !== true) {
	                options.sort = that._sort;
	            }

	            if (that.options.serverFiltering !== true) {
	                options.filter = that._filter;
	            }

	            if (that.options.serverGrouping !== true) {
	                options.group = that._group;
	            }

	            if (that.options.serverAggregates !== true) {
	                options.aggregate = that._aggregate;
	                that._aggregateResult = that._calculateAggregates(data, options);
	            }

	            result = that._queryProcess(data, options);

	            that.view(result.data);

	            if (result.total !== undefined && !that.options.serverFiltering) {
	                that._total = result.total;
	            }

	            e = e || {};

	            e.items = e.items || that._view;

	            that.trigger(CHANGE, e);
	        },

	        _queryProcess: function(data, options) {
	            return Query.process(data, options);
	        },

	        _mergeState: function(options) {
	            var that = this;

	            if (options !== undefined) {
	                that._pageSize = options.pageSize;
	                that._page = options.page;
	                that._sort = options.sort;
	                that._filter = options.filter;
	                that._group = options.group;
	                that._aggregate = options.aggregate;
	                that._skip = that._currentRangeStart = options.skip;
	                that._take = options.take;

	                if(that._skip === undefined) {
	                    that._skip = that._currentRangeStart = that.skip();
	                    options.skip = that.skip();
	                }

	                if(that._take === undefined && that._pageSize !== undefined) {
	                    that._take = that._pageSize;
	                    options.take = that._take;
	                }

	                if (options.sort) {
	                    that._sort = options.sort = normalizeSort(options.sort);
	                }

	                if (options.filter) {
	                    that._filter = options.filter = normalizeFilter(options.filter);
	                }

	                if (options.group) {
	                    that._group = options.group = normalizeGroup(options.group);
	                }
	                if (options.aggregate) {
	                    that._aggregate = options.aggregate = normalizeAggregate(options.aggregate);
	                }
	            }
	            return options;
	        },

	        query: function(options) {
	            var result;
	            var remote = this.options.serverSorting || this.options.serverPaging || this.options.serverFiltering || this.options.serverGrouping || this.options.serverAggregates;

	            if (remote || ((this._data === undefined || this._data.length === 0) && !this._destroyed.length)) {
	                return this.read(this._mergeState(options));
	            }

	            var isPrevented = this.trigger(REQUESTSTART, { type: "read" });
	            if (!isPrevented) {
	                this.trigger(PROGRESS);

	                result = this._queryProcess(this._data, this._mergeState(options));

	                if (!this.options.serverFiltering) {
	                    if (result.total !== undefined) {
	                        this._total = result.total;
	                    } else {
	                        this._total = this._data.length;
	                    }
	                }

	                this._aggregateResult = this._calculateAggregates(this._data, options);
	                this.view(result.data);
	                this.trigger(REQUESTEND, { type: "read" });
	                this.trigger(CHANGE, { items: result.data });
	            }

	            return $.Deferred().resolve(isPrevented).promise();
	        },

	        fetch: function(callback) {
	            var that = this;
	            var fn = function(isPrevented) {
	                if (isPrevented !== true && isFunction(callback)) {
	                    callback.call(that);
	                }
	            };

	            return this._query().then(fn);
	        },

	        _query: function(options) {
	            var that = this;

	            return that.query(extend({}, {
	                page: that.page(),
	                pageSize: that.pageSize(),
	                sort: that.sort(),
	                filter: that.filter(),
	                group: that.group(),
	                aggregate: that.aggregate()
	            }, options));
	        },

	        next: function(options) {
	            var that = this,
	                page = that.page(),
	                total = that.total();

	            options = options || {};

	            if (!page || (total && page + 1 > that.totalPages())) {
	                return;
	            }

	            that._skip = that._currentRangeStart = page * that.take();

	            page += 1;
	            options.page = page;

	            that._query(options);

	            return page;
	        },

	        prev: function(options) {
	            var that = this,
	                page = that.page();

	            options = options || {};

	            if (!page || page === 1) {
	                return;
	            }

	            that._skip = that._currentRangeStart = that._skip - that.take();

	            page -= 1;
	            options.page = page;

	            that._query(options);

	            return page;
	        },

	        page: function(val) {
	            var that = this,
	            skip;

	            if(val !== undefined) {
	                val = math.max(math.min(math.max(val, 1), that.totalPages()), 1);
	                that._query({ page: val });
	                return;
	            }
	            skip = that.skip();

	            return skip !== undefined ? math.round((skip || 0) / (that.take() || 1)) + 1 : undefined;
	        },

	        pageSize: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ pageSize: val, page: 1 });
	                return;
	            }

	            return that.take();
	        },

	        sort: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ sort: val });
	                return;
	            }

	            return that._sort;
	        },

	        filter: function(val) {
	            var that = this;

	            if (val === undefined) {
	                return that._filter;
	            }

	            that.trigger("reset");
	            that._query({ filter: val, page: 1 });
	        },

	        group: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ group: val });
	                return;
	            }

	            return that._group;
	        },

	        total: function() {
	            return parseInt(this._total || 0, 10);
	        },

	        aggregate: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ aggregate: val });
	                return;
	            }

	            return that._aggregate;
	        },

	        aggregates: function() {
	            var result = this._aggregateResult;

	            if (isEmptyObject(result)) {
	                result = this._emptyAggregates(this.aggregate());
	            }

	            return result;
	        },

	        _emptyAggregates: function(aggregates) {
	            var result = {};

	            if (!isEmptyObject(aggregates)) {
	                var aggregate = {};

	                if (!isArray(aggregates)){
	                    aggregates = [aggregates];
	                }

	                for (var idx = 0; idx <aggregates.length; idx++) {
	                    aggregate[aggregates[idx].aggregate] = 0;
	                    result[aggregates[idx].field] = aggregate;
	                }
	            }

	            return result;
	        },

	        _wrapInEmptyGroup: function(model) {
	            var groups = this.group(),
	                parent,
	                group,
	                idx,
	                length;

	            for (idx = groups.length-1, length = 0; idx >= length; idx--) {
	                group = groups[idx];
	                parent = {
	                    value: model.get(group.field),
	                    field: group.field,
	                    items: parent ? [parent] : [model],
	                    hasSubgroups: !!parent,
	                    aggregates: this._emptyAggregates(group.aggregates)
	                };
	            }

	            return parent;
	        },

	        totalPages: function() {
	            var that = this,
	            pageSize = that.pageSize() || that.total();

	            return math.ceil((that.total() || 0) / pageSize);
	        },

	        inRange: function(skip, take) {
	            var that = this,
	                end = math.min(skip + take, that.total());

	            if (!that.options.serverPaging && that._data.length > 0) {
	                return true;
	            }

	            return that._findRange(skip, end).length > 0;
	        },

	        lastRange: function() {
	            var ranges = this._ranges;
	            return ranges[ranges.length - 1] || { start: 0, end: 0, data: [] };
	        },

	        firstItemUid: function() {
	            var ranges = this._ranges;
	            return ranges.length && ranges[0].data.length && ranges[0].data[0].uid;
	        },

	        enableRequestsInProgress: function() {
	            this._skipRequestsInProgress = false;
	        },

	        _timeStamp: function() {
	            return new Date().getTime();
	        },

	        range: function(skip, take) {
	            this._currentRequestTimeStamp = this._timeStamp();
	            this._skipRequestsInProgress = true;

	            skip = math.min(skip || 0, this.total());

	            var that = this,
	                pageSkip = math.max(math.floor(skip / take), 0) * take,
	                size = math.min(pageSkip + take, that.total()),
	                data;

	            data = that._findRange(skip, math.min(skip + take, that.total()));

	            if (data.length) {

	                that._pending = undefined;

	                that._skip = skip > that.skip() ? math.min(size, (that.totalPages() - 1) * that.take()) : pageSkip;

	                that._currentRangeStart = skip;

	                that._take = take;

	                var paging = that.options.serverPaging;
	                var sorting = that.options.serverSorting;
	                var filtering = that.options.serverFiltering;
	                var aggregates = that.options.serverAggregates;
	                try {
	                    that.options.serverPaging = true;
	                    if (!that._isServerGrouped() && !(that.group() && that.group().length)) {
	                        that.options.serverSorting = true;
	                    }
	                    that.options.serverFiltering = true;
	                    that.options.serverPaging = true;
	                    that.options.serverAggregates = true;

	                    if (paging) {
	                        that._detachObservableParents();
	                        that._data = data = that._observe(data);
	                    }
	                    that._process(data);
	                } finally {
	                    that.options.serverPaging = paging;
	                    that.options.serverSorting = sorting;
	                    that.options.serverFiltering = filtering;
	                    that.options.serverAggregates = aggregates;
	                }

	                return;
	            }

	            if (take !== undefined) {
	                if (!that._rangeExists(pageSkip, size)) {
	                    that.prefetch(pageSkip, take, function() {
	                        if (skip > pageSkip && size < that.total() && !that._rangeExists(size, math.min(size + take, that.total()))) {
	                            that.prefetch(size, take, function() {
	                                that.range(skip, take);
	                            });
	                        } else {
	                            that.range(skip, take);
	                        }
	                    });
	                } else if (pageSkip < skip) {
	                    that.prefetch(size, take, function() {
	                        that.range(skip, take);
	                    });
	                }
	            }
	        },

	        _findRange: function(start, end) {
	            var that = this,
	                ranges = that._ranges,
	                range,
	                data = [],
	                skipIdx,
	                takeIdx,
	                startIndex,
	                endIndex,
	                rangeData,
	                rangeEnd,
	                processed,
	                options = that.options,
	                remote = options.serverSorting || options.serverPaging || options.serverFiltering || options.serverGrouping || options.serverAggregates,
	                flatData,
	                count,
	                length;

	            for (skipIdx = 0, length = ranges.length; skipIdx < length; skipIdx++) {
	                range = ranges[skipIdx];
	                if (start >= range.start && start <= range.end) {
	                    count = 0;

	                    for (takeIdx = skipIdx; takeIdx < length; takeIdx++) {
	                        range = ranges[takeIdx];
	                        flatData = that._flatData(range.data, true);

	                        if (flatData.length && start + count >= range.start) {
	                            rangeData = range.data;
	                            rangeEnd = range.end;

	                            if (!remote) {
	                                var sort = normalizeGroup(that.group() || []).concat(normalizeSort(that.sort() || []));
	                                processed = that._queryProcess(range.data, { sort: sort, filter: that.filter() });
	                                flatData = rangeData = processed.data;

	                                if (processed.total !== undefined) {
	                                    rangeEnd = processed.total;
	                                }
	                            }

	                            startIndex = 0;
	                            if (start + count > range.start) {
	                                startIndex = (start + count) - range.start;
	                            }
	                            endIndex = flatData.length;
	                            if (rangeEnd > end) {
	                                endIndex = endIndex - (rangeEnd - end);
	                            }
	                            count += endIndex - startIndex;
	                            data = that._mergeGroups(data, rangeData, startIndex, endIndex);

	                            if (end <= range.end && count == end - start) {
	                                return data;
	                            }
	                        }
	                    }
	                    break;
	                }
	            }
	            return [];
	        },

	        _mergeGroups: function(data, range, skip, take) {
	            if (this._isServerGrouped()) {
	                var temp = range.toJSON(),
	                    prevGroup;

	                if (data.length) {
	                    prevGroup = data[data.length - 1];
	                }

	                mergeGroups(prevGroup, temp, skip, take);

	                return data.concat(temp);
	            }
	            return data.concat(range.slice(skip, take));
	        },

	        skip: function() {
	            var that = this;

	            if (that._skip === undefined) {
	                return (that._page !== undefined ? (that._page  - 1) * (that.take() || 1) : undefined);
	            }
	            return that._skip;
	        },

	        currentRangeStart: function() {
	            return this._currentRangeStart || 0;
	        },

	        take: function() {
	            return this._take || this._pageSize;
	        },

	        _prefetchSuccessHandler: function (skip, size, callback, force) {
	            var that = this;
	            var timestamp = that._timeStamp();

	            return function(data) {
	                var found = false,
	                    range = { start: skip, end: size, data: [], timestamp: that._timeStamp() },
	                    idx,
	                    length,
	                    temp;

	                that._dequeueRequest();

	                that.trigger(REQUESTEND, { response: data, type: "read" });

	                data = that.reader.parse(data);

	                temp = that._readData(data);

	                if (temp.length) {

	                    for (idx = 0, length = that._ranges.length; idx < length; idx++) {
	                        if (that._ranges[idx].start === skip) {
	                            found = true;
	                            range = that._ranges[idx];
	                            break;
	                        }
	                    }
	                    if (!found) {
	                        that._ranges.push(range);
	                    }
	                }

	                range.data = that._observe(temp);
	                range.end = range.start + that._flatData(range.data, true).length;
	                that._ranges.sort( function(x, y) { return x.start - y.start; } );
	                that._total = that.reader.total(data);

	                if (force || (timestamp >= that._currentRequestTimeStamp || !that._skipRequestsInProgress)) {
	                    if (callback && temp.length) {
	                        callback();
	                    } else {
	                        that.trigger(CHANGE, {});
	                    }
	                }
	            };
	        },

	        prefetch: function(skip, take, callback) {
	            var that = this,
	                size = math.min(skip + take, that.total()),
	                options = {
	                    take: take,
	                    skip: skip,
	                    page: skip / take + 1,
	                    pageSize: take,
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                };

	            if (!that._rangeExists(skip, size)) {
	                clearTimeout(that._timeout);

	                that._timeout = setTimeout(function() {
	                    that._queueRequest(options, function() {
	                        if (!that.trigger(REQUESTSTART, { type: "read" })) {
	                            that.transport.read({
	                                data: that._params(options),
	                                success: that._prefetchSuccessHandler(skip, size, callback),
	                                error: function() {
	                                    var args = slice.call(arguments);
	                                    that.error.apply(that, args);
	                                }
	                            });
	                        } else {
	                            that._dequeueRequest();
	                        }
	                    });
	                }, 100);
	            } else if (callback) {
	                callback();
	            }
	        },

	        _multiplePrefetch: function(skip, take, callback) {
	            var that = this,
	                size = math.min(skip + take, that.total()),
	                options = {
	                    take: take,
	                    skip: skip,
	                    page: skip / take + 1,
	                    pageSize: take,
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                };

	            if (!that._rangeExists(skip, size)) {
	                if (!that.trigger(REQUESTSTART, { type: "read" })) {
	                    that.transport.read({
	                        data: that._params(options),
	                        success: that._prefetchSuccessHandler(skip, size, callback, true)
	                    });
	                }
	            } else if (callback) {
	                callback();
	            }
	        },

	        _rangeExists: function(start, end) {
	            var that = this,
	                ranges = that._ranges,
	                idx,
	                length;

	            for (idx = 0, length = ranges.length; idx < length; idx++) {
	                if (ranges[idx].start <= start && ranges[idx].end >= end) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        _removeModelFromRanges: function(model) {
	            var result,
	                found,
	                range;

	            for (var idx = 0, length = this._ranges.length; idx < length; idx++) {
	                range = this._ranges[idx];

	                this._eachItem(range.data, function(items) {
	                    result = removeModel(items, model);
	                    if (result) {
	                        found = true;
	                    }
	                });

	                if (found) {
	                    break;
	                }
	            }
	        },

	        _updateRangesLength: function() {
	            var startOffset = 0,
	                range,
	                rangeLength;

	            for (var idx = 0, length = this._ranges.length; idx < length; idx++) {
	                range = this._ranges[idx];
	                range.start = range.start - startOffset;

	                rangeLength = this._flatData(range.data, true).length;
	                startOffset = range.end - rangeLength;
	                range.end = range.start + rangeLength;
	            }
	        }
	    });

	    var Transport = {};

	    Transport.create = function(options, data, dataSource) {
	        var transport,
	            transportOptions = options.transport ? $.extend({}, options.transport) : null;

	        if (transportOptions) {
	            transportOptions.read = typeof transportOptions.read === STRING ? { url: transportOptions.read } : transportOptions.read;

	            if (options.type === "jsdo") {
	                transportOptions.dataSource = dataSource;
	            }

	            if (options.type) {
	                kendo.data.transports = kendo.data.transports || {};
	                kendo.data.schemas = kendo.data.schemas || {};

	                if (!kendo.data.transports[options.type]) {
	                    kendo.logToConsole("Unknown DataSource transport type '" + options.type + "'.\nVerify that registration scripts for this type are included after Kendo UI on the page.", "warn");
	                } else if (!isPlainObject(kendo.data.transports[options.type])) {
	                    transport = new kendo.data.transports[options.type](extend(transportOptions, { data: data }));
	                } else {
	                    transportOptions = extend(true, {}, kendo.data.transports[options.type], transportOptions);
	                }

	                options.schema = extend(true, {}, kendo.data.schemas[options.type], options.schema);
	            }

	            if (!transport) {
	                transport = isFunction(transportOptions.read) ? transportOptions : new RemoteTransport(transportOptions);
	            }
	        } else {
	            transport = new LocalTransport({ data: options.data || [] });
	        }
	        return transport;
	    };

	    DataSource.create = function(options) {
	        if (isArray(options) || options instanceof ObservableArray) {
	           options = { data: options };
	        }

	        var dataSource = options || {},
	            data = dataSource.data,
	            fields = dataSource.fields,
	            table = dataSource.table,
	            select = dataSource.select,
	            idx,
	            length,
	            model = {},
	            field;

	        if (!data && fields && !dataSource.transport) {
	            if (table) {
	                data = inferTable(table, fields);
	            } else if (select) {
	                data = inferSelect(select, fields);

	                if (dataSource.group === undefined && data[0] && data[0].optgroup !== undefined) {
	                    dataSource.group = "optgroup";
	                }
	            }
	        }

	        if (kendo.data.Model && fields && (!dataSource.schema || !dataSource.schema.model)) {
	            for (idx = 0, length = fields.length; idx < length; idx++) {
	                field = fields[idx];
	                if (field.type) {
	                    model[field.field] = field;
	                }
	            }

	            if (!isEmptyObject(model)) {
	                dataSource.schema = extend(true, dataSource.schema, { model:  { fields: model } });
	            }
	        }

	        dataSource.data = data;

	        select = null;
	        dataSource.select = null;
	        table = null;
	        dataSource.table = null;

	        return dataSource instanceof DataSource ? dataSource : new DataSource(dataSource);
	    };

	    function inferSelect(select, fields) {
	        select = $(select)[0];
	        var options = select.options;
	        var firstField = fields[0];
	        var secondField = fields[1];

	        var data = [];
	        var idx, length;
	        var optgroup;
	        var option;
	        var record;
	        var value;

	        for (idx = 0, length = options.length; idx < length; idx++) {
	            record = {};
	            option = options[idx];
	            optgroup = option.parentNode;

	            if (optgroup === select) {
	                optgroup = null;
	            }

	            if (option.disabled || (optgroup && optgroup.disabled)) {
	                continue;
	            }

	            if (optgroup) {
	                record.optgroup = optgroup.label;
	            }

	            record[firstField.field] = option.text;

	            value = option.attributes.value;

	            if (value && value.specified) {
	                value = option.value;
	            } else {
	                value = option.text;
	            }

	            record[secondField.field] = value;

	            data.push(record);
	        }

	        return data;
	    }

	    function inferTable(table, fields) {
	        var tbody = $(table)[0].tBodies[0],
	        rows = tbody ? tbody.rows : [],
	        idx,
	        length,
	        fieldIndex,
	        fieldCount = fields.length,
	        data = [],
	        cells,
	        record,
	        cell,
	        empty;

	        for (idx = 0, length = rows.length; idx < length; idx++) {
	            record = {};
	            empty = true;
	            cells = rows[idx].cells;

	            for (fieldIndex = 0; fieldIndex < fieldCount; fieldIndex++) {
	                cell = cells[fieldIndex];
	                if(cell.nodeName.toLowerCase() !== "th") {
	                    empty = false;
	                    record[fields[fieldIndex].field] = cell.innerHTML;
	                }
	            }
	            if(!empty) {
	                data.push(record);
	            }
	        }

	        return data;
	    }

	    var Node = Model.define({
	        idField: "id",

	        init: function(value) {
	            var that = this,
	                hasChildren = that.hasChildren || value && value.hasChildren,
	                childrenField = "items",
	                childrenOptions = {};

	            kendo.data.Model.fn.init.call(that, value);

	            if (typeof that.children === STRING) {
	                childrenField = that.children;
	            }

	            childrenOptions = {
	                schema: {
	                    data: childrenField,
	                    model: {
	                        hasChildren: hasChildren,
	                        id: that.idField,
	                        fields: that.fields
	                    }
	                }
	            };

	            if (typeof that.children !== STRING) {
	                extend(childrenOptions, that.children);
	            }

	            childrenOptions.data = value;

	            if (!hasChildren) {
	                hasChildren = childrenOptions.schema.data;
	            }

	            if (typeof hasChildren === STRING) {
	                hasChildren = kendo.getter(hasChildren);
	            }

	            if (isFunction(hasChildren)) {
	                that.hasChildren = !!hasChildren.call(that, that);
	            }

	            that._childrenOptions = childrenOptions;

	            if (that.hasChildren) {
	                that._initChildren();
	            }

	            that._loaded = !!(value && value._loaded);
	        },

	        _initChildren: function() {
	            var that = this;
	            var children, transport, parameterMap;

	            if (!(that.children instanceof HierarchicalDataSource)) {
	                children = that.children = new HierarchicalDataSource(that._childrenOptions);

	                transport = children.transport;
	                parameterMap = transport.parameterMap;

	                transport.parameterMap = function(data, type) {
	                    data[that.idField || "id"] = that.id;

	                    if (parameterMap) {
	                        data = parameterMap(data, type);
	                    }

	                    return data;
	                };

	                children.parent = function(){
	                    return that;
	                };

	                children.bind(CHANGE, function(e){
	                    e.node = e.node || that;
	                    that.trigger(CHANGE, e);
	                });

	                children.bind(ERROR, function(e){
	                    var collection = that.parent();

	                    if (collection) {
	                        e.node = e.node || that;
	                        collection.trigger(ERROR, e);
	                    }
	                });

	                that._updateChildrenField();
	            }
	        },

	        append: function(model) {
	            this._initChildren();
	            this.loaded(true);
	            this.children.add(model);
	        },

	        hasChildren: false,

	        level: function() {
	            var parentNode = this.parentNode(),
	                level = 0;

	            while (parentNode && parentNode.parentNode) {
	                level++;
	                parentNode = parentNode.parentNode ? parentNode.parentNode() : null;
	            }

	            return level;
	        },

	        _updateChildrenField: function() {
	            var fieldName = this._childrenOptions.schema.data;

	            this[fieldName || "items"] = this.children.data();
	        },

	        _childrenLoaded: function() {
	            this._loaded = true;

	            this._updateChildrenField();
	        },

	        load: function() {
	            var options = {};
	            var method = "_query";
	            var children, promise;

	            if (this.hasChildren) {
	                this._initChildren();

	                children = this.children;

	                options[this.idField || "id"] = this.id;

	                if (!this._loaded) {
	                    children._data = undefined;
	                    method = "read";
	                }

	                children.one(CHANGE, proxy(this._childrenLoaded, this));

	                promise = children[method](options);
	            } else {
	                this.loaded(true);
	            }

	            return promise || $.Deferred().resolve().promise();
	        },

	        parentNode: function() {
	            var array = this.parent();

	            return array.parent();
	        },

	        loaded: function(value) {
	            if (value !== undefined) {
	                this._loaded = value;
	            } else {
	                return this._loaded;
	            }
	        },

	        shouldSerialize: function(field) {
	            return Model.fn.shouldSerialize.call(this, field) &&
	                    field !== "children" &&
	                    field !== "_loaded" &&
	                    field !== "hasChildren" &&
	                    field !== "_childrenOptions";
	        }
	    });

	    function dataMethod(name) {
	        return function() {
	            var data = this._data,
	                result = DataSource.fn[name].apply(this, slice.call(arguments));

	            if (this._data != data) {
	                this._attachBubbleHandlers();
	            }

	            return result;
	        };
	    }

	    var HierarchicalDataSource = DataSource.extend({
	        init: function(options) {
	            var node = Node.define({
	                children: options
	            });

	            DataSource.fn.init.call(this, extend(true, {}, { schema: { modelBase: node, model: node } }, options));

	            this._attachBubbleHandlers();
	        },

	        _attachBubbleHandlers: function() {
	            var that = this;

	            that._data.bind(ERROR, function(e) {
	                that.trigger(ERROR, e);
	            });
	        },

	        remove: function(node){
	            var parentNode = node.parentNode(),
	                dataSource = this,
	                result;

	            if (parentNode && parentNode._initChildren) {
	                dataSource = parentNode.children;
	            }

	            result = DataSource.fn.remove.call(dataSource, node);

	            if (parentNode && !dataSource.data().length) {
	                parentNode.hasChildren = false;
	            }

	            return result;
	        },

	        success: dataMethod("success"),

	        data: dataMethod("data"),

	        insert: function(index, model) {
	            var parentNode = this.parent();

	            if (parentNode && parentNode._initChildren) {
	                parentNode.hasChildren = true;
	                parentNode._initChildren();
	            }

	            return DataSource.fn.insert.call(this, index, model);
	        },

	        _find: function(method, value) {
	            var idx, length, node, children;
	            var data = this._data;

	            if (!data) {
	                return;
	            }

	            node = DataSource.fn[method].call(this, value);

	            if (node) {
	                return node;
	            }

	            data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                children = data[idx].children;

	                if (!(children instanceof HierarchicalDataSource)) {
	                    continue;
	                }

	                node = children[method](value);

	                if (node) {
	                    return node;
	                }
	            }
	        },

	        get: function(id) {
	            return this._find("get", id);
	        },

	        getByUid: function(uid) {
	            return this._find("getByUid", uid);
	        }
	    });

	    function inferList(list, fields) {
	        var items = $(list).children(),
	            idx,
	            length,
	            data = [],
	            record,
	            textField = fields[0].field,
	            urlField = fields[1] && fields[1].field,
	            spriteCssClassField = fields[2] && fields[2].field,
	            imageUrlField = fields[3] && fields[3].field,
	            item,
	            id,
	            textChild,
	            className,
	            children;

	        function elements(collection, tagName) {
	            return collection.filter(tagName).add(collection.find(tagName));
	        }

	        for (idx = 0, length = items.length; idx < length; idx++) {
	            record = { _loaded: true };
	            item = items.eq(idx);

	            textChild = item[0].firstChild;
	            children = item.children();
	            list = children.filter("ul");
	            children = children.filter(":not(ul)");

	            id = item.attr("data-id");

	            if (id) {
	                record.id = id;
	            }

	            if (textChild) {
	                record[textField] = textChild.nodeType == 3 ? textChild.nodeValue : children.text();
	            }

	            if (urlField) {
	                record[urlField] = elements(children, "a").attr("href");
	            }

	            if (imageUrlField) {
	                record[imageUrlField] = elements(children, "img").attr("src");
	            }

	            if (spriteCssClassField) {
	                className = elements(children, ".k-sprite").prop("className");
	                record[spriteCssClassField] = className && $.trim(className.replace("k-sprite", ""));
	            }

	            if (list.length) {
	                record.items = inferList(list.eq(0), fields);
	            }

	            if (item.attr("data-hasChildren") == "true") {
	                record.hasChildren = true;
	            }

	            data.push(record);
	        }

	        return data;
	    }

	    HierarchicalDataSource.create = function(options) {
	        options = options && options.push ? { data: options } : options;

	        var dataSource = options || {},
	            data = dataSource.data,
	            fields = dataSource.fields,
	            list = dataSource.list;

	        if (data && data._dataSource) {
	            return data._dataSource;
	        }

	        if (!data && fields && !dataSource.transport) {
	            if (list) {
	                data = inferList(list, fields);
	            }
	        }

	        dataSource.data = data;

	        return dataSource instanceof HierarchicalDataSource ? dataSource : new HierarchicalDataSource(dataSource);
	    };

	    var Buffer = kendo.Observable.extend({
	        init: function(dataSource, viewSize, disablePrefetch) {
	            kendo.Observable.fn.init.call(this);

	            this._prefetching = false;
	            this.dataSource = dataSource;
	            this.prefetch = !disablePrefetch;

	            var buffer = this;

	            dataSource.bind("change", function() {
	                buffer._change();
	            });

	            dataSource.bind("reset", function() {
	                buffer._reset();
	            });

	            this._syncWithDataSource();

	            this.setViewSize(viewSize);
	        },

	        setViewSize: function(viewSize) {
	            this.viewSize = viewSize;
	            this._recalculate();
	        },

	        at: function(index)  {
	            var pageSize = this.pageSize,
	                itemPresent = true;

	            if (index >= this.total()) {
	                this.trigger("endreached", {index: index });
	                return null;
	            }

	            if (!this.useRanges) {
	               return this.dataSource.view()[index];
	            }
	            if (this.useRanges) {
	                // out of range request
	                if (index < this.dataOffset || index >= this.skip + pageSize) {
	                    itemPresent = this.range(Math.floor(index / pageSize) * pageSize);
	                }

	                // prefetch
	                if (index === this.prefetchThreshold) {
	                    this._prefetch();
	                }

	                // mid-range jump - prefetchThreshold and nextPageThreshold may be equal, do not change to else if
	                if (index === this.midPageThreshold) {
	                    this.range(this.nextMidRange, true);
	                }
	                // next range jump
	                else if (index === this.nextPageThreshold) {
	                    this.range(this.nextFullRange);
	                }
	                // pull-back
	                else if (index === this.pullBackThreshold) {
	                    if (this.offset === this.skip) { // from full range to mid range
	                        this.range(this.previousMidRange);
	                    } else { // from mid range to full range
	                        this.range(this.previousFullRange);
	                    }
	                }

	                if (itemPresent) {
	                    return this.dataSource.at(index - this.dataOffset);
	                } else {
	                    this.trigger("endreached", { index: index });
	                    return null;
	                }
	            }
	        },

	        indexOf: function(item) {
	            return this.dataSource.data().indexOf(item) + this.dataOffset;
	        },

	        total: function() {
	            return parseInt(this.dataSource.total(), 10);
	        },

	        next: function() {
	            var buffer = this,
	                pageSize = buffer.pageSize,
	                offset = buffer.skip - buffer.viewSize + pageSize,
	                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize;

	            this.offset = offset;
	            this.dataSource.prefetch(pageSkip, pageSize, function() {
	                buffer._goToRange(offset, true);
	            });
	        },

	        range: function(offset, nextRange) {
	            if (this.offset === offset) {
	                return true;
	            }

	            var buffer = this,
	                pageSize = this.pageSize,
	                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize,
	                dataSource = this.dataSource;

	            if (nextRange) {
	                pageSkip += pageSize;
	            }

	            if (dataSource.inRange(offset, pageSize)) {
	                this.offset = offset;
	                this._recalculate();
	                this._goToRange(offset);
	                return true;
	            } else if (this.prefetch) {
	                dataSource.prefetch(pageSkip, pageSize, function() {
	                    buffer.offset = offset;
	                    buffer._recalculate();
	                    buffer._goToRange(offset, true);
	                });
	                return false;
	            }

	            return true;
	        },

	        syncDataSource: function() {
	            var offset = this.offset;
	            this.offset = null;
	            this.range(offset);
	        },

	        destroy: function() {
	            this.unbind();
	        },

	        _prefetch: function() {
	            var buffer = this,
	                pageSize = this.pageSize,
	                prefetchOffset = this.skip + pageSize,
	                dataSource = this.dataSource;

	            if (!dataSource.inRange(prefetchOffset, pageSize) && !this._prefetching && this.prefetch) {
	                this._prefetching = true;
	                this.trigger("prefetching", { skip: prefetchOffset, take: pageSize });

	                dataSource.prefetch(prefetchOffset, pageSize, function() {
	                    buffer._prefetching = false;
	                    buffer.trigger("prefetched", { skip: prefetchOffset, take: pageSize });
	                });
	            }
	        },

	        _goToRange: function(offset, expanding) {
	            if (this.offset !== offset) {
	                return;
	            }

	            this.dataOffset = offset;
	            this._expanding = expanding;
	            this.dataSource.range(offset, this.pageSize);
	            this.dataSource.enableRequestsInProgress();
	        },

	        _reset: function() {
	            this._syncPending = true;
	        },

	        _change: function() {
	            var dataSource = this.dataSource;

	            this.length = this.useRanges ? dataSource.lastRange().end : dataSource.view().length;

	            if (this._syncPending) {
	                this._syncWithDataSource();
	                this._recalculate();
	                this._syncPending = false;
	                this.trigger("reset", { offset: this.offset });
	            }

	            this.trigger("resize");

	            if (this._expanding) {
	                this.trigger("expand");
	            }

	            delete this._expanding;
	        },

	        _syncWithDataSource: function() {
	            var dataSource = this.dataSource;

	            this._firstItemUid = dataSource.firstItemUid();
	            this.dataOffset = this.offset = dataSource.skip() || 0;
	            this.pageSize = dataSource.pageSize();
	            this.useRanges = dataSource.options.serverPaging;
	        },

	        _recalculate: function() {
	            var pageSize = this.pageSize,
	                offset = this.offset,
	                viewSize = this.viewSize,
	                skip = Math.ceil(offset / pageSize) * pageSize;

	            this.skip = skip;
	            this.midPageThreshold = skip + pageSize - 1;
	            this.nextPageThreshold = skip + viewSize - 1;
	            this.prefetchThreshold = skip + Math.floor(pageSize / 3 * 2);
	            this.pullBackThreshold = this.offset - 1;

	            this.nextMidRange = skip + pageSize - viewSize;
	            this.nextFullRange = skip;
	            this.previousMidRange = offset - viewSize;
	            this.previousFullRange = skip - pageSize;
	        }
	    });

	    var BatchBuffer = kendo.Observable.extend({
	        init: function(dataSource, batchSize) {
	            var batchBuffer = this;

	            kendo.Observable.fn.init.call(batchBuffer);

	            this.dataSource = dataSource;
	            this.batchSize = batchSize;
	            this._total = 0;

	            this.buffer = new Buffer(dataSource, batchSize * 3);

	            this.buffer.bind({
	                "endreached": function (e) {
	                    batchBuffer.trigger("endreached", { index: e.index });
	                },
	                "prefetching": function (e) {
	                    batchBuffer.trigger("prefetching", { skip: e.skip, take: e.take });
	                },
	                "prefetched": function (e) {
	                    batchBuffer.trigger("prefetched", { skip: e.skip, take: e.take });
	                },
	                "reset": function () {
	                    batchBuffer._total = 0;
	                    batchBuffer.trigger("reset");
	                },
	                "resize": function () {
	                    batchBuffer._total = Math.ceil(this.length / batchBuffer.batchSize);
	                    batchBuffer.trigger("resize", { total: batchBuffer.total(), offset: this.offset });
	                }
	            });
	        },

	        syncDataSource: function() {
	            this.buffer.syncDataSource();
	        },

	        at: function(index) {
	            var buffer = this.buffer,
	                skip = index * this.batchSize,
	                take = this.batchSize,
	                view = [],
	                item;

	            if (buffer.offset > skip) {
	                buffer.at(buffer.offset - 1);
	            }

	            for (var i = 0; i < take; i++) {
	                item = buffer.at(skip + i);

	                if (item === null) {
	                    break;
	                }

	                view.push(item);
	            }

	            return view;
	        },

	        total: function() {
	            return this._total;
	        },

	        destroy: function() {
	            this.buffer.destroy();
	            this.unbind();
	        }
	    });

	    extend(true, kendo.data, {
	        readers: {
	            json: DataReader
	        },
	        Query: Query,
	        DataSource: DataSource,
	        HierarchicalDataSource: HierarchicalDataSource,
	        Node: Node,
	        ObservableObject: ObservableObject,
	        ObservableArray: ObservableArray,
	        LazyObservableArray: LazyObservableArray,
	        LocalTransport: LocalTransport,
	        RemoteTransport: RemoteTransport,
	        Cache: Cache,
	        DataReader: DataReader,
	        Model: Model,
	        Buffer: Buffer,
	        BatchBuffer: BatchBuffer
	    });
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 607:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data.odata */ 119);

/***/ },

/***/ 608:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data.xml */ 120);

/***/ }

/******/ });

/***/ }),
/* 7 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.draganddrop.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(679);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 598:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.userevents */ 33);

/***/ },

/***/ 679:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(598) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "draganddrop",
	    name: "Drag & drop",
	    category: "framework",
	    description: "Drag & drop functionality for any DOM element.",
	    depends: [ "core", "userevents" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        document = window.document,
	        $window = $(window),
	        Class = kendo.Class,
	        Widget = kendo.ui.Widget,
	        Observable = kendo.Observable,
	        UserEvents = kendo.UserEvents,
	        proxy = $.proxy,
	        extend = $.extend,
	        getOffset = kendo.getOffset,
	        draggables = {},
	        dropTargets = {},
	        dropAreas = {},
	        lastDropTarget,
	        elementUnderCursor = kendo.elementUnderCursor,
	        KEYUP = "keyup",
	        CHANGE = "change",

	        // Draggable events
	        DRAGSTART = "dragstart",
	        HOLD = "hold",
	        DRAG = "drag",
	        DRAGEND = "dragend",
	        DRAGCANCEL = "dragcancel",
	        HINTDESTROYED = "hintDestroyed",

	        // DropTarget events
	        DRAGENTER = "dragenter",
	        DRAGLEAVE = "dragleave",
	        DROP = "drop";

	    function contains(parent, child) {
	        try {
	            return $.contains(parent, child) || parent == child;
	        } catch (e) {
	            return false;
	        }
	    }

	    function numericCssPropery(element, property) {
	        return parseInt(element.css(property), 10) || 0;
	    }

	    function within(value, range) {
	        return Math.min(Math.max(value, range.min), range.max);
	    }

	    function containerBoundaries(container, element) {
	        var offset = getOffset(container),
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight,
	            minX = offset.left + numericCssPropery(container, "borderLeftWidth") + numericCssPropery(container, "paddingLeft"),
	            minY = offset.top + numericCssPropery(container, "borderTopWidth") + numericCssPropery(container, "paddingTop"),
	            maxX = minX + container.width() - outerWidth(element, true),
	            maxY = minY + container.height() - outerHeight(element, true);

	        return {
	            x: { min: minX, max: maxX },
	            y: { min: minY, max: maxY }
	        };
	    }

	    function checkTarget(target, targets, areas) {
	        var theTarget, theFilter, i = 0,
	            targetLen = targets && targets.length,
	            areaLen = areas && areas.length;

	        while (target && target.parentNode) {
	            for (i = 0; i < targetLen; i ++) {
	                theTarget = targets[i];
	                if (theTarget.element[0] === target) {
	                    return { target: theTarget, targetElement: target };
	                }
	            }

	            for (i = 0; i < areaLen; i ++) {
	                theFilter = areas[i];
	                if ($.contains(theFilter.element[0], target) && support.matchesSelector.call(target, theFilter.options.filter)) {
	                    return { target: theFilter, targetElement: target };
	                }
	            }

	            target = target.parentNode;
	        }

	        return undefined;
	    }

	    var TapCapture = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                domElement = element[0];

	            that.capture = false;

	            if (domElement.addEventListener) {
	                $.each(kendo.eventMap.down.split(" "), function() {
	                    domElement.addEventListener(this, proxy(that._press, that), true);
	                });
	                $.each(kendo.eventMap.up.split(" "), function() {
	                    domElement.addEventListener(this, proxy(that._release, that), true);
	                });
	            } else {
	                $.each(kendo.eventMap.down.split(" "), function() {
	                    domElement.attachEvent(this, proxy(that._press, that));
	                });
	                $.each(kendo.eventMap.up.split(" "), function() {
	                    domElement.attachEvent(this, proxy(that._release, that));
	                });
	            }

	            Observable.fn.init.call(that);

	            that.bind(["press", "release"], options || {});
	        },

	        captureNext: function() {
	            this.capture = true;
	        },

	        cancelCapture: function() {
	            this.capture = false;
	        },

	        _press: function(e) {
	            var that = this;
	            that.trigger("press");
	            if (that.capture) {
	                e.preventDefault();
	            }
	        },

	        _release: function(e) {
	            var that = this;
	            that.trigger("release");

	            if (that.capture) {
	                e.preventDefault();
	                that.cancelCapture();
	            }
	        }
	    });

	    var PaneDimension = Observable.extend({
	        init: function(options) {
	            var that = this;
	            Observable.fn.init.call(that);

	            that.forcedEnabled = false;

	            $.extend(that, options);

	            that.scale = 1;

	            if (that.horizontal) {
	                that.measure = "offsetWidth";
	                that.scrollSize = "scrollWidth";
	                that.axis = "x";
	            } else {
	                that.measure = "offsetHeight";
	                that.scrollSize = "scrollHeight";
	                that.axis = "y";
	            }
	        },

	        makeVirtual: function() {
	            $.extend(this, {
	                virtual: true,
	                forcedEnabled: true,
	                _virtualMin: 0,
	                _virtualMax: 0
	            });
	        },

	        virtualSize: function(min, max) {
	            if (this._virtualMin !== min || this._virtualMax !== max) {
	                this._virtualMin = min;
	                this._virtualMax = max;
	                this.update();
	            }
	        },

	        outOfBounds: function(offset) {
	            return offset > this.max || offset < this.min;
	        },

	        forceEnabled: function() {
	            this.forcedEnabled = true;
	        },

	        getSize: function() {
	            return this.container[0][this.measure];
	        },

	        getTotal: function() {
	            return this.element[0][this.scrollSize];
	        },

	        rescale: function(scale) {
	            this.scale = scale;
	        },

	        update: function(silent) {
	            var that = this,
	                total = that.virtual ? that._virtualMax : that.getTotal(),
	                scaledTotal = total * that.scale,
	                size = that.getSize();

	            if (total === 0 && !that.forcedEnabled) {
	                return; // we are not visible.
	            }

	            that.max = that.virtual ? -that._virtualMin : 0;
	            that.size = size;
	            that.total = scaledTotal;
	            that.min = Math.min(that.max, size - scaledTotal);
	            that.minScale = size / total;
	            that.centerOffset = (scaledTotal - size) / 2;

	            that.enabled = that.forcedEnabled || (scaledTotal > size);

	            if (!silent) {
	                that.trigger(CHANGE, that);
	            }
	        }
	    });

	    var PaneDimensions = Observable.extend({
	        init: function(options) {
	            var that = this;

	            Observable.fn.init.call(that);

	            that.x = new PaneDimension(extend({horizontal: true}, options));
	            that.y = new PaneDimension(extend({horizontal: false}, options));
	            that.container = options.container;
	            that.forcedMinScale = options.minScale;
	            that.maxScale = options.maxScale || 100;

	            that.bind(CHANGE, options);
	        },

	        rescale: function(newScale) {
	            this.x.rescale(newScale);
	            this.y.rescale(newScale);
	            this.refresh();
	        },

	        centerCoordinates: function() {
	            return { x: Math.min(0, -this.x.centerOffset), y: Math.min(0, -this.y.centerOffset) };
	        },

	        refresh: function() {
	            var that = this;
	            that.x.update();
	            that.y.update();
	            that.enabled = that.x.enabled || that.y.enabled;
	            that.minScale = that.forcedMinScale || Math.min(that.x.minScale, that.y.minScale);
	            that.fitScale = Math.max(that.x.minScale, that.y.minScale);
	            that.trigger(CHANGE);
	        }
	    });

	    var PaneAxis = Observable.extend({
	        init: function(options) {
	            var that = this;
	            extend(that, options);
	            Observable.fn.init.call(that);
	        },

	        outOfBounds: function() {
	            return this.dimension.outOfBounds(this.movable[this.axis]);
	        },

	        dragMove: function(delta) {
	            var that = this,
	                dimension = that.dimension,
	                axis = that.axis,
	                movable = that.movable,
	                position = movable[axis] + delta;

	            if (!dimension.enabled) {
	                return;
	            }

	            if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {
	                delta *= that.resistance;
	            }

	            movable.translateAxis(axis, delta);
	            that.trigger(CHANGE, that);
	        }
	    });

	    var Pane = Class.extend({

	        init: function(options) {
	            var that = this,
	                x,
	                y,
	                resistance,
	                movable;

	            extend(that, {elastic: true}, options);

	            resistance = that.elastic ? 0.5 : 0;
	            movable = that.movable;

	            that.x = x = new PaneAxis({
	                axis: "x",
	                dimension: that.dimensions.x,
	                resistance: resistance,
	                movable: movable
	            });

	            that.y = y = new PaneAxis({
	                axis: "y",
	                dimension: that.dimensions.y,
	                resistance: resistance,
	                movable: movable
	            });

	            that.userEvents.bind(["press", "move", "end", "gesturestart", "gesturechange"], {
	                gesturestart: function(e) {
	                    that.gesture = e;
	                    that.offset = that.dimensions.container.offset();
	                },

	                press: function(e) {
	                    if ($(e.event.target).closest("a").is("[data-navigate-on-press=true]")) {
	                        e.sender.cancel();
	                    }
	                },

	                gesturechange: function(e) {
	                    var previousGesture = that.gesture,
	                        previousCenter = previousGesture.center,

	                        center = e.center,

	                        scaleDelta = e.distance / previousGesture.distance,

	                        minScale = that.dimensions.minScale,
	                        maxScale = that.dimensions.maxScale,
	                        coordinates;

	                    if (movable.scale <= minScale && scaleDelta < 1) {
	                        // Resist shrinking. Instead of shrinking from 1 to 0.5, it will shrink to 0.5 + (1 /* minScale */ - 0.5) * 0.8 = 0.9;
	                        scaleDelta += (1 - scaleDelta) * 0.8;
	                    }

	                    if (movable.scale * scaleDelta >= maxScale) {
	                        scaleDelta = maxScale / movable.scale;
	                    }

	                    var offsetX = movable.x + that.offset.left,
	                        offsetY = movable.y + that.offset.top;

	                    coordinates = {
	                        x: (offsetX - previousCenter.x) * scaleDelta + center.x - offsetX,
	                        y: (offsetY - previousCenter.y) * scaleDelta + center.y - offsetY
	                    };

	                    movable.scaleWith(scaleDelta);

	                    x.dragMove(coordinates.x);
	                    y.dragMove(coordinates.y);

	                    that.dimensions.rescale(movable.scale);
	                    that.gesture = e;
	                    e.preventDefault();
	                },

	                move: function(e) {
	                    if (e.event.target.tagName.match(/textarea|input/i)) {
	                        return;
	                    }

	                    if (x.dimension.enabled || y.dimension.enabled) {
	                        x.dragMove(e.x.delta);
	                        y.dragMove(e.y.delta);
	                        e.preventDefault();
	                    } else {
	                        e.touch.skip();
	                    }
	                },

	                end: function(e) {
	                    e.preventDefault();
	                }
	            });
	        }
	    });

	    var TRANSFORM_STYLE = support.transitions.prefix + "Transform",
	        translate;


	    if (support.hasHW3D) {
	        translate = function(x, y, scale) {
	            return "translate3d(" + x + "px," + y +"px,0) scale(" + scale + ")";
	        };
	    } else {
	        translate = function(x, y, scale) {
	            return "translate(" + x + "px," + y +"px) scale(" + scale + ")";
	        };
	    }

	    var Movable = Observable.extend({
	        init: function(element) {
	            var that = this;

	            Observable.fn.init.call(that);

	            that.element = $(element);
	            that.element[0].style.webkitTransformOrigin = "left top";
	            that.x = 0;
	            that.y = 0;
	            that.scale = 1;
	            that._saveCoordinates(translate(that.x, that.y, that.scale));
	        },

	        translateAxis: function(axis, by) {
	            this[axis] += by;
	            this.refresh();
	        },

	        scaleTo: function(scale) {
	            this.scale = scale;
	            this.refresh();
	        },

	        scaleWith: function(scaleDelta) {
	            this.scale *= scaleDelta;
	            this.refresh();
	        },

	        translate: function(coordinates) {
	            this.x += coordinates.x;
	            this.y += coordinates.y;
	            this.refresh();
	        },

	        moveAxis: function(axis, value) {
	            this[axis] = value;
	            this.refresh();
	        },

	        moveTo: function(coordinates) {
	            extend(this, coordinates);
	            this.refresh();
	        },

	        refresh: function() {
	            var that = this,
	                x = that.x,
	                y = that.y,
	                newCoordinates;

	            if (that.round) {
	                x = Math.round(x);
	                y = Math.round(y);
	            }

	            newCoordinates = translate(x, y, that.scale);

	            if (newCoordinates != that.coordinates) {
	                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
	                    that.element[0].style.position = "absolute";
	                    that.element[0].style.left = that.x + "px";
	                    that.element[0].style.top = that.y + "px";

	                } else {
	                    that.element[0].style[TRANSFORM_STYLE] = newCoordinates;
	                }
	                that._saveCoordinates(newCoordinates);
	                that.trigger(CHANGE);
	            }
	        },

	        _saveCoordinates: function(coordinates) {
	            this.coordinates = coordinates;
	        }
	    });

	    function destroyDroppable(collection, widget) {
	        var groupName = widget.options.group,
	        droppables = collection[groupName],
	        i;

	        Widget.fn.destroy.call(widget);

	        if (droppables.length > 1) {
	            for (i = 0; i < droppables.length; i++) {
	                if (droppables[i] == widget) {
	                    droppables.splice(i, 1);
	                    break;
	                }
	            }
	        } else {
	            droppables.length = 0; // WTF, porting this from the previous destroyGroup
	            delete collection[groupName];
	        }
	    }

	    var DropTarget = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            var group = that.options.group;

	            if (!(group in dropTargets)) {
	                dropTargets[group] = [ that ];
	            } else {
	                dropTargets[group].push( that );
	            }
	        },

	        events: [
	            DRAGENTER,
	            DRAGLEAVE,
	            DROP
	        ],

	        options: {
	            name: "DropTarget",
	            group: "default"
	        },

	        destroy: function() {
	            destroyDroppable(dropTargets, this);
	        },

	        _trigger: function(eventName, e) {
	            var that = this,
	                draggable = draggables[that.options.group];

	            if (draggable) {
	                return that.trigger(eventName, extend({}, e.event, {
	                           draggable: draggable,
	                           dropTarget: e.dropTarget
	                       }));
	            }
	        },

	        _over: function(e) {
	            this._trigger(DRAGENTER, e);
	        },

	        _out: function(e) {
	            this._trigger(DRAGLEAVE, e);
	        },

	        _drop: function(e) {
	            var that = this,
	                draggable = draggables[that.options.group];

	            if (draggable) {
	                draggable.dropped = !that._trigger(DROP, e);
	            }
	        }
	    });

	    DropTarget.destroyGroup = function(groupName) {
	        var group = dropTargets[groupName] || dropAreas[groupName],
	            i;

	        if (group) {
	            for (i = 0; i < group.length; i++) {
	                Widget.fn.destroy.call(group[i]);
	            }

	            group.length = 0;
	            delete dropTargets[groupName];
	            delete dropAreas[groupName];
	        }
	    };

	    DropTarget._cache = dropTargets;

	    var DropTargetArea = DropTarget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            var group = that.options.group;

	            if (!(group in dropAreas)) {
	                dropAreas[group] = [ that ];
	            } else {
	                dropAreas[group].push( that );
	            }
	        },

	        destroy: function() {
	            destroyDroppable(dropAreas, this);
	        },

	        options: {
	            name: "DropTargetArea",
	            group: "default",
	            filter: null
	        }
	    });

	    var Draggable = Widget.extend({
	        init: function (element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            that._activated = false;

	            that.userEvents = new UserEvents(that.element, {
	                global: true,
	                allowSelection: true,
	                filter: that.options.filter,
	                threshold: that.options.distance,
	                start: proxy(that._start, that),
	                hold: proxy(that._hold, that),
	                move: proxy(that._drag, that),
	                end: proxy(that._end, that),
	                cancel: proxy(that._cancel, that),
	                select: proxy(that._select, that)
	            });

	            that._afterEndHandler = proxy(that._afterEnd, that);
	            that._captureEscape = proxy(that._captureEscape, that);
	        },

	        events: [
	            HOLD,
	            DRAGSTART,
	            DRAG,
	            DRAGEND,
	            DRAGCANCEL,
	            HINTDESTROYED
	        ],

	        options: {
	            name: "Draggable",
	            distance: ( kendo.support.touch ? 0 : 5),
	            group: "default",
	            cursorOffset: null,
	            axis: null,
	            container: null,
	            filter: null,
	            ignore: null,
	            holdToDrag: false,
	            autoScroll: false,
	            dropped: false
	        },

	        cancelHold: function() {
	            this._activated = false;
	        },

	        _captureEscape: function(e) {
	            var that = this;

	            if (e.keyCode === kendo.keys.ESC) {
	                that._trigger(DRAGCANCEL, { event: e });
	                that.userEvents.cancel();
	            }
	        },

	        _updateHint: function(e) {
	            var that = this,
	                coordinates,
	                options = that.options,
	                boundaries = that.boundaries,
	                axis = options.axis,
	                cursorOffset = that.options.cursorOffset;

	            if (cursorOffset) {
	               coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };
	            } else {
	                that.hintOffset.left += e.x.delta;
	                that.hintOffset.top += e.y.delta;
	                coordinates = $.extend({}, that.hintOffset);
	            }

	            if (boundaries) {
	                coordinates.top = within(coordinates.top, boundaries.y);
	                coordinates.left = within(coordinates.left, boundaries.x);
	            }

	            if (axis === "x") {
	                delete coordinates.top;
	            } else if (axis === "y") {
	                delete coordinates.left;
	            }

	            that.hint.css(coordinates);
	        },

	        _shouldIgnoreTarget: function(target) {
	            var ignoreSelector = this.options.ignore;
	            return ignoreSelector && $(target).is(ignoreSelector);
	        },

	        _select: function(e) {
	            if (!this._shouldIgnoreTarget(e.event.target)) {
	                e.preventDefault();
	            }
	        },

	        _start: function(e) {
	            var that = this,
	                options = that.options,
	                container = options.container,
	                hint = options.hint;

	            if (this._shouldIgnoreTarget(e.touch.initialTouch) || (options.holdToDrag && !that._activated)) {
	                that.userEvents.cancel();
	                return;
	            }

	            that.currentTarget = e.target;
	            that.currentTargetOffset = getOffset(that.currentTarget);

	            if (hint) {
	                if (that.hint) {
	                    that.hint.stop(true, true).remove();
	                }

	                that.hint = kendo.isFunction(hint) ? $(hint.call(that, that.currentTarget)) : hint;

	                var offset = getOffset(that.currentTarget);
	                that.hintOffset = offset;

	                that.hint.css( {
	                    position: "absolute",
	                    zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking
	                    left: offset.left,
	                    top: offset.top
	                })
	                .appendTo(document.body);

	                that.angular("compile", function(){
	                    that.hint.removeAttr("ng-repeat");
	                    var scopeTarget = $(e.target);

	                    while (!scopeTarget.data("$$kendoScope") && scopeTarget.length) {
	                        scopeTarget = scopeTarget.parent();
	                    }

	                    return {
	                        elements: that.hint.get(),
	                        scopeFrom: scopeTarget.data("$$kendoScope")
	                    };
	                });
	            }

	            draggables[options.group] = that;

	            that.dropped = false;

	            if (container) {
	                that.boundaries = containerBoundaries(container, that.hint);
	            }

	            $(document).on(KEYUP, that._captureEscape);

	            if (that._trigger(DRAGSTART, e)) {
	                that.userEvents.cancel();
	                that._afterEnd();
	            }

	            that.userEvents.capture();
	        },

	        _hold: function(e) {
	            this.currentTarget = e.target;

	            if (this._trigger(HOLD, e)) {
	                this.userEvents.cancel();
	            } else {
	                this._activated = true;
	            }
	        },

	        _drag: function(e) {
	            e.preventDefault();

	            var cursorElement = this._elementUnderCursor(e);

	            if (this.options.autoScroll && this._cursorElement !== cursorElement) {
	                this._scrollableParent = findScrollableParent(cursorElement);
	                this._cursorElement = cursorElement;
	            }

	            this._lastEvent = e;
	            this._processMovement(e, cursorElement);

	            if (this.options.autoScroll) {
	                // chrome seems to trigger mousemove when mouse is moved outside of the window (over the Chrome), too.
	                if (this._scrollableParent[0]) {
	                    var velocity = autoScrollVelocity(e.x.location, e.y.location, scrollableViewPort(this._scrollableParent));


	                    this._scrollCompenstation = $.extend({}, this.hintOffset);
	                    this._scrollVelocity = velocity;

	                    if (velocity.y === 0 && velocity.x === 0) {
	                        clearInterval(this._scrollInterval);
	                        this._scrollInterval = null;
	                    } else if(!this._scrollInterval) {
	                        this._scrollInterval = setInterval($.proxy(this, "_autoScroll"), 50);
	                    }
	                }
	            }

	            if (this.hint) {
	                this._updateHint(e);
	            }
	        },

	        _processMovement: function(e, cursorElement) {
	            this._withDropTarget(cursorElement, function(target, targetElement) {
	                if (!target) {
	                    if (lastDropTarget) {
	                        lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
	                        lastDropTarget = null;
	                    }
	                    return;
	                }

	                if (lastDropTarget) {
	                    if (targetElement === lastDropTarget.targetElement) {
	                        return;
	                    }

	                    lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
	                }

	                target._trigger(DRAGENTER, extend(e, { dropTarget: $(targetElement) }));
	                lastDropTarget = extend(target, { targetElement: targetElement });
	            });

	            this._trigger(DRAG, extend(e, { dropTarget: lastDropTarget, elementUnderCursor: cursorElement }));
	        },

	        _autoScroll: function() {
	            var parent = this._scrollableParent[0],
	                velocity = this._scrollVelocity,
	                compensation = this._scrollCompenstation;

	            if (!parent) {
	                return;
	            }

	            var cursorElement = this._elementUnderCursor(this._lastEvent);
	            this._processMovement(this._lastEvent, cursorElement);

	            var yIsScrollable, xIsScrollable;

	            var isRootNode = parent === scrollableRoot()[0];

	            if (isRootNode) {
	                yIsScrollable = document.body.scrollHeight > $window.height();
	                xIsScrollable = document.body.scrollWidth > $window.width();
	            } else {
	                yIsScrollable = parent.offsetHeight <= parent.scrollHeight;
	                xIsScrollable = parent.offsetWidth <= parent.scrollWidth;
	            }

	            var yDelta = parent.scrollTop + velocity.y;
	            var yInBounds = yIsScrollable && yDelta > 0 && yDelta < parent.scrollHeight;

	            var xDelta = parent.scrollLeft + velocity.x;
	            var xInBounds = xIsScrollable && xDelta > 0 && xDelta < parent.scrollWidth;

	            if (yInBounds) {
	                parent.scrollTop += velocity.y;
	            }

	            if (xInBounds) {
	                parent.scrollLeft += velocity.x;
	            }

	            if (isRootNode && (xInBounds || yInBounds)) {
	                if (yInBounds) {
	                    compensation.top += velocity.y;
	                }

	                if (xInBounds) {
	                    compensation.left += velocity.x;
	                }

	                this.hint.css(compensation);
	            }
	        },

	        _end: function(e) {
	            this._withDropTarget(this._elementUnderCursor(e), function(target, targetElement) {
	                if (target) {
	                    target._drop(extend({}, e, { dropTarget: $(targetElement) }));
	                    lastDropTarget = null;
	                }
	            });

	            this._cancel(this._trigger(DRAGEND, e));
	        },

	        _cancel: function(isDefaultPrevented) {
	            var that = this;

	            that._scrollableParent = null;
	            this._cursorElement = null;
	            clearInterval(this._scrollInterval);
	            that._activated = false;

	            if (that.hint && !that.dropped) {
	                setTimeout(function() {
	                    that.hint.stop(true, true);

	                    if (isDefaultPrevented) {
	                        that._afterEndHandler();
	                    } else {
	                        that.hint.animate(that.currentTargetOffset, "fast", that._afterEndHandler);
	                    }
	                }, 0);

	            } else {
	                that._afterEnd();
	            }
	        },

	        _trigger: function(eventName, e) {
	            var that = this;

	            return that.trigger(
	                eventName, extend(
	                {},
	                e.event,
	                {
	                    x: e.x,
	                    y: e.y,
	                    currentTarget: that.currentTarget,
	                    initialTarget: e.touch ? e.touch.initialTouch : null,
	                    dropTarget: e.dropTarget,
	                    elementUnderCursor: e.elementUnderCursor
	                }
	            ));
	        },

	        _elementUnderCursor: function(e) {
	            var target = elementUnderCursor(e),
	                hint = this.hint;

	            if (hint && contains(hint[0], target)) {
	                hint.hide();
	                target = elementUnderCursor(e);
	                // IE8 does not return the element in iframe from first attempt
	                if (!target) {
	                    target = elementUnderCursor(e);
	                }
	                hint.show();
	            }

	            return target;
	        },

	        _withDropTarget: function(element, callback) {
	            var result,
	                group = this.options.group,
	                targets = dropTargets[group],
	                areas = dropAreas[group];

	            if (targets && targets.length || areas && areas.length) {
	                result = checkTarget(element, targets, areas);

	                if (result) {
	                    callback(result.target, result.targetElement);
	                } else {
	                    callback();
	                }
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that._afterEnd();

	            that.userEvents.destroy();

	            this._scrollableParent = null;
	            this._cursorElement = null;
	            clearInterval(this._scrollInterval);

	            that.currentTarget = null;
	        },

	        _afterEnd: function() {
	            var that = this;

	            if (that.hint) {
	                that.hint.remove();
	            }

	            delete draggables[that.options.group];

	            that.trigger("destroy");
	            that.trigger(HINTDESTROYED);
	            $(document).off(KEYUP, that._captureEscape);
	        }
	    });

	    kendo.ui.plugin(DropTarget);
	    kendo.ui.plugin(DropTargetArea);
	    kendo.ui.plugin(Draggable);
	    kendo.TapCapture = TapCapture;
	    kendo.containerBoundaries = containerBoundaries;

	    extend(kendo.ui, {
	        Pane: Pane,
	        PaneDimensions: PaneDimensions,
	        Movable: Movable
	    });

	    function scrollableViewPort(element) {
	        var root = scrollableRoot()[0],
	            offset,
	            top,
	            left;

	        if (element[0] === root) {
	            top = root.scrollTop;
	            left = root.scrollLeft;

	            return {
	                top: top,
	                left: left,
	                bottom: top + $window.height(),
	                right: left + $window.width()
	            };
	        } else {
	            offset = element.offset();
	            offset.bottom = offset.top + element.height();
	            offset.right =  offset.left + element.width();
	            return offset;
	        }
	    }

	    function scrollableRoot() {
	        return $(kendo.support.browser.chrome ? document.body : document.documentElement);
	    }

	    function findScrollableParent(element) {
	        var root = scrollableRoot();

	        if (!element || element === document.body || element === document.documentElement) {
	            return root;
	        }

	        var parent = $(element)[0];

	        while (parent && !kendo.isScrollable(parent) && parent !== document.body) {
	            parent = parent.parentNode;
	        }

	        if (parent === document.body) {
	            return root;
	        }

	        return $(parent);
	    }

	    function autoScrollVelocity(mouseX, mouseY, rect) {
	        var velocity = { x: 0, y: 0 };

	        var AUTO_SCROLL_AREA = 50;

	        if (mouseX - rect.left < AUTO_SCROLL_AREA) {
	            velocity.x = -(AUTO_SCROLL_AREA - (mouseX - rect.left));
	        } else if (rect.right - mouseX < AUTO_SCROLL_AREA) {
	            velocity.x = AUTO_SCROLL_AREA - (rect.right - mouseX);
	        }

	        if (mouseY - rect.top < AUTO_SCROLL_AREA) {
	            velocity.y = -(AUTO_SCROLL_AREA - (mouseY - rect.top));
	        } else if (rect.bottom - mouseY < AUTO_SCROLL_AREA) {
	            velocity.y = AUTO_SCROLL_AREA - (rect.bottom - mouseY);
	        }

	        return velocity;
	    }

	    // export for testing
	    kendo.ui.Draggable.utils = {
	        autoScrollVelocity: autoScrollVelocity,
	        scrollableViewPort: scrollableViewPort,
	        findScrollableParent: findScrollableParent
	    };

	 })(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 8 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.datepicker.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(672);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 672:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(673), __webpack_require__(596) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "datepicker",
	    name: "DatePicker",
	    category: "web",
	    description: "The DatePicker widget allows the user to select a date from a calendar or by direct input.",
	    depends: [ "calendar", "popup" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	    ui = kendo.ui,
	    Widget = ui.Widget,
	    parse = kendo.parseDate,
	    keys = kendo.keys,
	    template = kendo.template,
	    activeElement = kendo._activeElement,
	    DIV = "<div />",
	    SPAN = "<span />",
	    ns = ".kendoDatePicker",
	    CLICK = "click" + ns,
	    OPEN = "open",
	    CLOSE = "close",
	    CHANGE = "change",
	    DISABLED = "disabled",
	    READONLY = "readonly",
	    DEFAULT = "k-state-default",
	    FOCUSED = "k-state-focused",
	    SELECTED = "k-state-selected",
	    STATEDISABLED = "k-state-disabled",
	    HOVER = "k-state-hover",
	    HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	    MOUSEDOWN = "mousedown" + ns,
	    ID = "id",
	    MIN = "min",
	    MAX = "max",
	    MONTH = "month",
	    ARIA_DISABLED = "aria-disabled",
	    ARIA_EXPANDED = "aria-expanded",
	    ARIA_HIDDEN = "aria-hidden",
	    calendar = kendo.calendar,
	    isInRange = calendar.isInRange,
	    restrictValue = calendar.restrictValue,
	    isEqualDatePart = calendar.isEqualDatePart,
	    extend = $.extend,
	    proxy = $.proxy,
	    DATE = Date;

	    function normalize(options) {
	        var parseFormats = options.parseFormats,
	            format = options.format;

	        calendar.normalize(options);


	        parseFormats = $.isArray(parseFormats) ? parseFormats : [parseFormats];

	        if (!parseFormats.length) {
	            parseFormats.push("yyyy-MM-dd");
	        }

	        if ($.inArray(format, parseFormats) === -1) {
	            parseFormats.splice(0, 0, options.format);
	        }

	        options.parseFormats = parseFormats;
	    }

	    function preventDefault(e) {
	        e.preventDefault();
	    }

	    var DateView = function(options) {
	        var that = this, id,
	            body = document.body,
	            div = $(DIV).attr(ARIA_HIDDEN, "true")
	                        .addClass("k-calendar-container")
	                        .appendTo(body);

	        that.options = options = options || {};
	        id = options.id;

	        if (id) {
	            id += "_dateview";

	            div.attr(ID, id);
	            that._dateViewID = id;
	        }

	        that.popup = new ui.Popup(div, extend(options.popup, options, { name: "Popup", isRtl: kendo.support.isRtl(options.anchor) }));
	        that.div = div;

	        that.value(options.value);
	    };

	    DateView.prototype = {
	        _calendar: function() {
	            var that = this;
	            var calendar = that.calendar;
	            var options = that.options;
	            var div;

	            if (!calendar) {
	                div = $(DIV).attr(ID, kendo.guid())
	                            .appendTo(that.popup.element)
	                            .on(MOUSEDOWN, preventDefault)
	                            .on(CLICK, "td:has(.k-link)", proxy(that._click, that));

	                that.calendar = calendar = new ui.Calendar(div);
	                that._setOptions(options);

	                kendo.calendar.makeUnselectable(calendar.element);

	                calendar.navigate(that._value || that._current, options.start);

	                that.value(that._value);
	            }
	        },

	        _setOptions: function(options) {
	            this.calendar.setOptions({
	                focusOnNav: false,
	                change: options.change,
	                culture: options.culture,
	                dates: options.dates,
	                depth: options.depth,
	                footer: options.footer,
	                format: options.format,
	                max: options.max,
	                min: options.min,
	                month: options.month,
	                weekNumber: options.weekNumber,
	                start: options.start,
	                disableDates: options.disableDates
	            });
	        },

	        setOptions: function(options) {
	            var old = this.options;
	            var disableDates = options.disableDates;

	            if (disableDates) {
	                options.disableDates = calendar.disabled(disableDates);
	            }

	            this.options = extend(old, options, {
	                change: old.change,
	                close: old.close,
	                open: old.open
	            });

	            if (this.calendar) {
	                this._setOptions(this.options);
	            }
	        },

	        destroy: function() {
	            this.popup.destroy();
	        },

	        open: function() {
	            var that = this;

	            that._calendar();
	            that.popup.open();
	        },

	        close: function() {
	            this.popup.close();
	        },

	        min: function(value) {
	            this._option(MIN, value);
	        },

	        max: function(value) {
	            this._option(MAX, value);
	        },

	        toggle: function() {
	            var that = this;

	            that[that.popup.visible() ? CLOSE : OPEN]();
	        },

	        move: function(e) {
	            var that = this,
	                key = e.keyCode,
	                calendar = that.calendar,
	                selectIsClicked = e.ctrlKey && key == keys.DOWN || key == keys.ENTER,
	                handled = false;

	            if (e.altKey) {
	                if (key == keys.DOWN) {
	                    that.open();
	                    e.preventDefault();
	                    handled = true;
	                } else if (key == keys.UP) {
	                    that.close();
	                    e.preventDefault();
	                    handled = true;
	                }

	            } else if (that.popup.visible()) {

	                if (key == keys.ESC || (selectIsClicked && calendar._cell.hasClass(SELECTED))) {
	                    that.close();
	                    e.preventDefault();
	                    return true;
	                }

	                that._current = calendar._move(e);
	                handled = true;
	            }

	            return handled;
	        },

	        current: function(date) {
	            this._current = date;
	            this.calendar._focus(date);
	        },

	        value: function(value) {
	            var that = this,
	                calendar = that.calendar,
	                options = that.options,
	                disabledDate = options.disableDates;

	            if (disabledDate && disabledDate(value)) {
	                value = null;
	            }

	            that._value = value;
	            that._current = new DATE(+restrictValue(value, options.min, options.max));

	            if (calendar) {
	                calendar.value(value);
	            }
	        },

	        _click: function(e) {

	            if (e.currentTarget.className.indexOf(SELECTED) !== -1) {
	                this.close();
	            }
	        },

	        _option: function(option, value) {
	            var that = this;
	            var calendar = that.calendar;

	            that.options[option] = value;

	            if (calendar) {
	                calendar[option](value);
	            }
	        }
	    };

	    DateView.normalize = normalize;

	    kendo.DateView = DateView;

	    var DatePicker = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                disabled,
	                div;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;
	            options = that.options;

	            options.disableDates = kendo.calendar.disabled(options.disableDates);

	            options.min = parse(element.attr("min")) || parse(options.min);
	            options.max = parse(element.attr("max")) || parse(options.max);

	            normalize(options);

	            that._initialOptions = extend({}, options);

	            that._wrapper();

	            that.dateView = new DateView(extend({}, options, {
	                id: element.attr(ID),
	                anchor: that.wrapper,
	                change: function() {
	                    // calendar is the current scope
	                    that._change(this.value());
	                    that.close();
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, false);
	                        div.attr(ARIA_HIDDEN, true);
	                    }
	                },
	                open: function(e) {
	                    var options = that.options,
	                        date;

	                    if (that.trigger(OPEN)) {
	                        e.preventDefault();
	                    } else {
	                        if (that.element.val() !== that._oldText) {
	                            date = parse(element.val(), options.parseFormats, options.culture);

	                            that.dateView[date ? "current" : "value"](date);
	                        }

	                        element.attr(ARIA_EXPANDED, true);
	                        div.attr(ARIA_HIDDEN, false);

	                        that._updateARIA(date);

	                    }
	                }
	            }));
	            div = that.dateView.div;

	            that._icon();

	            try {
	                element[0].setAttribute("type", "text");
	            } catch(e) {
	                element[0].type = "text";
	            }

	            element
	                .addClass("k-input")
	                .attr({
	                    role: "combobox",
	                    "aria-expanded": false,
	                    "aria-owns": that.dateView._dateViewID
	                });

	            that._reset();
	            that._template();

	            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }

	            that._old = that._update(options.value || that.element.val());
	            that._oldText = element.val();

	            kendo.notify(that);
	        },
	        events: [
	        OPEN,
	        CLOSE,
	        CHANGE],
	        options: {
	            name: "DatePicker",
	            value: null,
	            footer: "",
	            format: "",
	            culture: "",
	            parseFormats: [],
	            min: new Date(1900, 0, 1),
	            max: new Date(2099, 11, 31),
	            start: MONTH,
	            depth: MONTH,
	            animation: {},
	            month : {},
	            dates: [],
	            ARIATemplate: 'Current focused date is #=kendo.toString(data.current, "D")#'
	        },

	        setOptions: function(options) {
	            var that = this;
	            var value = that._value;

	            Widget.fn.setOptions.call(that, options);

	            options = that.options;

	            options.min = parse(options.min);
	            options.max = parse(options.max);

	            normalize(options);

	            that.dateView.setOptions(options);

	            if (value) {
	                that.element.val(kendo.toString(value, options.format, options.culture));
	                that._updateARIA(value);
	            }
	        },

	        _editable: function(options) {
	            var that = this,
	                icon = that._dateIcon.off(ns),
	                element = that.element.off(ns),
	                wrapper = that._inputWrapper.off(ns),
	                readonly = options.readonly,
	                disable = options.disable;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .on("keydown" + ns, proxy(that._keydown, that))
	                       .on("focusout" + ns, proxy(that._blur, that))
	                       .on("focus" + ns, function() {
	                           that._inputWrapper.addClass(FOCUSED);
	                       });

	               icon.on(CLICK, proxy(that._click, that))
	                   .on(MOUSEDOWN, preventDefault);
	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.dateView.destroy();

	            that.element.off(ns);
	            that._dateIcon.off(ns);
	            that._inputWrapper.off(ns);

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        open: function() {
	            this.dateView.open();
	        },

	        close: function() {
	            this.dateView.close();
	        },

	        min: function(value) {
	            return this._option(MIN, value);
	        },

	        max: function(value) {
	            return this._option(MAX, value);
	        },

	        value: function(value) {
	            var that = this;

	            if (value === undefined) {
	                return that._value;
	            }

	            that._old = that._update(value);

	            if (that._old === null) {
	                that.element.val("");
	            }

	            that._oldText = that.element.val();
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _blur: function() {
	            var that = this,
	                value = that.element.val();

	            that.close();
	            if (value !== that._oldText) {
	                that._change(value);
	            }

	            that._inputWrapper.removeClass(FOCUSED);
	        },

	        _click: function() {
	            var that = this,
	                element = that.element;

	            that.dateView.toggle();

	            if (!kendo.support.touch && element[0] !== activeElement()) {
	                element.focus();
	            }
	        },

	        _change: function(value) {
	            var that = this,
	            oldValue = that.element.val(),
	            dateChanged;

	            value = that._update(value);
	            dateChanged = !kendo.calendar.isEqualDate(that._old, value);

	            var valueUpdated = dateChanged && !that._typing;
	            var textFormatted = oldValue !== that.element.val();

	            if (valueUpdated || textFormatted) {
	                that.element.trigger(CHANGE);
	            }

	            if (dateChanged) {
	                that._old = value;
	                that._oldText = that.element.val();

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _keydown: function(e) {
	            var that = this,
	                dateView = that.dateView,
	                value = that.element.val(),
	                handled = false;

	            if (!dateView.popup.visible() && e.keyCode == keys.ENTER && value !== that._oldText) {
	                that._change(value);
	            } else {
	                handled = dateView.move(e);
	                that._updateARIA(dateView._current);

	                if (!handled) {
	                    that._typing = true;
	                }
	            }
	        },

	        _icon: function() {
	            var that = this,
	                element = that.element,
	                icon;

	            icon = element.next("span.k-select");

	            if (!icon[0]) {
	                icon = $('<span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-calendar"></span></span>').insertAfter(element);
	            }

	            that._dateIcon = icon.attr({
	                "role": "button",
	                "aria-controls": that.dateView._dateViewID
	            });
	        },

	        _option: function(option, value) {
	            var that = this,
	                options = that.options;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = parse(value, options.parseFormats, options.culture);

	            if (!value) {
	                return;
	            }

	            options[option] = new DATE(+value);
	            that.dateView[option](value);
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                min = options.min,
	                max = options.max,
	                current = that._value,
	                date = parse(value, options.parseFormats, options.culture),
	                isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
	                formattedValue;

	            if (options.disableDates(date)) {
	                date = null;
	                if (!that._old && !that.element.val()) {
	                    value = null;
	                }
	            }

	            if (+date === +current && isSameType) {
	                formattedValue = kendo.toString(date, options.format, options.culture);

	                if (formattedValue !== value) {
	                    that.element.val(date === null ? value : formattedValue);
	                }

	                return date;
	            }

	            if (date !== null && isEqualDatePart(date, min)) {
	                date = restrictValue(date, min, max);
	            } else if (!isInRange(date, min, max)) {
	                date = null;
	            }

	            that._value = date;
	            that.dateView.value(date);
	            that.element.val(kendo.toString(date || value, options.format, options.culture));
	            that._updateARIA(date);

	            return date;
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper;

	            wrapper = element.parents(".k-datepicker");

	            if (!wrapper[0]) {
	                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
	                wrapper = wrapper.wrap(SPAN).parent();
	            }

	            wrapper[0].style.cssText = element[0].style.cssText;
	            element.css({
	                width: "100%",
	                height: element[0].style.height
	            });

	            that.wrapper = wrapper.addClass("k-widget k-datepicker k-header")
	                                  .addClass(element[0].className);

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    that.value(element[0].defaultValue);
	                    that.max(that._initialOptions.max);
	                    that.min(that._initialOptions.min);
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _template: function() {
	            this._ariaTemplate = template(this.options.ARIATemplate);
	        },

	        _updateARIA: function(date) {
	            var cell;
	            var that = this;
	            var calendar = that.dateView.calendar;

	            that.element.removeAttr("aria-activedescendant");

	            if (calendar) {
	                cell = calendar._cell;
	                cell.attr("aria-label", that._ariaTemplate({ current: date || calendar.current() }));

	                that.element.attr("aria-activedescendant", cell.attr("id"));
	            }
	        }
	    });

	    ui.plugin(DatePicker);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 673:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.calendar */ 115);

/***/ }

/******/ });

/***/ }),
/* 9 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.scroller.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(792);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 614:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.fx */ 30);

/***/ },

/***/ 619:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.draganddrop */ 7);

/***/ },

/***/ 792:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(614), __webpack_require__(619) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.scroller",
	    name: "Scroller",
	    category: "mobile",
	    description: "The Kendo Mobile Scroller widget enables touch friendly kinetic scrolling for the contents of a given DOM element.",
	    depends: [ "fx", "draganddrop" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        fx = kendo.effects,
	        ui = mobile.ui,
	        proxy = $.proxy,
	        extend = $.extend,
	        Widget = ui.Widget,
	        Class = kendo.Class,
	        Movable = kendo.ui.Movable,
	        Pane = kendo.ui.Pane,
	        PaneDimensions = kendo.ui.PaneDimensions,
	        Transition = fx.Transition,
	        Animation = fx.Animation,
	        abs = Math.abs,
	        SNAPBACK_DURATION = 500,
	        SCROLLBAR_OPACITY = 0.7,
	        FRICTION = 0.96,
	        VELOCITY_MULTIPLIER = 10,
	        MAX_VELOCITY = 55,
	        OUT_OF_BOUNDS_FRICTION = 0.5,
	        ANIMATED_SCROLLER_PRECISION = 5,
	        RELEASECLASS = "km-scroller-release",
	        REFRESHCLASS = "km-scroller-refresh",
	        PULL = "pull",
	        CHANGE = "change",
	        RESIZE = "resize",
	        SCROLL = "scroll",
	        MOUSE_WHEEL_ID = 2;

	    var ZoomSnapBack = Animation.extend({
	        init: function(options) {
	            var that = this;
	            Animation.fn.init.call(that);
	            extend(that, options);

	            that.userEvents.bind("gestureend", proxy(that.start, that));
	            that.tapCapture.bind("press", proxy(that.cancel, that));
	        },

	        enabled: function() {
	          return this.movable.scale < this.dimensions.minScale;
	        },

	        done: function() {
	            return this.dimensions.minScale - this.movable.scale < 0.01;
	        },

	        tick: function() {
	            var movable = this.movable;
	            movable.scaleWith(1.1);
	            this.dimensions.rescale(movable.scale);
	        },

	        onEnd: function() {
	            var movable = this.movable;
	            movable.scaleTo(this.dimensions.minScale);
	            this.dimensions.rescale(movable.scale);
	        }
	    });

	    var DragInertia = Animation.extend({
	        init: function(options) {
	            var that = this;

	            Animation.fn.init.call(that);

	            extend(that, options, {
	                transition: new Transition({
	                    axis: options.axis,
	                    movable: options.movable,
	                    onEnd: function() { that._end(); }
	                })
	            });

	            that.tapCapture.bind("press", function() { that.cancel(); });
	            that.userEvents.bind("end", proxy(that.start, that));
	            that.userEvents.bind("gestureend", proxy(that.start, that));
	            that.userEvents.bind("tap", proxy(that.onEnd, that));
	        },

	        onCancel: function() {
	            this.transition.cancel();
	        },

	        freeze: function(location) {
	            var that = this;
	            that.cancel();
	            that._moveTo(location);
	        },

	        onEnd: function() {
	            var that = this;
	            if (that.paneAxis.outOfBounds()) {
	                that._snapBack();
	            } else {
	                that._end();
	            }
	        },

	        done: function() {
	            return abs(this.velocity) < 1;
	        },

	        start: function(e) {
	            var that = this,
	                velocity;

	            if (!that.dimension.enabled) { return; }


	            if (that.paneAxis.outOfBounds()) {
	                that._snapBack();
	            } else {
	                velocity = e.touch.id === MOUSE_WHEEL_ID ? 0 : e.touch[that.axis].velocity;
	                that.velocity = Math.max(Math.min(velocity * that.velocityMultiplier, MAX_VELOCITY), -MAX_VELOCITY);

	                that.tapCapture.captureNext();
	                Animation.fn.start.call(that);
	            }
	        },

	        tick: function() {
	            var that = this,
	                dimension = that.dimension,
	                friction = that.paneAxis.outOfBounds() ? OUT_OF_BOUNDS_FRICTION : that.friction,
	                delta = (that.velocity *= friction),
	                location = that.movable[that.axis] + delta;

	                if (!that.elastic && dimension.outOfBounds(location)) {
	                    location = Math.max(Math.min(location, dimension.max), dimension.min);
	                    that.velocity = 0;
	                }

	            that.movable.moveAxis(that.axis, location);
	        },

	        _end: function() {
	            this.tapCapture.cancelCapture();
	            this.end();
	        },

	        _snapBack: function() {
	            var that = this,
	                dimension = that.dimension,
	                snapBack = that.movable[that.axis] > dimension.max ? dimension.max : dimension.min;
	            that._moveTo(snapBack);
	        },

	        _moveTo: function(location) {
	            this.transition.moveTo({ location: location, duration: SNAPBACK_DURATION, ease: Transition.easeOutExpo });
	        }
	    });

	    var AnimatedScroller = Animation.extend({
	        init: function(options) {
	            var that = this;

	            kendo.effects.Animation.fn.init.call(this);

	            extend(that, options, {
	                origin: {},
	                destination: {},
	                offset: {}
	            });
	        },

	        tick: function() {
	            this._updateCoordinates();
	            this.moveTo(this.origin);
	        },

	        done: function() {
	            return abs(this.offset.y) < ANIMATED_SCROLLER_PRECISION && abs(this.offset.x) < ANIMATED_SCROLLER_PRECISION;
	        },

	        onEnd: function() {
	            this.moveTo(this.destination);
	            if (this.callback) {
	                this.callback.call();
	            }
	        },

	        setCoordinates: function(from, to) {
	            this.offset = {};
	            this.origin = from;
	            this.destination = to;
	        },

	        setCallback: function(callback) {
	            if (callback && kendo.isFunction(callback)) {
	                this.callback = callback;
	            } else {
	                callback = undefined;
	            }
	        },

	        _updateCoordinates: function() {
	            this.offset = {
	                x: (this.destination.x - this.origin.x) / 4,
	                y: (this.destination.y - this.origin.y) / 4
	            };

	            this.origin = {
	                y: this.origin.y + this.offset.y,
	                x: this.origin.x + this.offset.x
	            };
	        }
	    });

	    var ScrollBar = Class.extend({
	        init: function(options) {
	            var that = this,
	                horizontal = options.axis === "x",
	                element = $('<div class="km-touch-scrollbar km-' + (horizontal ? "horizontal" : "vertical") + '-scrollbar" />');

	            extend(that, options, {
	                element: element,
	                elementSize: 0,
	                movable: new Movable(element),
	                scrollMovable: options.movable,
	                alwaysVisible: options.alwaysVisible,
	                size: horizontal ? "width" : "height"
	            });

	            that.scrollMovable.bind(CHANGE, proxy(that.refresh, that));
	            that.container.append(element);
	            if (options.alwaysVisible) {
	                that.show();
	            }
	        },

	        refresh: function() {
	            var that = this,
	                axis = that.axis,
	                dimension = that.dimension,
	                paneSize = dimension.size,
	                scrollMovable = that.scrollMovable,
	                sizeRatio = paneSize / dimension.total,
	                position = Math.round(-scrollMovable[axis] * sizeRatio),
	                size = Math.round(paneSize * sizeRatio);

	                if (sizeRatio >= 1) {
	                    this.element.css("display", "none");
	                } else {
	                    this.element.css("display", "");
	                }

	                if (position + size > paneSize) {
	                    size = paneSize - position;
	                } else if (position < 0) {
	                    size += position;
	                    position = 0;
	                }

	            if (that.elementSize != size) {
	                that.element.css(that.size, size + "px");
	                that.elementSize = size;
	            }

	            that.movable.moveAxis(axis, position);
	        },

	        show: function() {
	            this.element.css({opacity: SCROLLBAR_OPACITY, visibility: "visible"});
	        },

	        hide: function() {
	            if (!this.alwaysVisible) {
	                this.element.css({opacity: 0});
	            }
	        }
	    });

	    var Scroller = Widget.extend({
	        init: function(element, options) {
	            var that = this;
	            Widget.fn.init.call(that, element, options);

	            element = that.element;

	            that._native = that.options.useNative && kendo.support.hasNativeScrolling;
	            if (that._native) {
	                element.addClass("km-native-scroller")
	                    .prepend('<div class="km-scroll-header"/>');

	                extend(that, {
	                    scrollElement: element,
	                    fixedContainer: element.children().first()
	                });

	                return;
	            }

	            element
	                .css("overflow", "hidden")
	                .addClass("km-scroll-wrapper")
	                .wrapInner('<div class="km-scroll-container"/>')
	                .prepend('<div class="km-scroll-header"/>');

	            var inner = element.children().eq(1),

	                tapCapture = new kendo.TapCapture(element),

	                movable = new Movable(inner),

	                dimensions = new PaneDimensions({
	                    element: inner,
	                    container: element,
	                    forcedEnabled: that.options.zoom
	                }),

	                avoidScrolling = this.options.avoidScrolling,

	                userEvents = new kendo.UserEvents(element, {
	                    touchAction: "pan-y",
	                    fastTap: true,
	                    allowSelection: true,
	                    preventDragEvent: true,
	                    captureUpIfMoved: true,
	                    multiTouch: that.options.zoom,
	                    start: function(e) {
	                        dimensions.refresh();

	                        var velocityX = abs(e.x.velocity),
	                            velocityY = abs(e.y.velocity),
	                            horizontalSwipe  = velocityX * 2 >= velocityY,
	                            originatedFromFixedContainer = $.contains(that.fixedContainer[0], e.event.target),
	                            verticalSwipe = velocityY * 2 >= velocityX;


	                        if (!originatedFromFixedContainer && !avoidScrolling(e) && that.enabled && (dimensions.x.enabled && horizontalSwipe || dimensions.y.enabled && verticalSwipe)) {
	                            userEvents.capture();
	                        } else {
	                            userEvents.cancel();
	                        }
	                    }
	                }),

	                pane = new Pane({
	                    movable: movable,
	                    dimensions: dimensions,
	                    userEvents: userEvents,
	                    elastic: that.options.elastic
	                }),

	                zoomSnapBack = new ZoomSnapBack({
	                    movable: movable,
	                    dimensions: dimensions,
	                    userEvents: userEvents,
	                    tapCapture: tapCapture
	                }),

	                animatedScroller = new AnimatedScroller({
	                    moveTo: function(coordinates) {
	                        that.scrollTo(coordinates.x, coordinates.y);
	                    }
	                });

	            movable.bind(CHANGE, function() {
	                that.scrollTop = - movable.y;
	                that.scrollLeft = - movable.x;

	                that.trigger(SCROLL, {
	                    scrollTop: that.scrollTop,
	                    scrollLeft: that.scrollLeft
	                });
	            });

	            if (that.options.mousewheelScrolling) {
	                element.on("DOMMouseScroll mousewheel",  proxy(this, "_wheelScroll"));
	            }

	            extend(that, {
	                movable: movable,
	                dimensions: dimensions,
	                zoomSnapBack: zoomSnapBack,
	                animatedScroller: animatedScroller,
	                userEvents: userEvents,
	                pane: pane,
	                tapCapture: tapCapture,
	                pulled: false,
	                enabled: true,
	                scrollElement: inner,
	                scrollTop: 0,
	                scrollLeft: 0,
	                fixedContainer: element.children().first()
	            });

	            that._initAxis("x");
	            that._initAxis("y");

	            // build closure
	            that._wheelEnd = function() {
	                that._wheel = false;
	                that.userEvents.end(0, that._wheelY);
	            };

	            dimensions.refresh();

	            if (that.options.pullToRefresh) {
	                that._initPullToRefresh();
	            }
	        },

	        _wheelScroll: function(e) {
	            if (!this._wheel) {
	                this._wheel = true;
	                this._wheelY = 0;
	                this.userEvents.press(0, this._wheelY);
	            }

	            clearTimeout(this._wheelTimeout);
	            this._wheelTimeout = setTimeout(this._wheelEnd, 50);

	            var delta = kendo.wheelDeltaY(e);

	            if (delta) {
	                this._wheelY += delta;
	                this.userEvents.move(0, this._wheelY);
	            }

	            e.preventDefault();
	        },

	        makeVirtual: function() {
	            this.dimensions.y.makeVirtual();
	        },

	        virtualSize: function(min, max) {
	            this.dimensions.y.virtualSize(min, max);
	        },

	        height: function() {
	            return this.dimensions.y.size;
	        },

	        scrollHeight: function() {
	            return this.scrollElement[0].scrollHeight;
	        },

	        scrollWidth: function() {
	            return this.scrollElement[0].scrollWidth;
	        },

	        options: {
	            name: "Scroller",
	            zoom: false,
	            pullOffset: 140,
	            visibleScrollHints: false,
	            elastic: true,
	            useNative: false,
	            mousewheelScrolling: true,
	            avoidScrolling: function() { return false; },
	            pullToRefresh: false,
	            messages: {
	                pullTemplate: "Pull to refresh",
	                releaseTemplate: "Release to refresh",
	                refreshTemplate: "Refreshing"
	            }
	        },

	        events: [
	            PULL,
	            SCROLL,
	            RESIZE
	        ],

	        _resize: function() {
	            if (!this._native) {
	                this.contentResized();
	            }
	        },

	        setOptions: function(options) {
	            var that = this;
	            Widget.fn.setOptions.call(that, options);
	            if (options.pullToRefresh) {
	                that._initPullToRefresh();
	            }
	        },

	        reset: function() {
	            if (this._native) {
	                this.scrollElement.scrollTop(0);
	            } else {
	                this.movable.moveTo({x: 0, y: 0});
	                this._scale(1);
	            }
	        },

	        contentResized: function() {
	            this.dimensions.refresh();
	            if (this.pane.x.outOfBounds()) {
	                this.movable.moveAxis("x", this.dimensions.x.min);
	            }

	            if (this.pane.y.outOfBounds()) {
	                this.movable.moveAxis("y", this.dimensions.y.min);
	            }
	        },

	        zoomOut: function() {
	            var dimensions = this.dimensions;
	            dimensions.refresh();
	            this._scale(dimensions.fitScale);
	            this.movable.moveTo(dimensions.centerCoordinates());
	        },

	        enable: function() {
	            this.enabled = true;
	        },

	        disable: function() {
	            this.enabled = false;
	        },

	        scrollTo: function(x, y) {
	            if (this._native) {
	                this.scrollElement.scrollLeft(abs(x));
	                this.scrollElement.scrollTop(abs(y));
	            } else {
	                this.dimensions.refresh();
	                this.movable.moveTo({x: x, y: y});
	            }
	        },

	        animatedScrollTo: function(x, y, callback) {
	            var from,
	                to;

	            if(this._native) {
	                this.scrollTo(x, y);
	            } else {
	                from = { x: this.movable.x, y: this.movable.y };
	                to = { x: x, y: y };

	                this.animatedScroller.setCoordinates(from, to);
	                this.animatedScroller.setCallback(callback);
	                this.animatedScroller.start();
	            }
	        },

	        pullHandled: function() {
	            var that = this;
	            that.refreshHint.removeClass(REFRESHCLASS);
	            that.hintContainer.html(that.pullTemplate({}));
	            that.yinertia.onEnd();
	            that.xinertia.onEnd();
	            that.userEvents.cancel();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            if (this.userEvents) {
	                this.userEvents.destroy();
	            }
	        },

	        _scale: function(scale) {
	            this.dimensions.rescale(scale);
	            this.movable.scaleTo(scale);
	        },

	        _initPullToRefresh: function() {
	            var that = this;

	            that.dimensions.y.forceEnabled();
	            that.pullTemplate = kendo.template(that.options.messages.pullTemplate);
	            that.releaseTemplate = kendo.template(that.options.messages.releaseTemplate);
	            that.refreshTemplate = kendo.template(that.options.messages.refreshTemplate);

	            that.scrollElement.prepend('<span class="km-scroller-pull"><span class="km-icon"></span><span class="km-loading-left"></span><span class="km-loading-right"></span><span class="km-template">' + that.pullTemplate({}) + '</span></span>');
	            that.refreshHint = that.scrollElement.children().first();
	            that.hintContainer = that.refreshHint.children(".km-template");

	            that.pane.y.bind("change", proxy(that._paneChange, that));
	            that.userEvents.bind("end", proxy(that._dragEnd, that));
	        },

	        _dragEnd: function() {
	            var that = this;

	            if(!that.pulled) {
	                return;
	            }

	            that.pulled = false;
	            that.refreshHint.removeClass(RELEASECLASS).addClass(REFRESHCLASS);
	            that.hintContainer.html(that.refreshTemplate({}));
	            that.yinertia.freeze(that.options.pullOffset / 2);
	            that.trigger("pull");
	        },

	        _paneChange: function() {
	            var that = this;

	            if (that.movable.y / OUT_OF_BOUNDS_FRICTION > that.options.pullOffset) {
	                if (!that.pulled) {
	                    that.pulled = true;
	                    that.refreshHint.removeClass(REFRESHCLASS).addClass(RELEASECLASS);
	                    that.hintContainer.html(that.releaseTemplate({}));
	                }
	            } else if (that.pulled) {
	                that.pulled = false;
	                that.refreshHint.removeClass(RELEASECLASS);
	                that.hintContainer.html(that.pullTemplate({}));
	            }
	        },

	        _initAxis: function(axis) {
	            var that = this,
	                movable = that.movable,
	                dimension = that.dimensions[axis],
	                tapCapture = that.tapCapture,
	                paneAxis = that.pane[axis],
	                scrollBar = new ScrollBar({
	                    axis: axis,
	                    movable: movable,
	                    dimension: dimension,
	                    container: that.element,
	                    alwaysVisible: that.options.visibleScrollHints
	                });

	            dimension.bind(CHANGE, function() {
	                scrollBar.refresh();
	            });

	            paneAxis.bind(CHANGE, function() {
	                scrollBar.show();
	            });

	            that[axis + "inertia"] = new DragInertia({
	                axis: axis,
	                paneAxis: paneAxis,
	                movable: movable,
	                tapCapture: tapCapture,
	                userEvents: that.userEvents,
	                dimension: dimension,
	                elastic: that.options.elastic,
	                friction: that.options.friction || FRICTION,
	                velocityMultiplier: that.options.velocityMultiplier || VELOCITY_MULTIPLIER,
	                end: function() {
	                    scrollBar.hide();
	                    that.trigger("scrollEnd", {
	                        axis: axis,
	                        scrollTop: that.scrollTop,
	                        scrollLeft: that.scrollLeft
	                    });
	                }
	            });
	        }
	    });

	    ui.plugin(Scroller);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 10 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.view.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(831);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 831:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "scheduler.view",
	    name: "Scheduler View",
	    category: "web",
	    description: "The Scheduler Common View",
	    depends: [ "core" ],
	    hidden: true
	};
	    kendo.ui.scheduler = {};
	/* jshint eqnull: true */
	(function($) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        outerHeight = kendo._outerHeight,
	        keys = kendo.keys,
	        NS = ".kendoSchedulerView",
	        math = Math;

	    function levels(values, key) {
	        var result = [];

	        function collect(depth, values) {
	            values = values[key];

	            if (values) {
	                var level = result[depth] = result[depth] || [];

	                for (var idx = 0; idx < values.length; idx++) {
	                    level.push(values[idx]);
	                    collect(depth + 1, values[idx]);
	                }
	            }
	        }

	        collect(0, values);

	        return result;
	    }

	    function cellspacing() {
	        if (kendo.support.cssBorderSpacing) {
	            return "";
	        }

	        return 'cellspacing="0"';
	    }

	    function table(tableRows, className) {
	        if (!tableRows.length) {
	            return "";
	        }

	        return '<table ' + cellspacing() + ' class="' + $.trim('k-scheduler-table ' + (className || "")) + '">' +
	               '<tr>' +
	                    tableRows.join("</tr><tr>") +
	               '</tr>' +
	               '</table>';
	    }

	    function allDayTable(tableRows, className) {
	        if (!tableRows.length) {
	            return "";
	        }

	        return "<div style='position:relative'>" + table(tableRows, className) + "</div>";
	    }

	    function timesHeader(columnLevelCount, allDaySlot, rowCount) {
	        var tableRows = [];

	        if (rowCount > 0) {
	            for (var idx = 0; idx < columnLevelCount; idx++) {
	                tableRows.push("<th>&nbsp;</th>");
	            }
	        }

	        if (allDaySlot) {
	            tableRows.push('<th class="k-scheduler-times-all-day">' + allDaySlot.text + '</th>');
	        }

	        if (rowCount < 1) {
	           return $();
	        }

	        return $('<div class="k-scheduler-times">' + table(tableRows) + '</div>');
	    }

	    function datesHeader(columnLevels, columnCount, allDaySlot) {
	        var dateTableRows = [];
	        var columnIndex;

	        for (var columnLevelIndex = 0; columnLevelIndex < columnLevels.length; columnLevelIndex++) {
	            var level = columnLevels[columnLevelIndex];
	            var th = [];
	            var colspan = columnCount / level.length;

	            for (columnIndex = 0; columnIndex < level.length; columnIndex ++) {
	                var column = level[columnIndex];

	                th.push('<th colspan="' + (column.colspan || colspan) + '" class="' + (column.className || "")  + '">' + column.text + "</th>");
	            }

	            dateTableRows.push(th.join(""));
	        }

	        var allDayTableRows = [];

	        if (allDaySlot) {
	            var lastLevel = columnLevels[columnLevels.length - 1];
	            var td = [];
	            var cellContent = allDaySlot.cellContent;

	            for (columnIndex = 0; columnIndex < lastLevel.length; columnIndex++) {
	                td.push('<td class="' + (lastLevel[columnIndex].className || "")  + '">' + (cellContent ? cellContent(columnIndex) : '&nbsp;') + '</td>');
	            }

	            allDayTableRows.push(td.join(""));
	        }

	        return $(
	            '<div class="k-scheduler-header k-state-default">' +
	                '<div class="k-scheduler-header-wrap">' +
	                    table(dateTableRows) +
	                    allDayTable(allDayTableRows, "k-scheduler-header-all-day") +
	                '</div>' +
	            '</div>'
	        );
	    }

	    function times(rowLevels, rowCount) {
	        var rows = new Array(rowCount).join().split(",");
	        var rowHeaderRows = [];
	        var rowIndex;

	        for (var rowLevelIndex = 0; rowLevelIndex < rowLevels.length; rowLevelIndex++) {
	            var level = rowLevels[rowLevelIndex];
	            var rowspan = rowCount / level.length;
	            var className;

	            for (rowIndex = 0; rowIndex < level.length; rowIndex++) {
	                className = level[rowIndex].className || "";

	                if (level[rowIndex].allDay) {
	                    className = "k-scheduler-times-all-day";
	                }

	                rows[rowspan * rowIndex] += '<th class="' + className + '" rowspan="' + rowspan + '">' + level[rowIndex].text + "</th>";
	            }
	        }

	        for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	            rowHeaderRows.push(rows[rowIndex]);
	        }

	        if (rowCount < 1) {
	            return $();
	        }

	        return $('<div class="k-scheduler-times">' + table(rowHeaderRows) + '</div>');
	    }

	    function content() {
	        return $(
	            '<div class="k-scheduler-content">' +
	                '<table ' + cellspacing() + ' class="k-scheduler-table"/>' +
	            '</div>'
	        );
	    }
	    var HINT = '<div class="k-marquee k-scheduler-marquee">' +
	                    '<div class="k-marquee-color"></div>' +
	                    '<div class="k-marquee-text">' +
	                        '<div class="k-label-top"></div>' +
	                        '<div class="k-label-bottom"></div>' +
	                    '</div>' +
	                '</div>';

	  
	    var ResourceView = kendo.Class.extend({
	        init: function(index, isRtl) {
	            this._index = index;
	            this._timeSlotCollections = [];
	            this._daySlotCollections = [];
	            this._isRtl = isRtl;
	        },

	        addTimeSlotCollection: function(startDate, endDate) {
	            return this._addCollection(startDate, endDate, this._timeSlotCollections);
	        },

	        addDaySlotCollection: function(startDate, endDate) {
	            return this._addCollection(startDate, endDate, this._daySlotCollections);
	        },

	        _addCollection: function(startDate, endDate, collections) {
	            var collection = new SlotCollection(startDate, endDate, this._index, collections.length);

	            collections.push(collection);

	            return collection;
	        },

	        timeSlotCollectionCount: function() {
	            return this._timeSlotCollections.length;
	        },

	        daySlotCollectionCount: function() {
	            return this._daySlotCollections.length;
	        },

	        daySlotByPosition: function(x, y, byDate) {
	            return this._slotByPosition(x, y, this._daySlotCollections, byDate);
	        },

	        timeSlotByPosition: function(x, y, byDate) {
	            return this._slotByPosition(x, y, this._timeSlotCollections, byDate);
	        },

	        _slotByPosition: function(x, y, collections, byDate) {
	           for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {
	               var collection = collections[collectionIndex];

	               for (var slotIndex = 0; slotIndex < collection.count(); slotIndex++) {
	                   var slot = collection.at(slotIndex);
	                   var width = slot.offsetWidth;
	                   var height = slot.offsetHeight;
	                   var nextSlot;

	                   var horizontalEnd = slot.offsetLeft + width;
	                   var verticalEnd =  slot.offsetTop + height;

	                   if (!byDate) {
	                        nextSlot =  collection.at(slotIndex + 1);
	                   }

	                   if (nextSlot) {
	                       if (nextSlot.offsetLeft != slot.offsetLeft) {
	                           if (this._isRtl) {
	                               horizontalEnd = slot.offsetLeft + (slot.offsetLeft - nextSlot.offsetLeft);
	                           } else {
	                               horizontalEnd = nextSlot.offsetLeft;
	                           }
	                       } else {
	                           verticalEnd = nextSlot.offsetTop;
	                       }
	                   }

	                   if (x >= slot.offsetLeft && x < horizontalEnd &&
	                       y >= slot.offsetTop && y < verticalEnd) {
	                       return slot;
	                   }
	               }
	           }
	        },

	        refresh: function() {
	            var collectionIndex;

	            for (collectionIndex = 0; collectionIndex < this._daySlotCollections.length; collectionIndex++) {
	                this._daySlotCollections[collectionIndex].refresh();
	            }

	            for (collectionIndex = 0; collectionIndex < this._timeSlotCollections.length; collectionIndex++) {
	                this._timeSlotCollections[collectionIndex].refresh();
	            }
	        },

	        timeSlotRanges: function(startTime, endTime) {
	            var collections = this._timeSlotCollections;

	            var start = this._startSlot(startTime, collections);

	            if (!start.inRange && startTime >= start.slot.end) {
	                start = null;
	            }

	            var end = start;

	            if (startTime < endTime) {
	                end = this._endSlot(endTime, collections);
	            }

	            if (end && !end.inRange && endTime <= end.slot.start) {
	                end = null;
	            }

	            if (start === null && end === null) {
	                return [];
	            }

	            if (start === null) {
	                start = {
	                    inRange: true,
	                    slot: collections[end.slot.collectionIndex].first()
	                };
	            }

	            if (end === null) {
	                end = {
	                    inRange: true,
	                    slot: collections[start.slot.collectionIndex].last()
	                };
	            }

	            return this._continuousRange(TimeSlotRange, collections, start, end);
	        },

	        daySlotRanges: function(startTime, endTime, isAllDay) {
	            var collections = this._daySlotCollections;

	            var start = this._startSlot(startTime, collections, isAllDay);

	            if (!start.inRange && startTime >= start.slot.end) {
	                start = null;
	            }

	            var end = start;

	            if (startTime < endTime) {
	                end = this._endSlot(endTime, collections, isAllDay);
	            }

	            if (end && !end.inRange && endTime <= end.slot.start) {
	                end = null;
	            }

	            if (start === null && end === null) {
	                return [];
	            }

	            if (start === null) {
	                do {
	                    startTime += kendo.date.MS_PER_DAY;
	                    start = this._startSlot(startTime, collections, isAllDay);
	                } while (!start.inRange && startTime >= start.slot.end);
	            }

	            if (end === null) {
	                do {
	                    endTime -= kendo.date.MS_PER_DAY;
	                    end = this._endSlot(endTime, collections, isAllDay);
	                } while (!end.inRange && endTime <= end.slot.start);
	            }

	            return this._continuousRange(DaySlotRange, collections, start, end);
	        },

	        _continuousRange: function(range, collections, start, end) {
	            var startSlot = start.slot;
	            var endSlot = end.slot;

	            var startIndex = startSlot.collectionIndex;
	            var endIndex = endSlot.collectionIndex;

	            var ranges = [];

	            for (var collectionIndex = startIndex; collectionIndex <= endIndex; collectionIndex++) {
	                var collection = collections[collectionIndex];

	                var first = collection.first();
	                var last = collection.last();
	                var head = false;
	                var tail = false;

	                if (collectionIndex == startIndex) {
	                    tail = !start.inRange;
	                }

	                if (collectionIndex == endIndex) {
	                    head = !end.inRange;
	                }

	                if (first.start < startSlot.start) {
	                    first = startSlot;
	                }

	                if (last.start > endSlot.start) {
	                    last = endSlot;
	                }

	                if (startIndex < endIndex) {
	                    if (collectionIndex == startIndex) {
	                        head = true;
	                    } else if (collectionIndex == endIndex) {
	                        tail = true;
	                    } else {
	                        head = tail = true;
	                    }
	                }

	                ranges.push(new range({
	                    start: first,
	                    end: last,
	                    collection: collection,
	                    head: head,
	                    tail: tail
	                }));
	            }

	            return ranges;
	        },

	        slotRanges: function(event, isDay) {
	            var startTime = event._startTime || kendo.date.toUtcTime(event.start);
	            var endTime = event._endTime || kendo.date.toUtcTime(event.end);

	            if (isDay === undefined) {
	                isDay = event.isMultiDay();
	            }

	            if (isDay) {
	                return this.daySlotRanges(startTime, endTime, event.isAllDay);
	            }

	            return this.timeSlotRanges(startTime, endTime);
	        },

	        ranges: function(startTime, endTime, isDay, isAllDay) {
	            if (typeof startTime != "number") {
	                startTime = kendo.date.toUtcTime(startTime);
	            }

	            if (typeof endTime != "number") {
	                endTime = kendo.date.toUtcTime(endTime);
	            }

	            if (isDay) {
	                return this.daySlotRanges(startTime, endTime, isAllDay);
	            }

	            return this.timeSlotRanges(startTime, endTime);
	        },

	        _startCollection: function(date, collections) {
	            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {
	                var collection = collections[collectionIndex];

	                if (collection.startInRange(date)) {
	                    return collection;
	                }
	            }

	            return null;
	        },

	        _endCollection: function(date, collections, isAllDay) {
	            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {
	                var collection = collections[collectionIndex];

	                if (collection.endInRange(date, isAllDay)) {
	                    return collection;
	                }
	            }

	            return null;
	        },

	        _getCollections: function(isDay) {
	            return isDay ? this._daySlotCollections : this._timeSlotCollections;
	        },

	        continuousSlot: function(slot, reverse) {
	            var pad = reverse ? -1 : 1;
	            var collections = this._getCollections(slot.isDaySlot);
	            var collection = collections[slot.collectionIndex + pad];

	            return collection ? collection[reverse ? "last" : "first"]() : undefined;
	        },

	        firstSlot: function() {
	            var collections = this._getCollections(this.daySlotCollectionCount());

	            return collections[0].first();
	        },

	        lastSlot: function() {
	            var collections = this._getCollections(this.daySlotCollectionCount());

	            return collections[collections.length - 1].last();
	        },

	        upSlot: function(slot, keepCollection, groupByDateVertically) {
	            var that = this;
	            var moveToDaySlot = function(isDaySlot, collectionIndex, index) {
	                var isFirstCell = index === 0;

	                if (!keepCollection && !isDaySlot && isFirstCell && that.daySlotCollectionCount()) {
	                    return that._daySlotCollections[0].at(collectionIndex);
	                }
	            };

	            if (!this.timeSlotCollectionCount()) {
	                keepCollection = true;
	            }

	            return this._verticalSlot(slot, -1, moveToDaySlot, groupByDateVertically);
	        },

	        downSlot: function(slot, keepCollection, groupByDateVertically) {
	            var that = this;
	            var moveToTimeSlot = function(isDaySlot, collectionIndex, index) {
	                if (!keepCollection && isDaySlot && that.timeSlotCollectionCount()) {
	                    return that._timeSlotCollections[index].at(0);
	                }
	            };

	            if (!this.timeSlotCollectionCount()) {
	                keepCollection = true;
	            }

	            return this._verticalSlot(slot, 1, moveToTimeSlot, groupByDateVertically);
	        },

	        leftSlot: function(slot, groupByDateVertically) {
	            return this._horizontalSlot(slot, -1, groupByDateVertically);
	        },

	        rightSlot: function(slot, groupByDateVertically) {
	            return this._horizontalSlot(slot, 1, groupByDateVertically);
	        },

	        _horizontalSlot: function(slot, step, groupByDateVertically) {
	            var index = slot.index;
	            var isDaySlot = slot.isDaySlot;
	            var collectionIndex = slot.collectionIndex;
	            var collections = this._getCollections(isDaySlot);

	            isDaySlot = groupByDateVertically ? false : isDaySlot;

	            if (isDaySlot) {
	                index += step;
	            } else {
	                collectionIndex += step;
	            }

	            var collection = collections[collectionIndex];

	            return collection ? collection.at(index) : undefined;
	        },

	        _verticalSlot: function(slot, step, swapCollection, groupByDateVertically) {
	            var index = slot.index;
	            var isDaySlot = slot.isDaySlot;
	            var collectionIndex = slot.collectionIndex;
	            var collections = this._getCollections(isDaySlot);

	            slot = swapCollection(isDaySlot, collectionIndex, index);
	            if (slot) {
	                return slot;
	            }

	            isDaySlot = groupByDateVertically ? false : isDaySlot;

	            if (isDaySlot) {
	                collectionIndex += step;
	            } else {
	                index += step;
	            }

	            var collection = collections[collectionIndex];

	            return collection ? collection.at(index) : undefined;
	        },

	        _collection: function(index, multiday) {
	            var collections = multiday? this._daySlotCollections : this._timeSlotCollections;

	            return collections[index];
	        },

	        _startSlot: function(time, collections, isAllDay) {
	            var collection = this._startCollection(time, collections);

	            var inRange = true;

	            if (!collection) {
	                collection = collections[0];
	                inRange = false;
	            }

	            var slot = collection.slotByStartDate(time, isAllDay);

	            if (!slot) {
	                slot = collection.first();
	                inRange = false;
	            }

	            return {
	                slot: slot,
	                inRange: inRange
	            };
	        },

	        _endSlot: function(time, collections, isAllDay) {
	            var collection = this._endCollection(time, collections, isAllDay);

	            var inRange = true;

	            if (!collection) {
	                collection = collections[collections.length - 1];
	                inRange = false;
	            }

	            var slot = collection.slotByEndDate(time, isAllDay);

	            if (!slot) {
	                slot = collection.last();
	                inRange = false;
	            }

	            return {
	                slot: slot,
	                inRange: inRange
	            };
	        },

	        getSlotCollection: function(index, isDay) {
	            return this[isDay ? "getDaySlotCollection" : "getTimeSlotCollection"](index);
	        },

	        getTimeSlotCollection: function(index) {
	            return this._timeSlotCollections[index];
	        },

	        getDaySlotCollection: function(index) {
	            return this._daySlotCollections[index];
	        }
	    });

	    var SlotRange = kendo.Class.extend({
	        init: function(options) {
	            $.extend(this, options);
	        },

	        innerHeight: function() {
	            var collection = this.collection;

	            var startIndex = this.start.index;

	            var endIndex = this.end.index;

	            var result = 0;

	            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
	               result += collection.at(slotIndex).offsetHeight;
	            }

	            return result;
	        },

	        events: function () {
	            return this.collection.events();
	        },

	        addEvent: function(event) {
	            this.events().push(event);
	        },

	        startSlot: function() {
	            if (this.start.offsetLeft > this.end.offsetLeft) {
	                return this.end;
	            }
	            return this.start;
	        },

	        endSlot: function() {
	            if (this.start.offsetLeft > this.end.offsetLeft) {
	                return this.start;
	            }
	            return this.end;
	        }
	    });

	    var TimeSlotRange = SlotRange.extend({
	        innerHeight: function() {
	            var collection = this.collection;

	            var startIndex = this.start.index;

	            var endIndex = this.end.index;

	            var result = 0;

	            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
	               result += collection.at(slotIndex).offsetHeight;
	            }

	            return result;
	        },

	        outerRect: function(start, end, snap) {
	            return this._rect("offset", start, end, snap);
	        },

	        _rect: function(property, start, end, snap) {
	            var top;
	            var bottom;
	            var left;
	            var right;
	            var startSlot = this.start;
	            var endSlot = this.end;
	            var isRtl = kendo.support.isRtl(startSlot.element);

	            if (typeof start != "number") {
	                start = kendo.date.toUtcTime(start);
	            }

	            if (typeof end != "number") {
	                end = kendo.date.toUtcTime(end);
	            }

	            if (snap) {
	                top = startSlot.offsetTop;
	                bottom = endSlot.offsetTop + endSlot[property + "Height"];
	                if(isRtl) {
	                    left = endSlot.offsetLeft;
	                    right = startSlot.offsetLeft + startSlot[property + "Width"];
	                } else {
	                    left = startSlot.offsetLeft;
	                    right = endSlot.offsetLeft + endSlot[property + "Width"];
	                }
	            } else {
	                var startOffset = start - startSlot.start;

	                if (startOffset < 0) {
	                    startOffset = 0;
	                }

	                var startSlotDuration = startSlot.end - startSlot.start;

	                top = startSlot.offsetTop + startSlot[property + "Height"] * startOffset / startSlotDuration;

	                var endOffset = endSlot.end - end;

	                if (endOffset < 0) {
	                    endOffset = 0;
	                }

	                var endSlotDuration = endSlot.end - endSlot.start;

	                bottom = endSlot.offsetTop + endSlot[property + "Height"] - endSlot[property + "Height"] * endOffset / endSlotDuration;

	                if(isRtl) {
	                    left = Math.round(endSlot.offsetLeft + endSlot[property + "Width"]* endOffset / endSlotDuration);
	                    right = Math.round(startSlot.offsetLeft + startSlot[property + "Width"] - startSlot[property + "Width"] * startOffset / startSlotDuration);
	                } else {
	                    left = Math.round(startSlot.offsetLeft + startSlot[property + "Width"] * startOffset / startSlotDuration);
	                    right = Math.round(endSlot.offsetLeft + endSlot[property + "Width"] - endSlot[property + "Width"] * endOffset / endSlotDuration);
	                }
	            }

	            return {
	                top: top,
	                bottom: bottom,
	                //first column has no left border
	                left: left === 0 ? left : left + 1,
	                right: right
	            };
	        },

	        innerRect: function(start, end, snap) {
	            return this._rect("client", start, end, snap);
	        }
	    });

	    var DaySlotRange = SlotRange.extend({
	        innerWidth: function() {
	            var collection = this.collection;

	            var startIndex = this.start.index;

	            var endIndex = this.end.index;

	            var result = 0;

	            var width = startIndex !== endIndex ? "offsetWidth" : "clientWidth";

	            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
	               result += collection.at(slotIndex)[width];
	            }

	            return result;
	        }
	    });

	    var SlotCollection = kendo.Class.extend({
	        init: function(startDate, endDate, groupIndex, collectionIndex) {
	            this._slots = [];

	            this._events = [];

	            this._start = kendo.date.toUtcTime(startDate);

	            this._end = kendo.date.toUtcTime(endDate);

	            this._groupIndex = groupIndex;

	            this._collectionIndex = collectionIndex;
	        },
	        refresh: function() {
	            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {
	                this._slots[slotIndex].refresh();
	            }
	        },

	        startInRange: function(date) {
	            return this._start <= date && date < this._end;
	        },

	        endInRange: function(date, isAllDay) {
	            var end = isAllDay ? date < this._end : date <= this._end;
	            return this._start <= date && end;
	        },

	        slotByStartDate: function(date) {
	            var time = date;

	            if (typeof time != "number") {
	                time = kendo.date.toUtcTime(date);
	            }

	            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {
	                var slot = this._slots[slotIndex];

	                if (slot.startInRange(time)) {
	                    return slot;
	                }
	            }

	            return null;
	        },

	        slotByEndDate: function(date, allday) {
	            var time = date;

	            if (typeof time != "number") {
	                time = kendo.date.toUtcTime(date);
	            }

	            if (allday) {
	                return this.slotByStartDate(date, false);
	            }

	            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {
	                var slot = this._slots[slotIndex];

	                if (slot.endInRange(time)) {
	                    return slot;
	                }
	            }

	            return null;
	        },

	        count: function() {
	            return this._slots.length;
	        },
	        events: function() {
	            return this._events;
	        },
	        addTimeSlot: function(element, start, end, isHorizontal) {
	            var slot = new TimeSlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, isHorizontal);

	            this._slots.push(slot);
	        },
	        addDaySlot: function(element, start, end, eventCount) {
	            var slot = new DaySlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, eventCount);

	            this._slots.push(slot);
	        },
	        first: function() {
	            return this._slots[0];
	        },
	        last: function() {
	            return this._slots[this._slots.length - 1];
	        },
	        at: function(index) {
	            return this._slots[index];
	        }
	    });

	    var Slot = kendo.Class.extend({
	        init: function(element, start, end, groupIndex, collectionIndex, index) {
	            this.element = element;
	            this.clientWidth = element.clientWidth;
	            this.clientHeight = element.clientHeight;
	            this.offsetWidth = element.offsetWidth;
	            this.offsetHeight = element.offsetHeight;
	            this.offsetTop = element.offsetTop;
	            this.offsetLeft = element.offsetLeft;

	            this.start = start;
	            this.end = end;
	            this.element = element;
	            this.groupIndex = groupIndex;
	            this.collectionIndex = collectionIndex;
	            this.index = index;
	            this.isDaySlot = false;
	        },

	        refresh: function() {
	            var element = this.element;

	            this.clientWidth = element.clientWidth;
	            this.clientHeight = element.clientHeight;
	            this.offsetWidth = element.offsetWidth;
	            this.offsetHeight = element.offsetHeight;
	            this.offsetTop = element.offsetTop;
	            this.offsetLeft = element.offsetLeft;
	        },

	        startDate: function() {
	            return kendo.timezone.toLocalDate(this.start);
	        },

	        endDate: function() {
	            return kendo.timezone.toLocalDate(this.end);
	        },

	        startInRange: function(date) {
	            return this.start <= date && date < this.end;
	        },

	        endInRange: function(date) {
	            return this.start < date && date <= this.end;
	        },

	        startOffset: function() {
	           return this.start;
	        },

	        endOffset: function() {
	            return this.end;
	        }
	    });

	    var TimeSlot = Slot.extend({
	        init: function(element, start, end, groupIndex, collectionIndex, index, isHorizontal) {
	            Slot.fn.init.apply(this, arguments);

	            this.isHorizontal = isHorizontal ? true : false;
	        },

	        offsetX: function(rtl, offset) {
	            if (rtl) {
	                return this.offsetLeft + offset;
	            } else {
	                return this.offsetLeft + offset;
	            }
	        },

	        startInRange: function(date) {
	            return this.start <= date && date < this.end;
	        },

	        endInRange: function(date) {
	            return this.start < date && date <= this.end;
	        },

	        startOffset: function(x, y, snap) {
	            if (snap) {
	                return this.start;
	            }

	            var offset = $(this.element).offset();

	            var duration = this.end - this.start;
	            var difference;
	            var time;

	            if (this.isHorizontal) {
	                //need update
	                var isRtl = kendo.support.isRtl(this.element);
	                difference =  x - offset.left;
	                time = Math.floor(duration * ( difference / this.offsetWidth));

	                if (isRtl) {
	                    return this.start + duration - time;
	                }
	            } else {
	                difference = y - offset.top;
	                time = Math.floor(duration * ( difference / this.offsetHeight));
	            }

	            return this.start + time;
	        },

	        endOffset: function(x, y, snap) {
	            if (snap) {
	                return this.end;
	            }

	            var offset = $(this.element).offset();

	            var duration = this.end - this.start;
	            var difference;
	            var time;

	            if (this.isHorizontal) {
	                //need update
	                var isRtl = kendo.support.isRtl(this.element);
	                difference = x - offset.left;
	                time = Math.floor(duration * ( difference / this.offsetWidth));

	                if (isRtl) {
	                    return this.start + duration - time;
	                }
	            } else {
	                difference = y - offset.top;
	                time = Math.floor(duration * ( difference / this.offsetHeight));
	            }

	            return this.start + time;
	        }
	    });

	    var DaySlot = Slot.extend({
	        init: function(element, start, end, groupIndex, collectionIndex, index, eventCount) {
	            Slot.fn.init.apply(this, arguments);

	            this.eventCount = eventCount;
	            this.isDaySlot = true;

	            if (this.element.children.length) {
	                this.firstChildHeight = this.element.children[0].offsetHeight + 3;
	                this.firstChildTop = this.element.children[0].offsetTop;
	            } else {
	                this.firstChildHeight = 3;
	                this.firstChildTop = 0;
	            }
	        },

	        startDate: function() {
	            var date = new Date(this.start);

	            return kendo.timezone.apply(date, "Etc/UTC");
	        },

	        endDate: function() {
	            var date = new Date(this.end);

	            return kendo.timezone.apply(date, "Etc/UTC");
	        },

	        startInRange: function(date) {
	            return this.start <= date && date < this.end;
	        },

	        endInRange: function(date) {
	            return this.start < date && date <= this.end;
	        }
	    });

	    var scrollbarWidth;
	    function scrollbar() {
	        scrollbarWidth = scrollbarWidth ? scrollbarWidth : kendo.support.scrollbar();
	        return scrollbarWidth;
	    }

	    kendo.ui.SchedulerView = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            this._normalizeOptions();         
	            this._scrollbar = scrollbar();
	            this._isRtl = kendo.support.isRtl(element);
	            this._resizeHint = $();
	            this._moveHint = $();
	            this._cellId = kendo.guid();
	            this._resourcesForGroups();
	            this._selectedSlots = [];
	        },

	        _normalizeOptions: function() {
	            var options = this.options;

	            if (options.startTime) {
	                options.startTime.setMilliseconds(0);
	            }

	            if (options.endTime) {
	                options.endTime.setMilliseconds(0);
	            }

	            if (options.workDayStart) {
	                options.workDayStart.setMilliseconds(0);
	            }

	            if (options.workDayEnd) {
	                options.workDayEnd.setMilliseconds(0);
	            }
	        },

	        _isMobile: function() {
	            var options = this.options;
	            return (options.mobile === true && kendo.support.mobileOS) || options.mobile === "phone" || options.mobile === "tablet";
	        },

	        _isMobilePhoneView: function() {
	            var options = this.options;
	            return (options.mobile === true && kendo.support.mobileOS && !kendo.support.mobileOS.tablet) || options.mobile === "phone";
	        },

	        _addResourceView: function() {
	            var resourceView = new ResourceView(this.groups.length, this._isRtl);

	            this.groups.push(resourceView);

	            return resourceView;
	        },

	        dateForTitle: function() {
	            return kendo.format(this.options.selectedDateFormat, this.startDate(), this.endDate());
	        },

	        shortDateForTitle: function() {
	            return kendo.format(this.options.selectedShortDateFormat, this.startDate(), this.endDate());
	        },

	        _changeGroup: function(selection, previous) {
	            var method = previous ? "prevGroupSlot" : "nextGroupSlot";
	            var slot = this[method](selection.start, selection.groupIndex, selection.isAllDay);

	            if (slot) {
	                selection.groupIndex += previous ? -1 : 1;
	            }

	            if (this._isGroupedByDate() && !slot) {
	               selection.groupIndex = previous ? this.groups.length - 1 : 0;
	            }

	            return slot;
	        },

	        _changeDate: function(selection, slot, previous) {
	            var group = this.groups[selection.groupIndex];
	            var collections, index;

	            if (previous) {
	                  collections = group._getCollections(false);
	                  index = group.daySlotCollectionCount() ? slot.index - 1 : slot.collectionIndex - 1;

	                  if (index >= 0) {
	                      return  collections[index]._slots[collections[index]._slots.length - 1];
	                  }
	              } else {
	                  collections = group._getCollections(group.daySlotCollectionCount());
	                  index = group.daySlotCollectionCount() ? 0 : slot.collectionIndex + 1;
	                  var slotIndex = group.daySlotCollectionCount() ? slot.collectionIndex + 1 : 0;
	                  
	                  if (collections[index] && collections[index]._slots[slotIndex]) {
	                      return  collections[index]._slots[slotIndex];
	                  }
	               }
	        },

	        _changeGroupContinuously: function() {
	            return null;
	        },

	        _changeViewPeriod: function() {
	            return false;
	        },

	        _horizontalSlots: function(selection, ranges, multiple, reverse) {
	            var method = reverse ? "leftSlot" : "rightSlot";
	            var horizontalRange = {
	                 startSlot: ranges[0].start,
	                 endSlot: ranges[ranges.length - 1].end
	             };
	            var group = this.groups[selection.groupIndex];
	            var isVertical = this._isVerticallyGrouped();

	            if (!multiple) {
	                var slot = this._normalizeHorizontalSelection(selection, ranges, reverse);
	                if (slot) {
	                    horizontalRange.startSlot = horizontalRange.endSlot = slot;
	                }
	            }

	            if (this._isGroupedByDate() && !multiple) {               
	                  var tempSlot = this._changeGroup(selection, reverse);

	                  if(!tempSlot) 
	                  {
	                    horizontalRange = this._getNextHorizontalRange(group, method, horizontalRange);                
	                  } else {
	                      horizontalRange.startSlot = horizontalRange.endSlot = tempSlot;
	                  }       
	            } else {
	                  horizontalRange.startSlot = group[method](horizontalRange.startSlot);
	                  horizontalRange.endSlot = group[method](horizontalRange.endSlot);

	                  if (!multiple && !isVertical && (!horizontalRange.startSlot || !horizontalRange.endSlot)) {   
	                        horizontalRange.startSlot = horizontalRange.endSlot = this._changeGroup(selection, reverse);
	                  }
	            }

	            var continuousSlot;

	            if ((!horizontalRange.startSlot || !horizontalRange.endSlot) && !this._isGroupedByDate()) {
	                continuousSlot = this._continuousSlot(selection, ranges, reverse);
	                continuousSlot = this._changeGroupContinuously(selection, continuousSlot, multiple, reverse);

	                if (continuousSlot) {
	                    horizontalRange.startSlot = horizontalRange.endSlot = continuousSlot;
	                }
	            }

	            return horizontalRange;
	        },

	         _getNextHorizontalRange: function(group, method, horizontalRange){
	            if(!this._isVerticallyGrouped()){
	                horizontalRange.startSlot = group[method](horizontalRange.startSlot);
	                horizontalRange.endSlot = group[method](horizontalRange.endSlot);
	            }

	             return horizontalRange;
	        },

	        _verticalSlots: function(selection, ranges, multiple, reverse) {
	            var group = this.groups[selection.groupIndex];
	            var slot;
	            var verticalRange = {
	                startSlot: ranges[0].start,
	                endSlot: ranges[ranges.length - 1].end
	            };

	            if (!multiple) {
	                slot = this._normalizeVerticalSelection(selection, ranges, reverse);
	                if (slot) {
	                    verticalRange.startSlot = verticalRange.endSlot = slot;
	                }
	            }

	            var method = reverse ? "upSlot" : "downSlot";

	            verticalRange = this._getNextVerticalRange(group, method, verticalRange, multiple);

	            if (!multiple && this._isVerticallyGrouped() && (!verticalRange.startSlot || !verticalRange.endSlot)) {
	                if (this._isGroupedByDate()) {
	                    verticalRange.startSlot = verticalRange.endSlot = this._changeDate(selection, slot, reverse);  
	  
	               }else{
	                    verticalRange.startSlot = verticalRange.endSlot = this._changeGroup(selection, reverse);                   
	               }    
	            }

	            return verticalRange;
	        },

	        _getNextVerticalRange: function(group, method, verticalRange, multiple){
	             verticalRange.startSlot = group[method](verticalRange.startSlot, multiple);
	             verticalRange.endSlot = group[method](verticalRange.endSlot, multiple);

	             return verticalRange;
	        },

	        _normalizeHorizontalSelection: function() {
	            return null;
	        },

	        _normalizeVerticalSelection: function(selection, ranges, reverse) {
	            var slot;

	            if (reverse) {
	                slot = ranges[0].start;
	            } else {
	                slot = ranges[ranges.length - 1].end;
	            }

	            return slot;
	        },

	        _continuousSlot: function() {
	            return null;
	        },

	        constrainSelection: function(selection) {
	            var group = this.groups[0];
	            var slot;

	            if (!this.inRange(selection)) {
	               slot = group.firstSlot();

	               selection.isAllDay = slot.isDaySlot;
	               selection.start = slot.startDate();
	               selection.end = slot.endDate();
	            } else {
	                if (!group.daySlotCollectionCount()) {
	                    selection.isAllDay = false;
	                } else if (!group.timeSlotCollectionCount()) {
	                    selection.isAllDay = true;
	                }
	           }

	            if (!this.groups[selection.groupIndex]) {
	                selection.groupIndex = 0;
	            }
	        },

	        move: function(selection, key, shift) {
	            var handled = false;
	            var group = this.groups[selection.groupIndex];
	            var verticalByDate = this._isGroupedByDate()  && this._isVerticallyGrouped();

	            if (!group.timeSlotCollectionCount()) {
	                selection.isAllDay = true;
	            }

	            var ranges = group.ranges(selection.start, selection.end, selection.isAllDay, false);
	            var startSlot, endSlot, reverse, slots;

	            if (key === keys.DOWN || key === keys.UP) {
	                handled = true;
	                reverse = key === keys.UP;

	                this._updateDirection(selection, ranges, shift, reverse, true);

	                slots = this._verticalSlots(selection, ranges, shift, reverse);

	                if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, !verticalByDate)) {
	                    return handled;
	                }

	            } else if (key === keys.LEFT || key === keys.RIGHT) {
	                handled = true;
	                reverse = key === keys.LEFT;

	                this._updateDirection(selection, ranges, shift, reverse, false);

	                slots = this._horizontalSlots(selection, ranges, shift, reverse);

	                if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, verticalByDate)) {
	                    return handled;
	                }
	            }

	            if (handled) {
	                startSlot = slots.startSlot;
	                endSlot = slots.endSlot;

	                if (shift) {
	                    var backward = selection.backward;
	                    if (backward && startSlot) {
	                        selection.start = startSlot.startDate();
	                    } else if (!backward && endSlot) {
	                        selection.end = endSlot.endDate();
	                    }
	                } else if (startSlot && endSlot) {
	                    selection.isAllDay = startSlot.isDaySlot;
	                    selection.start = startSlot.startDate();
	                    selection.end = endSlot.endDate();
	                }

	                selection.events = [];
	            }

	            return handled;
	        },

	        moveToEventInGroup: function(group, slot, selectedEvents, prev) {
	            var events = group._continuousEvents || [];

	            var found, event;

	            var pad = prev ? -1 : 1;

	            var length = events.length;
	            var idx = prev ? length - 1 : 0;

	            while (idx < length && idx > -1) {
	                event = events[idx];

	                if ( (!prev && event.start.startDate() >= slot.startDate()) ||
	                    (prev && event.start.startDate() <= slot.startDate()) ) {

	                    if (selectedEvents.length) {
	                        event = events[idx + pad];
	                    }

	                    if (event && $.inArray(event.uid, selectedEvents) === -1) {
	                        found = !!event;
	                        break;
	                    }
	                }

	                idx += pad;
	            }

	            return event;
	        },

	        moveToEvent: function(selection, prev) {
	            var groupIndex = selection.groupIndex;

	            var group = this.groups[groupIndex];
	            var slot = group.ranges(selection.start, selection.end, selection.isAllDay, false)[0].start;

	            var length = this.groups.length;
	            var pad = prev ? -1 : 1;
	            var events = selection.events;
	            var event;
	           
	            if (this._isGroupedByDate()) {
	                var allEvents = this._getAllEvents();            
	                var uniqueAllEvents = this._getUniqueEvents(allEvents);
	                var sortedEvents = this._getSortedEvents(uniqueAllEvents);              
	                             
	                if(events.length === 0){
	                    var eventIndex = this._getNextEventIndexBySlot(slot, sortedEvents, groupIndex);

			            if(prev){
				            eventIndex--;
			            }

	                    event = sortedEvents[eventIndex];
	                } else{
	                     var idx = this._getStartIdx(events, sortedEvents);

	                    while (idx < sortedEvents.length && idx > -1) {     
	                        if(events.length > 0){     
	                            slot = this._getSelectedSlot(slot, sortedEvents, event, idx, pad, prev);
	                        }

	                        if(!slot){
	                            break;
	                        }

	                        if ( (!prev && sortedEvents[idx].start.startDate() >= slot.startDate()) ||
	                              (prev && sortedEvents[idx].start.startDate() <= slot.startDate())) {
	                             if (events[0] != sortedEvents[idx].uid) {
	                                 event = sortedEvents[idx];
	                                  break;
	                             }                      
	                        }
	                        idx += pad;
	                    }
	                }
	            } else {
	                  while (groupIndex < length && groupIndex > -1) {
	                    event = this.moveToEventInGroup(group, slot, events, prev);

	                    groupIndex += pad;
	                    group = this.groups[groupIndex];

	                    if (!group || event) {
	                        break;
	                    }

	                    events = [];
	                    if (prev) {
	                        slot = group.lastSlot();
	                    } else {
	                        slot = group.firstSlot(true);
	                    }
	                }
	            }

	            if (event) {
	                selection.events = [ event.uid ];
	                selection.start = event.start.startDate();
	                selection.end = event.end.endDate();
	                selection.isAllDay = event.start.isDaySlot;
	                selection.groupIndex = event.start.groupIndex;
	            }

	            return !!event;
	        },

	        current: function(candidate) {
	            if (candidate !== undefined) {
	                this._current = candidate;
	                if (this.content.has(candidate)) {
	                    this._scrollTo(candidate, this.content[0]);
	                }
	            } else {
	                return this._current;
	            }
	        },

	        select: function(selection) {
	            this.clearSelection();

	            if (!this._selectEvents(selection)) {
	                this._selectSlots(selection);
	            }
	        },

	        _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex){
	            var tempIndex = 0;
	            var slotStartDate = kendo.date.getDate(slot.startDate());     

	            for (var i = 0; i < sortedEvents.length; i++) {
	                var eventStartDate = kendo.date.getDate(sortedEvents[i].start.startDate());
	                if (slotStartDate > eventStartDate) {
	                    tempIndex++;
	                    continue;
	                }

	                if (slotStartDate.getTime() === eventStartDate.getTime() && groupIndex > sortedEvents[i].start.groupIndex) {
	                      tempIndex++;
	                      continue;
	                }

	                if (slotStartDate.getTime() === eventStartDate.getTime() &&
	                    groupIndex >= sortedEvents[i].start.groupIndex &&
	                    slot.startDate() > sortedEvents[i].start.startDate()) {
	                    tempIndex++;
	                    continue;
	                 }

	                 break;
	            }
	            return tempIndex;
	        },

	        _getSelectedSlot: function(slot, sortedEvents, event, idx, pad, prev) {
	              if (sortedEvents[idx + pad] &&
	               sortedEvents[idx].start.groupIndex !== sortedEvents[idx + pad].start.groupIndex) {
	                    var groupIndex = sortedEvents[idx + pad].start.groupIndex;
	                    var group = this.groups[groupIndex];

	                    if (!group || event) {
	                       slot = null;
	                    }

	                    if (prev) {
	                        slot = group.lastSlot();
	                    } else {
	                        slot = group.firstSlot(true);
	                    }
	                }
	             return slot;
	        },

	        _getStartIdx: function(events, sortedEvents){
	            var selectedEventIndex = 0;
	     
	            $.each(sortedEvents, function() {
	                if (this.uid === events[0]){
	                     return false;
	                }               
	                
	                selectedEventIndex++;
	            });                      

	            return selectedEventIndex;
	        },

	        _getAllEvents: function(){
	            var allEvents = [];
	            var groups = this.groups;

	            for (var idx = 0; idx < groups.length; idx++) {
	                if (groups[idx]._continuousEvents) {
	                    allEvents= allEvents.concat(groups[idx]._continuousEvents);
	                }
	            }

	            return allEvents;
	        },

	        _getUniqueEvents: function(allEvents){
	            var uniqueAllEvents = [];

	            for (var i = 0; i < allEvents.length; i++) {
	                var exists = false;
	                for (var j = 0; j < uniqueAllEvents.length; j++) {
	                    if (allEvents[i].uid === uniqueAllEvents[j].uid) {
	                        exists = true;
	                        break;
	                    }
	                }

	                if (!exists) {
	                    uniqueAllEvents.push(allEvents[i]);
	                }
	            }

	            return uniqueAllEvents;
	        },

	        _getSortedEvents: function(uniqueAllEvents){
	             return uniqueAllEvents.sort(function(first, second) {
	                var firstStartDate = first.start.startDate();
	                var secondStartDate = second.start.startDate();                  
	                var result = kendo.date.getDate(firstStartDate) - kendo.date.getDate(secondStartDate);

	                if (result === 0) {
	                    result = first.start.groupIndex - second.start.groupIndex;
	                }

	                if (result === 0) {
	                    result = firstStartDate.getTime() - secondStartDate.getTime();
	                }

	                if (result === 0) {
	                    if (first.start.isDaySlot && !second.start.isDaySlot) {
	                            result = -1;
	                    }

	                    if (!first.start.isDaySlot && second.start.isDaySlot) {
	                            result = 1;
	                    }
	                }

	                if (result === 0) {
	                    result = $(first.element).index() - $(second.element).index();
	                }

	                return result;
	            });       
	        },

	        _selectSlots: function(selection) {
	            var isAllDay = selection.isAllDay;
	            var group = this.groups[selection.groupIndex];

	            if (!group.timeSlotCollectionCount()) {
	                isAllDay = true;
	            }

	            this._selectedSlots = [];

	            var ranges = group.ranges(selection.start, selection.end, isAllDay, false);
	            var element;
	            var slot;

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                var range = ranges[rangeIndex];
	                var collection = range.collection;

	                for (var slotIndex = range.start.index; slotIndex <= range.end.index; slotIndex++) {
	                    slot = collection.at(slotIndex);

	                    element = slot.element;
	                    element.setAttribute("aria-selected", true);
	                    addSelectedState(element);

	                    this._selectedSlots.push({
	                        start: slot.startDate(),
	                        end: slot.endDate(),
	                        element: element
	                    });
	                }
	            }

	            if (selection.backward) {
	                element = ranges[0].start.element;
	            }

	            this.current(element);
	        },

	        _selectEvents: function(selection) {
	            var found = false;
	            var events = selection.events;
	            var groupEvents = this.groups[selection.groupIndex]._continuousEvents || [];
	            var idx, length = groupEvents.length;

	            if (!events[0] || !groupEvents[0]) {
	                return found;
	            }

	            var result = $();
	            selection.events = [];
	            for (idx = 0; idx < length; idx ++) {
	                if ($.inArray(groupEvents[idx].uid, events) > -1) {
	                    result = result.add(groupEvents[idx].element);
	                    selection.events.push(groupEvents[idx].uid);
	                }
	            }

	            if (result[0]) {
	                result.addClass("k-state-selected").attr("aria-selected", true);
	                this.current(result.last()[0]);
	                this._selectedSlots = [];
	                found = true;
	            }

	            return found;
	        },

	        inRange: function(options) {
	            var startDate = this.startDate();
	            var endDate = kendo.date.addDays(this.endDate(), 1);
	            var start = options.start;
	            var end = options.end;

	            return startDate <= start && start < endDate && startDate < end && end <= endDate;
	        },

	        _resourceValue: function(resource, item) {
	            if (resource.valuePrimitive) {
	                item = kendo.getter(resource.dataValueField)(item);
	            }
	            return item;
	        },

	        _resourceBySlot: function(slot) {
	            var resources = this.groupedResources;
	            var result = {};

	            if (resources.length) {
	                var resourceIndex = slot.groupIndex;

	                for (var idx = resources.length - 1; idx >=0; idx--) {
	                    var resource = resources[idx];

	                    var value = this._resourceValue(resource, resource.dataSource.view()[resourceIndex % resource.dataSource.total()]);

	                    if (resource.multiple) {
	                        value = [value];
	                    }

	                    var setter = kendo.setter(resource.field);
	                    setter(result, value);

	                    resourceIndex = Math.floor(resourceIndex / resource.dataSource.total());
	                }
	            }

	            return result;
	        },

	        _createResizeHint: function(left, top, width, height) {
	            return $(HINT).css({
	                left: left,
	                top: top,
	                width: width,
	                height: height
	            });
	        },

	        _removeResizeHint: function() {
	            this._resizeHint.remove();
	            this._resizeHint = $();
	        },

	        _removeMoveHint: function() {
	            this._moveHint.remove();
	            this._moveHint = $();
	        },

	        _scrollTo: function(element, container) {
	            var elementOffset = element.offsetTop,
	                elementOffsetDir = element.offsetHeight,
	                containerScroll = container.scrollTop,
	                containerOffsetDir = container.clientHeight,
	                bottomDistance = elementOffset + elementOffsetDir,
	                result = 0;

	                if (containerScroll > elementOffset) {
	                    result = elementOffset;
	                } else if (bottomDistance > (containerScroll + containerOffsetDir)) {
	                    if (elementOffsetDir <= containerOffsetDir) {
	                        result = (bottomDistance - containerOffsetDir);
	                    } else {
	                        result = elementOffset;
	                    }
	                } else {
	                    result = containerScroll;
	                }
	                container.scrollTop = result;
	        },

	        _shouldInverseResourceColor: function(resource) {
	            var resourceColorIsDark = new Color(resource.color).isDark();
	            var currentColor = this.element.css("color");
	            var currentColorIsDark = new Color(currentColor).isDark();

	            return (resourceColorIsDark == currentColorIsDark);
	        },

	       _eventTmpl: function(template, wrapper) {
	           var options = this.options,
	               settings = $.extend({}, kendo.Template, options.templateSettings),
	               paramName = settings.paramName,
	               html = "",
	               type = typeof template,
	               state = { storage: {}, count: 0 };

	            if (type === "function") {
	                state.storage["tmpl" + state.count] = template;
	                html += "#=this.tmpl" + state.count + "(" + paramName + ")#";
	                state.count ++;
	            } else if (type === "string") {
	                html += template;
	            }

	            var tmpl = kendo.template(kendo.format(wrapper, html), settings);

	            if (state.count > 0) {
	                tmpl = $.proxy(tmpl, state.storage);
	            }

	            return tmpl;
	       },

	        eventResources: function(event) {
	            var resources = [],
	                options = this.options;

	            if (!options.resources) {
	                return resources;
	            }

	            for (var idx = 0; idx < options.resources.length; idx++) {
	                var resource = options.resources[idx];
	                var field = resource.field;
	                var eventResources = kendo.getter(field)(event);

	                if (eventResources == null) {
	                    continue;
	                }

	                if (!resource.multiple) {
	                    eventResources = [eventResources];
	                }

	                var data = resource.dataSource.view();

	                for (var resourceIndex = 0; resourceIndex < eventResources.length; resourceIndex++) {
	                    var eventResource = null;

	                    var value = eventResources[resourceIndex];

	                    if (!resource.valuePrimitive) {
	                        value = kendo.getter(resource.dataValueField)(value);
	                    }

	                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
	                        if (data[dataIndex].get(resource.dataValueField) == value) {
	                            eventResource = data[dataIndex];
	                            break;
	                        }
	                    }

	                    if (eventResource !== null) {
	                        var resourceColor = kendo.getter(resource.dataColorField)(eventResource);
	                        resources.push({
	                            field: resource.field,
	                            title: resource.title,
	                            name: resource.name,
	                            text: kendo.getter(resource.dataTextField)(eventResource),
	                            value: value,
	                            color: resourceColor
	                        });
	                    }
	                }
	            }
	            return resources;
	        },

	        createLayout: function(layout) {
	            var allDayIndex = -1;

	            if (!layout.rows) {
	                layout.rows = [];
	            }

	            for (var idx = 0; idx < layout.rows.length; idx++) {
	                if (layout.rows[idx].allDay) {
	                    allDayIndex = idx;
	                    break;
	                }
	            }

	            var allDaySlot = layout.rows[allDayIndex];

	            if (allDayIndex >= 0) {
	                layout.rows.splice(allDayIndex, 1);
	            }

	            var columnLevels = this.columnLevels = levels(layout, "columns");

	            var rowLevels = this.rowLevels = levels(layout, "rows");

	            this.table = $('<table ' + cellspacing() + ' class="k-scheduler-layout k-scheduler-' + this.name + 'view"><tbody></tbody></table>');

	            var rowCount = rowLevels[rowLevels.length - 1].length;
	            
	            this.table.find("tbody:first").append(this._topSection(columnLevels, allDaySlot, rowCount));

	            this.table.find("tbody:first").append(this._bottomSection(columnLevels, rowLevels, rowCount));

	            this.element.append(this.table);

	            this._scroller();
	        },

	        refreshLayout: function() {
	            var that = this,
	                toolbar = that.element.find(">.k-scheduler-toolbar"),
	                height = that.element.innerHeight(),
	                scrollbar = this._scrollbar,
	                headerHeight = 0,
	                paddingDirection = this._isRtl ? "left" : "right";

	            for (var idx = 0; idx < toolbar.length; idx++) {
	                height -= outerHeight(toolbar.eq(idx));
	            }

	            if (that.datesHeader) {
	                headerHeight = outerHeight(that.datesHeader);
	            }

	            if (that.timesHeader && outerHeight(that.timesHeader) > headerHeight) {
	                headerHeight = outerHeight(that.timesHeader);
	            }

	            if (that.datesHeader && that.timesHeader) {
	                var datesHeaderRows = that.datesHeader.find("table:first tr");

	                that.timesHeader.find("tr").height(function(index) {
	                    $(this).height(datesHeaderRows.eq(index).height());
	                });
	            }

	            if (headerHeight) {
	                height -= headerHeight;
	            }

	            if (that.footer) {
	                height -= outerHeight(that.footer);
	            }

	            var isSchedulerHeightSet = function(el) {
	                var initialHeight, newHeight;
	                if (el[0].style.height) {
	                    return true;
	                } else {
	                    initialHeight = el.height();
	                }

	                el.height("auto");
	                newHeight = el.height();

	                if (initialHeight != newHeight) {
	                    el.height("");
	                    return true;
	                }
	                el.height("");
	                return false;
	            };

	            var contentDiv = that.content[0],
	                scrollbarWidth = !kendo.support.kineticScrollNeeded ? scrollbar : 0;

	            if (isSchedulerHeightSet(that.element)) { // set content height only if needed
	                if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed
	                    that.content.height(height);
	                } else {
	                    that.content.height(scrollbar * 2 + 1);
	                }
	                that.times.height(contentDiv.clientHeight);

	                var timesTable = that.times.find("table");
	                if (timesTable.length) {
	                    timesTable.height(that.content.find("table")[0].clientHeight);
	                }
	            }


	            if (contentDiv.offsetWidth - contentDiv.clientWidth > 0) {
	                that.table.addClass("k-scrollbar-v");
	                that.datesHeader.css("padding-" + paddingDirection, scrollbarWidth - parseInt(that.datesHeader.children().css("border-" + paddingDirection + "-width"), 10));
	            } else {
	                that.datesHeader.css("padding-" + paddingDirection, "");
	            }
	            if (contentDiv.offsetHeight - contentDiv.clientHeight > 0 || contentDiv.clientHeight > that.content.children(".k-scheduler-table").height()) {
	                that.table.addClass("k-scrollbar-h");
	            } else {
	                that.table.removeClass("k-scrollbar-h");
	            }
	        },

	        _topSection: function(columnLevels, allDaySlot, rowCount) {
	            this.timesHeader = timesHeader(columnLevels.length, allDaySlot, rowCount);

	            var columnCount = columnLevels[columnLevels.length - 1].length;

	            this.datesHeader = datesHeader(columnLevels, columnCount, allDaySlot);

	            return $("<tr>").append(this.timesHeader.add(this.datesHeader).wrap("<td>").parent());
	        },

	        _bottomSection: function(columnLevels, rowLevels, rowCount) {
	            this.times = times(rowLevels, rowCount);

	            this.content = content(columnLevels[columnLevels.length - 1], rowLevels[rowLevels.length - 1]);

	            return $("<tr>").append(this.times.add(this.content).wrap("<td>").parent());
	        },

	        _scroller: function() {
	            var that = this;

	            this.content.bind("scroll" + NS, function () {
	                that.datesHeader.find(">.k-scheduler-header-wrap").scrollLeft(this.scrollLeft);
	                that.times.scrollTop(this.scrollTop);
	            });

	            var touchScroller = kendo.touchScroller(this.content, {
	                avoidScrolling: function(e) {
	                    return $(e.event.target).closest(".k-event.k-event-active").length > 0;
	                }
	            });

	            if (touchScroller && touchScroller.movable) {

	                this._touchScroller = touchScroller;

	                this.content = touchScroller.scrollElement;

	                touchScroller.movable.bind("change", function(e) {
	                    that.datesHeader.find(">.k-scheduler-header-wrap").scrollLeft(-e.sender.x);
	                    that.times.scrollTop(-e.sender.y);
	                });
	            }
	        },

	        _resourcesForGroups: function() {
	            var result = [];
	            var groups = this.options.group;
	            var resources = this.options.resources;

	            groups = groups && groups.resources ? groups.resources : [];

	            if (resources && groups.length) {
	                for (var idx = 0, length = resources.length; idx < length; idx++) {
	                    for (var groupIdx = 0, groupLength = groups.length; groupIdx < groupLength; groupIdx++) {
	                        if (resources[idx].name === groups[groupIdx]) {
	                            result.push(resources[idx]);
	                        }
	                    }
	                }
	            }

	            this.groupedResources = result;
	        },

	        _createDateLayout: function(dates, inner, times) {
	            return createDateLayoutConfiguration("rows", dates, inner, times);
	        },

	        _createColumnsLayout: function(resources, inner, template, dates, times) {
	            return createLayoutConfiguration("columns", resources, inner, template, dates, times);
	        },

	        _groupOrientation: function() {
	            var groups = this.options.group;
	            return groups && groups.resources ? groups.orientation : "horizontal";
	        },

	        _isGroupedByDate: function() {
	            return this.options.group && this.options.group.date;
	        },

	        _isVerticallyGrouped: function() {
	            return this.groupedResources.length && this._groupOrientation() === "vertical";
	        },

	        _createRowsLayout: function(resources, inner, template, dates) {
	            return createLayoutConfiguration("rows", resources, inner, template, dates);
	        },

	        selectionByElement: function() {
	            return null;
	        },

	        clearSelection: function() {
	            this.content
	                .find(".k-state-selected")
	                .removeAttr("id")
	                .attr("aria-selected", false)
	                .removeClass("k-state-selected");
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(this);

	            if (that.table) {
	                kendo.destroy(that.table);
	                that.table.remove();
	            }

	            that.groups = null;
	            that.table = null;
	            that.content = null;
	            that.times = null;
	            that.datesHeader = null;
	            that.timesHeader = null;
	            that.footer = null;
	            that._resizeHint = null;
	            that._moveHint = null;
	        },

	        calendarInfo: function() {
	            return kendo.getCulture().calendars.standard;
	        },

	        prevGroupSlot: function(date, groupIndex, isDay) {
	            var collection;
	            var group = this.groups[groupIndex];
	            var slot = group.ranges(date, date, isDay, false)[0].start;

	            if (groupIndex <= 0) {
	                return;
	            }

	            if (this._isGroupedByDate()) {
	               return slot;
	            }

	            if (this._isVerticallyGrouped()) {
	                if (!group.timeSlotCollectionCount()) {
	                    collection = group._collection(group.daySlotCollectionCount() - 1, true);
	                    return collection.at(slot.index);
	                } else {
	                    collection = group._collection(isDay ? slot.index : slot.collectionIndex, false);
	                    return collection.last();
	                }
	            } else {
	                if (!group.timeSlotCollectionCount()) {
	                    collection = group._collection(slot.collectionIndex, true);
	                    return collection.last();
	                } else {
	                    collection = group._collection(isDay ? 0 : group.timeSlotCollectionCount() - 1, isDay);
	                    return isDay ? collection.last() : collection.at(slot.index);
	                }
	            }
	        },

	        nextGroupSlot: function(date, groupIndex, isDay) {
	            var collection;
	            var group = this.groups[groupIndex];
	            var slot = group.ranges(date, date, isDay, false)[0].start;
	            var daySlotCollectionCount;

	            if (groupIndex >= this.groups.length - 1) {
	                return;
	            }

	            if (this._isGroupedByDate()) {
	               return slot;
	            }

	            if (this._isVerticallyGrouped()) {
	                if (!group.timeSlotCollectionCount()) {
	                    collection = group._collection(0, true);
	                    return collection.at(slot.index);
	                } else {
	                    daySlotCollectionCount = group.daySlotCollectionCount();
	                    collection = group._collection(daySlotCollectionCount ? 0 : slot.collectionIndex, daySlotCollectionCount);

	                    return isDay ? collection.first() : collection.at(slot.collectionIndex);
	                }
	            } else {
	                if (!group.timeSlotCollectionCount()) {
	                    collection = group._collection(slot.collectionIndex, true);
	                    return collection.first();
	                } else {
	                    collection = group._collection(0, isDay);
	                    return isDay ? collection.first() : collection.at(slot.index);
	                }
	            }
	        },

	        _eventOptionsForMove: function () {
	            return {};
	        },

	        _updateEventForResize: function () {
	            return;
	        },

	        _updateEventForSelection: function (event) {
	            return event;
	        }
	    });

	    function collidingEvents(elements, start, end) {
	        var idx,
	            index,
	            startIndex,
	            overlaps,
	            endIndex;

	        for (idx = elements.length-1; idx >= 0; idx--) {
	            index = rangeIndex(elements[idx]);
	            startIndex = index.start;
	            endIndex = index.end;

	            overlaps = startIndex <= start && endIndex >= start;

	            if (overlaps || (startIndex >= start && endIndex <= end) || (start <= startIndex && end >= startIndex)) {
	                if (startIndex < start) {
	                    start = startIndex;
	                }

	                if (endIndex > end) {
	                    end = endIndex;
	                }
	            }
	        }

	        return eventsForSlot(elements, start, end);
	    }

	    function rangeIndex(eventElement) {
	        return {
	            start: eventElement.start,
	            end: eventElement.end
	        };
	    }

	    function eventsForSlot(elements, slotStart, slotEnd) {
	        var events = [];

	        for (var idx = 0; idx < elements.length; idx++) {
	            var event = rangeIndex(elements[idx]);

	            if ((event.start < slotStart && event.end > slotStart) || (event.start >= slotStart && event.end <= slotEnd)) {
	                events.push(elements[idx]);
	            }
	        }

	        return events;
	    }

	    function createColumns(eventElements) {
	        return _createColumns(eventElements);
	    }

	    function createRows(eventElements) {
	        return _createColumns(eventElements);
	    }

	    var Color = function(value) {
	        var color = this,
	            formats = Color.formats,
	            re,
	            processor,
	            parts,
	            i,
	            channels;

	        if (arguments.length === 1) {
	            value = color.resolveColor(value);

	            for (i = 0; i < formats.length; i++) {
	                re = formats[i].re;
	                processor = formats[i].process;
	                parts = re.exec(value);

	                if (parts) {
	                    channels = processor(parts);
	                    color.r = channels[0];
	                    color.g = channels[1];
	                    color.b = channels[2];
	                }
	            }
	        } else {
	            color.r = arguments[0];
	            color.g = arguments[1];
	            color.b = arguments[2];
	        }

	        color.r = color.normalizeByte(color.r);
	        color.g = color.normalizeByte(color.g);
	        color.b = color.normalizeByte(color.b);
	    };

	    Color.prototype = {
	        resolveColor: function(value) {
	            value = value || "#000";

	            if (value.charAt(0) == "#") {
	                value = value.substr(1, 6);
	            }

	            value = value.replace(/ /g, "");
	            value = value.toLowerCase();
	            value = Color.namedColors[value] || value;

	            return value;
	        },

	        normalizeByte: function(value) {
	            return (value < 0 || isNaN(value)) ? 0 : ((value > 255) ? 255 : value);
	        },

	        percBrightness: function() {
	            var color = this;
	            return math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);
	        },

	        isDark: function() {
	            var color = this;
	            var brightnessValue = color.percBrightness();
	            return brightnessValue < 180;
	        }
	    };

	    Color.formats = [{
	            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
	            process: function(parts) {
	                return [
	                    parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
	                ];
	            }
	        }, {
	            re: /^(\w{2})(\w{2})(\w{2})$/,
	            process: function(parts) {
	                return [
	                    parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
	                ];
	            }
	        }, {
	            re: /^(\w{1})(\w{1})(\w{1})$/,
	            process: function(parts) {
	                return [
	                    parseInt(parts[1] + parts[1], 16),
	                    parseInt(parts[2] + parts[2], 16),
	                    parseInt(parts[3] + parts[3], 16)
	                ];
	            }
	        }
	    ];

	    Color.namedColors = {
	        aqua: "00ffff", azure: "f0ffff", beige: "f5f5dc",
	        black: "000000", blue: "0000ff", brown: "a52a2a",
	        coral: "ff7f50", cyan: "00ffff", darkblue: "00008b",
	        darkcyan: "008b8b", darkgray: "a9a9a9", darkgreen: "006400",
	        darkorange: "ff8c00", darkred: "8b0000", dimgray: "696969",
	        fuchsia: "ff00ff", gold: "ffd700", goldenrod: "daa520",
	        gray: "808080", green: "008000", greenyellow: "adff2f",
	        indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
	        lightblue: "add8e6", lightgrey: "d3d3d3", lightgreen: "90ee90",
	        lightpink: "ffb6c1", lightyellow: "ffffe0", lime: "00ff00",
	        limegreen: "32cd32", linen: "faf0e6", magenta: "ff00ff",
	        maroon: "800000", mediumblue: "0000cd", navy: "000080",
	        olive: "808000", orange: "ffa500", orangered: "ff4500",
	        orchid: "da70d6", pink: "ffc0cb", plum: "dda0dd",
	        purple: "800080", red: "ff0000", royalblue: "4169e1",
	        salmon: "fa8072", silver: "c0c0c0", skyblue: "87ceeb",
	        slateblue: "6a5acd", slategray: "708090", snow: "fffafa",
	        steelblue: "4682b4", tan: "d2b48c", teal: "008080",
	        tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee",
	        wheat: "f5deb3", white: "ffffff", whitesmoke: "f5f5f5",
	        yellow: "ffff00", yellowgreen: "9acd32"
	    };

	    function _createColumns(eventElements) {
	        var columns = [];

	        for (var idx = 0; idx < eventElements.length; idx++) {
	            var event = eventElements[idx];
	            var eventRange = rangeIndex(event);
	            var column = null;

	            for (var j = 0, columnLength = columns.length; j < columnLength; j++) {
	                var endOverlaps = eventRange.start > columns[j].end;

	                if (eventRange.start < columns[j].start || endOverlaps) {

	                    column = columns[j];

	                    if (column.end < eventRange.end) {
	                        column.end = eventRange.end;
	                    }

	                    break;
	                }
	            }

	            if (!column) {
	                column = { start: eventRange.start, end: eventRange.end, events: [] };
	                columns.push(column);
	            }

	            column.events.push(event);
	        }

	        return columns;
	    }

	    function createDateLayoutConfiguration(name, dates, inner, times) {
	         var configuration = [];

	         $.each(dates, function(index, item) {
	            var className = item.className ? "k-slot-cell " + item.className : "k-slot-cell";

	            var obj = {
	                text: item.text,
	                className: className
	            };

	            if(times && !item.minorTicks){
	                obj[name] = createDateLayoutConfiguration(name, item.columns, inner, times);
	            } else {
	                obj[name] = inner; 
	            }           
	            configuration.push(obj);
	        });

	        return configuration;
	    }

	    function createLayoutConfiguration(name, resources, inner, template, dates, times) {
	        var resource = resources[0];     
	        var configuration = [];

	        if (resource) {  
	            if (dates && inner) {         
	                $.each(dates, function(index, item) {

	                    if (times && !item.minorTicks) {
	                        item[name] = createLayoutConfiguration(name, resources, item.columns, template, item.columns, times);
	                    } else {
	                         item[name] = createLayoutConfiguration(name, resources, null, template);
	                    }                
	                });
	                configuration = dates;
	            } else {
	                var data = resource.dataSource.view();

	                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
	                    var obj = {
	                        text: template({
	                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex])),
	                            color: kendo.getter(resource.dataColorField)(data[dataIndex]),
	                            field: resource.field,
	                            title: resource.title,
	                            name: resource.name,
	                            value:kendo.getter(resource.dataValueField)(data[dataIndex])
	                        }),
	                        className: "k-slot-cell"
	                    };
	                    obj[name] = createLayoutConfiguration(name, resources.slice(1), inner, template);

	                    configuration.push(obj);
	                }
	            }
	            return configuration;
	        }
	        return inner;
	    }

	    function groupEqFilter(value) {
	        return function(item) {
	            if ($.isArray(item) || item instanceof kendo.data.ObservableArray) {
	                for (var idx = 0; idx < item.length; idx++) {
	                    if (item[idx] == value) {
	                        return true;
	                    }
	                }
	                return false;
	            }
	            return item == value;
	        };
	    }

	    var selectedStateRegExp = /\s*k-state-selected/;
	    function addSelectedState(cell) {
	        cell.className = cell.className.replace(selectedStateRegExp, "") + " k-state-selected";
	    }

	    $.extend(ui.SchedulerView, {
	        createColumns: createColumns,
	        createRows: createRows,
	        rangeIndex: rangeIndex,
	        collidingEvents: collidingEvents,
	        groupEqFilter: groupEqFilter
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 11 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/moment/locale/en-au.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 1)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enAu = moment.defineLocale('en-au', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enAu;

})));


/***/ }),
/* 12 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/moment/locale/en-ca.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 1)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enCa = moment.defineLocale('en-ca', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'YYYY-MM-DD',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

return enCa;

})));


/***/ }),
/* 13 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/moment/locale/en-gb.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 1)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enGb = moment.defineLocale('en-gb', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enGb;

})));


/***/ }),
/* 14 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/moment/locale/en-ie.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 1)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enIe = moment.defineLocale('en-ie', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enIe;

})));


/***/ }),
/* 15 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/moment/locale/en-nz.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 1)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var enNz = moment.defineLocale('en-nz', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return enNz;

})));


/***/ }),
/* 16 */
/* unknown exports provided */
/* all exports used */
/*!**********************************!*\
  !*** ./~/pluralize/pluralize.js ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

/* global define */

(function (root, pluralize) {
  /* istanbul ignore else */
  if (true) {
    // Node.
    module.exports = pluralize();
  } else if (typeof define === 'function' && define.amd) {
    // AMD, registers as an anonymous module.
    define(function () {
      return pluralize();
    });
  } else {
    // Browser global.
    root.pluralize = pluralize();
  }
})(this, function () {
  // Rule storage - pluralize and singularize need to be run sequentially,
  // while other rules can be optimized using an object for instant lookups.
  var pluralRules = [];
  var singularRules = [];
  var uncountables = {};
  var irregularPlurals = {};
  var irregularSingles = {};

  /**
   * Title case a string.
   *
   * @param  {string} str
   * @return {string}
   */
  function toTitleCase (str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
  }

  /**
   * Sanitize a pluralization rule to a usable regular expression.
   *
   * @param  {(RegExp|string)} rule
   * @return {RegExp}
   */
  function sanitizeRule (rule) {
    if (typeof rule === 'string') {
      return new RegExp('^' + rule + '$', 'i');
    }

    return rule;
  }

  /**
   * Pass in a word token to produce a function that can replicate the case on
   * another word.
   *
   * @param  {string}   word
   * @param  {string}   token
   * @return {Function}
   */
  function restoreCase (word, token) {
    // Tokens are an exact match.
    if (word === token) {
      return token;
    }

    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
      return token.toUpperCase();
    }

    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
      return toTitleCase(token);
    }

    // Lower cased words. E.g. "test".
    return token.toLowerCase();
  }

  /**
   * Interpolate a regexp string.
   *
   * @param  {string} str
   * @param  {Array}  args
   * @return {string}
   */
  function interpolate (str, args) {
    return str.replace(/\$(\d{1,2})/g, function (match, index) {
      return args[index] || '';
    });
  }

  /**
   * Sanitize a word by passing in the word and sanitization rules.
   *
   * @param  {string}   token
   * @param  {string}   word
   * @param  {Array}    collection
   * @return {string}
   */
  function sanitizeWord (token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
      return word;
    }

    var len = collection.length;

    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
      var rule = collection[len];

      // If the rule passes, return the replacement.
      if (rule[0].test(word)) {
        return word.replace(rule[0], function (match, index, word) {
          var result = interpolate(rule[1], arguments);

          if (match === '') {
            return restoreCase(word[index - 1], result);
          }

          return restoreCase(match, result);
        });
      }
    }

    return word;
  }

  /**
   * Replace a word with the updated word.
   *
   * @param  {Object}   replaceMap
   * @param  {Object}   keepMap
   * @param  {Array}    rules
   * @return {Function}
   */
  function replaceWord (replaceMap, keepMap, rules) {
    return function (word) {
      // Get the correct token and case restoration functions.
      var token = word.toLowerCase();

      // Check against the keep object map.
      if (keepMap.hasOwnProperty(token)) {
        return restoreCase(word, token);
      }

      // Check against the replacement map for a direct word replacement.
      if (replaceMap.hasOwnProperty(token)) {
        return restoreCase(word, replaceMap[token]);
      }

      // Run all the rules against the word.
      return sanitizeWord(token, word, rules);
    };
  }

  /**
   * Pluralize or singularize a word based on the passed in count.
   *
   * @param  {string}  word
   * @param  {number}  count
   * @param  {boolean} inclusive
   * @return {string}
   */
  function pluralize (word, count, inclusive) {
    var pluralized = count === 1
      ? pluralize.singular(word) : pluralize.plural(word);

    return (inclusive ? count + ' ' : '') + pluralized;
  }

  /**
   * Pluralize a word.
   *
   * @type {Function}
   */
  pluralize.plural = replaceWord(
    irregularSingles, irregularPlurals, pluralRules
  );

  /**
   * Singularize a word.
   *
   * @type {Function}
   */
  pluralize.singular = replaceWord(
    irregularPlurals, irregularSingles, singularRules
  );

  /**
   * Add a pluralization rule to the collection.
   *
   * @param {(string|RegExp)} rule
   * @param {string}          replacement
   */
  pluralize.addPluralRule = function (rule, replacement) {
    pluralRules.push([sanitizeRule(rule), replacement]);
  };

  /**
   * Add a singularization rule to the collection.
   *
   * @param {(string|RegExp)} rule
   * @param {string}          replacement
   */
  pluralize.addSingularRule = function (rule, replacement) {
    singularRules.push([sanitizeRule(rule), replacement]);
  };

  /**
   * Add an uncountable word rule.
   *
   * @param {(string|RegExp)} word
   */
  pluralize.addUncountableRule = function (word) {
    if (typeof word === 'string') {
      uncountables[word.toLowerCase()] = true;
      return;
    }

    // Set singular and plural references for the word.
    pluralize.addPluralRule(word, '$0');
    pluralize.addSingularRule(word, '$0');
  };

  /**
   * Add an irregular word definition.
   *
   * @param {string} single
   * @param {string} plural
   */
  pluralize.addIrregularRule = function (single, plural) {
    plural = plural.toLowerCase();
    single = single.toLowerCase();

    irregularSingles[single] = plural;
    irregularPlurals[plural] = single;
  };

  /**
   * Irregular rules.
   */
  [
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['was', 'were'],
    ['has', 'have'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['looey', 'looies'],
    ['thief', 'thieves'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies']
  ].forEach(function (rule) {
    return pluralize.addIrregularRule(rule[0], rule[1]);
  });

  /**
   * Pluralization rules.
   */
  [
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you']
  ].forEach(function (rule) {
    return pluralize.addPluralRule(rule[0], rule[1]);
  });

  /**
   * Singularization rules.
   */
  [
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/ies$/i, 'y'],
    [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],
    [/\b(mon|smil)ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man']
  ].forEach(function (rule) {
    return pluralize.addSingularRule(rule[0], rule[1]);
  });

  /**
   * Uncountable rules.
   */
  [
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'mail',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i, // "chickpox", "smallpox"
    /ois$/i,
    /deer$/i, // "deer", "reindeer"
    /fish$/i, // "fish", "blowfish", "angelfish"
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i // "chinese", "japanese"
  ].forEach(pluralize.addUncountableRule);

  return pluralize;
});


/***/ }),
/* 17 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./~/angular-aria/index.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./angular-aria */ 34);
module.exports = 'ngAria';


/***/ }),
/* 18 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./~/angular-messages/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./angular-messages */ 35);
module.exports = 'ngMessages';


/***/ }),
/* 19 */
/* unknown exports provided */
/* all exports used */
/*!************************************!*\
  !*** ./src/polyfills/index.coffee ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! es6-promise */ 37).polyfill();

__webpack_require__(/*! ./Array.find.polyfill */ 44);

__webpack_require__(/*! ./Array.findIndex.polyfill */ 45);

__webpack_require__(/*! ./Array.includes.polyfill */ 46);

__webpack_require__(/*! ./Element.matches.polyfill */ 47);

__webpack_require__(/*! ./jQuery.typeAttribute.patch */ 50);

__webpack_require__(/*! ./Object.assign.polyfill */ 48);

__webpack_require__(/*! ./scrollingElement.polyfill */ 51);

__webpack_require__(/*! ./String.includes.polyfill */ 49);


/***/ }),
/* 20 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** external "angular-sanitize" ***!
  \***********************************/
/***/ (function(module, exports) {

module.exports = require("angular-sanitize");

/***/ }),
/* 21 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** external "ui-select" ***!
  \****************************/
/***/ (function(module, exports) {

module.exports = require("ui-select");

/***/ }),
/* 22 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/drawing/kendo-drawing.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(497);
	module.exports = __webpack_require__(497);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 497:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(498), __webpack_require__(499), __webpack_require__(500) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	/* jshint eqnull:true */
	/* jshint -W069 */
	/* jshint latedef: nofunc */

	window.kendo = window.kendo || {};
	var kendoDrawing = kendo.drawing;
	var kendoDrawingUtil = kendoDrawing.util;
	var Class = kendo.Class;
	var kendoUtil = kendo.util;
	var support = kendo.support;

	var createPromise = kendoDrawingUtil.createPromise;
	var promiseAll = kendoDrawingUtil.promiseAll;

	var ObserversMixin = {
	    extend: function(proto) {
	        var this$1 = this;

	        for (var method in this) {
	            if (method !== "extend") {
	                proto[method] = this$1[method];
	            }
	        }
	    },

	    observers: function() {
	        this._observers = this._observers || [];
	        return this._observers;
	    },

	    addObserver: function(element) {
	        if (!this._observers) {
	            this._observers = [ element ];
	        } else {
	            this._observers.push(element);
	        }
	        return this;
	    },

	    removeObserver: function(element) {
	        var observers = this.observers();
	        var index = observers.indexOf(element);
	        if (index !== -1) {
	            observers.splice(index, 1);
	        }
	        return this;
	    },

	    trigger: function(methodName, event) {
	        var observers = this._observers;

	        if (observers && !this._suspended) {
	            for (var idx = 0; idx < observers.length; idx++) {
	                var observer = observers[idx];
	                if (observer[methodName]) {
	                    observer[methodName](event);
	                }
	            }
	        }
	        return this;
	    },

	    optionsChange: function(e) {
	        if (e === void 0) { e = {}; }

	        e.element = this;
	        this.trigger("optionsChange", e);
	    },

	    geometryChange: function() {
	        this.trigger("geometryChange", {
	            element: this
	        });
	    },

	    suspend: function() {
	        this._suspended = (this._suspended || 0) + 1;
	        return this;
	    },

	    resume: function() {
	        this._suspended = Math.max((this._suspended || 0) - 1, 0);
	        return this;
	    },

	    _observerField: function(field, value) {
	        if (this[field]) {
	            this[field].removeObserver(this);
	        }
	        this[field] = value;
	        value.addObserver(this);
	    }
	};

	function append(first, second) {
	    first.push.apply(first, second);
	    return first;
	}

	/* eslint-disable key-spacing,no-multi-spaces,no-param-reassign */

	var literals = {
	    1    : "i",       10   : "x",       100  : "c",
	    2    : "ii",      20   : "xx",      200  : "cc",
	    3    : "iii",     30   : "xxx",     300  : "ccc",
	    4    : "iv",      40   : "xl",      400  : "cd",
	    5    : "v",       50   : "l",       500  : "d",
	    6    : "vi",      60   : "lx",      600  : "dc",
	    7    : "vii",     70   : "lxx",     700  : "dcc",
	    8    : "viii",    80   : "lxxx",    800  : "dccc",
	    9    : "ix",      90   : "xc",      900  : "cm",
	    1000 : "m"
	};

	function arabicToRoman(n) {
	    var values = [ 1000,
	                   900 , 800, 700, 600, 500, 400, 300, 200, 100,
	                   90  , 80 , 70 , 60 , 50 , 40 , 30 , 20 , 10 ,
	                   9   , 8  , 7  , 6  , 5  , 4  , 3  , 2  , 1 ];

	    var roman = "";
	    while (n > 0) {
	        if (n < values[0]) {
	            values.shift();
	        } else {
	            roman += literals[values[0]];
	            n -= values[0];
	        }
	    }
	    return roman;
	}

	var UNDEFINED = "undefined";

	function defined(value) {
	    return typeof value !== UNDEFINED;
	}

	var defId = 1;

	function definitionId() {
	    return "kdef" + defId++;
	}

	var DEG_TO_RAD = Math.PI / 180;
	var MAX_NUM = Number.MAX_VALUE;
	var MIN_NUM = -Number.MAX_VALUE;

	function deg(radians) {
	    return radians / DEG_TO_RAD;
	}

	var KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	var fromCharCode = String.fromCharCode;

	function encodeUTF8(input) {
	    var output = "";

	    for (var i = 0; i < input.length; i++) {
	        var c = input.charCodeAt(i);

	        if (c < 0x80) {
	            // One byte
	            output += fromCharCode(c);
	        } else if (c < 0x800) {
	            // Two bytes
	            output += fromCharCode(0xC0 | (c >>> 6));
	            output += fromCharCode(0x80 | (c & 0x3f));
	        } else if (c < 0x10000) {
	            // Three bytes
	            output += fromCharCode(0xE0 | (c >>> 12));
	            output += fromCharCode(0x80 | (c >>> 6 & 0x3f));
	            output += fromCharCode(0x80 | (c & 0x3f));
	        }
	    }

	    return output;
	}

	function encodeBase64(input) {
	    var output = "";
	    var i = 0;

	    var utfInput = encodeUTF8(input);

	    while (i < utfInput.length) {
	        var chr1 = utfInput.charCodeAt(i++);
	        var chr2 = utfInput.charCodeAt(i++);
	        var chr3 = utfInput.charCodeAt(i++);

	        var enc1 = chr1 >> 2;
	        var enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	        var enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	        var enc4 = chr3 & 63;

	        if (isNaN(chr2)) {
	            enc3 = enc4 = 64;
	        } else if (isNaN(chr3)) {
	            enc4 = 64;
	        }

	        output = output +
	            KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +
	            KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
	    }

	    return output;
	}

	function eventCoordinates(e) {
	    if (defined((e.x || {}).location)) {
	        return {
	            x: e.x.location,
	            y: e.y.location
	        };
	    }

	    return {
	        x: e.pageX || e.clientX || 0,
	        y: e.pageY || e.clientY || 0
	    };
	}

	function eventElement(e) {
	    return e.touch ? e.touch.initialTouch : e.target;
	}

	function isTransparent(color) {
	    return color === "" || color === null || color === "none" || color === "transparent" || !defined(color);
	}

	function last(array) {
	    if (array) {
	        return array[array.length - 1];
	    }
	}

	function limitValue(value, min, max) {
	    return Math.max(Math.min(value, max), min);
	}

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	// mergeSort is stable.
	function mergeSort(a, cmp) {
	    if (a.length < 2) {
	        return a.slice();
	    }
	    function merge(a, b) {
	        var r = [], ai = 0, bi = 0, i = 0;
	        while (ai < a.length && bi < b.length) {
	            if (cmp(a[ai], b[bi]) <= 0) {
	                r[i++] = a[ai++];
	            } else {
	                r[i++] = b[bi++];
	            }
	        }
	        if (ai < a.length) {
	            r.push.apply(r, a.slice(ai));
	        }
	        if (bi < b.length) {
	            r.push.apply(r, b.slice(bi));
	        }
	        return r;
	    }
	    return (function sort(a) {
	        if (a.length <= 1) {
	            return a;
	        }
	        var m = Math.floor(a.length / 2);
	        var left = a.slice(0, m);
	        var right = a.slice(m);
	        left = sort(left);
	        right = sort(right);
	        return merge(left, right);
	    })(a);
	}

	function rad(degrees) {
	    return degrees * DEG_TO_RAD;
	}

	function pow(p) {
	    if (p) {
	        return Math.pow(10, p);
	    }

	    return 1;
	}

	function round(value, precision) {
	    var power = pow(precision);
	    return Math.round(value * power) / power;
	}

	function valueOrDefault(value, defaultValue) {
	    return defined(value) ? value : defaultValue;
	}

	function bindEvents(element, events) {
	    for (var eventName in events) {
	        var eventNames = eventName.trim().split(" ");
	        for (var idx = 0; idx < eventNames.length; idx++) {
	            element.addEventListener(eventNames[idx], events[eventName], false);
	        }
	    }
	}

	function elementOffset(element) {
	    var box = element.getBoundingClientRect();

	    var documentElement = document.documentElement;

	    return {
	        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0),
	        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0)
	    };
	}

	function elementStyles(element, styles) {
	    var result = {};
	    var style = window.getComputedStyle(element);
	    var stylesArray = Array.isArray(styles) ? styles : [ styles ];

	    for (var idx = 0; idx < stylesArray.length; idx++) {
	        var field = stylesArray[idx];
	        result[field] = style[field];
	    }

	    return result;
	}

	function getPixels(value) {
	    if (isNaN(value)) {
	        return value;
	    }
	    return value + "px";
	}

	function elementSize(element, size) {
	    if (size) {
	        var width = size.width;
	        var height = size.height;

	        if (defined(width)) {
	            element.style.width = getPixels(width);
	        }

	        if (defined(height)) {
	            element.style.height = getPixels(height);
	        }

	    } else {
	        var size$1 = elementStyles(element, [ 'width', 'height' ]);

	        return {
	            width: parseInt(size$1.width, 10),
	            height: parseInt(size$1.height, 10)
	        };
	    }
	}

	function unbindEvents(element, events) {
	    if (events === void 0) { events = {}; }

	    for (var name in events) {
	        var eventNames = name.trim().split(" ");
	        for (var idx = 0; idx < eventNames.length; idx++) {
	            element.removeEventListener(eventNames[idx], events[name], false);
	        }
	    }
	}

	var util = {
		append: append,
		arabicToRoman: arabicToRoman,
		createPromise: createPromise,
		defined: defined,
		definitionId: definitionId,
		deg: deg,
		encodeBase64: encodeBase64,
		eventCoordinates: eventCoordinates,
		eventElement: eventElement,
		isTransparent: isTransparent,
		last: last,
		limitValue: limitValue,
		mergeSort: mergeSort,
		promiseAll: promiseAll,
		rad: rad,
		round: round,
		valueOrDefault: valueOrDefault,
		bindEvents: bindEvents,
		elementOffset: elementOffset,
		elementSize: elementSize,
		elementStyles: elementStyles,
		unbindEvents: unbindEvents,
		DEG_TO_RAD: DEG_TO_RAD,
		MAX_NUM: MAX_NUM,
		MIN_NUM: MIN_NUM
	};

	var toString = {}.toString;

	var OptionsStore = Class.extend({
	    init: function(options, prefix) {
	        var this$1 = this;
	        if (prefix === void 0) { prefix = ""; }

	        this.prefix = prefix;

	        for (var field in options) {
	            var member = options[field];
	            member = this$1._wrap(member, field);
	            this$1[field] = member;
	        }
	    },

	    get: function(field) {
	        var parts = field.split(".");
	        var result = this;

	        while (parts.length && result) {
	            var part = parts.shift();
	            result = result[part];
	        }

	        return result;
	    },

	    set: function(field, value) {
	        var current = this.get(field);

	        if (current !== value) {
	            this._set(field, this._wrap(value, field));
	            this.optionsChange({
	                field: this.prefix + field,
	                value: value
	            });
	        }
	    },

	    _set: function(field, value) {
	        var this$1 = this;

	        var composite = field.indexOf(".") >= 0;
	        var parentObj = this;
	        var fieldName = field;

	        if (composite) {
	            var parts = fieldName.split(".");
	            var prefix = this.prefix;

	            while (parts.length > 1) {
	                fieldName = parts.shift();
	                prefix += fieldName + ".";

	                var obj = parentObj[fieldName];

	                if (!obj) {
	                    obj = new OptionsStore({}, prefix);
	                    obj.addObserver(this$1);
	                    parentObj[fieldName] = obj;
	                }
	                parentObj = obj;
	            }
	            fieldName = parts[0];
	        }

	        parentObj._clear(fieldName);
	        parentObj[fieldName] = value;
	    },

	    _clear: function(field) {
	        var current = this[field];
	        if (current && current.removeObserver) {
	            current.removeObserver(this);
	        }
	    },

	    _wrap: function(object, field) {
	        var type = toString.call(object);
	        var wrapped = object;

	        if (wrapped !== null && defined(wrapped) && type === "[object Object]") {
	            if (!(object instanceof OptionsStore) && !(object instanceof Class)) {
	                wrapped = new OptionsStore(wrapped, this.prefix + field + ".");
	            }

	            wrapped.addObserver(this);
	        }

	        return wrapped;
	    }
	});

	ObserversMixin.extend(OptionsStore.prototype);

	function setAccessor(field) {
	    return function(value) {
	        if (this[field] !== value) {
	            this[field] = value;
	            this.geometryChange();
	        }

	        return this;
	    };
	}

	function getAccessor(field) {
	    return function() {
	        return this[field];
	    };
	}

	function defineAccessors(fn, fields) {
	    for (var i = 0; i < fields.length; i++) {
	        var name = fields[i];
	        var capitalized = name.charAt(0).toUpperCase() +
	                          name.substring(1, name.length);

	        fn["set" + capitalized] = setAccessor(name);
	        fn["get" + capitalized] = getAccessor(name);
	    }
	}

	var Matrix = Class.extend({
	    init: function(a, b, c, d, e, f) {
	        if (a === void 0) { a = 0; }
	        if (b === void 0) { b = 0; }
	        if (c === void 0) { c = 0; }
	        if (d === void 0) { d = 0; }
	        if (e === void 0) { e = 0; }
	        if (f === void 0) { f = 0; }

	        this.a = a;
	        this.b = b;
	        this.c = c;
	        this.d = d;
	        this.e = e;
	        this.f = f;
	    },

	    multiplyCopy: function(matrix) {
	        return new Matrix(
	            this.a * matrix.a + this.c * matrix.b,
	            this.b * matrix.a + this.d * matrix.b,
	            this.a * matrix.c + this.c * matrix.d,
	            this.b * matrix.c + this.d * matrix.d,
	            this.a * matrix.e + this.c * matrix.f + this.e,
	            this.b * matrix.e + this.d * matrix.f + this.f
	        );
	    },

	    invert: function() {
	        var ref = this;
	        var a = ref.a;
	        var b = ref.b;
	        var d = ref.c;
	        var e = ref.d;
	        var g = ref.e;
	        var h = ref.f;
	        var det = a * e - b * d;

	        if (det === 0) {
	            return null;
	        }

	        return new Matrix(e / det, -b / det, -d / det, a / det,
	                          (d * h - e * g) / det, (b * g - a * h) / det);
	    },

	    clone: function() {
	        return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
	    },

	    equals: function(other) {
	        if (!other) {
	            return false;
	        }

	        return this.a === other.a && this.b === other.b &&
	               this.c === other.c && this.d === other.d &&
	               this.e === other.e && this.f === other.f;
	    },

	    round: function(precision) {
	        this.a = round(this.a, precision);
	        this.b = round(this.b, precision);
	        this.c = round(this.c, precision);
	        this.d = round(this.d, precision);
	        this.e = round(this.e, precision);
	        this.f = round(this.f, precision);

	        return this;
	    },

	    toArray: function(precision) {
	        var result = [ this.a, this.b, this.c, this.d, this.e, this.f ];

	        if (defined(precision)) {
	            for (var i = 0; i < result.length; i++) {
	                result[i] = round(result[i], precision);
	            }
	        }

	        return result;
	    },

	    toString: function(precision, separator) {
	        if (separator === void 0) { separator = ","; }

	        return this.toArray(precision).join(separator);
	    }
	});

	Matrix.translate = function(x, y) {
	    return new Matrix(1, 0, 0, 1, x, y);
	};

	Matrix.unit = function() {
	    return new Matrix(1, 0, 0, 1, 0, 0);
	};

	Matrix.rotate = function(angle, x, y) {
	    var matrix = new Matrix();
	    matrix.a = Math.cos(rad(angle));
	    matrix.b = Math.sin(rad(angle));
	    matrix.c = -matrix.b;
	    matrix.d = matrix.a;
	    matrix.e = (x - x * matrix.a + y * matrix.b) || 0;
	    matrix.f = (y - y * matrix.a - x * matrix.b) || 0;

	    return matrix;
	};

	Matrix.scale = function(scaleX, scaleY) {
	    return new Matrix(scaleX, 0, 0, scaleY, 0, 0);
	};

	Matrix.IDENTITY = Matrix.unit();

	function toMatrix(transformation) {
	    if (transformation && typeof transformation.matrix === "function") {
	        return transformation.matrix();
	    }

	    return transformation;
	}

	var Point = Class.extend({
	    init: function(x, y) {
	        if (x === void 0) { x = 0; }
	        if (y === void 0) { y = 0; }

	        this.x = x;
	        this.y = y;
	    },

	    equals: function(other) {
	        return other && other.x === this.x && other.y === this.y;
	    },

	    clone: function() {
	        return new Point(this.x, this.y);
	    },

	    rotate: function(angle, origin) {
	        var originPoint = Point.create(origin) || Point.ZERO;

	        return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));
	    },

	    translate: function(x, y) {
	        this.x += x;
	        this.y += y;

	        this.geometryChange();

	        return this;
	    },

	    translateWith: function(point) {
	        return this.translate(point.x, point.y);
	    },

	    move: function(x, y) {
	        this.x = this.y = 0;
	        return this.translate(x, y);
	    },

	    scale: function(scaleX, scaleY) {
	        if (scaleY === void 0) { scaleY = scaleX; }

	        this.x *= scaleX;
	        this.y *= scaleY;

	        this.geometryChange();

	        return this;
	    },

	    scaleCopy: function(scaleX, scaleY) {
	        return this.clone().scale(scaleX, scaleY);
	    },

	    transform: function(transformation) {
	        var matrix = toMatrix(transformation);
	        var ref = this;
	        var x = ref.x;
	        var y = ref.y;

	        this.x = matrix.a * x + matrix.c * y + matrix.e;
	        this.y = matrix.b * x + matrix.d * y + matrix.f;

	        this.geometryChange();

	        return this;
	    },

	    transformCopy: function(transformation) {
	        var point = this.clone();

	        if (transformation) {
	            point.transform(transformation);
	        }

	        return point;
	    },

	    distanceTo: function(point) {
	        var dx = this.x - point.x;
	        var dy = this.y - point.y;

	        return Math.sqrt(dx * dx + dy * dy);
	    },

	    round: function(digits) {
	        this.x = round(this.x, digits);
	        this.y = round(this.y, digits);

	        this.geometryChange();

	        return this;
	    },

	    toArray: function(digits) {
	        var doRound = defined(digits);
	        var x = doRound ? round(this.x, digits) : this.x;
	        var y = doRound ? round(this.y, digits) : this.y;

	        return [ x, y ];
	    },

	    toString: function(digits, separator) {
	        if (separator === void 0) { separator = " "; }

	        var ref = this;
	        var x = ref.x;
	        var y = ref.y;

	        if (defined(digits)) {
	            x = round(x, digits);
	            y = round(y, digits);
	        }

	        return x + separator + y;
	    }
	});

	Point.create = function(arg0, arg1) {
	    if (defined(arg0)) {
	        if (arg0 instanceof Point) {
	            return arg0;
	        } else if (arguments.length === 1 && arg0.length === 2) {
	            return new Point(arg0[0], arg0[1]);
	        }

	        return new Point(arg0, arg1);
	    }
	};

	Point.min = function() {
	    var arguments$1 = arguments;

	    var minX = MAX_NUM;
	    var minY = MAX_NUM;

	    for (var i = 0; i < arguments.length; i++) {
	        var point = arguments$1[i];
	        minX = Math.min(point.x, minX);
	        minY = Math.min(point.y, minY);
	    }

	    return new Point(minX, minY);
	};

	Point.max = function() {
	    var arguments$1 = arguments;

	    var maxX = MIN_NUM;
	    var maxY = MIN_NUM;

	    for (var i = 0; i < arguments.length; i++) {
	        var point = arguments$1[i];
	        maxX = Math.max(point.x, maxX);
	        maxY = Math.max(point.y, maxY);
	    }

	    return new Point(maxX, maxY);
	};

	Point.minPoint = function() {
	    return new Point(MIN_NUM, MIN_NUM);
	};

	Point.maxPoint = function() {
	    return new Point(MAX_NUM, MAX_NUM);
	};

	if (Object.defineProperties) {
	    Object.defineProperties(Point, {
	        ZERO: {
	            get: function() {
	                return new Point(0, 0);
	            }
	        }
	    });
	}

	defineAccessors(Point.prototype, [ "x", "y" ]);
	ObserversMixin.extend(Point.prototype);

	var Size = Class.extend({
	    init: function(width, height) {
	        if (width === void 0) { width = 0; }
	        if (height === void 0) { height = 0; }

	        this.width = width;
	        this.height = height;
	    },

	    equals: function(other) {
	        return other && other.width === this.width && other.height === this.height;
	    },

	    clone: function() {
	        return new Size(this.width, this.height);
	    },

	    toArray: function(digits) {
	        var doRound = defined(digits);
	        var width = doRound ? round(this.width, digits) : this.width;
	        var height = doRound ? round(this.height, digits) : this.height;

	        return [ width, height ];
	    }
	});

	Size.create = function(arg0, arg1) {
	    if (defined(arg0)) {
	        if (arg0 instanceof Size) {
	            return arg0;
	        } else if (arguments.length === 1 && arg0.length === 2) {
	            return new Size(arg0[0], arg0[1]);
	        }

	        return new Size(arg0, arg1);
	    }
	};

	if (Object.defineProperties) {
	    Object.defineProperties(Size, {
	        ZERO: {
	            get: function() {
	                return new Size(0, 0);
	            }
	        }
	    });
	}

	defineAccessors(Size.prototype, [ "width", "height" ]);
	ObserversMixin.extend(Size.prototype);

	var Rect = Class.extend({
	    init: function(origin, size) {
	        if (origin === void 0) { origin = new Point(); }
	        if (size === void 0) { size = new Size(); }

	        this.setOrigin(origin);
	        this.setSize(size);
	    },

	    clone: function() {
	        return new Rect(
	            this.origin.clone(),
	            this.size.clone()
	        );
	    },

	    equals: function(other) {
	        return other &&
	               other.origin.equals(this.origin) &&
	               other.size.equals(this.size);
	    },

	    setOrigin: function(value) {
	        this._observerField("origin", Point.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getOrigin: function() {
	        return this.origin;
	    },

	    setSize: function(value) {
	        this._observerField("size", Size.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getSize: function() {
	        return this.size;
	    },

	    width: function() {
	        return this.size.width;
	    },

	    height: function() {
	        return this.size.height;
	    },

	    topLeft: function() {
	        return this.origin.clone();
	    },

	    bottomRight: function() {
	        return this.origin.clone().translate(this.width(), this.height());
	    },

	    topRight: function() {
	        return this.origin.clone().translate(this.width(), 0);
	    },

	    bottomLeft: function() {
	        return this.origin.clone().translate(0, this.height());
	    },

	    center: function() {
	        return this.origin.clone().translate(this.width() / 2, this.height() / 2);
	    },

	    bbox: function(matrix) {
	        var tl = this.topLeft().transformCopy(matrix);
	        var tr = this.topRight().transformCopy(matrix);
	        var br = this.bottomRight().transformCopy(matrix);
	        var bl = this.bottomLeft().transformCopy(matrix);

	        return Rect.fromPoints(tl, tr, br, bl);
	    },

	    transformCopy: function(m) {
	        return Rect.fromPoints(
	            this.topLeft().transform(m),
	            this.bottomRight().transform(m)
	        );
	    },

	    expand: function(x, y) {
	        if (y === void 0) { y = x; }

	        this.size.width += 2 * x;
	        this.size.height += 2 * y;

	        this.origin.translate(-x, -y);

	        return this;
	    },

	    expandCopy: function(x, y) {
	        return this.clone().expand(x, y);
	    },

	    containsPoint: function(point) {
	        var origin = this.origin;
	        var bottomRight = this.bottomRight();
	        return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);
	    },

	    _isOnPath: function(point, width) {
	        var rectOuter = this.expandCopy(width, width);
	        var rectInner = this.expandCopy(-width, -width);

	        return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);
	    }
	});

	Rect.fromPoints = function() {
	    var topLeft = Point.min.apply(null, arguments);
	    var bottomRight = Point.max.apply(null, arguments);
	    var size = new Size(
	        bottomRight.x - topLeft.x,
	        bottomRight.y - topLeft.y
	    );

	    return new Rect(topLeft, size);
	};

	Rect.union = function(a, b) {
	    return Rect.fromPoints(
	        Point.min(a.topLeft(), b.topLeft()),
	        Point.max(a.bottomRight(), b.bottomRight())
	    );
	};

	Rect.intersect = function(a, b) {
	    var rect1 = {
	        left: a.topLeft().x,
	        top: a.topLeft().y,
	        right: a.bottomRight().x,
	        bottom: a.bottomRight().y
	    };

	    var rect2 = {
	        left: b.topLeft().x,
	        top: b.topLeft().y,
	        right: b.bottomRight().x,
	        bottom: b.bottomRight().y
	    };

	    if (rect1.left <= rect2.right &&
	        rect2.left <= rect1.right &&
	        rect1.top <= rect2.bottom &&
	        rect2.top <= rect1.bottom) {
	        return Rect.fromPoints(
	            new Point(Math.max(rect1.left, rect2.left), Math.max(rect1.top, rect2.top)),
	            new Point(Math.min(rect1.right, rect2.right), Math.min(rect1.bottom, rect2.bottom))
	        );
	    }
	};

	ObserversMixin.extend(Rect.prototype);

	var Transformation = Class.extend({
	    init: function(matrix) {
	        if (matrix === void 0) { matrix = Matrix.unit(); }

	        this._matrix = matrix;
	    },

	    clone: function() {
	        return new Transformation(
	            this._matrix.clone()
	        );
	    },

	    equals: function(other) {
	        return other &&
	               other._matrix.equals(this._matrix);
	    },

	    translate: function(x, y) {
	        this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));

	        this._optionsChange();
	        return this;
	    },

	    scale: function(scaleX, scaleY, origin) {
	        if (scaleY === void 0) { scaleY = scaleX; }
	        if (origin === void 0) { origin = null; }

	        var originPoint = origin;

	        if (originPoint) {
	            originPoint = Point.create(originPoint);
	            this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));
	        }

	        this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));

	        if (originPoint) {
	            this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));
	        }

	        this._optionsChange();
	        return this;
	    },

	    rotate: function(angle, origin) {
	        var originPoint = Point.create(origin) || Point.ZERO;

	        this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));

	        this._optionsChange();
	        return this;
	    },

	    multiply: function(transformation) {
	        var matrix = toMatrix(transformation);

	        this._matrix = this._matrix.multiplyCopy(matrix);

	        this._optionsChange();
	        return this;
	    },

	    matrix: function(value) {
	        if (value) {
	            this._matrix = value;
	            this._optionsChange();
	            return this;
	        }

	        return this._matrix;
	    },

	    _optionsChange: function() {
	        this.optionsChange({
	            field: "transform",
	            value: this
	        });
	    }
	});

	ObserversMixin.extend(Transformation.prototype);

	function transform(matrix) {
	    if (matrix === null) {
	        return null;
	    }

	    if (matrix instanceof Transformation) {
	        return matrix;
	    }

	    return new Transformation(matrix);
	}

	var Element$1 = Class.extend({
	    init: function(options) {

	        this._initOptions(options);
	    },

	    _initOptions: function(options) {
	        if (options === void 0) { options = {}; }

	        var clip = options.clip;
	        var transform$$1 = options.transform;

	        if (transform$$1) {
	            options.transform = transform(transform$$1);
	        }

	        if (clip && !clip.id) {
	            clip.id = definitionId();
	        }

	        this.options = new OptionsStore(options);
	        this.options.addObserver(this);
	    },

	    transform: function(value) {
	        if (defined(value)) {
	            this.options.set("transform", transform(value));
	        } else {
	            return this.options.get("transform");
	        }
	    },

	    parentTransform: function() {
	        var element = this;
	        var parentMatrix;

	        while (element.parent) {
	            element = element.parent;
	            var transformation = element.transform();
	            if (transformation) {
	                parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());
	            }
	        }

	        if (parentMatrix) {
	            return transform(parentMatrix);
	        }
	    },

	    currentTransform: function(parentTransform) {
	        if (parentTransform === void 0) { parentTransform = this.parentTransform(); }

	        var elementTransform = this.transform();
	        var elementMatrix = toMatrix(elementTransform);

	        var parentMatrix = toMatrix(parentTransform);
	        var combinedMatrix;

	        if (elementMatrix && parentMatrix) {
	            combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);
	        } else {
	            combinedMatrix = elementMatrix || parentMatrix;
	        }

	        if (combinedMatrix) {
	            return transform(combinedMatrix);
	        }
	    },

	    visible: function(value) {
	        if (defined(value)) {
	            this.options.set("visible", value);
	            return this;
	        }

	        return this.options.get("visible") !== false;
	    },

	    clip: function(value) {
	        var options = this.options;
	        if (defined(value)) {
	            if (value && !value.id) {
	                value.id = definitionId();
	            }
	            options.set("clip", value);
	            return this;
	        }

	        return options.get("clip");
	    },

	    opacity: function(value) {
	        if (defined(value)) {
	            this.options.set("opacity", value);
	            return this;
	        }

	        return valueOrDefault(this.options.get("opacity"), 1);
	    },

	    clippedBBox: function(transformation) {
	        var bbox = this._clippedBBox(transformation);
	        if (bbox) {
	            var clip = this.clip();
	            return clip ? Rect.intersect(bbox, clip.bbox(transformation)) : bbox;
	        }
	    },

	    containsPoint: function(point, parentTransform) {
	        if (this.visible()) {
	            var transform$$1 = this.currentTransform(parentTransform);
	            var transformedPoint = point;
	            if (transform$$1) {
	                transformedPoint = point.transformCopy(transform$$1.matrix().invert());
	            }
	            return (this._hasFill() && this._containsPoint(transformedPoint)) || (this._isOnPath && this._hasStroke() && this._isOnPath(transformedPoint));
	        }
	        return false;
	    },

	    _hasFill: function() {
	        var fill = this.options.fill;
	        return fill && !isTransparent(fill.color);
	    },

	    _hasStroke: function() {
	        var stroke = this.options.stroke;
	        return stroke && stroke.width > 0 && !isTransparent(stroke.color);
	    },

	    _clippedBBox: function(transformation) {
	        return this.bbox(transformation);
	    }
	});

	Element$1.prototype.nodeType = "Element";

	ObserversMixin.extend(Element$1.prototype);

	function ellipseExtremeAngles(center, rx, ry, matrix) {
	    var extremeX = 0;
	    var extremeY = 0;

	    if (matrix) {
	        extremeX = Math.atan2(matrix.c * ry, matrix.a * rx);
	        if (matrix.b !== 0) {
	            extremeY = Math.atan2(matrix.d * ry, matrix.b * rx);
	        }
	    }

	    return {
	        x: extremeX,
	        y: extremeY
	    };
	}

	var PI_DIV_2 = Math.PI / 2;

	var Circle$2 = Class.extend({
	    init: function(center, radius) {
	        if (center === void 0) { center = new Point(); }
	        if (radius === void 0) { radius = 0; }

	        this.setCenter(center);
	        this.setRadius(radius);
	    },

	    setCenter: function(value) {
	        this._observerField("center", Point.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getCenter: function() {
	        return this.center;
	    },

	    equals: function(other) {
	        return other &&
	               other.center.equals(this.center) &&
	               other.radius === this.radius;
	    },

	    clone: function() {
	        return new Circle$2(this.center.clone(), this.radius);
	    },

	    pointAt: function(angle) {
	        return this._pointAt(rad(angle));
	    },

	    bbox: function(matrix) {
	        var this$1 = this;

	        var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);
	        var minPoint = Point.maxPoint();
	        var maxPoint = Point.minPoint();

	        for (var i = 0; i < 4; i++) {
	            var currentPointX = this$1._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);
	            var currentPointY = this$1._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);
	            var currentPoint = new Point(currentPointX.x, currentPointY.y);

	            minPoint = Point.min(minPoint, currentPoint);
	            maxPoint = Point.max(maxPoint, currentPoint);
	        }

	        return Rect.fromPoints(minPoint, maxPoint);
	    },

	    _pointAt: function(angle) {
	        var ref = this;
	        var center = ref.center;
	        var radius = ref.radius;

	        return new Point(
	            center.x + radius * Math.cos(angle),
	            center.y + radius * Math.sin(angle)
	        );
	    },

	    containsPoint: function(point) {
	        var ref = this;
	        var center = ref.center;
	        var radius = ref.radius;
	        var inCircle = Math.pow(point.x - center.x, 2) +
	            Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);
	        return inCircle;
	    },

	    _isOnPath: function(point, width) {
	        var ref = this;
	        var center = ref.center;
	        var radius = ref.radius;
	        var pointDistance = center.distanceTo(point);

	        return radius - width <= pointDistance && pointDistance <= radius + width;
	    }
	});

	defineAccessors(Circle$2.prototype, [ "radius" ]);
	ObserversMixin.extend(Circle$2.prototype);

	var GRADIENT = "Gradient";

	var Paintable = {
	    extend: function(proto) {
	        proto.fill = this.fill;
	        proto.stroke = this.stroke;
	    },

	    fill: function(color, opacity) {
	        var options = this.options;

	        if (defined(color)) {
	            if (color && color.nodeType !== GRADIENT) {
	                var newFill = {
	                    color: color
	                };
	                if (defined(opacity)) {
	                    newFill.opacity = opacity;
	                }
	                options.set("fill", newFill);
	            } else {
	                options.set("fill", color);
	            }

	            return this;
	        }

	        return options.get("fill");
	    },

	    stroke: function(color, width, opacity) {
	        if (defined(color)) {
	            this.options.set("stroke.color", color);

	            if (defined(width)) {
	                this.options.set("stroke.width", width);
	            }

	            if (defined(opacity)) {
	                this.options.set("stroke.opacity", opacity);
	            }

	            return this;
	        }

	        return this.options.get("stroke");
	    }
	};

	var IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();

	var Measurable = {
	    extend: function(proto) {
	        proto.bbox = this.bbox;
	        proto.geometryChange = this.geometryChange;
	    },

	    bbox: function(transformation) {
	        var combinedMatrix = toMatrix(this.currentTransform(transformation));
	        var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;
	        var bbox;

	        if (this._bboxCache && this._matrixHash === matrixHash) {
	            bbox = this._bboxCache.clone();
	        } else {
	            bbox = this._bbox(combinedMatrix);
	            this._bboxCache = bbox ? bbox.clone() : null;
	            this._matrixHash = matrixHash;
	        }

	        var strokeWidth = this.options.get("stroke.width");
	        if (strokeWidth && bbox) {
	            bbox.expand(strokeWidth / 2);
	        }

	        return bbox;
	    },

	    geometryChange: function() {
	        delete this._bboxCache;
	        this.trigger("geometryChange", {
	            element: this
	        });
	    }
	};

	function geometryAccessor(name) {
	    var fieldName = "_" + name;
	    return function(value) {
	        if (defined(value)) {
	            this._observerField(fieldName, value);
	            this.geometryChange();
	            return this;
	        }

	        return this[fieldName];
	    };
	}

	function defineGeometryAccessors(fn, names) {
	    for (var i = 0; i < names.length; i++) {
	        fn[names[i]] = geometryAccessor(names[i]);
	    }
	}

	var DEFAULT_STROKE = "#000";

	var Circle = Element$1.extend({
	    init: function(geometry, options) {
	        if (geometry === void 0) { geometry = new Circle$2(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);
	        this.geometry(geometry);

	        if (!defined(this.options.stroke)) {
	            this.stroke(DEFAULT_STROKE);
	        }
	    },

	    rawBBox: function() {
	        return this._geometry.bbox();
	    },

	    _bbox: function(matrix) {
	        return this._geometry.bbox(matrix);
	    },

	    _containsPoint: function(point) {
	        return this.geometry().containsPoint(point);
	    },

	    _isOnPath: function(point) {
	        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
	    }
	});

	Circle.prototype.nodeType = "Circle";

	Paintable.extend(Circle.prototype);
	Measurable.extend(Circle.prototype);
	defineGeometryAccessors(Circle.prototype, [ "geometry" ]);

	var PRECISION = 10;

	function close(a, b, tolerance) {
	    if (tolerance === void 0) { tolerance = PRECISION; }

	    return round(Math.abs(a - b), tolerance) === 0;
	}

	function closeOrLess(a, b, tolerance) {
	    return a < b || close(a, b, tolerance);
	}

	function lineIntersection(p0, p1, p2, p3) {
	    var s1x = p1.x - p0.x;
	    var s2x = p3.x - p2.x;
	    var s1y = p1.y - p0.y;
	    var s2y = p3.y - p2.y;
	    var nx = p0.x - p2.x;
	    var ny = p0.y - p2.y;
	    var d = s1x * s2y - s2x * s1y;
	    var s = (s1x * ny - s1y * nx) / d;
	    var t = (s2x * ny - s2y * nx) / d;

	    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
	        return new Point(p0.x + t * s1x, p0.y + t * s1y);
	    }
	}

	var MAX_INTERVAL = 45;
	var pow$1 = Math.pow;

	var Arc$2 = Class.extend({
	    init: function(center, options) {
	        if (center === void 0) { center = new Point(); }
	        if (options === void 0) { options = {}; }

	        this.setCenter(center);

	        this.radiusX = options.radiusX;
	        this.radiusY = options.radiusY || options.radiusX;
	        this.startAngle = options.startAngle;
	        this.endAngle = options.endAngle;
	        this.anticlockwise = options.anticlockwise || false;
	    },

	    clone: function() {
	        return new Arc$2(this.center, {
	            radiusX: this.radiusX,
	            radiusY: this.radiusY,
	            startAngle: this.startAngle,
	            endAngle: this.endAngle,
	            anticlockwise: this.anticlockwise
	        });
	    },

	    setCenter: function(value) {
	        this._observerField("center", Point.create(value));
	        this.geometryChange();
	        return this;
	    },

	    getCenter: function() {
	        return this.center;
	    },

	    pointAt: function(angle) {
	        var center = this.center;
	        var radian = rad(angle);

	        return new Point(
	            center.x + this.radiusX * Math.cos(radian),
	            center.y + this.radiusY * Math.sin(radian)
	        );
	    },

	    curvePoints: function() {
	        var this$1 = this;

	        var startAngle = this.startAngle;
	        var dir = this.anticlockwise ? -1 : 1;
	        var curvePoints = [ this.pointAt(startAngle) ];
	        var interval = this._arcInterval();
	        var intervalAngle = interval.endAngle - interval.startAngle;
	        var subIntervalsCount = Math.ceil(intervalAngle / MAX_INTERVAL);
	        var subIntervalAngle = intervalAngle / subIntervalsCount;
	        var currentAngle = startAngle;

	        for (var i = 1; i <= subIntervalsCount; i++) {
	            var nextAngle = currentAngle + dir * subIntervalAngle;
	            var points = this$1._intervalCurvePoints(currentAngle, nextAngle);

	            curvePoints.push(points.cp1, points.cp2, points.p2);
	            currentAngle = nextAngle;
	        }

	        return curvePoints;
	    },

	    bbox: function(matrix) {
	        var this$1 = this;

	        var interval = this._arcInterval();
	        var startAngle = interval.startAngle;
	        var endAngle = interval.endAngle;
	        var extremeAngles = ellipseExtremeAngles(this.center, this.radiusX, this.radiusY, matrix);
	        var extremeX = deg(extremeAngles.x);
	        var extremeY = deg(extremeAngles.y);
	        var endPoint = this.pointAt(endAngle).transformCopy(matrix);
	        var currentAngleX = bboxStartAngle(extremeX, startAngle);
	        var currentAngleY = bboxStartAngle(extremeY, startAngle);
	        var currentPoint = this.pointAt(startAngle).transformCopy(matrix);
	        var minPoint = Point.min(currentPoint, endPoint);
	        var maxPoint = Point.max(currentPoint, endPoint);

	        while (currentAngleX < endAngle || currentAngleY < endAngle) {
	            var currentPointX = (void 0);
	            if (currentAngleX < endAngle) {
	                currentPointX = this$1.pointAt(currentAngleX).transformCopy(matrix);
	                currentAngleX += 90;
	            }

	            var currentPointY = (void 0);
	            if (currentAngleY < endAngle) {
	                currentPointY = this$1.pointAt(currentAngleY).transformCopy(matrix);
	                currentAngleY += 90;
	            }

	            currentPoint = new Point(currentPointX.x, currentPointY.y);
	            minPoint = Point.min(minPoint, currentPoint);
	            maxPoint = Point.max(maxPoint, currentPoint);
	        }

	        return Rect.fromPoints(minPoint, maxPoint);
	    },

	    _arcInterval: function() {
	        var ref = this;
	        var startAngle = ref.startAngle;
	        var endAngle = ref.endAngle;
	        var anticlockwise = ref.anticlockwise;

	        if (anticlockwise) {
	            var oldStart = startAngle;
	            startAngle = endAngle;
	            endAngle = oldStart;
	        }

	        if (startAngle > endAngle || (anticlockwise && startAngle === endAngle)) {
	            endAngle += 360;
	        }

	        return {
	            startAngle: startAngle,
	            endAngle: endAngle
	        };
	    },

	    _intervalCurvePoints: function(startAngle, endAngle) {
	        var p1 = this.pointAt(startAngle);
	        var p2 = this.pointAt(endAngle);
	        var p1Derivative = this._derivativeAt(startAngle);
	        var p2Derivative = this._derivativeAt(endAngle);
	        var t = (rad(endAngle) - rad(startAngle)) / 3;
	        var cp1 = new Point(p1.x + t * p1Derivative.x, p1.y + t * p1Derivative.y);
	        var cp2 = new Point(p2.x - t * p2Derivative.x, p2.y - t * p2Derivative.y);

	        return {
	            p1: p1,
	            cp1: cp1,
	            cp2: cp2,
	            p2: p2
	        };
	    },

	    _derivativeAt: function(angle) {
	        var radian = rad(angle);

	        return new Point(-this.radiusX * Math.sin(radian), this.radiusY * Math.cos(radian));
	    },

	    containsPoint: function(point) {
	        var interval = this._arcInterval();
	        var intervalAngle = interval.endAngle - interval.startAngle;
	        var ref = this;
	        var center = ref.center;
	        var radiusX = ref.radiusX;
	        var radiusY = ref.radiusY;
	        var distance = center.distanceTo(point);
	        var angleRad = Math.atan2(point.y - center.y, point.x - center.x);
	        var pointRadius = (radiusX * radiusY) /
	            Math.sqrt(pow$1(radiusX, 2) * pow$1(Math.sin(angleRad), 2) + pow$1(radiusY, 2) * pow$1(Math.cos(angleRad), 2));
	        var startPoint = this.pointAt(this.startAngle).round(PRECISION);
	        var endPoint = this.pointAt(this.endAngle).round(PRECISION);
	        var intersection = lineIntersection(center, point.round(PRECISION), startPoint, endPoint);
	        var containsPoint;

	        if (intervalAngle < 180) {
	            containsPoint = intersection && closeOrLess(center.distanceTo(intersection), distance) && closeOrLess(distance, pointRadius);
	        } else {
	            var angle = calculateAngle(center.x, center.y, radiusX, radiusY, point.x, point.y);
	            if (angle !== 360) {
	                angle = (360 + angle) % 360;
	            }

	            var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;
	            containsPoint = (inAngleRange && closeOrLess(distance, pointRadius)) || (!inAngleRange && (!intersection || intersection.equals(point)));
	        }
	        return containsPoint;
	    },

	    _isOnPath: function(point, width) {
	        var interval = this._arcInterval();
	        var center = this.center;
	        var angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);
	        if (angle !== 360) {
	            angle = (360 + angle) % 360;
	        }

	        var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;

	        return inAngleRange && this.pointAt(angle).distanceTo(point) <= width;
	    }
	});

	Arc$2.fromPoints = function(start, end, rx, ry, largeArc, swipe) {
	    var arcParameters = normalizeArcParameters({
	        x1: start.x,
	        y1: start.y,
	        x2: end.x,
	        y2: end.y,
	        rx: rx,
	        ry: ry,
	        largeArc: largeArc,
	        swipe: swipe
	    });

	    return new Arc$2(arcParameters.center, {
	        startAngle: arcParameters.startAngle,
	        endAngle: arcParameters.endAngle,
	        radiusX: rx,
	        radiusY: ry,
	        anticlockwise: swipe === 0
	    });
	};

	defineAccessors(Arc$2.prototype, [ "radiusX", "radiusY", "startAngle", "endAngle", "anticlockwise" ]);
	ObserversMixin.extend(Arc$2.prototype);

	function elipseAngle(start, end, swipe) {
	    var endAngle = end;

	    if (start > endAngle) {
	        endAngle += 360;
	    }

	    var alpha = Math.abs(endAngle - start);
	    if (!swipe) {
	        alpha = 360 - alpha;
	    }

	    return alpha;
	}

	function calculateAngle(cx, cy, rx, ry, x, y) {
	    var cos = round((x - cx) / rx, 3);
	    var sin = round((y - cy) / ry, 3);

	    return round(deg(Math.atan2(sin, cos)));
	}

	function normalizeArcParameters(parameters) {
	    var x1 = parameters.x1;
	    var y1 = parameters.y1;
	    var x2 = parameters.x2;
	    var y2 = parameters.y2;
	    var rx = parameters.rx;
	    var ry = parameters.ry;
	    var largeArc = parameters.largeArc;
	    var swipe = parameters.swipe;
	    var cx, cy;
	    var cx1, cy1;
	    var a, b, c, sqrt;

	    if (y1 !== y2) {
	        var x21 = x2 - x1;
	        var y21 = y2 - y1;
	        var rx2 = pow$1(rx, 2), ry2 = pow$1(ry, 2);
	        var k = (ry2 * x21 * (x1 + x2) + rx2 * y21 * (y1 + y2)) / (2 * rx2 * y21);
	        var yk2 = k - y2;
	        var l = -(x21 * ry2) / (rx2 * y21);

	        a = 1 / rx2 + pow$1(l, 2) / ry2;
	        b = 2 * ((l * yk2) / ry2 - x2 / rx2);
	        c = pow$1(x2, 2) / rx2 + pow$1(yk2, 2) / ry2 - 1;
	        sqrt = Math.sqrt(pow$1(b, 2) - 4 * a * c);

	        cx = (-b - sqrt) / (2 * a);
	        cy = k + l * cx;
	        cx1 = (-b + sqrt) / (2 * a);
	        cy1 = k + l * cx1;
	    } else if (x1 !== x2) {
	        b = - 2 * y2;
	        c = pow$1(((x2 - x1) * ry) / (2 * rx), 2) + pow$1(y2, 2) - pow$1(ry, 2);
	        sqrt = Math.sqrt(pow$1(b, 2) - 4 * c);

	        cx = cx1 = (x1 + x2) / 2;
	        cy = (-b - sqrt) / 2;
	        cy1 = (-b + sqrt) / 2;
	    } else {
	        return false;
	    }

	    var start = calculateAngle(cx, cy, rx, ry, x1, y1);
	    var end = calculateAngle(cx, cy, rx, ry, x2, y2);
	    var alpha = elipseAngle(start, end, swipe);

	    if ((largeArc && alpha <= 180) || (!largeArc && alpha > 180)) {
	        cx = cx1; cy = cy1;
	        start = calculateAngle(cx, cy, rx, ry, x1, y1);
	        end = calculateAngle(cx, cy, rx, ry, x2, y2);
	    }

	    return {
	        center: new Point(cx, cy),
	        startAngle: start,
	        endAngle: end
	    };
	}

	function bboxStartAngle(angle, start) {
	    var startAngle = angle;

	    while (startAngle < start) {
	        startAngle += 90;
	    }

	    return startAngle;
	}

	var push = [].push;
	var pop = [].pop;
	var splice = [].splice;
	var shift = [].shift;
	var slice = [].slice;
	var unshift = [].unshift;

	var ElementsArray = Class.extend({
	    init: function(array) {
	        if (array === void 0) { array = []; }

	        this.length = 0;
	        this._splice(0, array.length, array);
	    },

	    elements: function(value) {
	        if (value) {
	            this._splice(0, this.length, value);

	            this._change();
	            return this;
	        }

	        return this.slice(0);
	    },

	    push: function() {
	        var elements = arguments;
	        var result = push.apply(this, elements);

	        this._add(elements);

	        return result;
	    },

	    slice: function() {
	        return slice.call(this);
	    },

	    pop: function() {
	        var length = this.length;
	        var result = pop.apply(this);

	        if (length) {
	            this._remove([ result ]);
	        }

	        return result;
	    },

	    splice: function(index, howMany) {
	        var elements = slice.call(arguments, 2);
	        var result = this._splice(index, howMany, elements);

	        this._change();

	        return result;
	    },

	    shift: function() {
	        var length = this.length;
	        var result = shift.apply(this);

	        if (length) {
	            this._remove([ result ]);
	        }

	        return result;
	    },

	    unshift: function() {
	        var elements = arguments;
	        var result = unshift.apply(this, elements);

	        this._add(elements);

	        return result;
	    },

	    indexOf: function(element) {
	        var this$1 = this;

	        var length = this.length;

	        for (var idx = 0; idx < length; idx++) {
	            if (this$1[idx] === element) {
	                return idx;
	            }
	        }
	        return -1;
	    },

	    _splice: function(index, howMany, elements) {
	        var result = splice.apply(this, [ index, howMany ].concat(elements));

	        this._clearObserver(result);
	        this._setObserver(elements);

	        return result;
	    },

	    _add: function(elements) {
	        this._setObserver(elements);
	        this._change();
	    },

	    _remove: function(elements) {
	        this._clearObserver(elements);
	        this._change();
	    },

	    _setObserver: function(elements) {
	        var this$1 = this;

	        for (var idx = 0; idx < elements.length; idx++) {
	            elements[idx].addObserver(this$1);
	        }
	    },

	    _clearObserver: function(elements) {
	        var this$1 = this;

	        for (var idx = 0; idx < elements.length; idx++) {
	            elements[idx].removeObserver(this$1);
	        }
	    },

	    _change: function() {}
	});

	ObserversMixin.extend(ElementsArray.prototype);

	var GeometryElementsArray = ElementsArray.extend({
	    _change: function() {
	        this.geometryChange();
	    }
	});

	function pointAccessor(name) {
	    var fieldName = "_" + name;
	    return function(value) {
	        if (defined(value)) {
	            this._observerField(fieldName, Point.create(value));
	            this.geometryChange();
	            return this;
	        }

	        return this[fieldName];
	    };
	}

	function definePointAccessors(fn, names) {
	    for (var i = 0; i < names.length; i++) {
	        fn[names[i]] = pointAccessor(names[i]);
	    }
	}

	function isOutOfEndPoint(endPoint, controlPoint, point) {
	    var angle = deg(Math.atan2(controlPoint.y - endPoint.y, controlPoint.x - endPoint.x));
	    var rotatedPoint = point.transformCopy(transform().rotate(-angle, endPoint));

	    return rotatedPoint.x < endPoint.x;
	}

	function calculateCurveAt(t, field, points) {
	    var t1 = 1 - t;
	    return Math.pow(t1, 3) * points[0][field] +
	        3 * Math.pow(t1, 2) * t * points[1][field] +
	        3 * Math.pow(t, 2) * t1 * points[2][field] +
	        Math.pow(t, 3) * points[3][field];
	}

	function toCubicPolynomial(points, field) {
	    return [ -points[0][field] + 3 * points[1][field] - 3 * points[2][field] + points[3][field],
	        3 * (points[0][field] - 2 * points[1][field] + points[2][field]),
	        3 * (-points[0][field] + points[1][field]),
	        points[0][field]
	    ];
	}

	var ComplexNumber = Class.extend({
	    init: function(real, img) {
	        if (real === void 0) { real = 0; }
	        if (img === void 0) { img = 0; }

	        this.real = real;
	        this.img = img;
	    },

	    add: function(cNumber) {
	        return new ComplexNumber(round(this.real + cNumber.real, PRECISION), round(this.img + cNumber.img, PRECISION));
	    },

	    addConstant: function(value) {
	        return new ComplexNumber(this.real + value, this.img);
	    },

	    negate: function() {
	        return new ComplexNumber(-this.real, -this.img);
	    },

	    multiply: function(cNumber) {
	        return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img,
	            this.real * cNumber.img + this.img * cNumber.real);
	    },

	    multiplyConstant: function(value) {
	        return new ComplexNumber(this.real * value, this.img * value);
	    },

	    nthRoot: function(n) {
	        var rad$$1 = Math.atan2(this.img, this.real);
	        var r = Math.sqrt(Math.pow(this.img, 2) + Math.pow(this.real, 2));
	        var nthR = Math.pow(r, 1 / n);

	        return new ComplexNumber(nthR * Math.cos(rad$$1 / n), nthR * Math.sin(rad$$1 / n)); //Moivre's formula
	    },

	    equals: function(cNumber) {
	        return this.real === cNumber.real && this.img === cNumber.img;
	    },

	    isReal: function() {
	        return this.img === 0;
	    }
	});

	function numberSign(x) {
	    return x < 0 ? -1 : 1;
	}

	function solveQuadraticEquation(a, b, c) {
	    var squareRoot = Math.sqrt(Math.pow(b, 2) - 4 * a * c);
	    return [
	        (-b + squareRoot) / (2 * a),
	        (-b - squareRoot) / (2 * a)
	    ];
	}

	//Cardano's formula
	function solveCubicEquation(a, b, c, d) {
	    if (a === 0) {
	        return solveQuadraticEquation(b, c, d);
	    }

	    var p = (3 * a * c - Math.pow(b, 2)) / (3 * Math.pow(a, 2));
	    var q = (2 * Math.pow(b, 3) - 9 * a * b * c + 27 * Math.pow(a, 2) * d) / (27 * Math.pow(a, 3));
	    var Q = Math.pow(p / 3, 3) + Math.pow(q / 2, 2);
	    var i = new ComplexNumber(0,1);
	    var b3a = -b / (3 * a);
	    var x1, x2, y1, y2, y3, z1, z2;

	    if (Q < 0) {
	        x1 = new ComplexNumber(-q / 2, Math.sqrt(-Q)).nthRoot(3);
	        x2 = new ComplexNumber(-q / 2, - Math.sqrt(-Q)).nthRoot(3);
	    } else {
	        x1 = -q / 2 + Math.sqrt(Q);
	        x1 = new ComplexNumber(numberSign(x1) * Math.pow(Math.abs(x1), 1 / 3));
	        x2 = -q / 2 - Math.sqrt(Q);
	        x2 = new ComplexNumber(numberSign(x2) * Math.pow(Math.abs(x2), 1 / 3));
	    }

	    y1 = x1.add(x2);

	    z1 = x1.add(x2).multiplyConstant(-1 / 2);
	    z2 = x1.add(x2.negate()).multiplyConstant(Math.sqrt(3) / 2);

	    y2 = z1.add(i.multiply(z2));
	    y3 = z1.add(i.negate().multiply(z2));

	    var result = [];

	    if (y1.isReal()) {
	        result.push(round(y1.real + b3a, PRECISION));
	    }
	    if (y2.isReal()) {
	        result.push(round(y2.real + b3a, PRECISION));
	    }
	    if (y3.isReal()) {
	        result.push(round(y3.real + b3a, PRECISION));
	    }

	    return result;
	}

	function hasRootsInRange(points, point, field, rootField, range) {
	    var polynomial = toCubicPolynomial(points, rootField);
	    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);
	    var intersection;

	    for (var idx = 0; idx < roots.length; idx++) {
	        if (0 <= roots[idx] && roots[idx] <= 1) {
	            intersection = calculateCurveAt(roots[idx], field, points);
	            if (Math.abs(intersection - point[field]) <= range) {
	                return true;
	            }
	        }
	    }
	}

	function curveIntersectionsCount(points, point, bbox) {
	    var polynomial = toCubicPolynomial(points, "x");
	    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);
	    var rayIntersection, intersectsRay;
	    var count = 0;
	    for (var i = 0; i < roots.length; i++) {
	        rayIntersection = calculateCurveAt(roots[i], "y", points);
	        intersectsRay = close(rayIntersection, point.y) || rayIntersection > point.y;
	        if (intersectsRay && (((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x) || (0 < roots[i] && roots[i] < 1))) {
	            count++;
	        }
	    }

	    return count;
	}

	function lineIntersectionsCount(a, b, point) {
	    var intersects;
	    if (a.x !== b.x) {
	        var minX = Math.min(a.x, b.x);
	        var maxX = Math.max(a.x, b.x);
	        var minY = Math.min(a.y, b.y);
	        var maxY = Math.max(a.y, b.y);
	        var inRange = minX <= point.x && point.x < maxX;

	        if (minY === maxY) {
	            intersects = point.y <= minY && inRange;
	        } else {
	            intersects = inRange && (((maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x)) / (maxX - minX) + minY - point.y) >= 0;
	        }
	    }

	    return intersects ? 1 : 0;
	}

	var Segment = Class.extend({
	    init: function(anchor, controlIn, controlOut) {

	        this.anchor(anchor || new Point());
	        this.controlIn(controlIn);
	        this.controlOut(controlOut);
	    },

	    bboxTo: function(toSegment, matrix) {
	        var segmentAnchor = this.anchor().transformCopy(matrix);
	        var toSegmentAnchor = toSegment.anchor().transformCopy(matrix);
	        var rect;

	        if (this.controlOut() && toSegment.controlIn()) {
	            rect = this._curveBoundingBox(
	                segmentAnchor, this.controlOut().transformCopy(matrix),
	                toSegment.controlIn().transformCopy(matrix), toSegmentAnchor
	            );
	        } else {
	            rect = this._lineBoundingBox(segmentAnchor, toSegmentAnchor);
	        }

	        return rect;
	    },

	    _lineBoundingBox: function(p1, p2) {
	        return Rect.fromPoints(p1, p2);
	    },

	    _curveBoundingBox: function(p1, cp1, cp2, p2) {
	        var points = [ p1, cp1, cp2, p2 ];
	        var extremesX = this._curveExtremesFor(points, "x");
	        var extremesY = this._curveExtremesFor(points, "y");
	        var xLimits = arrayLimits([ extremesX.min, extremesX.max, p1.x, p2.x ]);
	        var yLimits = arrayLimits([ extremesY.min, extremesY.max, p1.y, p2.y ]);

	        return Rect.fromPoints(new Point(xLimits.min, yLimits.min), new Point(xLimits.max, yLimits.max));
	    },

	    _curveExtremesFor: function(points, field) {
	        var extremes = this._curveExtremes(
	            points[0][field], points[1][field],
	            points[2][field], points[3][field]
	        );

	        return {
	            min: calculateCurveAt(extremes.min, field, points),
	            max: calculateCurveAt(extremes.max, field, points)
	        };
	    },

	    _curveExtremes: function(x1, x2, x3, x4) {
	        var a = x1 - 3 * x2 + 3 * x3 - x4;
	        var b = - 2 * (x1 - 2 * x2 + x3);
	        var c = x1 - x2;
	        var sqrt = Math.sqrt(b * b - 4 * a * c);
	        var t1 = 0;
	        var t2 = 1;

	        if (a === 0) {
	            if (b !== 0) {
	                t1 = t2 = -c / b;
	            }
	        } else if (!isNaN(sqrt)) {
	            t1 = (- b + sqrt) / (2 * a);
	            t2 = (- b - sqrt) / (2 * a);
	        }

	        var min = Math.max(Math.min(t1, t2), 0);
	        if (min < 0 || min > 1) {
	            min = 0;
	        }

	        var max = Math.min(Math.max(t1, t2), 1);
	        if (max > 1 || max < 0) {
	            max = 1;
	        }

	        return {
	            min: min,
	            max: max
	        };
	    },

	    _intersectionsTo: function(segment, point) {
	        var intersectionsCount;
	        if (this.controlOut() && segment.controlIn()) {
	            intersectionsCount = curveIntersectionsCount([ this.anchor(), this.controlOut(), segment.controlIn(), segment.anchor() ], point, this.bboxTo(segment));
	        } else {
	            intersectionsCount = lineIntersectionsCount(this.anchor(), segment.anchor(), point);
	        }
	        return intersectionsCount;
	    },

	    _isOnCurveTo: function(segment, point, width, endSegment) {
	        var bbox = this.bboxTo(segment).expand(width, width);
	        if (bbox.containsPoint(point)) {
	            var p1 = this.anchor();
	            var p2 = this.controlOut();
	            var p3 = segment.controlIn();
	            var p4 = segment.anchor();

	            if (endSegment === "start" && p1.distanceTo(point) <= width) {
	                return !isOutOfEndPoint(p1, p2, point);
	            } else if (endSegment === "end" && p4.distanceTo(point) <= width) {
	                return !isOutOfEndPoint(p4, p3, point);
	            }

	            //the approach is not entirely correct but is close and the alternatives are solving a 6th degree polynomial or testing the segment points
	            var points = [ p1, p2, p3, p4 ];
	            if (hasRootsInRange(points, point, "x", "y", width) || hasRootsInRange(points, point, "y", "x", width)) {
	                return true;
	            }
	            var rotation = transform().rotate(45, point);
	            var rotatedPoints = [ p1.transformCopy(rotation), p2.transformCopy(rotation), p3.transformCopy(rotation), p4.transformCopy(rotation) ];
	            return hasRootsInRange(rotatedPoints, point, "x", "y", width) || hasRootsInRange(rotatedPoints, point, "y", "x", width);
	        }
	    },

	    _isOnLineTo: function(segment, point, width) {
	        var p1 = this.anchor();
	        var p2 = segment.anchor();
	        var angle = deg(Math.atan2(p2.y - p1.y, p2.x - p1.x));
	        var rect = new Rect([ p1.x, p1.y - width / 2 ], [ p1.distanceTo(p2), width ]);
	        return rect.containsPoint(point.transformCopy(transform().rotate(-angle, p1)));
	    },

	    _isOnPathTo: function(segment, point, width, endSegment) {
	        var isOnPath;
	        if (this.controlOut() && segment.controlIn()) {
	            isOnPath = this._isOnCurveTo(segment, point, width / 2, endSegment);
	        } else {
	            isOnPath = this._isOnLineTo(segment, point, width);
	        }
	        return isOnPath;
	    }
	});

	definePointAccessors(Segment.prototype, [ "anchor", "controlIn", "controlOut" ]);
	ObserversMixin.extend(Segment.prototype);

	function arrayLimits(arr) {
	    var length = arr.length;
	    var min = MAX_NUM;
	    var max = MIN_NUM;

	    for (var i = 0; i < length; i ++) {
	        max = Math.max(max, arr[i]);
	        min = Math.min(min, arr[i]);
	    }

	    return {
	        min: min,
	        max: max
	    };
	}

	var Path = Element$1.extend({
	    init: function(options) {
	        Element$1.fn.init.call(this, options);
	        this.segments = new GeometryElementsArray();
	        this.segments.addObserver(this);

	        if (!defined(this.options.stroke)) {
	            this.stroke("#000");

	            if (!defined(this.options.stroke.lineJoin)) {
	                this.options.set("stroke.lineJoin", "miter");
	            }
	        }
	    },

	    moveTo: function(x, y) {
	        this.suspend();
	        this.segments.elements([]);
	        this.resume();

	        this.lineTo(x, y);

	        return this;
	    },

	    lineTo: function(x, y) {
	        var point = defined(y) ? new Point(x, y) : x;
	        var segment = new Segment(point);

	        this.segments.push(segment);

	        return this;
	    },

	    curveTo: function(controlOut, controlIn, point) {
	        if (this.segments.length > 0) {
	            var lastSegment = last(this.segments);
	            var segment = new Segment(point, controlIn);
	            this.suspend();
	            lastSegment.controlOut(controlOut);
	            this.resume();

	            this.segments.push(segment);
	        }

	        return this;
	    },

	    arc: function(startAngle, endAngle, radiusX, radiusY, anticlockwise) {
	        if (this.segments.length > 0) {
	            var lastSegment = last(this.segments);
	            var anchor = lastSegment.anchor();
	            var start = rad(startAngle);
	            var center = new Point(anchor.x - radiusX * Math.cos(start),
	                anchor.y - radiusY * Math.sin(start));
	            var arc = new Arc$2(center, {
	                startAngle: startAngle,
	                endAngle: endAngle,
	                radiusX: radiusX,
	                radiusY: radiusY,
	                anticlockwise: anticlockwise
	            });

	            this._addArcSegments(arc);
	        }

	        return this;
	    },

	    arcTo: function(end, rx, ry, largeArc, swipe) {
	        if (this.segments.length > 0) {
	            var lastSegment = last(this.segments);
	            var anchor = lastSegment.anchor();
	            var arc = Arc$2.fromPoints(anchor, end, rx, ry, largeArc, swipe);

	            this._addArcSegments(arc);
	        }
	        return this;
	    },

	    _addArcSegments: function(arc) {
	        var this$1 = this;

	        this.suspend();

	        var curvePoints = arc.curvePoints();

	        for (var i = 1; i < curvePoints.length; i += 3) {
	            this$1.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
	        }

	        this.resume();
	        this.geometryChange();
	    },

	    close: function() {
	        this.options.closed = true;
	        this.geometryChange();

	        return this;
	    },

	    rawBBox: function() {
	        return this._bbox();
	    },

	    _containsPoint: function(point) {
	        var segments = this.segments;
	        var length = segments.length;
	        var intersectionsCount = 0;
	        var previous, current;

	        for (var idx = 1; idx < length; idx++) {
	            previous = segments[idx - 1];
	            current = segments[idx];
	            intersectionsCount += previous._intersectionsTo(current, point);
	        }

	        if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {
	            intersectionsCount += lineIntersectionsCount(segments[0].anchor(), segments[length - 1].anchor(), point);
	        }

	        return intersectionsCount % 2 !== 0;
	    },

	    _isOnPath: function(point, width) {
	        var segments = this.segments;
	        var length = segments.length;
	        var pathWidth = width || this.options.stroke.width;

	        if (length > 1) {
	            if (segments[0]._isOnPathTo(segments[1], point, pathWidth, "start")) {
	                return true;
	            }

	            for (var idx = 2; idx <= length - 2; idx++) {
	                if (segments[idx - 1]._isOnPathTo(segments[idx], point, pathWidth)) {
	                    return true;
	                }
	            }

	            if (segments[length - 2]._isOnPathTo(segments[length - 1], point, pathWidth, "end")) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _bbox: function(matrix) {
	        var segments = this.segments;
	        var length = segments.length;
	        var boundingBox;

	        if (length === 1) {
	            var anchor = segments[0].anchor().transformCopy(matrix);
	            boundingBox = new Rect(anchor, Size.ZERO);
	        } else if (length > 0) {
	            for (var i = 1; i < length; i++) {
	                var segmentBox = segments[i - 1].bboxTo(segments[i], matrix);
	                if (boundingBox) {
	                    boundingBox = Rect.union(boundingBox, segmentBox);
	                } else {
	                    boundingBox = segmentBox;
	                }
	            }
	        }

	        return boundingBox;
	    }
	});

	Path.fromRect = function(rect, options) {
	    return new Path(options)
	        .moveTo(rect.topLeft())
	        .lineTo(rect.topRight())
	        .lineTo(rect.bottomRight())
	        .lineTo(rect.bottomLeft())
	        .close();
	};

	Path.fromPoints = function(points, options) {
	    if (points) {
	        var path = new Path(options);

	        for (var i = 0; i < points.length; i++) {
	            var point = Point.create(points[i]);
	            if (point) {
	                if (i === 0) {
	                    path.moveTo(point);
	                } else {
	                    path.lineTo(point);
	                }
	            }
	        }

	        return path;
	    }
	};

	Path.fromArc = function(arc, options) {
	    var path = new Path(options);
	    var startAngle = arc.startAngle;
	    var start = arc.pointAt(startAngle);
	    path.moveTo(start.x, start.y);
	    path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);
	    return path;
	};

	Path.prototype.nodeType = "Path";

	Paintable.extend(Path.prototype);
	Measurable.extend(Path.prototype);

	var DEFAULT_STROKE$1 = "#000";

	var Arc = Element$1.extend({
	    init: function(geometry, options) {
	        if (geometry === void 0) { geometry = new Arc$2(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);

	        this.geometry(geometry);

	        if (!defined(this.options.stroke)) {
	            this.stroke(DEFAULT_STROKE$1);
	        }
	    },

	    _bbox: function(matrix) {
	        return this._geometry.bbox(matrix);
	    },

	    rawBBox: function() {
	        return this.geometry().bbox();
	    },

	    toPath: function() {
	        var path = new Path();
	        var curvePoints = this.geometry().curvePoints();

	        if (curvePoints.length > 0) {
	            path.moveTo(curvePoints[0].x, curvePoints[0].y);

	            for (var i = 1; i < curvePoints.length; i += 3) {
	                path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
	            }
	        }

	        return path;
	    },

	    _containsPoint: function(point) {
	        return this.geometry().containsPoint(point);
	    },

	    _isOnPath: function(point) {
	        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
	    }
	});

	Arc.prototype.nodeType = "Arc";

	Paintable.extend(Arc.prototype);
	Measurable.extend(Arc.prototype);
	defineGeometryAccessors(Arc.prototype, [ "geometry" ]);

	function elementsBoundingBox(elements, applyTransform, transformation) {
	    var boundingBox;

	    for (var i = 0; i < elements.length; i++) {
	        var element = elements[i];
	        if (element.visible()) {
	            var elementBoundingBox = applyTransform ? element.bbox(transformation) : element.rawBBox();
	            if (elementBoundingBox) {
	                if (boundingBox) {
	                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
	                } else {
	                    boundingBox = elementBoundingBox;
	                }
	            }
	        }
	    }

	    return boundingBox;
	}

	function elementsClippedBoundingBox(elements, transformation) {
	    var boundingBox;

	    for (var i = 0; i < elements.length; i++) {
	        var element = elements[i];
	        if (element.visible()) {
	            var elementBoundingBox = element.clippedBBox(transformation);
	            if (elementBoundingBox) {
	                if (boundingBox) {
	                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
	                } else {
	                    boundingBox = elementBoundingBox;
	                }
	            }
	        }
	    }

	    return boundingBox;
	}

	var MultiPath = Element$1.extend({
	    init: function(options) {
	        Element$1.fn.init.call(this, options);
	        this.paths = new GeometryElementsArray();
	        this.paths.addObserver(this);

	        if (!defined(this.options.stroke)) {
	            this.stroke("#000");
	        }
	    },

	    moveTo: function(x, y) {
	        var path = new Path();
	        path.moveTo(x, y);

	        this.paths.push(path);

	        return this;
	    },

	    lineTo: function(x, y) {
	        if (this.paths.length > 0) {
	            last(this.paths).lineTo(x, y);
	        }

	        return this;
	    },

	    curveTo: function(controlOut, controlIn, point) {
	        if (this.paths.length > 0) {
	            last(this.paths).curveTo(controlOut, controlIn, point);
	        }

	        return this;
	    },

	    arc: function(startAngle, endAngle, radiusX, radiusY, anticlockwise) {
	        if (this.paths.length > 0) {
	            last(this.paths).arc(startAngle, endAngle, radiusX, radiusY, anticlockwise);
	        }

	        return this;
	    },

	    arcTo: function(end, rx, ry, largeArc, swipe) {
	        if (this.paths.length > 0) {
	            last(this.paths).arcTo(end, rx, ry, largeArc, swipe);
	        }

	        return this;
	    },

	    close: function() {
	        if (this.paths.length > 0) {
	            last(this.paths).close();
	        }

	        return this;
	    },

	    _bbox: function(matrix) {
	        return elementsBoundingBox(this.paths, true, matrix);
	    },

	    rawBBox: function() {
	        return elementsBoundingBox(this.paths, false);
	    },

	    _containsPoint: function(point) {
	        var paths = this.paths;

	        for (var idx = 0; idx < paths.length; idx++) {
	            if (paths[idx]._containsPoint(point)) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _isOnPath: function(point) {
	        var paths = this.paths;
	        var width = this.options.stroke.width;

	        for (var idx = 0; idx < paths.length; idx++) {
	            if (paths[idx]._isOnPath(point, width)) {
	                return true;
	            }
	        }
	        return false;
	    },

	    _clippedBBox: function(transformation) {
	        return elementsClippedBoundingBox(this.paths, this.currentTransform(transformation));
	    }
	});

	MultiPath.prototype.nodeType = "MultiPath";

	Paintable.extend(MultiPath.prototype);
	Measurable.extend(MultiPath.prototype);

	var DEFAULT_FONT = "12px sans-serif";
	var DEFAULT_FILL = "#000";

	var Text = Element$1.extend({
	    init: function(content, position, options) {
	        if (position === void 0) { position = new Point(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);

	        this.content(content);
	        this.position(position);

	        if (!this.options.font) {
	            this.options.font = DEFAULT_FONT;
	        }

	        if (!defined(this.options.fill)) {
	            this.fill(DEFAULT_FILL);
	        }
	    },

	    content: function(value) {
	        if (defined(value)) {
	            this.options.set("content", value);
	            return this;
	        }

	        return this.options.get("content");
	    },

	    measure: function() {
	        var metrics = kendoUtil.measureText(this.content(), {
	            font: this.options.get("font")
	        });

	        return metrics;
	    },

	    rect: function() {
	        var size = this.measure();
	        var pos = this.position().clone();
	        return new Rect(pos, [ size.width, size.height ]);
	    },

	    bbox: function(transformation) {
	        var combinedMatrix = toMatrix(this.currentTransform(transformation));
	        return this.rect().bbox(combinedMatrix);
	    },

	    rawBBox: function() {
	        return this.rect().bbox();
	    },

	    _containsPoint: function(point) {
	        return this.rect().containsPoint(point);
	    }
	});

	Text.prototype.nodeType = "Text";

	Paintable.extend(Text.prototype);

	definePointAccessors(Text.prototype, [ "position" ]);

	var Image$1 = Element$1.extend({
	    init: function(src, rect, options) {
	        if (rect === void 0) { rect = new Rect(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);

	        this.src(src);
	        this.rect(rect);
	    },

	    src: function(value) {
	        if (defined(value)) {
	            this.options.set("src", value);
	            return this;
	        }

	        return this.options.get("src");
	    },

	    bbox: function(transformation) {
	        var combinedMatrix = toMatrix(this.currentTransform(transformation));
	        return this._rect.bbox(combinedMatrix);
	    },

	    rawBBox: function() {
	        return this._rect.bbox();
	    },

	    _containsPoint: function(point) {
	        return this._rect.containsPoint(point);
	    },

	    _hasFill: function() {
	        return this.src();
	    }
	});

	Image$1.prototype.nodeType = "Image";

	defineGeometryAccessors(Image$1.prototype, [ "rect" ]);

	var Traversable = {
	    extend: function(proto, childrenField) {
	        proto.traverse = function(callback) {
	            var children = this[childrenField];

	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];

	                if (child.traverse) {
	                    child.traverse(callback);
	                } else {
	                    callback(child);
	                }
	            }

	            return this;
	        };
	    }
	};

	var Group = Element$1.extend({
	    init: function(options) {
	        Element$1.fn.init.call(this, options);
	        this.children = [];
	    },

	    childrenChange: function(action, items, index) {
	        this.trigger("childrenChange",{
	            action: action,
	            items: items,
	            index: index
	        });
	    },

	    append: function() {
	        append(this.children, arguments);
	        this._reparent(arguments, this);

	        this.childrenChange("add", arguments);

	        return this;
	    },

	    insert: function(index, element) {
	        this.children.splice(index, 0, element);
	        element.parent = this;

	        this.childrenChange("add", [ element ], index);

	        return this;
	    },

	    insertAt: function(element, index) {
	        return this.insert(index, element);
	    },

	    remove: function(element) {
	        var index = this.children.indexOf(element);
	        if (index >= 0) {
	            this.children.splice(index, 1);
	            element.parent = null;
	            this.childrenChange("remove", [ element ], index);
	        }

	        return this;
	    },

	    removeAt: function(index) {
	        if (0 <= index && index < this.children.length) {
	            var element = this.children[index];
	            this.children.splice(index, 1);
	            element.parent = null;
	            this.childrenChange("remove", [ element ], index);
	        }

	        return this;
	    },

	    clear: function() {
	        var items = this.children;
	        this.children = [];
	        this._reparent(items, null);

	        this.childrenChange("remove", items, 0);

	        return this;
	    },

	    bbox: function(transformation) {
	        return elementsBoundingBox(this.children, true, this.currentTransform(transformation));
	    },

	    rawBBox: function() {
	        return elementsBoundingBox(this.children, false);
	    },

	    _clippedBBox: function(transformation) {
	        return elementsClippedBoundingBox(this.children, this.currentTransform(transformation));
	    },

	    currentTransform: function(transformation) {
	        return Element$1.prototype.currentTransform.call(this, transformation) || null;
	    },

	    containsPoint: function(point, parentTransform) {
	        if (this.visible()) {
	            var children = this.children;
	            var transform = this.currentTransform(parentTransform);
	            for (var idx = 0; idx < children.length; idx++) {
	                if (children[idx].containsPoint(point, transform)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    },

	    _reparent: function(elements, newParent) {
	        var this$1 = this;

	        for (var i = 0; i < elements.length; i++) {
	            var child = elements[i];
	            var parent = child.parent;
	            if (parent && parent !== this$1 && parent.remove) {
	                parent.remove(child);
	            }

	            child.parent = newParent;
	        }
	    }
	});

	Group.prototype.nodeType = "Group";

	Traversable.extend(Group.prototype, "children");

	function translateToPoint(point, bbox, element) {
	    var transofrm = element.transform() || transform();
	    var matrix = transofrm.matrix();
	    matrix.e += point.x - bbox.origin.x;
	    matrix.f += point.y - bbox.origin.y;

	    transofrm.matrix(matrix);
	    element.transform(transofrm);
	}

	function alignStart(size, rect, align, axis, sizeField) {
	    var start;
	    if (align === "start") {
	        start = rect.origin[axis];
	    } else if (align === "end") {
	        start = rect.origin[axis] + rect.size[sizeField] - size;
	    } else {
	        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
	    }

	    return start;
	}

	var DEFAULT_OPTIONS = {
	    alignContent: "start",
	    justifyContent: "start",
	    alignItems: "start",
	    spacing: 0,
	    orientation: "horizontal",
	    lineSpacing: 0,
	    wrap: true
	};

	var Layout = Group.extend({
	    init: function(rect, options) {
	        Group.fn.init.call(this, $.extend({}, DEFAULT_OPTIONS, options));
	        this._rect = rect;
	        this._fieldMap = {};
	    },

	    rect: function(value) {
	        if (value) {
	            this._rect = value;
	            return this;
	        }

	        return this._rect;
	    },

	    _initMap: function() {
	        var options = this.options;
	        var fieldMap = this._fieldMap;
	        if (options.orientation === "horizontal") {
	            fieldMap.sizeField = "width";
	            fieldMap.groupsSizeField = "height";
	            fieldMap.groupAxis = "x";
	            fieldMap.groupsAxis = "y";
	        } else {
	            fieldMap.sizeField = "height";
	            fieldMap.groupsSizeField = "width";
	            fieldMap.groupAxis = "y";
	            fieldMap.groupsAxis = "x";
	        }
	    },

	    reflow: function() {
	        if (!this._rect || this.children.length === 0) {
	            return;
	        }
	        this._initMap();

	        if (this.options.transform) {
	            this.transform(null);
	        }

	        var options = this.options;
	        var rect = this._rect;
	        var ref = this._initGroups();
	        var groups = ref.groups;
	        var groupsSize = ref.groupsSize;
	        var ref$1 = this._fieldMap;
	        var sizeField = ref$1.sizeField;
	        var groupsSizeField = ref$1.groupsSizeField;
	        var groupAxis = ref$1.groupAxis;
	        var groupsAxis = ref$1.groupsAxis;
	        var groupOrigin = new Point();
	        var elementOrigin = new Point();
	        var size = new Size();
	        var groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);
	        var elementStart, bbox, element, group, groupBox;

	        for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
	            group = groups[groupIdx];
	            groupOrigin[groupAxis] = elementStart = alignStart(group.size, rect, options.justifyContent, groupAxis, sizeField);
	            groupOrigin[groupsAxis] = groupStart;
	            size[sizeField] = group.size;
	            size[groupsSizeField] = group.lineSize;
	            groupBox = new Rect(groupOrigin, size);
	            for (var idx = 0; idx < group.bboxes.length; idx++) {
	                element = group.elements[idx];
	                bbox = group.bboxes[idx];
	                elementOrigin[groupAxis] = elementStart;
	                elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);
	                translateToPoint(elementOrigin, bbox, element);
	                elementStart += bbox.size[sizeField] + options.spacing;
	            }
	            groupStart += group.lineSize + options.lineSpacing;
	        }

	        if (!options.wrap && group.size > rect.size[sizeField]) {
	            var scale = rect.size[sizeField] / groupBox.size[sizeField];
	            var scaledStart = groupBox.topLeft().scale(scale, scale);
	            var scaledSize = groupBox.size[groupsSizeField] * scale;
	            var newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);
	            var transform$$1 = transform();
	            if (groupAxis === "x") {
	                transform$$1.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);
	            } else {
	                transform$$1.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);
	            }
	            transform$$1.scale(scale, scale);

	            this.transform(transform$$1);
	        }
	    },

	    _initGroups: function() {
	        var this$1 = this;

	        var ref = this;
	        var options = ref.options;
	        var children = ref.children;
	        var lineSpacing = options.lineSpacing;
	        var wrap = options.wrap;
	        var spacing = options.spacing;
	        var sizeField = this._fieldMap.sizeField;
	        var group = this._newGroup();
	        var groups = [];
	        var addGroup = function() {
	            groups.push(group);
	            groupsSize += group.lineSize + lineSpacing;
	        };
	        var groupsSize = -lineSpacing;

	        for (var idx = 0; idx < children.length; idx++) {
	            var element = children[idx];
	            var bbox = children[idx].clippedBBox();
	            if (element.visible() && bbox) {
	                if (wrap && group.size + bbox.size[sizeField] + spacing > this$1._rect.size[sizeField]) {
	                    if (group.bboxes.length === 0) {
	                        this$1._addToGroup(group, bbox, element);
	                        addGroup();
	                        group = this$1._newGroup();
	                    } else {
	                        addGroup();
	                        group = this$1._newGroup();
	                        this$1._addToGroup(group, bbox, element);
	                    }
	                } else {
	                    this$1._addToGroup(group, bbox, element);
	                }
	            }
	        }

	        if (group.bboxes.length) {
	            addGroup();
	        }

	        return {
	            groups: groups,
	            groupsSize: groupsSize
	        };
	    },

	    _addToGroup: function(group, bbox, element) {
	        group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;
	        group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);
	        group.bboxes.push(bbox);
	        group.elements.push(element);
	    },

	    _newGroup: function() {
	        return {
	            lineSize: 0,
	            size: -this.options.spacing,
	            bboxes: [],
	            elements: []
	        };
	    }
	});

	var Rect$2 = Element$1.extend({
	    init: function(geometry, options) {
	        if (geometry === void 0) { geometry = new Rect(); }
	        if (options === void 0) { options = {}; }

	        Element$1.fn.init.call(this, options);
	        this.geometry(geometry);

	        if (!defined(this.options.stroke)) {
	            this.stroke("#000");
	        }
	    },

	    _bbox: function(matrix) {
	        return this._geometry.bbox(matrix);
	    },

	    rawBBox: function() {
	        return this._geometry.bbox();
	    },

	    _containsPoint: function(point) {
	        return this._geometry.containsPoint(point);
	    },

	    _isOnPath: function(point) {
	        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
	    }
	});

	Rect$2.prototype.nodeType = "Rect";

	Paintable.extend(Rect$2.prototype);
	Measurable.extend(Rect$2.prototype);
	defineGeometryAccessors(Rect$2.prototype, [ "geometry" ]);

	function alignElements(elements, rect, alignment, axis, sizeField) {
	    for (var idx = 0; idx < elements.length; idx++) {
	        var bbox = elements[idx].clippedBBox();
	        if (bbox) {
	            var point = bbox.origin.clone();
	            point[axis] = alignStart(bbox.size[sizeField], rect, alignment || "start", axis, sizeField);
	            translateToPoint(point, bbox, elements[idx]);
	        }
	    }
	}

	function align(elements, rect, alignment) {
	    alignElements(elements, rect, alignment, "x", "width");
	}

	function vAlign(elements, rect, alignment) {
	    alignElements(elements, rect, alignment, "y", "height");
	}

	function stackElements(elements, stackAxis, otherAxis, sizeField) {
	    if (elements.length > 1) {
	        var origin = new Point();
	        var previousBBox = elements[0].bbox;

	        for (var idx = 1; idx < elements.length; idx++) {
	            var element = elements[idx].element;
	            var bbox = elements[idx].bbox;
	            origin[stackAxis] = previousBBox.origin[stackAxis] + previousBBox.size[sizeField];
	            origin[otherAxis] = bbox.origin[otherAxis];
	            translateToPoint(origin, bbox, element);
	            bbox.origin[stackAxis] = origin[stackAxis];
	            previousBBox = bbox;
	        }
	    }
	}

	function createStackElements(elements) {
	    var stackElements = [];

	    for (var idx = 0; idx < elements.length; idx++) {
	        var element = elements[idx];
	        var bbox = element.clippedBBox();
	        if (bbox) {
	            stackElements.push({
	                element: element,
	                bbox: bbox
	            });
	        }
	    }

	    return stackElements;
	}

	function stack(elements) {
	    stackElements(createStackElements(elements), "x", "y", "width");
	}

	function vStack(elements) {
	    stackElements(createStackElements(elements), "y", "x", "height");
	}

	function getStacks(elements, rect, sizeField) {
	    var maxSize = rect.size[sizeField];
	    var stacks = [];
	    var stack = [];
	    var stackSize = 0;
	    var element, bbox;

	    var addElementToStack = function() {
	        stack.push({
	            element: element,
	            bbox: bbox
	        });
	    };

	    for (var idx = 0; idx < elements.length; idx++) {
	        element = elements[idx];

	        bbox = element.clippedBBox();
	        if (bbox) {
	            var size = bbox.size[sizeField];
	            if (stackSize + size > maxSize) {
	                if (stack.length) {
	                    stacks.push(stack);
	                    stack = [];
	                    addElementToStack();
	                    stackSize = size;
	                } else {
	                    addElementToStack();
	                    stacks.push(stack);
	                    stack = [];
	                    stackSize = 0;
	                }
	            } else {
	                addElementToStack();
	                stackSize += size;
	            }
	        }
	    }

	    if (stack.length) {
	        stacks.push(stack);
	    }

	    return stacks;
	}

	function wrapElements(elements, rect, axis, otherAxis, sizeField) {
	    var stacks = getStacks(elements, rect, sizeField);
	    var origin = rect.origin.clone();
	    var result = [];

	    for (var idx = 0; idx < stacks.length; idx++) {
	        var stack = stacks[idx];
	        var startElement = stack[0];
	        origin[otherAxis] = startElement.bbox.origin[otherAxis];
	        translateToPoint(origin, startElement.bbox, startElement.element);
	        startElement.bbox.origin[axis] = origin[axis];
	        stackElements(stack, axis, otherAxis, sizeField);
	        result.push([]);
	        for (var elementIdx = 0; elementIdx < stack.length; elementIdx++) {
	            result[idx].push(stack[elementIdx].element);
	        }
	    }
	    return result;
	}

	function wrap(elements, rect) {
	    return wrapElements(elements, rect, "x", "y", "width");
	}

	function vWrap(elements, rect) {
	    return wrapElements(elements, rect, "y", "x", "height");
	}

	function fit(element, rect) {
	    var bbox = element.clippedBBox();
	    if (bbox) {
	        var elementSize = bbox.size;
	        var rectSize = rect.size;
	        if (rectSize.width < elementSize.width || rectSize.height < elementSize.height) {
	            var scale = Math.min(rectSize.width / elementSize.width, rectSize.height / elementSize.height);
	            var transform$$1 = element.transform() || transform();
	            transform$$1.scale(scale, scale);
	            element.transform(transform$$1);
	        }
	    }
	}

	var StopsArray = ElementsArray.extend({
	    _change: function() {
	        this.optionsChange({
	            field: "stops"
	        });
	    }
	});

	function optionsAccessor(name) {
	    return function(value) {
	        if (defined(value)) {
	            this.options.set(name, value);
	            return this;
	        }

	        return this.options.get(name);
	    };
	}

	function defineOptionsAccessors(fn, names) {
	    for (var i = 0; i < names.length; i++) {
	        fn[names[i]] = optionsAccessor(names[i]);
	    }
	}

	var GradientStop = Class.extend({
	    init: function(offset, color, opacity) {

	        this.options = new OptionsStore({
	            offset: offset,
	            color: color,
	            opacity: defined(opacity) ? opacity : 1
	        });
	        this.options.addObserver(this);
	    }
	});

	GradientStop.create = function(arg) {
	    if (defined(arg)) {
	        var stop;
	        if (arg instanceof GradientStop) {
	            stop = arg;
	        } else if (arg.length > 1) {
	            stop = new GradientStop(arg[0], arg[1], arg[2]);
	        } else {
	            stop = new GradientStop(arg.offset, arg.color, arg.opacity);
	        }

	        return stop;
	    }
	};

	defineOptionsAccessors(GradientStop.prototype, [ "offset", "color", "opacity" ]);
	ObserversMixin.extend(GradientStop.prototype);

	var Gradient = Class.extend({
	    init: function(options) {
	        if (options === void 0) { options = {}; }

	        this.stops = new StopsArray(this._createStops(options.stops));
	        this.stops.addObserver(this);
	        this._userSpace = options.userSpace;
	        this.id = definitionId();
	    },

	    userSpace: function(value) {
	        if (defined(value)) {
	            this._userSpace = value;
	            this.optionsChange();
	            return this;
	        }

	        return this._userSpace;
	    },

	    _createStops: function(stops) {
	        if (stops === void 0) { stops = []; }

	        var result = [];
	        for (var idx = 0; idx < stops.length; idx++) {
	            result.push(GradientStop.create(stops[idx]));
	        }

	        return result;
	    },

	    addStop: function(offset, color, opacity) {
	        this.stops.push(new GradientStop(offset, color, opacity));
	    },

	    removeStop: function(stop) {
	        var index = this.stops.indexOf(stop);
	        if (index >= 0) {
	            this.stops.splice(index, 1);
	        }
	    }
	});

	Gradient.prototype.nodeType = "Gradient";

	ObserversMixin.extend(Gradient.prototype);

	$.extend(Gradient.prototype, {
	    optionsChange: function(e) {
	        this.trigger("optionsChange", {
	            field: "gradient" + (e ? "." + e.field : ""),
	            value: this
	        });
	    },

	    geometryChange: function() {
	        this.optionsChange();
	    }
	});

	var LinearGradient = Gradient.extend({
	    init: function(options) {
	        if (options === void 0) { options = {}; }

	        Gradient.fn.init.call(this, options);

	        this.start(options.start || new Point());

	        this.end(options.end || new Point(1, 0));
	    }
	});

	definePointAccessors(LinearGradient.prototype, [ "start", "end" ]);

	var RadialGradient = Gradient.extend({
	    init: function(options) {
	        if (options === void 0) { options = {}; }

	        Gradient.fn.init.call(this, options);

	        this.center(options.center || new Point());
	        this._radius = defined(options.radius) ? options.radius : 1;
	        this._fallbackFill = options.fallbackFill;
	    },

	    radius: function(value) {
	        if (defined(value)) {
	            this._radius = value;
	            this.geometryChange();
	            return this;
	        }

	        return this._radius;
	    },

	    fallbackFill: function(value) {
	        if (defined(value)) {
	            this._fallbackFill = value;
	            this.optionsChange();
	            return this;
	        }

	        return this._fallbackFill;
	    }
	});

	definePointAccessors(RadialGradient.prototype, [ "center" ]);

	function swing(position) {
	    return 0.5 - Math.cos(position * Math.PI) / 2;
	}

	function linear(position) {
	    return position;
	}

	function easeOutElastic(position, time, start, diff) {
	    var s = 1.70158,
	        p = 0,
	        a = diff;

	    if (position === 0) {
	        return start;
	    }

	    if (position === 1) {
	        return start + diff;
	    }

	    if (!p) {
	        p = 0.5;
	    }

	    if (a < Math.abs(diff)) {
	        a = diff;
	        s = p / 4;
	    } else {
	        s = p / (2 * Math.PI) * Math.asin(diff / a);
	    }

	    return a * Math.pow(2, -10 * position) *
	           Math.sin((Number(position) - s) * (1.1 * Math.PI) / p) + diff + start;
	}

	var easingFunctions = {
		swing: swing,
		linear: linear,
		easeOutElastic: easeOutElastic
	};

	var now = Date.now || function() {
	    return new Date().getTime();
	};

	var Animation = Class.extend({
	    init: function(element, options) {

	        this.options = $.extend({}, this.options, options);
	        this.element = element;
	    },

	    setup: function() {},

	    step: function() {},

	    play: function() {
	        var this$1 = this;

	        var options = this.options;
	        var duration = options.duration;
	        var delay = options.delay; if (delay === void 0) { delay = 0; }
	        var easing = easingFunctions[options.easing];
	        var start = now() + delay;
	        var finish = start + duration;

	        if (duration === 0) {
	            this.step(1);
	            this.abort();
	        } else {
	            setTimeout(function () {
	                var loop = function () {
	                    if (this$1._stopped) {
	                        return;
	                    }

	                    var wallTime = now();

	                    var time = limitValue(wallTime - start, 0, duration);
	                    var position = time / duration;
	                    var easingPosition = easing(position, time, 0, 1, duration);

	                    this$1.step(easingPosition);

	                    if (wallTime < finish) {
	                        kendo.animationFrame(loop);
	                    } else {
	                        this$1.abort();
	                    }
	                };

	                loop();
	            }, delay);
	        }
	    },

	    abort: function() {
	        this._stopped = true;
	    },

	    destroy: function() {
	        this.abort();
	    }
	});

	Animation.prototype.options = {
	    duration: 500,
	    easing: "swing"
	};

	var AnimationFactory = Class.extend({
	    init: function() {

	        this._items = [];
	    },

	    register: function(name, type) {
	        this._items.push({
	            name: name,
	            type: type
	        });
	    },

	    create: function(element, options) {
	        var items = this._items;
	        var match;

	        if (options && options.type) {
	            var type = options.type.toLowerCase();
	            for (var i = 0; i < items.length; i++) {
	                if (items[i].name.toLowerCase() === type) {
	                    match = items[i];
	                    break;
	                }
	            }
	        }

	        if (match) {
	            return new match.type(element, options);
	        }
	    }
	});

	AnimationFactory.current = new AnimationFactory();

	Animation.create = function(type, element, options) {
	    return AnimationFactory.current.create(type, element, options);
	};

	var ShapeMap = {
	    l: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 2) {
	            var point = new Point(parameters[i], parameters[i + 1]);

	            if (options.isRelative) {
	                point.translateWith(position);
	            }

	            path.lineTo(point.x, point.y);

	            position.x = point.x;
	            position.y = point.y;
	        }
	    },

	    c: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 6) {
	            var controlOut = new Point(parameters[i], parameters[i + 1]);
	            var controlIn = new Point(parameters[i + 2], parameters[i + 3]);
	            var point = new Point(parameters[i + 4], parameters[i + 5]);
	            if (options.isRelative) {
	                controlIn.translateWith(position);
	                controlOut.translateWith(position);
	                point.translateWith(position);
	            }

	            path.curveTo(controlOut, controlIn, point);

	            position.x = point.x;
	            position.y = point.y;
	        }
	    },

	    v: function(path, options) {
	        var value = options.isRelative ? 0 : options.position.x;

	        toLineParamaters(options.parameters, true, value);
	        this.l(path, options);
	    },

	    h: function(path, options) {
	        var value = options.isRelative ? 0 : options.position.y;

	        toLineParamaters(options.parameters, false, value);
	        this.l(path, options);
	    },

	    a: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 7) {
	            var radiusX = parameters[i];
	            var radiusY = parameters[i + 1];
	            var largeArc = parameters[i + 3];
	            var swipe = parameters[i + 4];
	            var endPoint = new Point(parameters[i + 5], parameters[i + 6]);

	            if (options.isRelative) {
	                endPoint.translateWith(position);
	            }

	            path.arcTo(endPoint, radiusX, radiusY, largeArc, swipe);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    s: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;
	        var previousCommand = options.previousCommand;
	        var lastControlIn;

	        if (previousCommand === "s" || previousCommand === "c") {
	            lastControlIn = last(last(path.paths).segments).controlIn();
	        }

	        for (var i = 0; i < parameters.length; i += 4) {
	            var controlIn = new Point(parameters[i], parameters[i + 1]);
	            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);
	            var controlOut = (void 0);

	            if (options.isRelative) {
	                controlIn.translateWith(position);
	                endPoint.translateWith(position);
	            }

	            if (lastControlIn) {
	                controlOut = reflectionPoint(lastControlIn, position);
	            } else {
	                controlOut = position.clone();
	            }

	            lastControlIn = controlIn;

	            path.curveTo(controlOut, controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    q: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;

	        for (var i = 0; i < parameters.length; i += 4) {
	            var controlPoint = new Point(parameters[i], parameters[i + 1]);
	            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);

	            if (options.isRelative) {
	                controlPoint.translateWith(position);
	                endPoint.translateWith(position);
	            }

	            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

	            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    },

	    t: function(path, options) {
	        var parameters = options.parameters;
	        var position = options.position;
	        var previousCommand = options.previousCommand;
	        var controlPoint;

	        if (previousCommand === "q" || previousCommand === "t") {
	            var lastSegment = last(last(path.paths).segments);
	            controlPoint = lastSegment.controlIn().clone()
	                .translateWith(position.scaleCopy(-1 / 3))
	                .scale(3 / 2);
	        }

	        for (var i = 0; i < parameters.length; i += 2) {
	            var endPoint = new Point(parameters[i], parameters[i + 1]);
	            if (options.isRelative) {
	                endPoint.translateWith(position);
	            }

	            if (controlPoint) {
	                controlPoint = reflectionPoint(controlPoint, position);
	            } else {
	                controlPoint = position.clone();
	            }

	            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

	            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

	            position.x = endPoint.x;
	            position.y = endPoint.y;
	        }
	    }
	};

	function toLineParamaters(parameters, isVertical, value) {
	    var insertPosition = isVertical ? 0 : 1;

	    for (var i = 0; i < parameters.length; i += 2) {
	        parameters.splice(i + insertPosition, 0, value);
	    }
	}

	function reflectionPoint(point, center) {
	    if (point && center) {
	        return center.scaleCopy(2).translate(-point.x, -point.y);
	    }
	}

	var third = 1 / 3;

	function quadraticToCubicControlPoints(position, controlPoint, endPoint) {
	    var scaledPoint = controlPoint.clone().scale(2 / 3);
	    return {
	        controlOut: scaledPoint.clone().translateWith(position.scaleCopy(third)),
	        controlIn: scaledPoint.translateWith(endPoint.scaleCopy(third))
	    };
	}

	var SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;
	var SPLIT_REGEX = /[,\s]?([+\-]?(?:\d*\.\d+|\d+)(?:[eE][+\-]?\d+)?)/g;
	var MOVE = "m";
	var CLOSE = "z";

	function parseParameters(str) {
	    var parameters = [];
	    str.replace(SPLIT_REGEX, function(match, number) {
	        parameters.push(parseFloat(number));
	    });
	    return parameters;
	}

	var PathParser = Class.extend({
	    parse: function(str, options) {
	        var multiPath = new MultiPath(options);
	        var position = new Point();
	        var previousCommand;

	        str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {
	            var command = element.toLowerCase();
	            var isRelative = command === element;
	            var parameters = parseParameters(params.trim());

	            if (command === MOVE) {
	                if (isRelative) {
	                    position.x += parameters[0];
	                    position.y += parameters[1];
	                } else {
	                    position.x = parameters[0];
	                    position.y = parameters[1];
	                }

	                multiPath.moveTo(position.x, position.y);

	                if (parameters.length > 2) {
	                    command = "l";
	                    parameters.splice(0, 2);
	                }
	            }

	            if (ShapeMap[command]) {
	                ShapeMap[command](
	                    multiPath, {
	                        parameters: parameters,
	                        position: position,
	                        isRelative: isRelative,
	                        previousCommand: previousCommand
	                    }
	                );

	                if (closePath && closePath.toLowerCase() === CLOSE) {
	                    multiPath.close();
	                }
	            } else if (command !== MOVE) {
	                throw new Error("Error while parsing SVG path. Unsupported command: " + command);
	            }

	            previousCommand = command;
	        });

	        return multiPath;
	    }
	});

	PathParser.current = new PathParser();

	Path.parse = function(str, options) {
	    return PathParser.current.parse(str, options);
	};

	var SurfaceFactory = Class.extend({
	    init: function() {

	        this._items = [];
	    },

	    register: function(name, type, order) {
	        var items = this._items;
	        var first = items[0];
	        var entry = {
	            name: name,
	            type: type,
	            order: order
	        };

	        if (!first || order < first.order) {
	            items.unshift(entry);
	        } else {
	            items.push(entry);
	        }
	    },

	    create: function(element, options) {
	        var items = this._items;
	        var match = items[0];

	        if (options && options.type) {
	            var preferred = options.type.toLowerCase();
	            for (var i = 0; i < items.length; i++) {
	                if (items[i].name === preferred) {
	                    match = items[i];
	                    break;
	                }
	            }
	        }

	        if (match) {
	            return new match.type(element, options);
	        }

	        kendo.logToConsole(
	            "Warning: Unable to create Kendo UI Drawing Surface. Possible causes:\n" +
	            "- The browser does not support SVG and Canvas. User agent: " + (navigator.userAgent));
	    }
	});

	SurfaceFactory.current = new SurfaceFactory();

	var events = [
	    "click",
	    "mouseenter",
	    "mouseleave",
	    "mousemove",
	    "resize",
	    "tooltipOpen",
	    "tooltipClose"
	];

	var Surface = kendo.Observable.extend({
	    init: function(element, options) {
	        kendo.Observable.fn.init.call(this);

	        this.options = $.extend({}, options);
	        this.element = element;

	        this._click = this._handler("click");
	        this._mouseenter = this._handler("mouseenter");
	        this._mouseleave = this._handler("mouseleave");
	        this._mousemove = this._handler("mousemove");

	        this._visual = new Group();

	        elementSize(element, this.options);

	        this.bind(events, this.options);

	        this._enableTracking();
	    },

	    draw: function(element) {
	        this._visual.children.push(element);
	    },

	    clear: function() {
	        this._visual.children = [];
	    },

	    destroy: function() {
	        this._visual = null;
	        this.unbind();
	    },

	    eventTarget: function(e) {
	        var this$1 = this;

	        var domNode = eventElement(e);
	        var node;

	        while (!node && domNode) {
	            node = domNode._kendoNode;
	            if (domNode === this$1.element) {
	                break;
	            }

	            domNode = domNode.parentElement;
	        }

	        if (node) {
	            return node.srcElement;
	        }
	    },

	    exportVisual: function() {
	        return this._visual;
	    },

	    getSize: function() {
	        return elementSize(this.element);
	    },

	    currentSize: function(size) {
	        if (size) {
	            this._size = size;
	        } else {
	            return this._size;
	        }
	    },

	    setSize: function(size) {
	        elementSize(this.element, size);

	        this.currentSize(size);
	        this._resize();
	    },

	    resize: function(force) {
	        var size = this.getSize();
	        var currentSize = this.currentSize();

	        if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
	            this.currentSize(size);
	            this._resize(size, force);
	            this.trigger("resize", size);
	        }
	    },

	    size: function(value) {
	        if (!value) {
	            return this.getSize();
	        }

	        this.setSize(value);
	    },

	    suspendTracking: function() {
	        this._suspendedTracking = true;
	    },

	    resumeTracking: function() {
	        this._suspendedTracking = false;
	    },

	    _enableTracking: function() {},

	    _resize: function() {},

	    _handler: function(eventName) {
	        var this$1 = this;

	        return function (e) {
	            var node = this$1.eventTarget(e);
	            if (node && !this$1._suspendedTracking) {
	                this$1.trigger(eventName, {
	                    element: node,
	                    originalEvent: e,
	                    type: eventName
	                });
	            }
	        };
	    },

	    _elementOffset: function() {
	        var element = this.element;
	        var ref = elementStyles(element, [ "paddingLeft", "paddingTop" ]);
	        var paddingLeft = ref.paddingLeft;
	        var paddingTop = ref.paddingTop;
	        var ref$1 = elementOffset(element);
	        var left = ref$1.left;
	        var top = ref$1.top;

	        return {
	            left: left + parseInt(paddingLeft, 10),
	            top: top + parseInt(paddingTop, 10)
	        };
	    },

	    _surfacePoint: function(e) {
	        var offset = this._elementOffset();
	        var coord = eventCoordinates(e);
	        var x = coord.x - offset.left;
	        var y = coord.y - offset.top;

	        return new Point(x, y);
	    }
	});

	Surface.create = function(element, options) {
	    return SurfaceFactory.current.create(element, options);
	};

	Surface.support = {};

	var BaseNode = Class.extend({
	    init: function(srcElement) {

	        this.childNodes = [];
	        this.parent = null;

	        if (srcElement) {
	            this.srcElement = srcElement;
	            this.observe();
	        }
	    },

	    destroy: function() {
	        var this$1 = this;

	        if (this.srcElement) {
	            this.srcElement.removeObserver(this);
	        }

	        var children = this.childNodes;
	        for (var i = 0; i < children.length; i++) {
	            this$1.childNodes[i].destroy();
	        }

	        this.parent = null;
	    },

	    load: function() {},

	    observe: function() {
	        if (this.srcElement) {
	            this.srcElement.addObserver(this);
	        }
	    },

	    append: function(node) {
	        this.childNodes.push(node);
	        node.parent = this;
	    },

	    insertAt: function(node, pos) {
	        this.childNodes.splice(pos, 0, node);
	        node.parent = this;
	    },

	    remove: function(index, count) {
	        var this$1 = this;

	        var end = index + count;
	        for (var i = index; i < end; i++) {
	            this$1.childNodes[i].removeSelf();
	        }
	        this.childNodes.splice(index, count);
	    },

	    removeSelf: function() {
	        this.clear();
	        this.destroy();
	    },

	    clear: function() {
	        this.remove(0, this.childNodes.length);
	    },

	    invalidate: function() {
	        if (this.parent) {
	            this.parent.invalidate();
	        }
	    },

	    geometryChange: function() {
	        this.invalidate();
	    },

	    optionsChange: function() {
	        this.invalidate();
	    },

	    childrenChange: function(e) {
	        if (e.action === "add") {
	            this.load(e.items, e.index);
	        } else if (e.action === "remove") {
	            this.remove(e.index, e.items.length);
	        }

	        this.invalidate();
	    }
	});

	function renderAttr(name, value) {
	    return (defined(value) && value !== null) ? (" " + name + "='" + value + "' ") : "";
	}

	function renderAllAttr(attrs) {
	    var output = "";
	    for (var i = 0; i < attrs.length; i++) {
	        output += renderAttr(attrs[i][0], attrs[i][1]);
	    }

	    return output;
	}

	function renderStyle(attrs) {
	    var output = "";
	    for (var i = 0; i < attrs.length; i++) {
	        var value = attrs[i][1];
	        if (defined(value)) {
	            output += attrs[i][0] + ":" + value + ";";
	        }
	    }

	    if (output !== "") {
	        return output;
	    }
	}

	var NODE_MAP = {};

	var SVG_NS = "http://www.w3.org/2000/svg";
	var NONE = "none";

	var renderSVG = function(container, svg) {
	    container.innerHTML = svg;
	};

	if (typeof document !== "undefined") {
	    var testFragment = "<svg xmlns='" + SVG_NS + "'></svg>";
	    var testContainer = document.createElement("div");
	    var hasParser = typeof DOMParser !== "undefined";

	    testContainer.innerHTML = testFragment;

	    if (hasParser && testContainer.firstChild.namespaceURI !== SVG_NS) {
	        renderSVG = function(container, svg) {
	            var parser = new DOMParser();
	            var chartDoc = parser.parseFromString(svg, "text/xml");
	            var importedDoc = document.adoptNode(chartDoc.documentElement);

	            container.innerHTML = "";
	            container.appendChild(importedDoc);
	        };
	    }
	}

	var renderSVG$1 = renderSVG;

	var TRANSFORM = "transform";
	var DefinitionMap = {
	    clip: "clip-path",
	    fill: "fill"
	};

	function isDefinition(type, value) {
	    return type === "clip" || (type === "fill" && (!value || value.nodeType === "Gradient"));
	}

	function baseUrl() {
	    var base = document.getElementsByTagName("base")[0];
	    var href = document.location.href;
	    var hashIndex = href.indexOf("#");
	    var url = "";

	    if (base && !support.browser.msie) {
	        if (hashIndex !== -1) {
	            href = href.substring(0, hashIndex);
	        }

	        url = href;
	    }

	    return url;
	}

	function refUrl(id) {
	    return "url(" + baseUrl() + "#" + id + ")";
	}

	var Node = BaseNode.extend({
	    init: function(srcElement) {
	        BaseNode.fn.init.call(this, srcElement);
	        this.definitions = {};
	    },

	    destroy: function() {
	        if (this.element) {
	            this.element._kendoNode = null;
	            this.element = null;
	        }

	        this.clearDefinitions();
	        BaseNode.fn.destroy.call(this);
	    },

	    load: function(elements, pos) {
	        var this$1 = this;

	        for (var i = 0; i < elements.length; i++) {
	            var srcElement = elements[i];
	            var children = srcElement.children;

	            var childNode = new NODE_MAP[srcElement.nodeType](srcElement);

	            if (defined(pos)) {
	                this$1.insertAt(childNode, pos);
	            } else {
	                this$1.append(childNode);
	            }

	            childNode.createDefinitions();

	            if (children && children.length > 0) {
	                childNode.load(children);
	            }

	            var element = this$1.element;
	            if (element) {
	                childNode.attachTo(element, pos);
	            }
	        }
	    },

	    root: function() {
	        var root = this;

	        while (root.parent) {
	            root = root.parent;
	        }

	        return root;
	    },

	    attachTo: function(domElement, pos) {
	        var container = document.createElement("div");
	        renderSVG$1(container,
	            "<svg xmlns='" + SVG_NS + "' version='1.1'>" +
	                this.render() +
	            "</svg>"
	        );

	        var element = container.firstChild.firstChild;
	        if (element) {
	            if (defined(pos)) {
	                domElement.insertBefore(element, domElement.childNodes[pos] || null);
	            } else {
	                domElement.appendChild(element);
	            }
	            this.setElement(element);
	        }
	    },

	    setElement: function(element) {
	        if (this.element) {
	            this.element._kendoNode = null;
	        }

	        this.element = element;
	        this.element._kendoNode = this;

	        var nodes = this.childNodes;
	        for (var i = 0; i < nodes.length; i++) {
	            var childElement = element.childNodes[i];
	            nodes[i].setElement(childElement);
	        }
	    },

	    clear: function() {
	        this.clearDefinitions();

	        if (this.element) {
	            this.element.innerHTML = "";
	        }

	        var children = this.childNodes;
	        for (var i = 0; i < children.length; i++) {
	            children[i].destroy();
	        }

	        this.childNodes = [];
	    },

	    removeSelf: function() {
	        if (this.element) {
	            var parentNode = this.element.parentNode;
	            if (parentNode) {
	                parentNode.removeChild(this.element);
	            }
	            this.element = null;
	        }

	        BaseNode.fn.removeSelf.call(this);
	    },

	    template: function() {
	        return this.renderChildren();
	    },

	    render: function() {
	        return this.template();
	    },

	    renderChildren: function() {
	        var nodes = this.childNodes;
	        var output = "";

	        for (var i = 0; i < nodes.length; i++) {
	            output += nodes[i].render();
	        }

	        return output;
	    },

	    optionsChange: function(e) {
	        var field = e.field;
	        var value = e.value;

	        if (field === "visible") {
	            this.css("display", value ? "" : NONE);
	        } else if (DefinitionMap[field] && isDefinition(field, value)) {
	            this.updateDefinition(field, value);
	        } else if (field === "opacity") {
	            this.attr("opacity", value);
	        }

	        BaseNode.fn.optionsChange.call(this, e);
	    },

	    attr: function(name, value) {
	        if (this.element) {
	            this.element.setAttribute(name, value);
	        }
	    },

	    allAttr: function(attrs) {
	        var this$1 = this;

	        for (var i = 0; i < attrs.length; i++) {
	            this$1.attr(attrs[i][0], attrs[i][1]);
	        }
	    },

	    css: function(name, value) {
	        if (this.element) {
	            this.element.style[name] = value;
	        }
	    },

	    allCss: function(styles) {
	        var this$1 = this;

	        for (var i = 0; i < styles.length; i++) {
	            this$1.css(styles[i][0], styles[i][1]);
	        }
	    },

	    removeAttr: function(name) {
	        if (this.element) {
	            this.element.removeAttribute(name);
	        }
	    },

	    mapTransform: function(transform) {
	        var attrs = [];
	        if (transform) {
	            attrs.push([
	                TRANSFORM,
	                "matrix(" + transform.matrix().toString(6) + ")"
	            ]);
	        }

	        return attrs;
	    },

	    renderTransform: function() {
	        return renderAllAttr(
	            this.mapTransform(this.srcElement.transform())
	        );
	    },

	    transformChange: function(value) {
	        if (value) {
	            this.allAttr(this.mapTransform(value));
	        } else {
	            this.removeAttr(TRANSFORM);
	        }
	    },

	    mapStyle: function() {
	        var options = this.srcElement.options;
	        var style = [ [ "cursor", options.cursor ] ];

	        if (options.visible === false) {
	            style.push([ "display", NONE ]);
	        }

	        return style;
	    },

	    renderStyle: function() {
	        return renderAttr("style", renderStyle(this.mapStyle(true)));
	    },

	    renderOpacity: function() {
	        return renderAttr("opacity", this.srcElement.options.opacity);
	    },

	    createDefinitions: function() {
	        var srcElement = this.srcElement;
	        var definitions = this.definitions;
	        if (srcElement) {
	            var options = srcElement.options;
	            var hasDefinitions;

	            for (var field in DefinitionMap) {
	                var definition = options.get(field);
	                if (definition && isDefinition(field, definition)) {
	                    definitions[field] = definition;
	                    hasDefinitions = true;
	                }
	            }
	            if (hasDefinitions) {
	                this.definitionChange({
	                    action: "add",
	                    definitions: definitions
	                });
	            }
	        }
	    },

	    definitionChange: function(e) {
	        if (this.parent) {
	            this.parent.definitionChange(e);
	        }
	    },

	    updateDefinition: function(type, value) {
	        var definitions = this.definitions;
	        var current = definitions[type];
	        var attr = DefinitionMap[type];
	        var definition = {};
	        if (current) {
	            definition[type] = current;
	            this.definitionChange({
	                action: "remove",
	                definitions: definition
	            });
	            delete definitions[type];
	        }

	        if (!value) {
	            if (current) {
	                this.removeAttr(attr);
	            }
	        } else {
	            definition[type] = value;
	            this.definitionChange({
	                action: "add",
	                definitions: definition
	            });
	            definitions[type] = value;
	            this.attr(attr, refUrl(value.id));
	        }
	    },

	    clearDefinitions: function() {
	        var definitions = this.definitions;

	        this.definitionChange({
	            action: "remove",
	            definitions: definitions
	        });
	        this.definitions = {};
	    },

	    renderDefinitions: function() {
	        return renderAllAttr(this.mapDefinitions());
	    },

	    mapDefinitions: function() {
	        var definitions = this.definitions;
	        var attrs = [];

	        for (var field in definitions) {
	            attrs.push([ DefinitionMap[field], refUrl(definitions[field].id) ]);
	        }

	        return attrs;
	    }
	});

	var GradientStopNode = Node.extend({
	    template: function() {
	        return ("<stop " + (this.renderOffset()) + " " + (this.renderStyle()) + " />");
	    },

	    renderOffset: function() {
	        return renderAttr("offset", this.srcElement.offset());
	    },

	    mapStyle: function() {
	        var srcElement = this.srcElement;
	        return [
	            [ "stop-color", srcElement.color() ],
	            [ "stop-opacity", srcElement.opacity() ]
	        ];
	    },

	    optionsChange: function(e) {
	        if (e.field === "offset") {
	            this.attr(e.field, e.value);
	        } else if (e.field === "color" || e.field === "opacity") {
	            this.css("stop-" + e.field, e.value);
	        }
	    }
	});

	var GradientNode = Node.extend({
	    init: function(srcElement) {
	        Node.fn.init.call(this, srcElement);

	        this.id = srcElement.id;

	        this.loadStops();
	    },

	    loadStops: function() {
	        var this$1 = this;

	        var stops = this.srcElement.stops;
	        var element = this.element;

	        for (var idx = 0; idx < stops.length; idx++) {
	            var stopNode = new GradientStopNode(stops[idx]);
	            this$1.append(stopNode);
	            if (element) {
	                stopNode.attachTo(element);
	            }
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "gradient.stops") {
	            BaseNode.prototype.clear.call(this);
	            this.loadStops();
	        } else if (e.field === "gradient") {
	            this.allAttr(this.mapCoordinates());
	        }
	    },

	    renderCoordinates: function() {
	        return renderAllAttr(this.mapCoordinates());
	    },

	    mapSpace: function() {
	        return [ "gradientUnits", this.srcElement.userSpace() ? "userSpaceOnUse" : "objectBoundingBox" ];
	    }
	});

	var LinearGradientNode = GradientNode.extend({
	    template: function() {
	        return ("<linearGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</linearGradient>");
	    },

	    mapCoordinates: function() {
	        var srcElement = this.srcElement;
	        var start = srcElement.start();
	        var end = srcElement.end();
	        var attrs = [
	            [ "x1", start.x ],
	            [ "y1", start.y ],
	            [ "x2", end.x ],
	            [ "y2", end.y ],
	            this.mapSpace()
	        ];

	        return attrs;
	    }
	});

	var RadialGradientNode = GradientNode.extend({
	    template: function() {
	        return ("<radialGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</radialGradient>");
	    },

	    mapCoordinates: function() {
	        var srcElement = this.srcElement;
	        var center = srcElement.center();
	        var radius = srcElement.radius();
	        var attrs = [
	            [ "cx", center.x ],
	            [ "cy", center.y ],
	            [ "r", radius ],
	            this.mapSpace()
	        ];
	        return attrs;
	    }
	});

	var ClipNode = Node.extend({
	    init: function(srcElement) {
	        Node.fn.init.call(this);

	        this.srcElement = srcElement;
	        this.id = srcElement.id;

	        this.load([ srcElement ]);
	    },

	    template: function() {
	        return ("<clipPath id='" + (this.id) + "'>" + (this.renderChildren()) + "</clipPath>");
	    }
	});

	var DefinitionNode = Node.extend({
	    init: function() {
	        Node.fn.init.call(this);
	        this.definitionMap = {};
	    },

	    attachTo: function(domElement) {
	        this.element = domElement;
	    },

	    template: function() {
	        return ("<defs>" + (this.renderChildren()) + "</defs>");
	    },

	    definitionChange: function(e) {
	        var definitions = e.definitions;
	        var action = e.action;

	        if (action === "add") {
	            this.addDefinitions(definitions);
	        } else if (action === "remove") {
	            this.removeDefinitions(definitions);
	        }
	    },

	    createDefinition: function(type, item) {
	        var nodeType;
	        if (type === "clip") {
	            nodeType = ClipNode;
	        } else if (type === "fill") {
	            if (item instanceof LinearGradient) {
	                nodeType = LinearGradientNode;
	            } else if (item instanceof RadialGradient) {
	                nodeType = RadialGradientNode;
	            }
	        }
	        return new nodeType(item);
	    },

	    addDefinitions: function(definitions) {
	        var this$1 = this;

	        for (var field in definitions) {
	            this$1.addDefinition(field, definitions[field]);
	        }
	    },

	    addDefinition: function(type, srcElement) {
	        var ref = this;
	        var element = ref.element;
	        var definitionMap = ref.definitionMap;
	        var id = srcElement.id;
	        var mapItem = definitionMap[id];
	        if (!mapItem) {
	            var node = this.createDefinition(type, srcElement);
	            definitionMap[id] = {
	                element: node,
	                count: 1
	            };
	            this.append(node);
	            if (element) {
	                node.attachTo(this.element);
	            }
	        } else {
	            mapItem.count++;
	        }
	    },

	    removeDefinitions: function(definitions) {
	        var this$1 = this;

	        for (var field in definitions) {
	            this$1.removeDefinition(definitions[field]);
	        }
	    },

	    removeDefinition: function(srcElement) {
	        var definitionMap = this.definitionMap;
	        var id = srcElement.id;
	        var mapItem = definitionMap[id];

	        if (mapItem) {
	            mapItem.count--;
	            if (mapItem.count === 0) {
	                this.remove(this.childNodes.indexOf(mapItem.element), 1);
	                delete definitionMap[id];
	            }
	        }
	    }
	});

	var RootNode = Node.extend({
	    init: function(options) {
	        Node.fn.init.call(this);
	        this.options = options;
	        this.defs = new DefinitionNode();
	    },

	    attachTo: function(domElement) {
	        this.element = domElement;
	        this.defs.attachTo(domElement.firstElementChild);
	    },

	    clear: function() {
	        BaseNode.prototype.clear.call(this);
	    },

	    template: function() {
	        return this.defs.render() + this.renderChildren();
	    },

	    definitionChange: function(e) {
	        this.defs.definitionChange(e);
	    }
	});

	function alignToScreen(element) {
	    var ctm;

	    try {
	        ctm = element.getScreenCTM ? element.getScreenCTM() : null;
	    } catch (e) { } // eslint-disable-line no-empty

	    if (ctm) {
	        var left = - ctm.e % 1;
	        var top = - ctm.f % 1;
	        var style = element.style;

	        if (left !== 0 || top !== 0) {
	            style.left = left + "px";
	            style.top = top + "px";
	        }
	    }
	}

	var Surface$1 = Surface.extend({
	    init: function(element, options) {
	        Surface.fn.init.call(this, element, options);

	        this._root = new RootNode(this.options);

	        renderSVG$1(this.element, this._template());

	        this._rootElement = this.element.firstElementChild;

	        alignToScreen(this._rootElement);

	        this._root.attachTo(this._rootElement);

	        bindEvents(this.element, {
	            click: this._click,
	            mouseover: this._mouseenter,
	            mouseout: this._mouseleave,
	            mousemove: this._mousemove
	        });

	        this.resize();
	    },

	    destroy: function() {
	        if (this._root) {
	            this._root.destroy();
	            this._root = null;
	            this._rootElement = null;
	            unbindEvents(this.element, {
	                click: this._click,
	                mouseover: this._mouseenter,
	                mouseout: this._mouseleave,
	                mousemove: this._mousemove
	            });
	        }

	        Surface.fn.destroy.call(this);
	    },

	    translate: function(offset) {
	        var viewBox = (Math.round(offset.x)) + " " + (Math.round(offset.y)) + " " + (this._size.width) + " " + (this._size.height);

	        this._offset = offset;
	        this._rootElement.setAttribute("viewBox", viewBox);
	    },

	    draw: function(element) {
	        Surface.fn.draw.call(this, element);
	        this._root.load([ element ]);
	    },

	    clear: function() {
	        Surface.fn.clear.call(this);
	        this._root.clear();
	    },

	    svg: function() {
	        return "<?xml version='1.0' ?>" + this._template();
	    },

	    exportVisual: function() {
	        var ref = this;
	        var visual = ref._visual;
	        var offset = ref._offset;

	        if (offset) {
	            var wrap = new Group();
	            wrap.children.push(visual);

	            wrap.transform(
	                transform().translate(-offset.x, -offset.y)
	            );

	            visual = wrap;
	        }

	        return visual;
	    },

	    _resize: function() {
	        if (this._offset) {
	            this.translate(this._offset);
	        }
	    },

	    _template: function() {
	        return ("<svg style='width: 100%; height: 100%; overflow: hidden;' xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (this._root.render()) + "</svg>");
	    }
	});

	Surface$1.prototype.type = "svg";

	if (typeof document !== "undefined" && document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1")) {
	    Surface.support.svg = true;
	    SurfaceFactory.current.register("svg", Surface$1, 10);
	}

	var GroupNode = Node.extend({
	    template: function() {
	        return ("<g" + (this.renderTransform() + this.renderStyle() + this.renderOpacity() + this.renderDefinitions()) + ">" + (this.renderChildren()) + "</g>");
	    },

	    optionsChange: function(e) {
	        if (e.field === "transform") {
	            this.transformChange(e.value);
	        }

	        Node.fn.optionsChange.call(this, e);
	    }
	});

	NODE_MAP.Group = GroupNode;

	var DASH_ARRAYS = {
	    dot: [ 1.5, 3.5 ],
	    dash: [ 4, 3.5 ],
	    longdash: [ 8, 3.5 ],
	    dashdot: [ 3.5, 3.5, 1.5, 3.5 ],
	    longdashdot: [ 8, 3.5, 1.5, 3.5 ],
	    longdashdotdot: [ 8, 3.5, 1.5, 3.5, 1.5, 3.5 ]
	};

	var SOLID = "solid";
	var BUTT = "butt";

	var ATTRIBUTE_MAP = {
	    "fill.opacity": "fill-opacity",
	    "stroke.color": "stroke",
	    "stroke.width": "stroke-width",
	    "stroke.opacity": "stroke-opacity"
	};
	var SPACE = " ";

	var PathNode = Node.extend({
	    geometryChange: function() {
	        this.attr("d", this.renderData());
	        this.invalidate();
	    },

	    optionsChange: function(e) {
	        switch (e.field) {
	            case "fill":
	                if (e.value) {
	                    this.allAttr(this.mapFill(e.value));
	                } else {
	                    this.removeAttr("fill");
	                }
	                break;

	            case "fill.color":
	                this.allAttr(this.mapFill({ color: e.value }));
	                break;

	            case "stroke":
	                if (e.value) {
	                    this.allAttr(this.mapStroke(e.value));
	                } else {
	                    this.removeAttr("stroke");
	                }
	                break;

	            case "transform":
	                this.transformChange(e.value);
	                break;

	            default:
	                var name = ATTRIBUTE_MAP[e.field];
	                if (name) {
	                    this.attr(name, e.value);
	                }
	                break;
	        }

	        Node.fn.optionsChange.call(this, e);
	    },

	    content: function() {
	        if (this.element) {
	            this.element.textContent = this.srcElement.content();
	        }
	    },

	    renderData: function() {
	        return this.printPath(this.srcElement);
	    },

	    printPath: function(path) {
	        var this$1 = this;

	        var segments = path.segments;
	        var length = segments.length;
	        if (length > 0) {
	            var parts = [];
	            var output, currentType;

	            for (var i = 1; i < length; i++) {
	                var segmentType = this$1.segmentType(segments[i - 1], segments[i]);
	                if (segmentType !== currentType) {
	                    currentType = segmentType;
	                    parts.push(segmentType);
	                }

	                if (segmentType === "L") {
	                    parts.push(this$1.printPoints(segments[i].anchor()));
	                } else {
	                    parts.push(this$1.printPoints(segments[i - 1].controlOut(), segments[i].controlIn(), segments[i].anchor()));
	                }
	            }

	            output = "M" + this.printPoints(segments[0].anchor()) + SPACE + parts.join(SPACE);
	            if (path.options.closed) {
	                output += "Z";
	            }

	            return output;
	        }
	    },

	    printPoints: function() {
	        var points = arguments;
	        var length = points.length;
	        var result = [];

	        for (var i = 0; i < length; i++) {
	            result.push(points[i].toString(3));
	        }

	        return result.join(" ");
	    },

	    segmentType: function(segmentStart, segmentEnd) {
	        return segmentStart.controlOut() && segmentEnd.controlIn() ? "C" : "L";
	    },

	    mapStroke: function(stroke) {
	        var attrs = [];

	        if (stroke && !isTransparent(stroke.color)) {
	            attrs.push([ "stroke", stroke.color ]);
	            attrs.push([ "stroke-width", stroke.width ]);
	            attrs.push([ "stroke-linecap", this.renderLinecap(stroke) ]);
	            attrs.push([ "stroke-linejoin", stroke.lineJoin ]);

	            if (defined(stroke.opacity)) {
	                attrs.push([ "stroke-opacity", stroke.opacity ]);
	            }

	            if (defined(stroke.dashType)) {
	                attrs.push([ "stroke-dasharray", this.renderDashType(stroke) ]);
	            }
	        } else {
	            attrs.push([ "stroke", NONE ]);
	        }

	        return attrs;
	    },

	    renderStroke: function() {
	        return renderAllAttr(
	            this.mapStroke(this.srcElement.options.stroke)
	        );
	    },

	    renderDashType: function(stroke) {
	        var dashType = stroke.dashType;
	        var width = stroke.width; if (width === void 0) { width = 1; }

	        if (dashType && dashType !== SOLID) {
	            var dashArray = DASH_ARRAYS[dashType.toLowerCase()];
	            var result = [];

	            for (var i = 0; i < dashArray.length; i++) {
	                result.push(dashArray[i] * width);
	            }

	            return result.join(" ");
	        }
	    },

	    renderLinecap: function(stroke) {
	        var dashType = stroke.dashType;
	        var lineCap = stroke.lineCap;

	        return (dashType && dashType !== "solid") ? BUTT : lineCap;
	    },

	    mapFill: function(fill) {
	        var attrs = [];
	        if (!(fill && fill.nodeType === "Gradient")) {
	            if (fill && !isTransparent(fill.color)) {
	                attrs.push([ "fill", fill.color ]);

	                if (defined(fill.opacity)) {
	                    attrs.push([ "fill-opacity", fill.opacity ]);
	                }
	            } else {
	                attrs.push([ "fill", NONE ]);
	            }
	        }

	        return attrs;
	    },

	    renderFill: function() {
	        return renderAllAttr(
	            this.mapFill(this.srcElement.options.fill)
	        );
	    },

	    template: function() {
	        return "<path " + (this.renderStyle()) + " " + (this.renderOpacity()) + " " + (renderAttr('d', this.renderData())) +
	                    "" + (this.renderStroke()) + (this.renderFill()) + (this.renderDefinitions()) + (this.renderTransform()) + "></path>";
	    }
	});

	NODE_MAP.Path = PathNode;

	var ArcNode = PathNode.extend({
	    renderData: function() {
	        return this.printPath(this.srcElement.toPath());
	    }
	});

	NODE_MAP.Arc = ArcNode;

	var CircleNode = PathNode.extend({
	    geometryChange: function() {
	        var center = this.center();
	        this.attr("cx", center.x);
	        this.attr("cy", center.y);
	        this.attr("r", this.radius());
	        this.invalidate();
	    },

	    center: function() {
	        return this.srcElement.geometry().center;
	    },

	    radius: function() {
	        return this.srcElement.geometry().radius;
	    },

	    template: function() {
	        return "<circle " + (this.renderStyle()) + " " + (this.renderOpacity()) +
	                    "cx='" + (this.center().x) + "' cy='" + (this.center().y) + "' r='" + (this.radius()) + "'" +
	                    (this.renderStroke()) + " " + (this.renderFill()) + " " + (this.renderDefinitions()) +
	                    (this.renderTransform()) + " ></circle>";
	    }
	});

	NODE_MAP.Circle = CircleNode;

	var RectNode = PathNode.extend({
	    geometryChange: function() {
	        var geometry = this.srcElement.geometry();
	        this.attr("x", geometry.origin.x);
	        this.attr("y", geometry.origin.y);
	        this.attr("width", geometry.size.width);
	        this.attr("height", geometry.size.height);
	        this.invalidate();
	    },

	    size: function() {
	        return this.srcElement.geometry().size;
	    },

	    origin: function() {
	        return this.srcElement.geometry().origin;
	    },

	    template: function() {
	        return "<rect " + (this.renderStyle()) + " " + (this.renderOpacity()) + " x='" + (this.origin().x) + "' y='" + (this.origin().y) + "' " +
	                    "width='" + (this.size().width) + "' height='" + (this.size().height) + "' " + (this.renderStroke()) + " " +
	                    (this.renderFill()) + " " + (this.renderDefinitions()) + " " + (this.renderTransform()) + " />";
	    }
	});

	NODE_MAP.Rect = RectNode;

	var ImageNode = PathNode.extend({
	    geometryChange: function() {
	        this.allAttr(this.mapPosition());
	        this.invalidate();
	    },

	    optionsChange: function(e) {
	        if (e.field === "src") {
	            this.allAttr(this.mapSource());
	        }

	        PathNode.fn.optionsChange.call(this, e);
	    },

	    mapPosition: function() {
	        var rect = this.srcElement.rect();
	        var tl = rect.topLeft();

	        return [
	            [ "x", tl.x ],
	            [ "y", tl.y ],
	            [ "width", rect.width() + "px" ],
	            [ "height", rect.height() + "px" ]
	        ];
	    },

	    renderPosition: function() {
	        return renderAllAttr(this.mapPosition());
	    },

	    mapSource: function(encode) {
	        var src = this.srcElement.src();

	        if (encode) {
	            src = kendo.htmlEncode(src);
	        }

	        return [ [ "xlink:href", src ] ];
	    },

	    renderSource: function() {
	        return renderAllAttr(this.mapSource(true));
	    },

	    template: function() {
	        return "<image preserveAspectRatio='none' " + (this.renderStyle()) + " " + (this.renderTransform()) + " " + (this.renderOpacity()) +
	               (this.renderPosition()) + " " + (this.renderSource()) + " " + (this.renderDefinitions()) + ">" +
	               "</image>";
	    }
	});

	NODE_MAP.Image = ImageNode;

	function decodeEntities(text) {
	    if (!text || !text.indexOf || text.indexOf("&") < 0) {
	        return text;
	    }

	    var element = decodeEntities._element;
	    element.innerHTML = text;
	    return element.textContent || element.innerText;
	}

	if (typeof document !== "undefined") {
	    decodeEntities._element = document.createElement("span");
	}

	var TextNode = PathNode.extend({
	    geometryChange: function() {
	        var pos = this.pos();
	        this.attr("x", pos.x);
	        this.attr("y", pos.y);
	        this.invalidate();
	    },

	    optionsChange: function(e) {
	        if (e.field === "font") {
	            this.attr("style", renderStyle(this.mapStyle()));
	            this.geometryChange();
	        } else if (e.field === "content") {
	            PathNode.fn.content.call(this, this.srcElement.content());
	        }

	        PathNode.fn.optionsChange.call(this, e);
	    },

	    mapStyle: function(encode) {
	        var style = PathNode.fn.mapStyle.call(this, encode);
	        var font = this.srcElement.options.font;

	        if (encode) {
	            font = kendo.htmlEncode(font);
	        }

	        style.push([ "font", font ]);

	        return style;
	    },

	    pos: function() {
	        var pos = this.srcElement.position();
	        var size = this.srcElement.measure();
	        return pos.clone().setY(pos.y + size.baseline);
	    },

	    renderContent: function() {
	        var content = this.srcElement.content();
	        content = decodeEntities(content);
	        content = kendo.htmlEncode(content);

	        return content;
	    },

	    template: function() {
	        return "<text " + (this.renderStyle()) + " " + (this.renderOpacity()) + " x='" + (this.pos().x) + "' y='" + (this.pos().y) + "'" +
	                    (this.renderStroke()) + " " + (this.renderTransform()) + " " + (this.renderDefinitions()) +
	                    (this.renderFill()) + ">" + (this.renderContent()) + "</text>";
	    }
	});

	NODE_MAP.Text = TextNode;

	var MultiPathNode = PathNode.extend({
	    renderData: function() {
	        var this$1 = this;

	        var paths = this.srcElement.paths;

	        if (paths.length > 0) {
	            var result = [];

	            for (var i = 0; i < paths.length; i++) {
	                result.push(this$1.printPath(paths[i]));
	            }

	            return result.join(" ");
	        }
	    }
	});

	NODE_MAP.MultiPath = MultiPathNode;

	var geometry = {
		Circle: Circle$2,
		Arc: Arc$2,
		Rect: Rect,
		Point: Point,
		Segment: Segment,
		Matrix: Matrix,
		Size: Size,
		toMatrix: toMatrix,
		Transformation: Transformation,
		transform: transform
	};

	function exportGroup(group) {
	    var root = new RootNode();
	    var bbox = group.clippedBBox();
	    var rootGroup = group;

	    if (bbox) {
	        var origin = bbox.getOrigin();
	        var exportRoot = new Group();
	        exportRoot.transform(transform().translate(-origin.x, -origin.y));
	        exportRoot.children.push(group);
	        rootGroup = exportRoot;
	    }

	    root.load([ rootGroup ]);

	    var svg = "<?xml version='1.0' ?><svg xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (root.render()) + "</svg>";

	    root.destroy();

	    return svg;
	}

	var svg = {
		Surface: Surface$1,
		RootNode: RootNode,
		Node: Node,
		GroupNode: GroupNode,
		ArcNode: ArcNode,
		CircleNode: CircleNode,
		RectNode: RectNode,
		ImageNode: ImageNode,
		TextNode: TextNode,
		PathNode: PathNode,
		MultiPathNode: MultiPathNode,
		DefinitionNode: DefinitionNode,
		ClipNode: ClipNode,
		GradientStopNode: GradientStopNode,
		LinearGradientNode: LinearGradientNode,
		RadialGradientNode: RadialGradientNode,
		exportGroup: exportGroup
	};

	var NODE_MAP$2 = {};

	function renderPath(ctx, path) {
	    var segments = path.segments;

	    if (segments.length === 0) {
	        return;
	    }

	    var segment = segments[0];
	    var anchor = segment.anchor();
	    ctx.moveTo(anchor.x, anchor.y);

	    for (var i = 1; i < segments.length; i++) {
	        segment = segments[i];
	        anchor = segment.anchor();

	        var prevSeg = segments[i - 1];
	        var prevOut = prevSeg.controlOut();
	        var controlIn = segment.controlIn();

	        if (prevOut && controlIn) {
	            ctx.bezierCurveTo(prevOut.x, prevOut.y,
	                              controlIn.x, controlIn.y,
	                              anchor.x, anchor.y);
	        } else {
	            ctx.lineTo(anchor.x, anchor.y);
	        }
	    }

	    if (path.options.closed) {
	        ctx.closePath();
	    }
	}

	var Node$2 = BaseNode.extend({
	    init: function(srcElement) {
	        BaseNode.fn.init.call(this, srcElement);
	        if (srcElement) {
	            this.initClip();
	        }
	    },

	    initClip: function() {
	        var clip = this.srcElement.clip();
	        if (clip) {
	            this.clip = clip;
	            clip.addObserver(this);
	        }
	    },

	    clear: function() {
	        if (this.srcElement) {
	            this.srcElement.removeObserver(this);
	        }

	        this.clearClip();

	        BaseNode.fn.clear.call(this);
	    },

	    clearClip: function() {
	        if (this.clip) {
	            this.clip.removeObserver(this);
	            delete this.clip;
	        }
	    },

	    setClip: function(ctx) {
	        if (this.clip) {
	            ctx.beginPath();
	            renderPath(ctx, this.clip);
	            ctx.clip();
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "clip") {
	            this.clearClip();
	            this.initClip();
	        }

	        BaseNode.fn.optionsChange.call(this, e);
	    },

	    setTransform: function(ctx) {
	        if (this.srcElement) {
	            var transform = this.srcElement.transform();
	            if (transform) {
	                ctx.transform.apply(ctx, transform.matrix().toArray(6));
	            }
	        }
	    },

	    loadElements: function(elements, pos, cors) {
	        var this$1 = this;

	        for (var i = 0; i < elements.length; i++) {
	            var srcElement = elements[i];
	            var children = srcElement.children;

	            var childNode = new NODE_MAP$2[srcElement.nodeType](srcElement, cors);

	            if (children && children.length > 0) {
	                childNode.load(children, pos, cors);
	            }

	            if (defined(pos)) {
	                this$1.insertAt(childNode, pos);
	            } else {
	                this$1.append(childNode);
	            }
	        }
	    },

	    load: function(elements, pos, cors) {
	        this.loadElements(elements, pos, cors);

	        this.invalidate();
	    },

	    setOpacity: function(ctx) {
	        if (this.srcElement) {
	            var opacity = this.srcElement.opacity();
	            if (defined(opacity)) {
	                this.globalAlpha(ctx, opacity);
	            }
	        }
	    },

	    globalAlpha: function(ctx, value) {
	        var opactity = value;
	        if (opactity && ctx.globalAlpha) {
	            opactity *= ctx.globalAlpha;
	        }
	        ctx.globalAlpha = opactity;
	    },

	    visible: function() {
	        var src = this.srcElement;
	        return !src || (src && src.options.visible !== false);
	    }
	});

	var GroupNode$2 = Node$2.extend({
	    renderTo: function(ctx) {
	        if (!this.visible()) {
	            return;
	        }

	        ctx.save();

	        this.setTransform(ctx);
	        this.setClip(ctx);
	        this.setOpacity(ctx);

	        var childNodes = this.childNodes;
	        for (var i = 0; i < childNodes.length; i++) {
	            var child = childNodes[i];
	            if (child.visible()) {
	                child.renderTo(ctx);
	            }
	        }

	        ctx.restore();
	    }
	});

	Traversable.extend(GroupNode$2.prototype, "childNodes");

	NODE_MAP$2.Group = GroupNode$2;

	var FRAME_DELAY = 1000 / 60;

	var RootNode$2 = GroupNode$2.extend({
	    init: function(canvas) {
	        GroupNode$2.fn.init.call(this);

	        this.canvas = canvas;
	        this.ctx = canvas.getContext("2d");

	        var invalidateHandler = this._invalidate.bind(this);
	        this.invalidate = kendo.throttle(function () {
	            kendo.animationFrame(invalidateHandler);
	        }, FRAME_DELAY);
	    },

	    destroy: function() {
	        GroupNode$2.fn.destroy.call(this);
	        this.canvas = null;
	        this.ctx = null;
	    },

	    load: function(elements, pos, cors) {
	        this.loadElements(elements, pos, cors);
	        this._invalidate();
	    },

	    _invalidate: function() {
	        if (!this.ctx) {
	            return;
	        }
	        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
	        this.renderTo(this.ctx);
	    }
	});

	Traversable.extend(RootNode$2.prototype, "childNodes");

	var QuadRoot = Class.extend({
	    init: function() {

	        this.shapes = [];
	    },

	    _add: function(shape, bbox) {
	        this.shapes.push({
	            bbox: bbox,
	            shape: shape
	        });
	        shape._quadNode = this;
	    },

	    pointShapes: function(point) {
	        var shapes = this.shapes;
	        var length = shapes.length;
	        var result = [];
	        for (var idx = 0; idx < length; idx++) {
	            if (shapes[idx].bbox.containsPoint(point)) {
	                result.push(shapes[idx].shape);
	            }
	        }
	        return result;
	    },

	    insert: function(shape, bbox) {
	        this._add(shape, bbox);
	    },

	    remove: function(shape) {
	        var shapes = this.shapes;
	        var length = shapes.length;

	        for (var idx = 0; idx < length; idx++) {
	            if (shapes[idx].shape === shape) {
	                shapes.splice(idx, 1);
	                break;
	            }
	        }
	    }
	});

	var QuadNode = QuadRoot.extend({
	    init: function(rect) {
	        QuadRoot.fn.init.call(this);
	        this.children = [];
	        this.rect = rect;
	    },

	    inBounds: function(rect) {
	        var nodeRect = this.rect;
	        var nodeBottomRight = nodeRect.bottomRight();
	        var bottomRight = rect.bottomRight();
	        var inBounds = nodeRect.origin.x <= rect.origin.x && nodeRect.origin.y <= rect.origin.y && bottomRight.x <= nodeBottomRight.x &&
	            bottomRight.y <= nodeBottomRight.y;
	        return inBounds;
	    },

	    pointShapes: function(point) {
	        var children = this.children;
	        var length = children.length;
	        var result = QuadRoot.fn.pointShapes.call(this, point);
	        for (var idx = 0; idx < length; idx++) {
	            append(result, children[idx].pointShapes(point));
	        }
	        return result;
	    },

	    insert: function(shape, bbox) {
	        var children = this.children;
	        var inserted = false;

	        if (this.inBounds(bbox)) {
	            if (this.shapes.length < 4) {
	                this._add(shape, bbox);
	            } else {
	                if (!children.length) {
	                    this._initChildren();
	                }

	                for (var idx = 0; idx < children.length; idx++) {
	                    if (children[idx].insert(shape, bbox)) {
	                        inserted = true;
	                        break;
	                    }
	                }

	                if (!inserted) {
	                    this._add(shape, bbox);
	                }
	            }
	            inserted = true;
	        }

	        return inserted;
	    },

	    _initChildren: function() {
	        var ref = this;
	        var rect = ref.rect;
	        var children = ref.children;
	        var center = rect.center();
	        var halfWidth = rect.width() / 2;
	        var halfHeight = rect.height() / 2;

	        children.push(
	            new QuadNode(new Rect([ rect.origin.x, rect.origin.y ], [ halfWidth, halfHeight ])),
	            new QuadNode(new Rect([ center.x, rect.origin.y ], [ halfWidth, halfHeight ])),
	            new QuadNode(new Rect([ rect.origin.x, center.y ], [ halfWidth, halfHeight ])),
	            new QuadNode(new Rect([ center.x, center.y ], [ halfWidth, halfHeight ]))
	        );
	    }
	});

	var ROOT_SIZE = 3000;
	var LEVEL_STEP = 10000;
	var MAX_LEVEL = 75;

	var ShapesQuadTree = Class.extend({
	    init: function() {

	        this.initRoots();
	    },

	    initRoots: function() {
	        this.rootMap = {};
	        this.root = new QuadRoot();
	        this.rootElements = [];
	    },

	    clear: function() {
	        var this$1 = this;

	        var rootElements = this.rootElements;
	        for (var idx = 0; idx < rootElements.length; idx++) {
	            this$1.remove(rootElements[idx]);
	        }
	        this.initRoots();
	    },

	    pointShape: function(point) {
	        var sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];
	        var result = this.root.pointShapes(point);

	        if (sectorRoot) {
	            result = result.concat(sectorRoot.pointShapes(point));
	        }

	        this.assignZindex(result);

	        result.sort(zIndexComparer);
	        for (var idx = 0; idx < result.length; idx++) {
	            if (result[idx].containsPoint(point)) {
	                return result[idx];
	            }
	        }
	    },

	    assignZindex: function(elements) {
	        var this$1 = this;

	        for (var idx = 0; idx < elements.length; idx++) {
	            var element = elements[idx];
	            var zIndex = 0;
	            var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);
	            var parents = [];

	            while (element) {
	                parents.push(element);
	                element = element.parent;
	            }

	            while (parents.length) {
	                element = parents.pop();
	                zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;
	                levelWeight /= LEVEL_STEP;
	            }

	            elements[idx]._zIndex = zIndex;
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "transform" || e.field === "stroke.width") {
	            this.bboxChange(e.element);
	        }
	    },

	    geometryChange: function(e) {
	        this.bboxChange(e.element);
	    },

	    bboxChange: function(element) {
	        var this$1 = this;

	        if (element.nodeType === "Group") {
	            for (var idx = 0; idx < element.children.length; idx++) {
	                this$1.bboxChange(element.children[idx]);
	            }
	        } else {
	            if (element._quadNode) {
	                element._quadNode.remove(element);
	            }
	            this._insertShape(element);
	        }
	    },

	    add: function(elements) {
	        var elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];

	        append(this.rootElements, elementsArray);
	        this._insert(elementsArray);
	    },

	    childrenChange: function(e) {
	        var this$1 = this;

	        if (e.action === "remove") {
	            for (var idx = 0; idx < e.items.length; idx++) {
	                this$1.remove(e.items[idx]);
	            }
	        } else {
	            this._insert(Array.prototype.slice.call(e.items, 0));
	        }
	    },

	    _insert: function(elements) {
	        var this$1 = this;

	        var element;

	        while (elements.length > 0) {
	            element = elements.pop();
	            element.addObserver(this$1);
	            if (element.nodeType === "Group") {
	                append(elements, element.children);
	            } else {
	                this$1._insertShape(element);
	            }
	        }
	    },

	    _insertShape: function(shape) {
	        var bbox = shape.bbox();
	        if (bbox) {
	            var sectors = this.getSectors(bbox);
	            var x = sectors[0][0];
	            var y = sectors[1][0];

	            if (this.inRoot(sectors)) {
	                this.root.insert(shape, bbox);
	            } else {
	                var rootMap = this.rootMap;
	                if (!rootMap[x]) {
	                    rootMap[x] = {};
	                }

	                if (!rootMap[x][y]) {
	                    rootMap[x][y] = new QuadNode(
	                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])
	                    );
	                }

	                rootMap[x][y].insert(shape, bbox);
	            }
	        }
	    },

	    remove: function(element) {
	        var this$1 = this;

	        element.removeObserver(this);

	        if (element.nodeType === "Group") {
	            var children = element.children;
	            for (var idx = 0; idx < children.length; idx++) {
	                this$1.remove(children[idx]);
	            }
	        } else if (element._quadNode) {
	            element._quadNode.remove(element);
	            delete element._quadNode;
	        }
	    },

	    inRoot: function(sectors) {
	        return sectors[0].length > 1 || sectors[1].length > 1;
	    },

	    getSectors: function(rect) {
	        var bottomRight = rect.bottomRight();
	        var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);
	        var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);
	        var sectors = [ [], [] ];
	        for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {
	            sectors[0].push(x);
	        }
	        for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {
	            sectors[1].push(y);
	        }
	        return sectors;
	    }
	});

	function zIndexComparer(x1, x2) {
	    if (x1._zIndex < x2._zIndex) {
	        return 1;
	    }
	    if (x1._zIndex > x2._zIndex) {
	        return -1;
	    }

	    return 0;
	}

	var Surface$3 = Surface.extend({
	    init: function(element, options) {
	        Surface.fn.init.call(this, element, options);

	        this.element.innerHTML = this._template(this);

	        var canvas = this.element.firstElementChild;
	        var size = elementSize(element);

	        canvas.width = size.width;
	        canvas.height = size.height;

	        this._rootElement = canvas;

	        this._root = new RootNode$2(canvas);

	        this._mouseTrackHandler = this._trackMouse.bind(this);

	        bindEvents(this.element, {
	            click: this._mouseTrackHandler,
	            mousemove: this._mouseTrackHandler
	        });
	    },

	    destroy: function() {
	        Surface.fn.destroy.call(this);

	        if (this._root) {
	            this._root.destroy();
	            this._root = null;
	        }

	        if (this._searchTree) {
	            this._searchTree.clear();
	            delete this._searchTree;
	        }

	        unbindEvents(this.element, {
	            click: this._mouseTrackHandler,
	            mousemove: this._mouseTrackHandler
	        });
	    },

	    draw: function(element) {
	        Surface.fn.draw.call(this, element);
	        this._root.load([ element ], undefined, this.options.cors);

	        if (this._searchTree) {
	            this._searchTree.add([ element ]);
	        }
	    },

	    clear: function() {
	        Surface.fn.clear.call(this);
	        this._root.clear();

	        if (this._searchTree) {
	            this._searchTree.clear();
	        }
	    },

	    eventTarget: function(e) {
	        if (this._searchTree) {
	            var point = this._surfacePoint(e);
	            var shape = this._searchTree.pointShape(point);
	            return shape;
	        }
	    },

	    image: function() {
	        var ref = this;
	        var root = ref._root;
	        var rootElement = ref._rootElement;
	        var loadingStates = [];

	        root.traverse(function (childNode) {
	            if (childNode.loading) {
	                loadingStates.push(childNode.loading);
	            }
	        });

	        var promise = createPromise();
	        promiseAll(loadingStates).then(function () {
	            root._invalidate();

	            try {
	                var data = rootElement.toDataURL();
	                promise.resolve(data);
	            } catch (e) {
	                promise.reject(e);
	            }
	        }, function (e) {
	            promise.reject(e);
	        });

	        return promise;
	    },

	    suspendTracking: function() {
	        Surface.fn.suspendTracking.call(this);
	        if (this._searchTree) {
	            this._searchTree.clear();
	            delete this._searchTree;
	        }
	    },

	    resumeTracking: function() {
	        Surface.fn.resumeTracking.call(this);
	        if (!this._searchTree) {
	            this._searchTree = new ShapesQuadTree();

	            var childNodes = this._root.childNodes;
	            var rootElements = [];
	            for (var idx = 0; idx < childNodes.length; idx++) {
	                rootElements.push(childNodes[idx].srcElement);
	            }
	            this._searchTree.add(rootElements);
	        }
	    },

	    _resize: function() {
	        this._rootElement.width = this._size.width;
	        this._rootElement.height = this._size.height;

	        this._root.invalidate();
	    },

	    _template: function() {
	        return "<canvas style='width: 100%; height: 100%;'></canvas>";
	    },

	    _enableTracking: function() {
	        this._searchTree = new ShapesQuadTree();

	        Surface.fn._enableTracking.call(this);
	    },

	    _trackMouse: function(e) {
	        if (this._suspendedTracking) {
	            return;
	        }

	        var shape = this.eventTarget(e);

	        if (e.type !== "click") {
	            var currentShape = this._currentShape;
	            if (currentShape && currentShape !== shape) {
	                this.trigger("mouseleave", {
	                    element: currentShape,
	                    originalEvent: e,
	                    type: "mouseleave"
	                });
	            }

	            if (shape && currentShape !== shape) {
	                this.trigger("mouseenter", {
	                    element: shape,
	                    originalEvent: e,
	                    type: "mouseenter"
	                });
	            }

	            this.trigger("mousemove", {
	                element: shape,
	                originalEvent: e,
	                type: "mousemove"
	            });

	            this._currentShape = shape;
	        } else if (shape) {
	            this.trigger("click", {
	                element: shape,
	                originalEvent: e,
	                type: "click"
	            });
	        }
	    }
	});

	Surface$3.prototype.type = "canvas";

	if (typeof document !== "undefined" && document.createElement("canvas").getContext) {
	    Surface.support.canvas = true;
	    SurfaceFactory.current.register("canvas", Surface$3, 20);
	}

	function addGradientStops(gradient, stops) {
	    for (var idx = 0; idx < stops.length; idx++) {
	        var stop = stops[idx];
	        var color = kendo.parseColor(stop.color());

	        color.a *= stop.opacity();

	        gradient.addColorStop(stop.offset(), color.toCssRgba());
	    }
	}

	var PathNode$2 = Node$2.extend({
	    renderTo: function(ctx) {
	        ctx.save();

	        this.setTransform(ctx);
	        this.setClip(ctx);
	        this.setOpacity(ctx);

	        ctx.beginPath();

	        this.renderPoints(ctx, this.srcElement);

	        this.setLineDash(ctx);
	        this.setLineCap(ctx);
	        this.setLineJoin(ctx);

	        this.setFill(ctx);
	        this.setStroke(ctx);

	        ctx.restore();
	    },

	    setFill: function(ctx) {
	        var fill = this.srcElement.options.fill;
	        var hasFill = false;

	        if (fill) {
	            if (fill.nodeType === "Gradient") {
	                this.setGradientFill(ctx, fill);
	                hasFill = true;
	            } else if (!isTransparent(fill.color)) {
	                ctx.fillStyle = fill.color;

	                ctx.save();
	                this.globalAlpha(ctx, fill.opacity);
	                ctx.fill();
	                ctx.restore();

	                hasFill = true;
	            }
	        }

	        return hasFill;
	    },

	    setGradientFill: function(ctx, fill) {
	        var bbox = this.srcElement.rawBBox();
	        var gradient;

	        if (fill instanceof LinearGradient) {
	            var start = fill.start();
	            var end = fill.end();
	            gradient = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
	        } else if (fill instanceof RadialGradient) {
	            var center = fill.center();
	            gradient = ctx.createRadialGradient(center.x, center.y, 0, center.x, center.y, fill.radius());
	        }

	        addGradientStops(gradient, fill.stops);

	        ctx.save();

	        if (!fill.userSpace()) {
	            ctx.transform(bbox.width(), 0, 0, bbox.height(), bbox.origin.x, bbox.origin.y);
	        }
	        ctx.fillStyle = gradient;
	        ctx.fill();

	        ctx.restore();
	    },

	    setStroke: function(ctx) {
	        var stroke = this.srcElement.options.stroke;
	        if (stroke && !isTransparent(stroke.color) && stroke.width > 0) {
	            ctx.strokeStyle = stroke.color;
	            ctx.lineWidth = valueOrDefault(stroke.width, 1);

	            ctx.save();
	            this.globalAlpha(ctx, stroke.opacity);
	            ctx.stroke();
	            ctx.restore();

	            return true;
	        }
	    },

	    dashType: function() {
	        var stroke = this.srcElement.options.stroke;
	        if (stroke && stroke.dashType) {
	            return stroke.dashType.toLowerCase();
	        }
	    },

	    setLineDash: function(ctx) {
	        var dashType = this.dashType();
	        if (dashType && dashType !== SOLID) {
	            var dashArray = DASH_ARRAYS[dashType];
	            if (ctx.setLineDash) {
	                ctx.setLineDash(dashArray);
	            } else {
	                ctx.mozDash = dashArray;
	                ctx.webkitLineDash = dashArray;
	            }
	        }
	    },

	    setLineCap: function(ctx) {
	        var dashType = this.dashType();
	        var stroke = this.srcElement.options.stroke;
	        if (dashType && dashType !== SOLID) {
	            ctx.lineCap = BUTT;
	        } else if (stroke && stroke.lineCap) {
	            ctx.lineCap = stroke.lineCap;
	        }
	    },

	    setLineJoin: function(ctx) {
	        var stroke = this.srcElement.options.stroke;
	        if (stroke && stroke.lineJoin) {
	            ctx.lineJoin = stroke.lineJoin;
	        }
	    },

	    renderPoints: function(ctx, path) {
	        renderPath(ctx, path);
	    }
	});

	NODE_MAP$2.Path = PathNode$2;

	var ArcNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var path = this.srcElement.toPath();
	        renderPath(ctx, path);
	    }
	});

	NODE_MAP$2.Arc = ArcNode$2;

	var CircleNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var ref = this.srcElement.geometry();
	        var center = ref.center;
	        var radius = ref.radius;

	        ctx.arc(center.x, center.y, radius, 0, Math.PI * 2);
	    }
	});

	NODE_MAP$2.Circle = CircleNode$2;

	var RectNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var ref = this.srcElement.geometry();
	        var origin = ref.origin;
	        var size = ref.size;

	        ctx.rect(origin.x, origin.y, size.width, size.height);
	    }
	});

	NODE_MAP$2.Rect = RectNode$2;

	var ImageNode$2 = PathNode$2.extend({
	    init: function(srcElement, cors) {
	        PathNode$2.fn.init.call(this, srcElement);

	        this.onLoad = this.onLoad.bind(this);
	        this.onError = this.onError.bind(this);

	        this.loading = createPromise();

	        var img = this.img = new Image();

	        if (cors && !(/^data:/i.test(srcElement.src()))) {
	            img.crossOrigin = cors;
	        }

	        img.src = srcElement.src();

	        if (img.complete) {
	            this.onLoad();
	        } else {
	            img.onload = this.onLoad;
	            img.onerror = this.onError;
	        }
	    },

	    renderTo: function(ctx) {
	        if (this.loading.state() === "resolved") {
	            ctx.save();

	            this.setTransform(ctx);
	            this.setClip(ctx);

	            this.drawImage(ctx);

	            ctx.restore();
	        }
	    },

	    optionsChange: function(e) {
	        if (e.field === "src") {
	            this.loading = createPromise();
	            this.img.src = this.srcElement.src();
	        } else {
	            PathNode$2.fn.optionsChange.call(this, e);
	        }
	    },

	    onLoad: function() {
	        this.loading.resolve();
	        this.invalidate();
	    },

	    onError: function() {
	        this.loading.reject(new Error(
	            "Unable to load image '" + this.img.src +
	            "'. Check for connectivity and verify CORS headers."
	        ));
	    },

	    drawImage: function(ctx) {
	        var rect = this.srcElement.rect();
	        var topLeft = rect.topLeft();

	        ctx.drawImage(
	            this.img, topLeft.x, topLeft.y, rect.width(), rect.height()
	        );
	    }
	});

	NODE_MAP$2.Image = ImageNode$2;

	var TextNode$2 = PathNode$2.extend({
	    renderTo: function(ctx) {
	        var text = this.srcElement;
	        var pos = text.position();
	        var size = text.measure();

	        ctx.save();

	        this.setTransform(ctx);
	        this.setClip(ctx);
	        this.setOpacity(ctx);

	        ctx.beginPath();

	        ctx.font = text.options.font;
	        if (this.setFill(ctx)) {
	            ctx.fillText(text.content(), pos.x, pos.y + size.baseline);
	        }

	        if (this.setStroke(ctx)) {
	            this.setLineDash(ctx);
	            ctx.strokeText(text.content(), pos.x, pos.y + size.baseline);
	        }

	        ctx.restore();
	    }
	});

	NODE_MAP$2.Text = TextNode$2;

	var MultiPathNode$2 = PathNode$2.extend({
	    renderPoints: function(ctx) {
	        var paths = this.srcElement.paths;
	        for (var i = 0; i < paths.length; i++) {
	            renderPath(ctx, paths[i]);
	        }
	    }
	});

	NODE_MAP$2.MultiPath = MultiPathNode$2;

	var canvas = {
		Surface: Surface$3,
		RootNode: RootNode$2,
		Node: Node$2,
		GroupNode: GroupNode$2,
		ArcNode: ArcNode$2,
		CircleNode: CircleNode$2,
		RectNode: RectNode$2,
		ImageNode: ImageNode$2,
		TextNode: TextNode$2,
		PathNode: PathNode$2,
		MultiPathNode: MultiPathNode$2
	};

	function exportImage(group, options) {
	    var defaults = {
	        width: "800px", height: "600px",
	        cors: "Anonymous"
	    };

	    var exportRoot = group;
	    var bbox = group.clippedBBox();

	    if (bbox) {
	        var origin = bbox.getOrigin();
	        exportRoot = new Group();
	        exportRoot.transform(transform().translate(-origin.x, -origin.y));
	        exportRoot.children.push(group);

	        var size = bbox.getSize();
	        defaults.width = size.width + "px";
	        defaults.height = size.height + "px";
	    }

	    var surfaceOptions = $.extend(defaults, options);

	    var container = document.createElement("div");
	    var style = container.style;

	    style.display = "none";
	    style.width = surfaceOptions.width;
	    style.height = surfaceOptions.height;
	    document.body.appendChild(container);

	    var surface = new Surface$3(container, surfaceOptions);
	    surface.suspendTracking();
	    surface.draw(exportRoot);

	    var promise = surface.image();
	    var destroy = function () {
	        surface.destroy();
	        document.body.removeChild(container);
	    };
	    promise.then(destroy, destroy);

	    return promise;
	}

	function exportSVG(group, options) {
	    var svg = exportGroup(group);

	    if (!options || !options.raw) {
	        svg = "data:image/svg+xml;base64," + encodeBase64(svg);
	    }

	    return createPromise().resolve(svg);
	}

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty, yoda */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	var browser = support.browser;
	/*

	  XXX: to test:

	  - cloneNodes function:
	    - drawing document containing canvas with page breaking
	    - drawing document with named radio <input>-s (should not clear selection)
	    - IE9/IE10 don't support el.dataset; do they copy user data?

	  - repeating table headers/footers on page breaking

	  - forceBreak, keepTogether

	  - avoidLinks

	 */

	/* -----[ local vars ]----- */

	function slice$1(thing) {
	    return Array.prototype.slice.call(thing);
	}

	var KENDO_PSEUDO_ELEMENT = "KENDO-PSEUDO-ELEMENT";

	var IMAGE_CACHE = {};

	var nodeInfo = {};
	nodeInfo._root = nodeInfo;

	/* -----[ Custom Text node to speed up rendering in kendo.pdf ]----- */

	var TextRect = Text.extend({
	    init: function(str, rect, options) {
	        Text.fn.init.call(this, str, rect.getOrigin(), options);
	        this._pdfRect = rect;
	    },

	    rect: function() {
	        // this is the crux of it: we can avoid a call to
	        // measure(), which is what the base class does, since we
	        // already know the rect.  measure() is s-l-o-w.
	        return this._pdfRect;
	    },

	    rawBBox: function() {
	        // also let's avoid creating a new rectangle.
	        return this._pdfRect;
	    }
	});

	function addClass(el, cls) {
	    el.classList.add(cls);
	}

	function removeClass(el, cls) {
	    el.classList.remove(cls);
	}

	function setCSS(el, styles) {
	    Object.keys(styles).forEach(function(key){
	        el.style[key] = styles[key];
	    });
	}

	function matches(el, selector) {
	    var p = Element.prototype;
	    var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {
		return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
	    };
	    return f.call(el, selector);
	}

	function closest(el, selector) {
	    if (el.closest) {
	        return el.closest(selector);
	    }
	    // IE
	    while (el) {
	        if (matches(el, selector)) {
	            return el;
	        }
	        el = el.parentNode;
	    }
	}

	// clone nodes ourselves, so that we redraw <canvas> (DOM or
	// jQuery clone will not)
	function cloneNodes(el) {
	    var clone = el.cloneNode(true);

	    // re-draw canvases - https://github.com/telerik/kendo/issues/4872
	    var canvases = el.querySelectorAll("canvas");
	    if (canvases.length) {
	        slice$1(clone.querySelectorAll("canvas")).forEach(function(canvas$$1, i){
	            canvas$$1.getContext("2d").drawImage(canvases[i], 0, 0);
	        });
	    }

	    // remove "name" attributes from <input> elements -
	    // https://github.com/telerik/kendo/issues/5409
	    slice$1(clone.querySelectorAll("input")).forEach(function(input){
	        input.removeAttribute("name");
	    });

	    return clone;
	}

	function getXY(thing) {
	    if (typeof thing == "number") {
	        return { x: thing, y: thing };
	    }
	    if (Array.isArray(thing)) {
	        return { x: thing[0], y: thing[1] };
	    }
	    return { x: thing.x, y: thing.y };
	}

	function drawDOM(element, options) {
	    if (!options) {
	        options = {};
	    }
	    var promise = createPromise();

	    if (!element) {
	        return promise.reject("No element to export");
	    }

	    if (typeof window.getComputedStyle != "function") {
	        throw new Error("window.getComputedStyle is missing.  You are using an unsupported browser, or running in IE8 compatibility mode.  Drawing HTML is supported in Chrome, Firefox, Safari and IE9+.");
	    }

	    kendo.pdf.defineFont(getFontFaces(element.ownerDocument));

	    var scale = getXY(options.scale || 1);

	    function doOne(element) {
	        var group = new Group();

	        // translate to start of page
	        var pos = element.getBoundingClientRect();
	        setTransform(group, [
	            scale.x,
	            0,
	            0,
	            scale.y,
	            (-pos.left * scale.x),
	            (-pos.top * scale.y)
	        ]);

	        nodeInfo._clipbox = false;
	        nodeInfo._matrix = Matrix.unit();
	        nodeInfo._stackingContext = {
	            element: element,
	            group: group
	        };

	        if (options.avoidLinks === true) {
	            nodeInfo._avoidLinks = "a";
	        } else {
	            nodeInfo._avoidLinks = options.avoidLinks;
	        }

	        addClass(element, "k-pdf-export");
	        renderElement(element, group);
	        removeClass(element, "k-pdf-export");

	        return group;
	    }

	    cacheImages(element, function(){
	        var forceBreak = options && options.forcePageBreak;
	        var hasPaperSize = options && options.paperSize && options.paperSize != "auto";
	        var paperOptions = kendo.pdf.getPaperOptions(function(key, def){
	            if (key == "paperSize") {
	                // PDF.getPaperOptions croaks on "auto", just pass dummy A4 as we might
	                // still be interested in margins.
	                return hasPaperSize ? options[key] : "A4";
	            }
	            return key in options ? options[key] : def;
	        });
	        var pageWidth = hasPaperSize && paperOptions.paperSize[0];
	        var pageHeight = hasPaperSize && paperOptions.paperSize[1];
	        var margin = options.margin && paperOptions.margin;
	        var hasMargin = Boolean(margin);
	        if (forceBreak || pageHeight) {
	            if (!margin) {
	                margin = { left: 0, top: 0, right: 0, bottom: 0 };
	            }

	            // we want paper size and margin to be unaffected by
	            // scaling in the output, so we have to reverse-scale
	            // before our calculations begin.
	            if (pageWidth)  { pageWidth  /= scale.x; }
	            if (pageHeight) { pageHeight /= scale.y; }
	            margin.left   /= scale.x;
	            margin.right  /= scale.x;
	            margin.top    /= scale.y;
	            margin.bottom /= scale.y;

	            var group = new Group({
	                pdf: {
	                    multiPage     : true,
	                    paperSize     : hasPaperSize ? paperOptions.paperSize : "auto",
	                    _ignoreMargin : hasMargin // HACK!  see exportPDF in pdf/drawing.js
	                }
	            });
	            handlePageBreaks(
	                function(x) {
	                    if (options.progress) {
	                        var canceled = false, pageNum = 0;
	                        (function next(){
	                            if (pageNum < x.pages.length) {
	                                var page = doOne(x.pages[pageNum]);
	                                group.append(page);
	                                options.progress({
	                                    page: page,
	                                    pageNum: ++pageNum,
	                                    totalPages: x.pages.length,
	                                    cancel: function() {
	                                        canceled = true;
	                                    }
	                                });
	                                if (!canceled) {
	                                    setTimeout(next);
	                                } else {
	                                    // XXX: should we also fail() the deferred object?
	                                    x.container.parentNode.removeChild(x.container);
	                                }
	                            } else {
	                                x.container.parentNode.removeChild(x.container);
	                                promise.resolve(group);
	                            }
	                        })();
	                    } else {
	                        x.pages.forEach(function(page){
	                            group.append(doOne(page));
	                        });
	                        x.container.parentNode.removeChild(x.container);
	                        promise.resolve(group);
	                    }
	                },
	                element,
	                forceBreak,
	                pageWidth ? pageWidth - margin.left - margin.right : null,
	                pageHeight ? pageHeight - margin.top - margin.bottom : null,
	                margin,
	                options
	            );
	        } else {
	            promise.resolve(doOne(element));
	        }
	    });

	    function makeTemplate(template$$1) {
	        if (template$$1 != null) {
	            if (typeof template$$1 == "string") {
	                template$$1 = kendo.template(template$$1.replace(/^\s+|\s+$/g, ""));
	            }
	            if (typeof template$$1 == "function") {
	                return function(data) {
	                    var el = template$$1(data);
	                    if (el && typeof el == "string") {
	                        var div = document.createElement("div");
	                        div.innerHTML = el;
	                        el = div.firstElementChild;
	                    }
	                    return el;
	                };
	            }
	            // assumed DOM element
	            return function() {
	                return template$$1.cloneNode(true);
	            };
	        }
	    }

	    function handlePageBreaks(callback, element, forceBreak, pageWidth, pageHeight, margin, options) {
	        var template$$1 = makeTemplate(options.template);
	        var doc = element.ownerDocument;
	        var pages = [];
	        var copy = options._destructive ? element : cloneNodes(element);
	        var container = doc.createElement("KENDO-PDF-DOCUMENT");
	        var adjust = 0;

	        // make sure <tfoot> elements are at the end (Grid widget
	        // places TFOOT before TBODY, tricking our algorithm to
	        // insert a page break right after the header).
	        // https://github.com/telerik/kendo/issues/4699
	        slice$1(copy.querySelectorAll("tfoot")).forEach(function(tfoot){
	            tfoot.parentNode.appendChild(tfoot);
	        });

	        // remember the index of each LI from an ordered list.
	        // we'll use it to reconstruct the proper numbering.
	        slice$1(copy.querySelectorAll("ol")).forEach(function(ol){
	            slice$1(ol.children).forEach(function(li, index){
	                li.setAttribute("kendo-split-index", index);
	            });
	        });

	        setCSS(container, {
	            display   : "block",
	            position  : "absolute",
	            boxSizing : "content-box",
	            left      : "-10000px",
	            top       : "-10000px"
	        });

	        if (pageWidth) {
	            // subtle: if we don't set the width *and* margins here, the layout in this
	            // container will be different from the one in our final page elements, and we'll
	            // split at the wrong places.
	            setCSS(container, {
	                width        : pageWidth + "px",
	                paddingLeft  : margin.left + "px",
	                paddingRight : margin.right + "px"
	            });

	            // when the first element has a margin-top (i.e. a <h1>) the page will be
	            // inadvertently enlarged by that number (the browser will report the container's
	            // bounding box top to start at the element's top, rather than including its
	            // margin).  Adding overflow: hidden seems to fix it.
	            //
	            // to understand the difference, try the following snippets in your browser:
	            //
	            // 1. <div style="background: yellow">
	            //      <h1 style="margin: 3em">Foo</h1>
	            //    </div>
	            //
	            // 2. <div style="background: yellow; overflow: hidden">
	            //      <h1 style="margin: 3em">Foo</h1>
	            //    </div>
	            //
	            // this detail is not important when automatic page breaking is not requested, hence
	            // doing it only if pageWidth is defined.
	            setCSS(copy, { overflow: "hidden" });
	        }

	        element.parentNode.insertBefore(container, element);
	        container.appendChild(copy);

	        // we need the timeouts here, so that images dimensions are
	        // properly computed in DOM when we start our thing.
	        if (options.beforePageBreak) {
	            setTimeout(function(){
	                options.beforePageBreak(container, doPageBreak);
	            }, 15);
	        } else {
	            setTimeout(doPageBreak, 15);
	        }

	        function doPageBreak() {
	            if (forceBreak != "-" || pageHeight) {
	                splitElement(copy);
	            }

	            // XXX: can contain only text nodes.  better risk producing
	            // an empty page than truncating the content.
	            // if (!(pages.length > 0 && copy.children.length === 0)) {
	            var page = makePage();
	            copy.parentNode.insertBefore(page, copy);
	            page.appendChild(copy);
	            // }

	            if (template$$1) {
	                var count = pages.length;
	                pages.forEach(function(page, i){
	                    var el = template$$1({
	                        element    : page,
	                        pageNum    : i + 1,
	                        totalPages : pages.length
	                    });
	                    if (el) {
	                        page.appendChild(el);
	                        cacheImages(el, function(){
	                            if (--count === 0) {
	                                next();
	                            }
	                        });
	                    }
	                });
	            } else {
	                next();
	            }

	            function next() {
	                // Even though we already cached images, they simply won't be available
	                // immediately in the newly created DOM.  Previously we'd allow a 10ms timeout,
	                // but that's arbitrary and clearly not working in all cases
	                // (https://github.com/telerik/kendo/issues/5399), so this function will wait
	                // for their .complete attribute.
	                whenImagesAreActuallyLoaded(pages, function(){
	                    callback({ pages: pages, container: container });
	                });
	            }
	        }

	        function keepTogether(el) {
	            if (options.keepTogether && matches(el, options.keepTogether) && el.offsetHeight <= pageHeight - adjust) {
	                return true;
	            }

	            var tag = el.tagName;
	            if (/^h[1-6]$/i.test(tag) && el.offsetHeight >= pageHeight - adjust) {
	                return false;
	            }

	            return (el.getAttribute("data-kendo-chart") ||
	                    /^(?:img|tr|thead|th|tfoot|iframe|svg|object|canvas|input|textarea|select|video|h[1-6])/i.test(el.tagName));
	        }

	        function splitElement(element) {
	            var style = getComputedStyle(element);
	            var bottomPadding = parseFloat(getPropertyValue(style, "padding-bottom"));
	            var bottomBorder = parseFloat(getPropertyValue(style, "border-bottom-width"));
	            var saveAdjust = adjust;
	            adjust += bottomPadding + bottomBorder;
	            var isFirst = true;
	            for (var el = element.firstChild; el; el = el.nextSibling) {
	                if (el.nodeType == 1 /* Element */) {
	                    isFirst = false;
	                    if (matches(el, forceBreak)) {
	                        breakAtElement(el);
	                        continue;
	                    }
	                    if (!pageHeight) {
	                        // we're in "manual breaks mode"
	                        splitElement(el);
	                        continue;
	                    }
	                    if (!/^(?:static|relative)$/.test(getPropertyValue(getComputedStyle(el), "position"))) {
	                        continue;
	                    }
	                    var fall = fallsOnMargin(el);
	                    if (fall == 1) {
	                        // element starts on next page, break before anyway.
	                        breakAtElement(el);
	                    }
	                    else if (fall) {
	                        // elements ends up on next page, or possibly doesn't fit on a page at
	                        // all.  break before it anyway if it's an <img> or <tr>, otherwise
	                        // attempt to split.
	                        if (keepTogether(el)) {
	                            breakAtElement(el);
	                        } else {
	                            splitElement(el);
	                        }
	                    }
	                    else {
	                        splitElement(el);
	                    }
	                }
	                else if (el.nodeType == 3 /* Text */ && pageHeight) {
	                    splitText(el, isFirst);
	                    isFirst = false;
	                }
	            }
	            adjust = saveAdjust;
	        }

	        function firstInParent(el) {
	            var p = el.parentNode, first = p.firstChild;
	            if (el === first) {
	                return true;
	            }
	            if (el === p.children[0]) {
	                if (first.nodeType == 7 /* comment */ ||
	                    first.nodeType == 8 /* processing instruction */) {
	                    return true;
	                }
	                if (first.nodeType == 3 /* text */) {
	                    // if whitespace only we can probably consider it's first
	                    return !/\S/.test(first.data);
	                }
	            }
	            return false;
	        }

	        function breakAtElement(el) {
	            if (el.nodeType == 1 && el !== copy && firstInParent(el)) {
	                return breakAtElement(el.parentNode);
	            }
	            var table, colgroup, thead, grid, gridHead;
	            table = closest(el, "table");
	            colgroup = table && table.querySelector("colgroup");
	            if (options.repeatHeaders) {
	                thead = table && table.querySelector("thead");

	                // If we break page in a Kendo Grid, repeat its header.  This ugly hack is
	                // necessary because a scrollable grid will keep the header in a separate
	                // <table> element from its content.
	                //
	                // XXX: This is likely to break as soon as the widget HTML is modified.
	                grid = closest(el, ".k-grid[data-role=\"grid\"]");
	                if (grid && grid.querySelector(".k-auto-scrollable")) {
	                    gridHead = grid.querySelector(".k-grid-header");
	                }
	            }
	            var page = makePage();
	            var range = doc.createRange();
	            range.setStartBefore(copy);
	            range.setEndBefore(el);
	            page.appendChild(range.extractContents());
	            copy.parentNode.insertBefore(page, copy);
	            if (table) {
	                table = closest(el, "table"); // that's the <table> on next page!
	                if (options.repeatHeaders && thead) {
	                    table.insertBefore(thead.cloneNode(true), table.firstChild);
	                }
	                if (colgroup) {
	                    table.insertBefore(colgroup.cloneNode(true), table.firstChild);
	                }
	            }
	            if (options.repeatHeaders && gridHead) {
	                grid = closest(el, ".k-grid[data-role=\"grid\"]");
	                grid.insertBefore(gridHead.cloneNode(true), grid.firstChild);
	            }
	        }

	        function makePage() {
	            var page = doc.createElement("KENDO-PDF-PAGE");
	            setCSS(page, {
	                display  : "block",
	                boxSizing: "content-box",
	                width    : pageWidth ? (pageWidth + "px") : "auto",
	                padding  : (margin.top + "px " +
	                            margin.right + "px " +
	                            margin.bottom + "px " +
	                            margin.left + "px"),

	                // allow absolutely positioned elements to be relative to current page
	                position : "relative",

	                // without the following we might affect layout of subsequent pages
	                height   : pageHeight ? (pageHeight + "px") : "auto",
	                overflow : pageHeight || pageWidth ? "hidden" : "visible",
	                clear    : "both"
	            });

	            // debug
	            // $("<div>").css({
	            //     position  : "absolute",
	            //     left      : margin.left,
	            //     top       : margin.top,
	            //     width     : pageWidth,
	            //     height    : pageHeight,
	            //     boxSizing : "border-box",
	            //     background: "rgba(255, 255, 0, 0.5)"
	            //     //border    : "1px solid red"
	            // }).appendTo(page);

	            if (options && options.pageClassName) {
	                page.className = options.pageClassName;
	            }
	            pages.push(page);
	            return page;
	        }

	        function fallsOnMargin(thing) {
	            var box = thing.getBoundingClientRect();
	            if (box.width === 0 || box.height === 0) {
	                // I'd say an element with dimensions zero fits on current page.
	                return 0;
	            }
	            var top = copy.getBoundingClientRect().top;
	            var available = pageHeight - adjust;
	            return (box.height > available) ? 3
	                : (box.top - top > available) ? 1
	                : (box.bottom - top > available) ? 2
	                : 0;
	        }

	        function splitText(node, isFirst) {
	            if (!/\S/.test(node.data)) {
	                return;
	            }

	            var len = node.data.length;
	            var range = doc.createRange();
	            range.selectNodeContents(node);
	            var fall = fallsOnMargin(range);
	            if (!fall) {
	                return;     // the whole text fits on current page
	            }

	            var nextnode = node;
	            if (fall == 1) {
	                // starts on next page, break before anyway.
	                if (isFirst) {
	                    // avoid leaving an empty <p>, <li>, etc. on previous page.
	                    breakAtElement(node.parentNode);
	                } else {
	                    breakAtElement(node);
	                }
	            }
	            else {
	                (function findEOP(min, pos, max) {
	                    range.setEnd(node, pos);
	                    if (min == pos || pos == max) {
	                        return pos;
	                    }
	                    if (fallsOnMargin(range)) {
	                        return findEOP(min, (min + pos) >> 1, pos);
	                    } else {
	                        return findEOP(pos, (pos + max) >> 1, max);
	                    }
	                })(0, len >> 1, len);

	                if (!/\S/.test(range.toString()) && isFirst) {
	                    // avoid leaving an empty <p>, <li>, etc. on previous page.
	                    breakAtElement(node.parentNode);
	                } else {
	                    // This is only needed for IE, but it feels cleaner to do it anyway.  Without
	                    // it, IE will truncate a very long text (playground/pdf-long-text-2.html).
	                    nextnode = node.splitText(range.endOffset);

	                    var page = makePage();
	                    range.setStartBefore(copy);
	                    page.appendChild(range.extractContents());
	                    copy.parentNode.insertBefore(page, copy);
	                }
	            }

	            splitText(nextnode);
	        }
	    }

	    return promise;
	}

	drawDOM.getFontFaces = getFontFaces;

	// This is needed for the Spreadsheet print functionality.  Since
	// there we only need to draw text, this cuts through the ceremony
	// of drawDOM/renderElement and renders the text node directly.
	drawDOM.drawText = function(element) {
	    var group = new Group();
	    nodeInfo._clipbox = false;
	    nodeInfo._matrix = Matrix.unit();
	    nodeInfo._stackingContext = {
	        element: element,
	        group: group
	    };
	    pushNodeInfo(element, getComputedStyle(element), group);
	    if (element.firstChild.nodeType == 3 /* Text */) {
	        // avoid the penalty of renderElement
	        renderText(element, element.firstChild, group);
	    } else {
	        _renderElement(element, group);
	    }
	    popNodeInfo();
	    return group;
	};

	var parseBackgroundImage = (function(){
	    var tok_linear_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?linear-gradient\s*)\(/;
	    //var tok_radial_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?radial-gradient\s*)\(/;
	    var tok_percent          = /^([-0-9.]+%)/;
	    var tok_length           = /^([-0-9.]+px)/;
	    var tok_keyword          = /^(left|right|top|bottom|to|center)\W/;
	    var tok_angle            = /^([-0-9.]+(deg|grad|rad|turn))/;
	    var tok_whitespace       = /^(\s+)/;
	    var tok_popen            = /^(\()/;
	    var tok_pclose           = /^(\))/;
	    var tok_comma            = /^(,)/;
	    var tok_url              = /^(url)\(/;
	    var tok_content          = /^(.*?)\)/;

	    var cache1 = {}, cache2 = {};

	    function parse(input) {
	        var orig = input;
	        if (hasOwnProperty(cache1, orig)) {
	            return cache1[orig];
	        }
	        function skip_ws() {
	            var m = tok_whitespace.exec(input);
	            if (m) {
	                input = input.substr(m[1].length);
	            }
	        }
	        function read(token) {
	            skip_ws();
	            var m = token.exec(input);
	            if (m) {
	                input = input.substr(m[1].length);
	                return m[1];
	            }
	        }

	        function read_stop() {
	            var color = kendo.parseColor(input, true);
	            var length, percent;
	            if (color) {
	                var match =
	                    /^#[0-9a-f]+/i.exec(input) ||
	                    /^rgba?\(.*?\)/i.exec(input) ||
	                    /^..*?\b/.exec(input); // maybe named color
	                input = input.substr(match[0].length);
	                color = color.toRGB();
	                if (!(length = read(tok_length))) {
	                    percent = read(tok_percent);
	                }
	                return { color: color, length: length, percent: percent };
	            }
	        }

	        function read_linear_gradient(propName) {
	            var angle;
	            var to1, to2;
	            var stops = [];
	            var reverse = false;

	            if (read(tok_popen)) {
	                // 1. [ <angle> || to <side-or-corner>, ]?
	                angle = read(tok_angle);
	                if (angle) {
	                    angle = parseAngle(angle);
	                    read(tok_comma);
	                }
	                else {
	                    to1 = read(tok_keyword);
	                    if (to1 == "to") {
	                        to1 = read(tok_keyword);
	                    } else if (to1 && /^-/.test(propName)) {
	                        reverse = true;
	                    }
	                    to2 = read(tok_keyword);
	                    read(tok_comma);
	                }

	                if (/-moz-/.test(propName) && angle == null && to1 == null) {
	                    var x = read(tok_percent), y = read(tok_percent);
	                    reverse = true;
	                    if (x == "0%") {
	                        to1 = "left";
	                    } else if (x == "100%") {
	                        to1 = "right";
	                    }
	                    if (y == "0%") {
	                        to2 = "top";
	                    } else if (y == "100%") {
	                        to2 = "bottom";
	                    }
	                    read(tok_comma);
	                }

	                // 2. color stops
	                while (input && !read(tok_pclose)) {
	                    var stop = read_stop();
	                    if (!stop) {
	                        break;
	                    }
	                    stops.push(stop);
	                    read(tok_comma);
	                }

	                return {
	                    type    : "linear",
	                    angle   : angle,
	                    to      : to1 && to2 ? to1 + " " + to2 : to1 ? to1 : to2 ? to2 : null,
	                    stops   : stops,
	                    reverse : reverse
	                };
	            }
	        }

	        function read_url() {
	            if (read(tok_popen)) {
	                var url = read(tok_content);
	                url = url.replace(/^['"]+|["']+$/g, "");
	                read(tok_pclose);
	                return { type: "url", url: url };
	            }
	        }

	        var tok;

	        if ((tok = read(tok_linear_gradient))) {
	            tok = read_linear_gradient(tok);
	        }
	        else if ((tok = read(tok_url))) {
	            tok = read_url();
	        }

	        return (cache1[orig] = tok || { type: "none" });
	    }

	    return function(input) {
	        if (hasOwnProperty(cache2, input)) {
	            return cache2[input];
	        }
	        return (cache2[input] = splitProperty(input).map(parse));
	    };
	})();

	var splitProperty = (function(){
	    var cache = {};
	    return function(input, separator) {
	        if (!separator) {
	            separator = /^\s*,\s*/;
	        }

	        var cacheKey = input + separator;

	        if (hasOwnProperty(cache, cacheKey)) {
	            return cache[cacheKey];
	        }

	        var ret = [];
	        var last$$1 = 0, pos = 0;
	        var in_paren = 0;
	        var in_string = false;
	        var m;

	        function looking_at(rx) {
	            return (m = rx.exec(input.substr(pos)));
	        }

	        function trim(str) {
	            return str.replace(/^\s+|\s+$/g, "");
	        }

	        while (pos < input.length) {
	            if (!in_string && looking_at(/^[\(\[\{]/)) {
	                in_paren++;
	                pos++;
	            }
	            else if (!in_string && looking_at(/^[\)\]\}]/)) {
	                in_paren--;
	                pos++;
	            }
	            else if (!in_string && looking_at(/^[\"\']/)) {
	                in_string = m[0];
	                pos++;
	            }
	            else if (in_string == "'" && looking_at(/^\\\'/)) {
	                pos += 2;
	            }
	            else if (in_string == '"' && looking_at(/^\\\"/)) {
	                pos += 2;
	            }
	            else if (in_string == "'" && looking_at(/^\'/)) {
	                in_string = false;
	                pos++;
	            }
	            else if (in_string == '"' && looking_at(/^\"/)) {
	                in_string = false;
	                pos++;
	            }
	            else if (looking_at(separator)) {
	                if (!in_string && !in_paren && pos > last$$1) {
	                    ret.push(trim(input.substring(last$$1, pos)));
	                    last$$1 = pos + m[0].length;
	                }
	                pos += m[0].length;
	            }
	            else {
	                pos++;
	            }
	        }
	        if (last$$1 < pos) {
	            ret.push(trim(input.substring(last$$1, pos)));
	        }
	        return (cache[cacheKey] = ret);
	    };
	})();

	var getFontURL = (function(cache){
	    return function(el){
	        // XXX: for IE we get here the whole cssText of the rule,
	        // because the computedStyle.src is empty.  Next time we need
	        // to fix these regexps we better write a CSS parser. :-\
	        var url = cache[el];
	        if (!url) {
	            var m;
	            if ((m = /url\((['"]?)([^'")]*?)\1\)\s+format\((['"]?)truetype\3\)/.exec(el))) {
	                url = cache[el] = m[2];
	            } else if ((m = /url\((['"]?)([^'")]*?\.ttf)\1\)/.exec(el))) {
	                url = cache[el] = m[2];
	            }
	        }
	        return url;
	    };
	})(Object.create ? Object.create(null) : {});

	var getFontHeight = (function(cache){
	    return function(font) {
	        var height = cache[font];
	        if (height == null) {
	            height = cache[font] = kendoUtil.measureText("Mapq", { font: font }).height;
	        }
	        return height;
	    };
	})(Object.create ? Object.create(null) : {});

	function getFontFaces(doc) {
	    if (doc == null) {
	        doc = document;
	    }
	    var result = {};
	    for (var i = 0; i < doc.styleSheets.length; ++i) {
	        doStylesheet(doc.styleSheets[i]);
	    }
	    return result;
	    function doStylesheet(ss) {
	        if (ss) {
	            var rules = null;
	            try {
	                rules = ss.cssRules;
	            } catch (ex) {}
	            if (rules) {
	                addRules(ss, rules);
	            }
	        }
	    }
	    function findFonts(rule) {
	        var src = getPropertyValue(rule.style, "src");
	        if (src) {
	            return splitProperty(src).reduce(function(a, el){
	                var font = getFontURL(el);
	                if (font) {
	                    a.push(font);
	                }
	                return a;
	            }, []);
	        } else {
	            // Internet Explorer
	            // XXX: this is gross.  should work though for valid CSS.
	            var font = getFontURL(rule.cssText);
	            return font ? [ font ] : [];
	        }
	    }
	    function addRules(styleSheet, rules) {
	        for (var i = 0; i < rules.length; ++i) {
	            var r = rules[i];
	            switch (r.type) {
	              case 3:       // CSSImportRule
	                doStylesheet(r.styleSheet);
	                break;
	              case 5:       // CSSFontFaceRule
	                var style  = r.style;
	                var family = splitProperty(getPropertyValue(style, "font-family"));
	                var bold   = /^([56789]00|bold)$/i.test(getPropertyValue(style, "font-weight"));
	                var italic = "italic" == getPropertyValue(style, "font-style");
	                var src    = findFonts(r);
	                if (src.length > 0) {
	                    addRule(styleSheet, family, bold, italic, src[0]);
	                }
	            }
	        }
	    }
	    function addRule(styleSheet, names, bold, italic, url) {
	        // We get full resolved absolute URLs in Chrome, but sadly
	        // not in Firefox.
	        if (!(/^data:/i.test(url))) {
	            if (!(/^[^\/:]+:\/\//.test(url) || /^\//.test(url))) {
	                url = String(styleSheet.href).replace(/[^\/]*$/, "") + url;
	            }
	        }
	        names.forEach(function(name){
	            name = name.replace(/^(['"]?)(.*?)\1$/, "$2"); // it's quoted
	            if (bold) {
	                name += "|bold";
	            }
	            if (italic) {
	                name += "|italic";
	            }
	            result[name] = url;
	        });
	    }
	}

	function hasOwnProperty(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}

	function getCounter(name) {
	    name = "_counter_" + name;
	    return nodeInfo[name];
	}

	function getAllCounters(name) {
	    var values = [], p = nodeInfo;
	    name = "_counter_" + name;
	    while (p) {
	        if (hasOwnProperty(p, name)) {
	            values.push(p[name]);
	        }
	        p = Object.getPrototypeOf(p);
	    }
	    return values.reverse();
	}

	function incCounter(name, inc) {
	    var p = nodeInfo;
	    name = "_counter_" + name;
	    while (p && !hasOwnProperty(p, name)) {
	        p = Object.getPrototypeOf(p);
	    }
	    if (!p) {
	        p = nodeInfo._root;
	    }
	    p[name] = (p[name] || 0) + (inc == null ? 1 : inc);
	}

	function resetCounter(name, val) {
	    name = "_counter_" + name;
	    nodeInfo[name] = val == null ? 0 : val;
	}

	function doCounters(a, f, def) {
	    for (var i = 0; i < a.length;) {
	        var name = a[i++];
	        var val = parseFloat(a[i]);
	        if (isNaN(val)) {
	            f(name, def);
	        } else {
	            f(name, val);
	            ++i;
	        }
	    }
	}

	function parseColor$1(str, css) {
	    var color = kendo.parseColor(str, true);
	    if (color) {
	        color = color.toRGB();
	        if (css) {
	            color = color.toCssRgba();
	        } else if (color.a === 0) {
	            color = null;
	        }
	    }
	    return color;
	}

	function whenImagesAreActuallyLoaded(elements, callback) {
	    var pending = 0;
	    elements.forEach(function(el){
	        var images = el.querySelectorAll("img");
	        for (var i = 0; i < images.length; ++i) {
	            var img = images[i];
	            if (!img.complete) {
	                pending++;
	                img.onload = img.onerror = next;
	            }
	        }
	    });
	    if (!pending) {
	        next();
	    }
	    function next() {
	        if (--pending <= 0) {
	            callback();
	        }
	    }
	}

	function cacheImages(element, callback) {
	    var urls = [];
	    function add(url) {
	        if (!IMAGE_CACHE[url]) {
	            IMAGE_CACHE[url] = true;
	            urls.push(url);
	        }
	    }
	    (function dive(element){
	        if (/^img$/i.test(element.tagName)) {
	            add(element.src);
	        }
	        parseBackgroundImage(
	            getPropertyValue(
	                getComputedStyle(element), "background-image"
	            )
	        ).forEach(function(bg){
	            if (bg.type == "url") {
	                add(bg.url);
	            }
	        });

	        if (element.children) {
	            slice$1(element.children).forEach(dive);
	        }
	    })(element);
	    var count = urls.length;
	    function next() {
	        if (--count <= 0) {
	            callback();
	        }
	    }
	    if (count === 0) {
	        next();
	    }
	    urls.forEach(function(url){
	        var img = IMAGE_CACHE[url] = new window.Image();
	        if (!(/^data:/i.test(url))) {
	            img.crossOrigin = "Anonymous";
	        }
	        img.src = url;
	        if (img.complete) {
	            next();
	        } else {
	            img.onload = next;
	            img.onerror = function() {
	                IMAGE_CACHE[url] = null;
	                next();
	            };
	        }
	    });
	}

	function alphaNumeral(n) {
	    var result = "";
	    do {
	        var r = n % 26;
	        result = String.fromCharCode(97 + r) + result;
	        n = Math.floor(n / 26);
	    } while (n > 0);
	    return result;
	}

	function pushNodeInfo(element, style, group) {
	    nodeInfo = Object.create(nodeInfo);
	    nodeInfo[element.tagName.toLowerCase()] = {
	        element: element,
	        style: style
	    };
	    var decoration = getPropertyValue(style, "text-decoration");
	    if (decoration && decoration != "none") {
	        var color = getPropertyValue(style, "color");
	        decoration.split(/\s+/g).forEach(function(name){
	            if (!nodeInfo[name]) {
	                nodeInfo[name] = color;
	            }
	        });
	    }

	    if (createsStackingContext(style)) {
	        nodeInfo._stackingContext = {
	            element: element,
	            group: group
	        };
	    }
	}

	function popNodeInfo() {
	    nodeInfo = Object.getPrototypeOf(nodeInfo);
	}

	function updateClipbox(path) {
	    if (nodeInfo._clipbox != null) {
	        var box = path.bbox(nodeInfo._matrix);
	        if (nodeInfo._clipbox) {
	            nodeInfo._clipbox = Rect.intersect(nodeInfo._clipbox, box);
	        } else {
	            nodeInfo._clipbox = box;
	        }
	    }
	}

	function emptyClipbox() {
	    var cb = nodeInfo._clipbox;
	    if (cb == null) {
	        return true;
	    }
	    if (cb) {
	        return cb.width() === 0 || cb.height() === 0;
	    }
	}

	function createsStackingContext(style) {
	    function prop(name) { return getPropertyValue(style, name); }
	    if (prop("transform") != "none" ||
	        prop("position") != "static" ||
	        prop("z-index") != "auto" ||
	        prop("opacity") < 1) {
	        return true;
	    }
	}

	function getComputedStyle(element, pseudoElt) {
	    return window.getComputedStyle(element, pseudoElt || null);
	}

	function getPropertyValue(style, prop) {
	    var val = style.getPropertyValue(prop);
	    if (val == null || val === "") {
	        if (browser.webkit) {
	            val = style.getPropertyValue("-webkit-" + prop );
	        } else if (browser.mozilla) {
	            val = style.getPropertyValue("-moz-" + prop );
	        } else if (browser.opera) {
	            val = style.getPropertyValue("-o-" + prop);
	        } else if (browser.msie) {
	            val = style.getPropertyValue("-ms-" + prop);
	        }
	    }
	    return val;
	}

	function pleaseSetPropertyValue(style, prop, value, important) {
	    style.setProperty(prop, value, important);
	    if (browser.webkit) {
	        style.setProperty("-webkit-" + prop, value, important);
	    } else if (browser.mozilla) {
	        style.setProperty("-moz-" + prop, value, important);
	    } else if (browser.opera) {
	        style.setProperty("-o-" + prop, value, important);
	    } else if (browser.msie) {
	        style.setProperty("-ms-" + prop, value, important);
	        prop = "ms" + prop.replace(/(^|-)([a-z])/g, function(s, p1, p2){
	            return p1 + p2.toUpperCase();
	        });
	        style[prop] = value;
	    }
	}

	function getBorder(style, side) {
	    side = "border-" + side;
	    return {
	        width: parseFloat(getPropertyValue(style, side + "-width")),
	        style: getPropertyValue(style, side + "-style"),
	        color: parseColor$1(getPropertyValue(style, side + "-color"), true)
	    };
	}

	function saveStyle(element, func) {
	    var prev = element.style.cssText;
	    var result = func();
	    element.style.cssText = prev;
	    return result;
	}

	function getBorderRadius(style, side) {
	    var r = getPropertyValue(style, "border-" + side + "-radius").split(/\s+/g).map(parseFloat);
	    if (r.length == 1) {
	        r.push(r[0]);
	    }
	    return sanitizeRadius({ x: r[0], y: r[1] });
	}

	function getContentBox(element) {
	    var box = element.getBoundingClientRect();
	    box = innerBox(box, "border-*-width", element);
	    box = innerBox(box, "padding-*", element);
	    return box;
	}

	function innerBox(box, prop, element) {
	    var style, wt, wr, wb, wl;
	    if (typeof prop == "string") {
	        style = getComputedStyle(element);
	        wt = parseFloat(getPropertyValue(style, prop.replace("*", "top")));
	        wr = parseFloat(getPropertyValue(style, prop.replace("*", "right")));
	        wb = parseFloat(getPropertyValue(style, prop.replace("*", "bottom")));
	        wl = parseFloat(getPropertyValue(style, prop.replace("*", "left")));
	    }
	    else if (typeof prop == "number") {
	        wt = wr = wb = wl = prop;
	    }
	    return {
	        top    : box.top + wt,
	        right  : box.right - wr,
	        bottom : box.bottom - wb,
	        left   : box.left + wl,
	        width  : box.right - box.left - wr - wl,
	        height : box.bottom - box.top - wb - wt
	    };
	}

	function getTransform(style) {
	    var transform$$1 = getPropertyValue(style, "transform");
	    if (transform$$1 == "none") {
	        return null;
	    }
	    var matrix = /^\s*matrix\(\s*(.*?)\s*\)\s*$/.exec(transform$$1);
	    if (matrix) {
	        var origin = getPropertyValue(style, "transform-origin");
	        matrix = matrix[1].split(/\s*,\s*/g).map(parseFloat);
	        origin = origin.split(/\s+/g).map(parseFloat);
	        return {
	            matrix: matrix,
	            origin: origin
	        };
	    }
	}

	function radiansToDegrees(radians) {
	    return ((180 * radians) / Math.PI) % 360;
	}

	function parseAngle(angle) {
	    var num = parseFloat(angle);
	    if (/grad$/.test(angle)) {
	        return Math.PI * num / 200;
	    }
	    else if (/rad$/.test(angle)) {
	        return num;
	    }
	    else if (/turn$/.test(angle)) {
	        return Math.PI * num * 2;
	    }
	    else if (/deg$/.test(angle)) {
	        return Math.PI * num / 180;
	    }
	}

	function setTransform(shape, m) {
	    m = new Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
	    shape.transform(m);
	    return m;
	}

	function setClipping(shape, clipPath) {
	    shape.clip(clipPath);
	}

	function addArcToPath(path, x, y, options) {
	    var points = new Arc$2([ x, y ], options).curvePoints(), i = 1;
	    while (i < points.length) {
	        path.curveTo(points[i++], points[i++], points[i++]);
	    }
	}

	function sanitizeRadius(r) {
	    if (r.x <= 0 || r.y <= 0) {
	        r.x = r.y = 0;
	    }
	    return r;
	}

	function adjustBorderRadiusForBox(box, rTL, rTR, rBR, rBL) {
	    // adjust border radiuses such that the sum of adjacent
	    // radiuses is not bigger than the length of the side.
	    // seems the correct algorithm is variant (3) from here:
	    // http://www.w3.org/Style/CSS/Tracker/issues/29?changelog
	    var tl_x = Math.max(0, rTL.x), tl_y = Math.max(0, rTL.y);
	    var tr_x = Math.max(0, rTR.x), tr_y = Math.max(0, rTR.y);
	    var br_x = Math.max(0, rBR.x), br_y = Math.max(0, rBR.y);
	    var bl_x = Math.max(0, rBL.x), bl_y = Math.max(0, rBL.y);

	    var f = Math.min(
	        box.width / (tl_x + tr_x),
	        box.height / (tr_y + br_y),
	        box.width / (br_x + bl_x),
	        box.height / (bl_y + tl_y)
	    );

	    if (f < 1) {
	        tl_x *= f; tl_y *= f;
	        tr_x *= f; tr_y *= f;
	        br_x *= f; br_y *= f;
	        bl_x *= f; bl_y *= f;
	    }

	    return {
	        tl: { x: tl_x, y: tl_y },
	        tr: { x: tr_x, y: tr_y },
	        br: { x: br_x, y: br_y },
	        bl: { x: bl_x, y: bl_y }
	    };
	}

	function elementRoundBox(element, box, type) {
	    var style = getComputedStyle(element);

	    var rTL = getBorderRadius(style, "top-left");
	    var rTR = getBorderRadius(style, "top-right");
	    var rBL = getBorderRadius(style, "bottom-left");
	    var rBR = getBorderRadius(style, "bottom-right");

	    if (type == "padding" || type == "content") {
	        var bt = getBorder(style, "top");
	        var br = getBorder(style, "right");
	        var bb = getBorder(style, "bottom");
	        var bl = getBorder(style, "left");
	        rTL.x -= bl.width; rTL.y -= bt.width;
	        rTR.x -= br.width; rTR.y -= bt.width;
	        rBR.x -= br.width; rBR.y -= bb.width;
	        rBL.x -= bl.width; rBL.y -= bb.width;
	        if (type == "content") {
	            var pt = parseFloat(getPropertyValue(style, "padding-top"));
	            var pr = parseFloat(getPropertyValue(style, "padding-right"));
	            var pb = parseFloat(getPropertyValue(style, "padding-bottom"));
	            var pl = parseFloat(getPropertyValue(style, "padding-left"));
	            rTL.x -= pl; rTL.y -= pt;
	            rTR.x -= pr; rTR.y -= pt;
	            rBR.x -= pr; rBR.y -= pb;
	            rBL.x -= pl; rBL.y -= pb;
	        }
	    }

	    if (typeof type == "number") {
	        rTL.x -= type; rTL.y -= type;
	        rTR.x -= type; rTR.y -= type;
	        rBR.x -= type; rBR.y -= type;
	        rBL.x -= type; rBL.y -= type;
	    }

	    return roundBox(box, rTL, rTR, rBR, rBL);
	}

	// Create a drawing.Path for a rounded rectangle.  Receives the
	// bounding box and the border-radiuses in CSS order (top-left,
	// top-right, bottom-right, bottom-left).  The radiuses must be
	// objects containing x (horiz. radius) and y (vertical radius).
	function roundBox(box, rTL0, rTR0, rBR0, rBL0) {
	    var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
	    var rTL = tmp.tl;
	    var rTR = tmp.tr;
	    var rBR = tmp.br;
	    var rBL = tmp.bl;
	    var path = new Path({ fill: null, stroke: null });
	    path.moveTo(box.left, box.top + rTL.y);
	    if (rTL.x) {
	        addArcToPath(path, box.left + rTL.x, box.top + rTL.y, {
	            startAngle: -180,
	            endAngle: -90,
	            radiusX: rTL.x,
	            radiusY: rTL.y
	        });
	    }
	    path.lineTo(box.right - rTR.x, box.top);
	    if (rTR.x) {
	        addArcToPath(path, box.right - rTR.x, box.top + rTR.y, {
	            startAngle: -90,
	            endAngle: 0,
	            radiusX: rTR.x,
	            radiusY: rTR.y
	        });
	    }
	    path.lineTo(box.right, box.bottom - rBR.y);
	    if (rBR.x) {
	        addArcToPath(path, box.right - rBR.x, box.bottom - rBR.y, {
	            startAngle: 0,
	            endAngle: 90,
	            radiusX: rBR.x,
	            radiusY: rBR.y
	        });
	    }
	    path.lineTo(box.left + rBL.x, box.bottom);
	    if (rBL.x) {
	        addArcToPath(path, box.left + rBL.x, box.bottom - rBL.y, {
	            startAngle: 90,
	            endAngle: 180,
	            radiusX: rBL.x,
	            radiusY: rBL.y
	        });
	    }
	    return path.close();
	}

	function formatCounter(val, style) {
	    var str = String(parseFloat(val));
	    switch (style) {
	      case "decimal-leading-zero":
	        if (str.length < 2) {
	            str = "0" + str;
	        }
	        return str;
	      case "lower-roman":
	        return arabicToRoman(val).toLowerCase();
	      case "upper-roman":
	        return arabicToRoman(val).toUpperCase();
	      case "lower-latin":
	      case "lower-alpha":
	        return alphaNumeral(val - 1);
	      case "upper-latin":
	      case "upper-alpha":
	        return alphaNumeral(val - 1).toUpperCase();
	      default:
	        return str;
	    }
	}

	function evalPseudoElementContent(element, content) {
	    function displayCounter(name, style, separator) {
	        if (!separator) {
	            return formatCounter(getCounter(name) || 0, style);
	        }
	        separator = separator.replace(/^\s*(["'])(.*)\1\s*$/, "$2");
	        return getAllCounters(name).map(function(val){
	            return formatCounter(val, style);
	        }).join(separator);
	    }
	    var a = splitProperty(content, /^\s+/);
	    var result = [], m;
	    a.forEach(function(el){
	        var tmp;
	        if ((m = /^\s*(["'])(.*)\1\s*$/.exec(el))) {
	            result.push(m[2].replace(/\\([0-9a-f]{4})/gi, function(s, p){
	                return String.fromCharCode(parseInt(p, 16));
	            }));
	        }
	        else if ((m = /^\s*counter\((.*?)\)\s*$/.exec(el))) {
	            tmp = splitProperty(m[1]);
	            result.push(displayCounter(tmp[0], tmp[1]));
	        }
	        else if ((m = /^\s*counters\((.*?)\)\s*$/.exec(el))) {
	            tmp = splitProperty(m[1]);
	            result.push(displayCounter(tmp[0], tmp[2], tmp[1]));
	        }
	        else if ((m = /^\s*attr\((.*?)\)\s*$/.exec(el))) {
	            result.push(element.getAttribute(m[1]) || "");
	        }
	        else {
	            result.push(el);
	        }
	    });
	    return result.join("");
	}

	function getCssText(style) {
	    if (style.cssText) {
	        return style.cssText;
	    }
	    // Status: NEW.  Report year: 2002.  Current year: 2014.
	    // Nice played, Mozillians.
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=137687
	    var result = [];
	    for (var i = 0; i < style.length; ++i) {
	        result.push(style[i] + ": " + getPropertyValue(style, style[i]));
	    }
	    return result.join(";\n");
	}

	function _renderWithPseudoElements(element, group) {
	    if (element.tagName == KENDO_PSEUDO_ELEMENT) {
	        _renderElement(element, group);
	        return;
	    }
	    var fake = [];
	    function pseudo(kind, place) {
	        var style = getComputedStyle(element, kind);
	        if (style.content && style.content != "normal" && style.content != "none" && style.width != "0px") {
	            var psel = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
	            psel.style.cssText = getCssText(style);
	            psel.textContent = evalPseudoElementContent(element, style.content);
	            element.insertBefore(psel, place);
	            fake.push(psel);
	        }
	    }
	    pseudo(":before", element.firstChild);
	    pseudo(":after", null);
	    var saveClass = element.className;
	    element.className += " kendo-pdf-hide-pseudo-elements";
	    _renderElement(element, group);
	    element.className = saveClass;
	    fake.forEach(function(el){ element.removeChild(el); });
	}

	function _renderElement(element, group) {
	    var style = getComputedStyle(element);

	    var top = getBorder(style, "top");
	    var right = getBorder(style, "right");
	    var bottom = getBorder(style, "bottom");
	    var left = getBorder(style, "left");

	    var rTL0 = getBorderRadius(style, "top-left");
	    var rTR0 = getBorderRadius(style, "top-right");
	    var rBL0 = getBorderRadius(style, "bottom-left");
	    var rBR0 = getBorderRadius(style, "bottom-right");

	    var dir = getPropertyValue(style, "direction");

	    var backgroundColor = getPropertyValue(style, "background-color");
	    backgroundColor = parseColor$1(backgroundColor);

	    var backgroundImage = parseBackgroundImage( getPropertyValue(style, "background-image") );
	    var backgroundRepeat = splitProperty( getPropertyValue(style, "background-repeat") );
	    var backgroundPosition = splitProperty( getPropertyValue(style, "background-position") );
	    var backgroundOrigin = splitProperty( getPropertyValue(style, "background-origin") );
	    var backgroundSize = splitProperty( getPropertyValue(style, "background-size") );

	    if (browser.msie && browser.version < 10) {
	        // IE9 hacks.  getPropertyValue won't return the correct
	        // value.  Sucks that we have to do it here, I'd prefer to
	        // move it in getPropertyValue, but we don't have the
	        // element.
	        backgroundPosition = splitProperty(element.currentStyle.backgroundPosition);
	    }

	    var innerbox = innerBox(element.getBoundingClientRect(), "border-*-width", element);

	    // CSS "clip" property - if present, replace the group with a
	    // new one which is clipped.  This must happen before drawing
	    // the borders and background.
	    (function(){
	        var clip = getPropertyValue(style, "clip");
	        var m = /^\s*rect\((.*)\)\s*$/.exec(clip);
	        if (m) {
	            var a = m[1].split(/[ ,]+/g);
	            var top = a[0] == "auto" ? innerbox.top : parseFloat(a[0]) + innerbox.top;
	            var right = a[1] == "auto" ? innerbox.right : parseFloat(a[1]) + innerbox.left;
	            var bottom = a[2] == "auto" ? innerbox.bottom : parseFloat(a[2]) + innerbox.top;
	            var left = a[3] == "auto" ? innerbox.left : parseFloat(a[3]) + innerbox.left;
	            var tmp = new Group();
	            var clipPath = new Path()
	                .moveTo(left, top)
	                .lineTo(right, top)
	                .lineTo(right, bottom)
	                .lineTo(left, bottom)
	                .close();
	            setClipping(tmp, clipPath);
	            group.append(tmp);
	            group = tmp;
	            updateClipbox(clipPath);
	        }
	    })();

	    var boxes, i, cells;
	    var display = getPropertyValue(style, "display");

	    if (display == "table-row") {
	        // because of rowspan/colspan, we shouldn't draw background of table row elements on the
	        // box given by its getBoundingClientRect, because if we do we risk overwritting a
	        // previously rendered cell.  https://github.com/telerik/kendo/issues/4881
	        boxes = [];
	        for (i = 0, cells = element.children; i < cells.length; ++i) {
	            boxes.push(cells[i].getBoundingClientRect());
	        }
	    } else {
	        boxes = element.getClientRects();
	        if (boxes.length == 1) {
	            // Workaround the missing borders in Chrome!  getClientRects() boxes contains values
	            // rounded to integer.  getBoundingClientRect() appears to work fine.  We still need
	            // getClientRects() to support cases where there are more boxes (continued inline
	            // elements that might have border/background).
	            boxes = [ element.getBoundingClientRect() ];
	        }
	    }

	    // This function workarounds another Chrome bug, where boxes returned for a table with
	    // border-collapse: collapse will overlap the table border.  Our rendering is not perfect in
	    // such case anyway, but with this is better than without it.
	    boxes = adjustBoxes(boxes);

	    for (i = 0; i < boxes.length; ++i) {
	        drawOneBox(boxes[i], i === 0, i == boxes.length - 1);
	    }

	    if (boxes.length > 0 && display == "list-item") {
	        drawBullet(boxes[0]);
	    }

	    // overflow: hidden/auto - if present, replace the group with
	    // a new one clipped by the inner box.
	    (function(){
	        function clipit() {
	            var clipPath = elementRoundBox(element, innerbox, "padding");
	            var tmp = new Group();
	            setClipping(tmp, clipPath);
	            group.append(tmp);
	            group = tmp;
	            updateClipbox(clipPath);
	        }
	        if (isFormField(element)) {
	            clipit();
	        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow"))) {
	            clipit();
	        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-x"))) {
	            clipit();
	        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-y"))) {
	            clipit();
	        }
	    })();

	    if (!maybeRenderWidget(element, group)) {
	        renderContents(element, group);
	    }

	    return group; // only utility functions after this line.

	    function adjustBoxes(boxes) {
	        if (/^td$/i.test(element.tagName)) {
	            var table = nodeInfo.table;
	            if (table && getPropertyValue(table.style, "border-collapse") == "collapse") {
	                var tableBorderLeft = getBorder(table.style, "left").width;
	                var tableBorderTop = getBorder(table.style, "top").width;
	                // check if we need to adjust
	                if (tableBorderLeft === 0 && tableBorderTop === 0) {
	                    return boxes; // nope
	                }
	                var tableBox = table.element.getBoundingClientRect();
	                var firstCell = table.element.rows[0].cells[0];
	                var firstCellBox = firstCell.getBoundingClientRect();
	                if (firstCellBox.top == tableBox.top || firstCellBox.left == tableBox.left) {
	                    return slice$1(boxes).map(function(box){
	                        return {
	                            left   : box.left + tableBorderLeft,
	                            top    : box.top + tableBorderTop,
	                            right  : box.right + tableBorderLeft,
	                            bottom : box.bottom + tableBorderTop,
	                            height : box.height,
	                            width  : box.width
	                        };
	                    });
	                }
	            }
	        }
	        return boxes;
	    }

	    // this function will be called to draw each border.  it
	    // draws starting at origin and the resulted path must be
	    // translated/rotated to be placed in the proper position.
	    //
	    // arguments are named as if it draws the top border:
	    //
	    //    - `len` the length of the edge
	    //    - `Wtop` the width of the edge (i.e. border-top-width)
	    //    - `Wleft` the width of the left edge (border-left-width)
	    //    - `Wright` the width of the right edge
	    //    - `rl` and `rl` -- the border radius on the left and right
	    //      (objects containing x and y, for horiz/vertical radius)
	    //    - `transform` -- transformation to apply
	    //
	    function drawEdge(color, len, Wtop, Wleft, Wright, rl, rr, transform$$1) {
	        if (Wtop <= 0) {
	            return;
	        }

	        var path, edge = new Group();
	        setTransform(edge, transform$$1);
	        group.append(edge);

	        sanitizeRadius(rl);
	        sanitizeRadius(rr);

	        // draw main border.  this is the area without the rounded corners
	        path = new Path({
	            fill: { color: color },
	            stroke: null
	        });
	        edge.append(path);
	        path.moveTo(rl.x ? Math.max(rl.x, Wleft) : 0, 0)
	            .lineTo(len - (rr.x ? Math.max(rr.x, Wright) : 0), 0)
	            .lineTo(len - Math.max(rr.x, Wright), Wtop)
	            .lineTo(Math.max(rl.x, Wleft), Wtop)
	            .close();

	        if (rl.x) {
	            drawRoundCorner(Wleft, rl, [ -1, 0, 0, 1, rl.x, 0 ]);
	        }

	        if (rr.x) {
	            drawRoundCorner(Wright, rr, [ 1, 0, 0, 1, len - rr.x, 0 ]);
	        }

	        // draws one round corner, starting at origin (needs to be
	        // translated/rotated to be placed properly).
	        function drawRoundCorner(Wright, r, transform$$1) {
	            var angle = Math.PI/2 * Wright / (Wright + Wtop);

	            // not sanitizing this one, because negative values
	            // are useful to fill the box correctly.
	            var ri = {
	                x: r.x - Wright,
	                y: r.y - Wtop
	            };

	            var path = new Path({
	                fill: { color: color },
	                stroke: null
	            }).moveTo(0, 0);

	            setTransform(path, transform$$1);

	            addArcToPath(path, 0, r.y, {
	                startAngle: -90,
	                endAngle: -radiansToDegrees(angle),
	                radiusX: r.x,
	                radiusY: r.y
	            });

	            if (ri.x > 0 && ri.y > 0) {
	                path.lineTo(ri.x * Math.cos(angle), r.y - ri.y * Math.sin(angle));
	                addArcToPath(path, 0, r.y, {
	                    startAngle: -radiansToDegrees(angle),
	                    endAngle: -90,
	                    radiusX: ri.x,
	                    radiusY: ri.y,
	                    anticlockwise: true
	                });
	            }
	            else if (ri.x > 0) {
	                path.lineTo(ri.x, Wtop)
	                    .lineTo(0, Wtop);
	            }
	            else {
	                path.lineTo(ri.x, Wtop)
	                    .lineTo(ri.x, 0);
	            }

	            edge.append(path.close());
	        }
	    }

	    function drawBackground(box) {
	        var background = new Group();
	        setClipping(background, roundBox(box, rTL0, rTR0, rBR0, rBL0));
	        group.append(background);

	        if (element.tagName == "A" && element.href && !/^#?$/.test(element.getAttribute("href"))) {
	            if (!nodeInfo._avoidLinks || !matches(element, nodeInfo._avoidLinks)) {
	                background._pdfLink = {
	                    url    : element.href,
	                    top    : box.top,
	                    right  : box.right,
	                    bottom : box.bottom,
	                    left   : box.left
	                };
	            }
	        }

	        if (backgroundColor) {
	            var path = new Path({
	                fill: { color: backgroundColor.toCssRgba() },
	                stroke: null
	            });
	            path.moveTo(box.left, box.top)
	                .lineTo(box.right, box.top)
	                .lineTo(box.right, box.bottom)
	                .lineTo(box.left, box.bottom)
	                .close();
	            background.append(path);
	        }

	        for (var i = backgroundImage.length; --i >= 0;) {
	            drawOneBackground(
	                background, box,
	                backgroundImage[i],
	                backgroundRepeat[i % backgroundRepeat.length],
	                backgroundPosition[i % backgroundPosition.length],
	                backgroundOrigin[i % backgroundOrigin.length],
	                backgroundSize[i % backgroundSize.length]
	            );
	        }
	    }

	    function drawOneBackground(group, box, background, backgroundRepeat, backgroundPosition, backgroundOrigin, backgroundSize) {
	        if (!background || (background == "none")) {
	            return;
	        }

	        if (background.type == "url") {
	            // SVG taints the canvas, can't draw it.
	            if (/^url\(\"data:image\/svg/i.test(background.url)) {
	                return;
	            }
	            var img = IMAGE_CACHE[background.url];
	            if (img && img.width > 0 && img.height > 0) {
	                drawBackgroundImage(group, box, img.width, img.height, function(group, rect){
	                    group.append(new Image$1(background.url, rect));
	                });
	            }
	        } else if (background.type == "linear") {
	            drawBackgroundImage(group, box, box.width, box.height, gradientRenderer(background));
	        } else {
	            return;
	        }

	        function drawBackgroundImage(group, box, img_width, img_height, renderBG) {
	            var aspect_ratio = img_width / img_height, f;

	            // for background-origin: border-box the box is already appropriate
	            var orgBox = box;
	            if (backgroundOrigin == "content-box") {
	                orgBox = innerBox(orgBox, "border-*-width", element);
	                orgBox = innerBox(orgBox, "padding-*", element);
	            } else if (backgroundOrigin == "padding-box") {
	                orgBox = innerBox(orgBox, "border-*-width", element);
	            }

	            if (!/^\s*auto(\s+auto)?\s*$/.test(backgroundSize)) {
	                if (backgroundSize == "contain") {
	                    f = Math.min(orgBox.width / img_width,
	                                 orgBox.height / img_height);
	                    img_width *= f;
	                    img_height *= f;
	                }
	                else if (backgroundSize == "cover") {
	                    f = Math.max(orgBox.width / img_width,
	                                 orgBox.height / img_height);
	                    img_width *= f;
	                    img_height *= f;
	                }
	                else {
	                    var size = backgroundSize.split(/\s+/g);
	                    // compute width
	                    if (/%$/.test(size[0])) {
	                        img_width = orgBox.width * parseFloat(size[0]) / 100;
	                    } else {
	                        img_width = parseFloat(size[0]);
	                    }
	                    // compute height
	                    if (size.length == 1 || size[1] == "auto") {
	                        img_height = img_width / aspect_ratio;
	                    } else if (/%$/.test(size[1])) {
	                        img_height = orgBox.height * parseFloat(size[1]) / 100;
	                    } else {
	                        img_height = parseFloat(size[1]);
	                    }
	                }
	            }

	            var pos = String(backgroundPosition).split(/\s+/);
	            if (pos.length == 1) {
	                pos[1] = "50%";
	            }

	            if (/%$/.test(pos[0])) {
	                pos[0] = parseFloat(pos[0]) / 100 * (orgBox.width - img_width);
	            } else {
	                pos[0] = parseFloat(pos[0]);
	            }
	            if (/%$/.test(pos[1])) {
	                pos[1] = parseFloat(pos[1]) / 100 * (orgBox.height - img_height);
	            } else {
	                pos[1] = parseFloat(pos[1]);
	            }

	            var rect = new Rect([ orgBox.left + pos[0], orgBox.top + pos[1] ], [ img_width, img_height ]);

	            // XXX: background-repeat could be implemented more
	            //      efficiently as a fill pattern (at least for PDF
	            //      output, probably SVG too).

	            function rewX() {
	                while (rect.origin.x > box.left) {
	                    rect.origin.x -= img_width;
	                }
	            }

	            function rewY() {
	                while (rect.origin.y > box.top) {
	                    rect.origin.y -= img_height;
	                }
	            }

	            function repeatX() {
	                while (rect.origin.x < box.right) {
	                    renderBG(group, rect.clone());
	                    rect.origin.x += img_width;
	                }
	            }

	            if (backgroundRepeat == "no-repeat") {
	                renderBG(group, rect);
	            }
	            else if (backgroundRepeat == "repeat-x") {
	                rewX();
	                repeatX();
	            }
	            else if (backgroundRepeat == "repeat-y") {
	                rewY();
	                while (rect.origin.y < box.bottom) {
	                    renderBG(group, rect.clone());
	                    rect.origin.y += img_height;
	                }
	            }
	            else if (backgroundRepeat == "repeat") {
	                rewX();
	                rewY();
	                var origin = rect.origin.clone();
	                while (rect.origin.y < box.bottom) {
	                    rect.origin.x = origin.x;
	                    repeatX();
	                    rect.origin.y += img_height;
	                }
	            }
	        }
	    }

	    function drawBullet() {
	        var listStyleType = getPropertyValue(style, "list-style-type");
	        if (listStyleType == "none") {
	            return;
	        }
	        var listStylePosition = getPropertyValue(style, "list-style-position");

	        function _drawBullet(f) {
	            saveStyle(element, function(){
	                element.style.position = "relative";
	                var bullet = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
	                bullet.style.position = "absolute";
	                bullet.style.boxSizing = "border-box";
	                if (listStylePosition == "outside") {
	                    bullet.style.width = "6em";
	                    bullet.style.left = "-6.8em";
	                    bullet.style.textAlign = "right";
	                } else {
	                    bullet.style.left = "0px";
	                }
	                f(bullet);
	                element.insertBefore(bullet, element.firstChild);
	                renderElement(bullet, group);
	                element.removeChild(bullet);
	            });
	        }

	        function elementIndex(f) {
	            var a = element.parentNode.children;
	            var k = element.getAttribute("kendo-split-index");
	            if (k != null) {
	                return f(k|0, a.length);
	            }
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] === element) {
	                    return f(i, a.length);
	                }
	            }
	        }

	        switch (listStyleType) {
	          case "circle":
	          case "disc":
	          case "square":
	            _drawBullet(function(bullet){
	                // XXX: the science behind these values is called "trial and error".
	                bullet.style.fontSize = "60%";
	                bullet.style.lineHeight = "200%";
	                bullet.style.paddingRight = "0.5em";
	                bullet.style.fontFamily = "DejaVu Serif";
	                bullet.innerHTML = {
	                    "disc"   : "\u25cf",
	                    "circle" : "\u25ef",
	                    "square" : "\u25a0"
	                }[listStyleType];
	            });
	            break;

	          case "decimal":
	          case "decimal-leading-zero":
	            _drawBullet(function(bullet){
	                elementIndex(function(idx){
	                    ++idx;
	                    if (listStyleType == "decimal-leading-zero" && idx < 10) {
	                        idx = "0" + idx;
	                    }
	                    bullet.innerHTML = idx + ".";
	                });
	            });
	            break;

	          case "lower-roman":
	          case "upper-roman":
	            _drawBullet(function(bullet){
	                elementIndex(function(idx){
	                    idx = arabicToRoman(idx + 1);
	                    if (listStyleType == "upper-roman") {
	                        idx = idx.toUpperCase();
	                    }
	                    bullet.innerHTML = idx + ".";
	                });
	            });
	            break;

	          case "lower-latin":
	          case "lower-alpha":
	          case "upper-latin":
	          case "upper-alpha":
	            _drawBullet(function(bullet){
	                elementIndex(function(idx){
	                    idx = alphaNumeral(idx);
	                    if (/^upper/i.test(listStyleType)) {
	                        idx = idx.toUpperCase();
	                    }
	                    bullet.innerHTML = idx + ".";
	                });
	            });
	            break;
	        }
	    }

	    // draws a single border box
	    function drawOneBox(box, isFirst, isLast) {
	        if (box.width === 0 || box.height === 0) {
	            return;
	        }

	        drawBackground(box);

	        var shouldDrawLeft = (left.width > 0 && ((isFirst && dir == "ltr") || (isLast && dir == "rtl")));
	        var shouldDrawRight = (right.width > 0 && ((isLast && dir == "ltr") || (isFirst && dir == "rtl")));

	        // The most general case is that the 4 borders have different widths and border
	        // radiuses.  The way that is handled is by drawing 3 Paths for each border: the
	        // straight line, and two round corners which represent half of the entire rounded
	        // corner.  To simplify code those shapes are drawed at origin (by the drawEdge
	        // function), then translated/rotated into the right position.
	        //
	        // However, this leads to poor results due to rounding in the simpler cases where
	        // borders are straight lines.  Therefore we handle a few such cases separately with
	        // straight lines. C^wC^wC^w -- nope, scratch that.  poor rendering was because of a bug
	        // in Chrome (getClientRects() returns rounded integer values rather than exact floats.
	        // web dev is still a ghetto.)

	        // first, just in case there is no border...
	        if (top.width === 0 && left.width === 0 && right.width === 0 && bottom.width === 0) {
	            return;
	        }

	        { // eslint-disable-line no-constant-condition
	            // so that it's easy to comment out..  uglifyjs will drop the spurious if.

	            // if all borders have equal colors...
	            if (top.color == right.color && top.color == bottom.color && top.color == left.color) {

	                // if same widths too, we can draw the whole border by stroking a single path.
	                if (top.width == right.width && top.width == bottom.width && top.width == left.width)
	                {
	                    if (shouldDrawLeft && shouldDrawRight) {
	                        // reduce box by half the border width, so we can draw it by stroking.
	                        box = innerBox(box, top.width/2);

	                        // adjust the border radiuses, again by top.width/2, and make the path element.
	                        var path = elementRoundBox(element, box, top.width/2);
	                        path.options.stroke = {
	                            color: top.color,
	                            width: top.width
	                        };
	                        group.append(path);
	                        return;
	                    }
	                }
	            }

	            // if border radiuses are zero and widths are at most one pixel, we can again use simple
	            // paths.
	            if (rTL0.x === 0 && rTR0.x === 0 && rBR0.x === 0 && rBL0.x === 0) {
	                // alright, 1.9px will do as well.  the difference in color blending should not be
	                // noticeable.
	                if (top.width < 2 && left.width < 2 && right.width < 2 && bottom.width < 2) {
	                    // top border
	                    if (top.width > 0) {
	                        group.append(
	                            new Path({
	                                stroke: { width: top.width, color: top.color }
	                            })
	                                .moveTo(box.left, box.top + top.width/2)
	                                .lineTo(box.right, box.top + top.width/2)
	                        );
	                    }

	                    // bottom border
	                    if (bottom.width > 0) {
	                        group.append(
	                            new Path({
	                                stroke: { width: bottom.width, color: bottom.color }
	                            })
	                                .moveTo(box.left, box.bottom - bottom.width/2)
	                                .lineTo(box.right, box.bottom - bottom.width/2)
	                        );
	                    }

	                    // left border
	                    if (shouldDrawLeft) {
	                        group.append(
	                            new Path({
	                                stroke: { width: left.width, color: left.color }
	                            })
	                                .moveTo(box.left + left.width/2, box.top)
	                                .lineTo(box.left + left.width/2, box.bottom)
	                        );
	                    }

	                    // right border
	                    if (shouldDrawRight) {
	                        group.append(
	                            new Path({
	                                stroke: { width: right.width, color: right.color }
	                            })
	                                .moveTo(box.right - right.width/2, box.top)
	                                .lineTo(box.right - right.width/2, box.bottom)
	                        );
	                    }

	                    return;
	                }
	            }

	        }

	        var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
	        var rTL = tmp.tl;
	        var rTR = tmp.tr;
	        var rBR = tmp.br;
	        var rBL = tmp.bl;

	        // top border
	        drawEdge(top.color,
	                 box.width, top.width, left.width, right.width,
	                 rTL, rTR,
	                 [ 1, 0, 0, 1, box.left, box.top ]);

	        // bottom border
	        drawEdge(bottom.color,
	                 box.width, bottom.width, right.width, left.width,
	                 rBR, rBL,
	                 [ -1, 0, 0, -1, box.right, box.bottom ]);

	        // for left/right borders we need to invert the border-radiuses
	        function inv(p) {
	            return { x: p.y, y: p.x };
	        }

	        // left border
	        drawEdge(left.color,
	                 box.height, left.width, bottom.width, top.width,
	                 inv(rBL), inv(rTL),
	                 [ 0, -1, 1, 0, box.left, box.bottom ]);

	        // right border
	        drawEdge(right.color,
	                 box.height, right.width, top.width, bottom.width,
	                 inv(rTR), inv(rBR),
	                 [ 0, 1, -1, 0, box.right, box.top ]);
	    }
	}

	function gradientRenderer(gradient) {
	    return function(group, rect) {
	        var width = rect.width(), height = rect.height();

	        switch (gradient.type) {
	          case "linear":

	            // figure out the angle.
	            var angle = gradient.angle != null ? gradient.angle : Math.PI;
	            switch (gradient.to) {
	              case "top":
	                angle = 0;
	                break;
	              case "left":
	                angle = -Math.PI / 2;
	                break;
	              case "bottom":
	                angle = Math.PI;
	                break;
	              case "right":
	                angle = Math.PI / 2;
	                break;
	              case "top left": case "left top":
	                angle = -Math.atan2(height, width);
	                break;
	              case "top right": case "right top":
	                angle = Math.atan2(height, width);
	                break;
	              case "bottom left": case "left bottom":
	                angle = Math.PI + Math.atan2(height, width);
	                break;
	              case "bottom right": case "right bottom":
	                angle = Math.PI - Math.atan2(height, width);
	                break;
	            }

	            if (gradient.reverse) {
	                angle -= Math.PI;
	            }

	            // limit the angle between 0..2PI
	            angle %= 2 * Math.PI;
	            if (angle < 0) {
	                angle += 2 * Math.PI;
	            }

	            // compute gradient's start/end points.  here len is the length of the gradient line
	            // and x,y is the end point relative to the center of the rectangle in conventional
	            // (math) axis direction.

	            // this is the original (unscaled) length of the gradient line.  needed to deal with
	            // absolutely positioned color stops.  formula from the CSS spec:
	            // http://dev.w3.org/csswg/css-images-3/#linear-gradient-syntax
	            var pxlen = Math.abs(width * Math.sin(angle)) + Math.abs(height * Math.cos(angle));

	            // The math below is pretty simple, but it took a while to figure out.  We compute x
	            // and y, the *end* of the gradient line.  However, we want to transform them into
	            // element-based coordinates (SVG's gradientUnits="objectBoundingBox").  That means,
	            // x=0 is the left edge, x=1 is the right edge, y=0 is the top edge and y=1 is the
	            // bottom edge.
	            //
	            // A naive approach would use the original angle for these calculations.  Say we'd
	            // like to draw a gradient angled at 45deg in a 100x400 box.  When we use
	            // objectBoundingBox, the renderer will draw it in a 1x1 *square* box, and then
	            // scale that to the desired dimensions.  The 45deg angle will look more like 70deg
	            // after scaling.  SVG (http://www.w3.org/TR/SVG/pservers.html#LinearGradients) says
	            // the following:
	            //
	            //     When gradientUnits="objectBoundingBox" and 'gradientTransform' is the
	            //     identity matrix, the normal of the linear gradient is perpendicular to the
	            //     gradient vector in object bounding box space (i.e., the abstract coordinate
	            //     system where (0,0) is at the top/left of the object bounding box and (1,1) is
	            //     at the bottom/right of the object bounding box). When the object's bounding
	            //     box is not square, the gradient normal which is initially perpendicular to
	            //     the gradient vector within object bounding box space may render
	            //     non-perpendicular relative to the gradient vector in user space. If the
	            //     gradient vector is parallel to one of the axes of the bounding box, the
	            //     gradient normal will remain perpendicular. This transformation is due to
	            //     application of the non-uniform scaling transformation from bounding box space
	            //     to user space.
	            //
	            // which is an extremely long and confusing way to tell what I just said above.
	            //
	            // For this reason we need to apply the reverse scaling to the original angle, so
	            // that when it'll finally be rendered it'll actually be at the desired slope.  Now
	            // I'll let you figure out the math yourself.

	            var scaledAngle = Math.atan(width * Math.tan(angle) / height);
	            var sin = Math.sin(scaledAngle), cos = Math.cos(scaledAngle);
	            var len = Math.abs(sin) + Math.abs(cos);
	            var x = len/2 * sin;
	            var y = len/2 * cos;

	            // Because of the arctangent, our scaledAngle ends up between -PI/2..PI/2, possibly
	            // losing the intended direction of the gradient.  The following fixes it.
	            if (angle > Math.PI/2 && angle <= 3*Math.PI/2) {
	                x = -x;
	                y = -y;
	            }

	            // compute the color stops.
	            var implicit = [], right = 0;
	            var stops = gradient.stops.map(function(s, i){
	                var offset = s.percent;
	                if (offset) {
	                    offset = parseFloat(offset) / 100;
	                } else if (s.length) {
	                    offset = parseFloat(s.length) / pxlen;
	                } else if (i === 0) {
	                    offset = 0;
	                } else if (i == gradient.stops.length - 1) {
	                    offset = 1;
	                }
	                var stop = {
	                    color: s.color.toCssRgba(),
	                    offset: offset
	                };
	                if (offset != null) {
	                    right = offset;
	                    // fix implicit offsets
	                    implicit.forEach(function(s, i){
	                        var stop = s.stop;
	                        stop.offset = s.left + (right - s.left) * (i + 1) / (implicit.length + 1);
	                    });
	                    implicit = [];
	                } else {
	                    implicit.push({ left: right, stop: stop });
	                }
	                return stop;
	            });

	            var start = [ 0.5 - x, 0.5 + y ];
	            var end = [ 0.5 + x, 0.5 - y ];

	            // finally, draw it.
	            group.append(
	                Path.fromRect(rect)
	                    .stroke(null)
	                    .fill(new LinearGradient({
	                        start     : start,
	                        end       : end,
	                        stops     : stops,
	                        userSpace : false
	                    }))
	            );
	            break;
	          case "radial":
	            // XXX:
	            if (window.console && window.console.log) {
	                window.console.log("Radial gradients are not yet supported in HTML renderer");
	            }
	            break;
	        }
	    };
	}

	function maybeRenderWidget(element, group) {
	    if (window.kendo && window.$ && element.getAttribute(window.kendo.attr("role"))) {
	        var widget = window.kendo.widgetInstance(window.$(element));
	        if (widget && (widget.exportDOMVisual || widget.exportVisual)) {
	            var visual;
	            if (widget.exportDOMVisual) {
	                visual = widget.exportDOMVisual();
	            } else {
	                visual = widget.exportVisual();
	            }

	            if (!visual) {
	                return false;
	            }

	            var wrap$$1 = new Group();
	            wrap$$1.children.push(visual);

	            var bbox = element.getBoundingClientRect();
	            wrap$$1.transform(transform().translate(bbox.left, bbox.top));

	            group.append(wrap$$1);

	            return true;
	        }
	    }
	}

	function renderImage(element, url, group) {
	    var box = getContentBox(element);
	    var rect = new Rect([ box.left, box.top ], [ box.width, box.height ]);
	    var image = new Image$1(url, rect);
	    setClipping(image, elementRoundBox(element, box, "content"));
	    group.append(image);
	}

	function zIndexSort(a, b) {
	    var sa = getComputedStyle(a);
	    var sb = getComputedStyle(b);
	    var za = parseFloat(getPropertyValue(sa, "z-index"));
	    var zb = parseFloat(getPropertyValue(sb, "z-index"));
	    var pa = getPropertyValue(sa, "position");
	    var pb = getPropertyValue(sb, "position");
	    if (isNaN(za) && isNaN(zb)) {
	        if ((/static|absolute/.test(pa)) && (/static|absolute/.test(pb))) {
	            return 0;
	        }
	        if (pa == "static") {
	            return -1;
	        }
	        if (pb == "static") {
	            return 1;
	        }
	        return 0;
	    }
	    if (isNaN(za)) {
	        return zb === 0 ? 0 : zb > 0 ? -1 : 1;
	    }
	    if (isNaN(zb)) {
	        return za === 0 ? 0 : za > 0 ? 1 : -1;
	    }
	    return parseFloat(za) - parseFloat(zb);
	}

	function isFormField(element) {
	    return /^(?:textarea|select|input)$/i.test(element.tagName);
	}

	function getSelectedOption(element) {
	    if (element.selectedOptions && element.selectedOptions.length > 0) {
	        return element.selectedOptions[0];
	    }
	    return element.options[element.selectedIndex];
	}

	function renderCheckbox(element, group) {
	    var style = getComputedStyle(element);
	    var color = getPropertyValue(style, "color");
	    var box = element.getBoundingClientRect();
	    if (element.type == "checkbox") {
	        group.append(
	            Path.fromRect(
	                new Rect([ box.left+1, box.top+1 ],
	                             [ box.width-2, box.height-2 ])
	            ).stroke(color, 1)
	        );
	        if (element.checked) {
	            // fill a rectangle inside?  looks kinda ugly.
	            // group.append(
	            //     Path.fromRect(
	            //         new geo.Rect([ box.left+4, box.top+4 ],
	            //                      [ box.width-8, box.height-8])
	            //     ).fill(color).stroke(null)
	            // );

	            // let's draw a checkmark instead.  artistic, eh?
	            group.append(
	                new Path()
	                    .stroke(color, 1.2)
	                    .moveTo(box.left + 0.22 * box.width,
	                            box.top + 0.55 * box.height)
	                    .lineTo(box.left + 0.45 * box.width,
	                            box.top + 0.75 * box.height)
	                    .lineTo(box.left + 0.78 * box.width,
	                            box.top + 0.22 * box.width)
	            );
	        }
	    } else {
	        group.append(
	            new Circle(
	                new Circle$2([
	                    (box.left + box.right) / 2,
	                    (box.top + box.bottom) / 2
	                ], Math.min(box.width-2, box.height-2) / 2)
	            ).stroke(color, 1)
	        );
	        if (element.checked) {
	            group.append(
	                new Circle(
	                    new Circle$2([
	                        (box.left + box.right) / 2,
	                        (box.top + box.bottom) / 2
	                    ], Math.min(box.width-8, box.height-8) / 2)
	                ).fill(color).stroke(null)
	            );
	        }
	    }
	}

	function renderFormField(element, group) {
	    var tag = element.tagName.toLowerCase();
	    if (tag == "input" && (element.type == "checkbox" || element.type == "radio")) {
	        return renderCheckbox(element, group);
	    }
	    var p = element.parentNode;
	    var doc = element.ownerDocument;
	    var el = doc.createElement(KENDO_PSEUDO_ELEMENT);
	    var option;
	    el.style.cssText = getCssText(getComputedStyle(element));
	    if (tag == "input") {
	        el.style.whiteSpace = "pre";
	    }
	    if (tag == "select" || tag == "textarea") {
	        el.style.overflow = "auto";
	    }
	    if (tag == "select") {
	        if (element.multiple) {
	            for (var i = 0; i < element.options.length; ++i) {
	                option = doc.createElement(KENDO_PSEUDO_ELEMENT);
	                option.style.cssText = getCssText(getComputedStyle(element.options[i]));
	                option.style.display = "block"; // IE9 messes up without this
	                option.textContent = element.options[i].textContent;
	                el.appendChild(option);
	            }
	        } else {
	            option = getSelectedOption(element);
	            if (option) {
	                el.textContent = option.textContent;
	            }
	        }
	    } else {
	        el.textContent = element.value;
	    }
	    p.insertBefore(el, element);
	    el.scrollLeft = element.scrollLeft;
	    el.scrollTop = element.scrollTop;

	    // must temporarily hide the original element, otherwise it
	    // may affect layout of the fake element we want to render.
	    element.style.display = "none";

	    renderContents(el, group);
	    element.style.display = "";
	    p.removeChild(el);
	}

	function renderContents(element, group) {
	    if (nodeInfo._stackingContext.element === element) {
	        // the group that was set in pushNodeInfo might have
	        // changed due to clipping/transforms, update it here.
	        nodeInfo._stackingContext.group = group;
	    }
	    switch (element.tagName.toLowerCase()) {
	      case "img":
	        renderImage(element, element.src, group);
	        break;

	      case "canvas":
	        try {
	            renderImage(element, element.toDataURL("image/png"), group);
	        } catch (ex) {
	            // tainted; can't draw it, ignore.
	        }
	        break;

	      case "textarea":
	      case "input":
	      case "select":
	        renderFormField(element, group);
	        break;

	      default:
	        var blocks = [], floats = [], inline = [], positioned = [];
	        for (var i = element.firstChild; i; i = i.nextSibling) {
	            switch (i.nodeType) {
	              case 3:         // Text
	                if (/\S/.test(i.data)) {
	                    renderText(element, i, group);
	                }
	                break;
	              case 1:         // Element
	                var style = getComputedStyle(i);
	                var display = getPropertyValue(style, "display");
	                var floating = getPropertyValue(style, "float");
	                var position = getPropertyValue(style, "position");
	                if (position != "static") {
	                    positioned.push(i);
	                }
	                else if (display != "inline") {
	                    if (floating != "none") {
	                        floats.push(i);
	                    } else {
	                        blocks.push(i);
	                    }
	                }
	                else {
	                    inline.push(i);
	                }
	                break;
	            }
	        }

	        mergeSort(blocks, zIndexSort).forEach(function(el){ renderElement(el, group); });
	        mergeSort(floats, zIndexSort).forEach(function(el){ renderElement(el, group); });
	        mergeSort(inline, zIndexSort).forEach(function(el){ renderElement(el, group); });
	        mergeSort(positioned, zIndexSort).forEach(function(el){ renderElement(el, group); });
	    }
	}

	function renderText(element, node, group) {
	    if (emptyClipbox()) {
	        return;
	    }
	    var style = getComputedStyle(element);

	    if (parseFloat(getPropertyValue(style, "text-indent")) < -500) {
	        // assume it should not be displayed.  the slider's
	        // draggable handle displays a Drag text for some reason,
	        // having text-indent: -3333px.
	        return;
	    }

	    var text = node.data;
	    var start = 0;
	    var end = text.search(/\S\s*$/) + 1;

	    if (!end) {
	        return; // whitespace-only node
	    }

	    var fontSize = getPropertyValue(style, "font-size");
	    var lineHeight = getPropertyValue(style, "line-height");

	    // simply getPropertyValue("font") doesn't work in Firefox :-\
	    var font = [
	        getPropertyValue(style, "font-style"),
	        getPropertyValue(style, "font-variant"),
	        getPropertyValue(style, "font-weight"),
	        fontSize, // no need for line height here; it breaks layout in FF
	        getPropertyValue(style, "font-family")
	    ].join(" ");

	    fontSize = parseFloat(fontSize);
	    lineHeight = parseFloat(lineHeight);

	    if (fontSize === 0) {
	        return;
	    }

	    var color = getPropertyValue(style, "color");
	    var range = element.ownerDocument.createRange();
	    var align$$1 = getPropertyValue(style, "text-align");
	    var isJustified = align$$1 == "justify";
	    var whiteSpace = getPropertyValue(style, "white-space");

	    // IE shrinks the text with text-overflow: ellipsis,
	    // apparently because the returned bounding box for the range
	    // is limited to the visible area minus space for the dots,
	    // instead of being the full width of the text.
	    //
	    // https://github.com/telerik/kendo/issues/5232
	    var textOverflow, saveTextOverflow;
	    if (browser.msie) {
	        textOverflow = style.textOverflow;             // computed style
	        if (textOverflow == "ellipsis") {
	            saveTextOverflow = element.style.textOverflow; // own style.
	            element.style.textOverflow = "clip";
	        }
	    }

	    // A line of 500px, with a font of 12px, contains an average of 80 characters, but since we
	    // err, we'd like to guess a bigger number rather than a smaller one.  Multiplying by 5
	    // seems to be a good option.
	    var estimateLineLength = element.getBoundingClientRect().width / fontSize * 5;
	    if (estimateLineLength === 0) {
	        estimateLineLength = 500;
	    }

	    // we'll maintain this so we can workaround bugs in Chrome's Range.getClientRects
	    // https://github.com/telerik/kendo/issues/5740
	    var prevLineBottom = null;
	    while (!doChunk()) {}

	    if (browser.msie && textOverflow == "ellipsis") {
	        element.style.textOverflow = saveTextOverflow;
	    }

	    return;                 // only function declarations after this line

	    function actuallyGetRangeBoundingRect(range) {
	        // XXX: to be revised when this Chrome bug is fixed:
	        // https://bugs.chromium.org/p/chromium/issues/detail?id=612459
	        if (browser.msie || browser.chrome) {
	            // Workaround browser bugs: IE and Chrome would sometimes
	            // return 0 or 1-width rectangles before or after the main
	            // one.  https://github.com/telerik/kendo/issues/4674

	            // Actually Chrome 50 got worse, since the rectangles can now have the width of a
	            // full character, making it hard to tell whether it's a bogus rectangle or valid
	            // selection location.  The workaround is to ignore rectangles that fall on the
	            // previous line.  https://github.com/telerik/kendo/issues/5740
	            var rectangles = range.getClientRects(), box = {
	                top    :  Infinity,
	                right  : -Infinity,
	                bottom : -Infinity,
	                left   :  Infinity
	            };
	            for (var i = 0; i < rectangles.length; ++i) {
	                var b = rectangles[i];
	                if (b.width <= 1 || b.bottom === prevLineBottom) {
	                    continue;   // bogus rectangle
	                }
	                box.left   = Math.min(b.left   , box.left);
	                box.top    = Math.min(b.top    , box.top);
	                box.right  = Math.max(b.right  , box.right);
	                box.bottom = Math.max(b.bottom , box.bottom);
	            }
	            box.width = box.right - box.left;
	            box.height = box.bottom - box.top;
	            return box;
	        }
	        return range.getBoundingClientRect();
	    }

	    // Render a chunk of text, typically one line (but for justified text we render each word as
	    // a separate Text object, because spacing is variable).  Returns true when it finished the
	    // current node.  After each chunk it updates `start` to just after the last rendered
	    // character.
	    function doChunk() {
	        var origStart = start;
	        var box, pos = text.substr(start).search(/\S/);
	        start += pos;
	        if (pos < 0 || start >= end) {
	            return true;
	        }

	        // Select a single character to determine the height of a line of text.  The box.bottom
	        // will be essential for us to figure out where the next line begins.
	        range.setStart(node, start);
	        range.setEnd(node, start + 1);
	        box = actuallyGetRangeBoundingRect(range);

	        // for justified text we must split at each space, because space has variable width.
	        var found = false;
	        if (isJustified) {
	            pos = text.substr(start).search(/\s/);
	            if (pos >= 0) {
	                // we can only split there if it's on the same line, otherwise we'll fall back
	                // to the default mechanism (see findEOL below).
	                range.setEnd(node, start + pos);
	                var r = actuallyGetRangeBoundingRect(range);
	                if (r.bottom == box.bottom) {
	                    box = r;
	                    found = true;
	                    start += pos;
	                }
	            }
	        }

	        if (!found) {
	            // This code does three things: (1) it selects one line of text in `range`, (2) it
	            // leaves the bounding rect of that line in `box` and (3) it returns the position
	            // just after the EOL.  We know where the line starts (`start`) but we don't know
	            // where it ends.  To figure this out, we select a piece of text and look at the
	            // bottom of the bounding box.  If it changes, we have more than one line selected
	            // and should retry with a smaller selection.
	            //
	            // To speed things up, we first try to select all text in the node (`start` ->
	            // `end`).  If there's more than one line there, then select only half of it.  And
	            // so on.  When we find a value for `end` that fits in one line, we try increasing
	            // it (also in halves) until we get to the next line.  The algorithm stops when the
	            // right side of the bounding box does not change.
	            //
	            // One more thing to note is that everything happens in a single Text DOM node.
	            // There's no other tags inside it, therefore the left/top coordinates of the
	            // bounding box will not change.
	            pos = (function findEOL(min, eol, max){
	                range.setEnd(node, eol);
	                var r = actuallyGetRangeBoundingRect(range);
	                if (r.bottom != box.bottom && min < eol) {
	                    return findEOL(min, (min + eol) >> 1, eol);
	                } else if (r.right != box.right) {
	                    box = r;
	                    if (eol < max) {
	                        return findEOL(eol, (eol + max) >> 1, max);
	                    } else {
	                        return eol;
	                    }
	                } else {
	                    return eol;
	                }
	            })(start, Math.min(end, start + estimateLineLength), end);

	            if (pos == start) {
	                // if EOL is at the start, then no more text fits on this line.  Skip the
	                // remainder of this node entirely to avoid a stack overflow.
	                return true;
	            }
	            start = pos;

	            pos = range.toString().search(/\s+$/);
	            if (pos === 0) {
	                return false; // whitespace only; we should not get here.
	            }
	            if (pos > 0) {
	                // eliminate trailing whitespace
	                range.setEnd(node, range.startOffset + pos);
	                box = actuallyGetRangeBoundingRect(range);
	            }
	        }

	        // another workaround for IE: if we rely on getBoundingClientRect() we'll overlap with the bullet for LI
	        // elements.  Calling getClientRects() and using the *first* rect appears to give us the correct location.
	        // Note: not to be used in Chrome as it randomly returns a zero-width rectangle from the previous line.
	        if (browser.msie) {
	            box = range.getClientRects()[0];
	        }

	        var str = range.toString();
	        if (!/^(?:pre|pre-wrap)$/i.test(whiteSpace)) {
	            // node with non-significant space -- collapse whitespace.
	            str = str.replace(/\s+/g, " ");
	        }
	        else if (/\t/.test(str)) {
	            // with significant whitespace we need to do something about literal TAB characters.
	            // There's no TAB glyph in a font so they would be rendered in PDF as an empty box,
	            // and the whole text will stretch to fill the original width.  The core PDF lib
	            // does not have sufficient context to deal with it.

	            // calculate the starting column here, since we initially discarded any whitespace.
	            var cc = 0;
	            for (pos = origStart; pos < range.startOffset; ++pos) {
	                var code = text.charCodeAt(pos);
	                if (code == 9) {
	                    // when we meet a TAB we must round up to the next tab stop.
	                    // in all browsers TABs seem to be 8 characters.
	                    cc += 8 - cc % 8;
	                } else if (code == 10 || code == 13) {
	                    // just in case we meet a newline we must restart.
	                    cc = 0;
	                } else {
	                    // ordinary character --> advance one column
	                    cc++;
	                }
	            }

	            // based on starting column, replace any TAB characters in the string we actually
	            // have to display with spaces so that they align to columns multiple of 8.
	            while ((pos = str.search("\t")) >= 0) {
	                var indent = "        ".substr(0, 8 - (cc + pos) % 8);
	                str = str.substr(0, pos) + indent + str.substr(pos + 1);
	            }
	        }

	        if (!found) {
	            prevLineBottom = box.bottom;
	        }
	        drawText(str, box);
	    }

	    function drawText(str, box) {
	        // In IE the box height will be approximately lineHeight, while in
	        // other browsers it'll (correctly) be the height of the bounding
	        // box for the current text/font.  Which is to say, IE sucks again.
	        // The only good solution I can think of is to measure the text
	        // ourselves and center the bounding box.
	        if (browser.msie && !isNaN(lineHeight)) {
	            var height = getFontHeight(font);
	            var top = (box.top + box.bottom - height) / 2;
	            box = {
	                top    : top,
	                right  : box.right,
	                bottom : top + height,
	                left   : box.left,
	                height : height,
	                width  : box.right - box.left
	            };
	        }

	        // var path = new Path({ stroke: { color: "red" }});
	        // path.moveTo(box.left, box.top)
	        //     .lineTo(box.right, box.top)
	        //     .lineTo(box.right, box.bottom)
	        //     .lineTo(box.left, box.bottom)
	        //     .close();
	        // group.append(path);

	        var text = new TextRect(
	            str, new Rect([ box.left, box.top ],
	                              [ box.width, box.height ]),
	            {
	                font: font,
	                fill: { color: color }
	            }
	        );
	        group.append(text);
	        decorate(box);
	    }

	    function decorate(box) {
	        line(nodeInfo["underline"], box.bottom);
	        line(nodeInfo["line-through"], box.bottom - box.height / 2.7);
	        line(nodeInfo["overline"], box.top);
	        function line(color, ypos) {
	            if (color) {
	                var width = fontSize / 12;
	                var path = new Path({ stroke: {
	                    width: width,
	                    color: color
	                }});

	                ypos -= width;
	                path.moveTo(box.left, ypos)
	                    .lineTo(box.right, ypos);
	                group.append(path);
	            }
	        }
	    }
	}

	function groupInStackingContext(element, group, zIndex) {
	    var main;
	    if (zIndex != "auto") {
	        // use the current stacking context
	        main = nodeInfo._stackingContext.group;
	        zIndex = parseFloat(zIndex);
	    } else {
	        // normal flow — use given container.  we still have to
	        // figure out where should we insert this element with the
	        // assumption that its z-index is zero, as the group might
	        // already contain elements with higher z-index.
	        main = group;
	        zIndex = 0;
	    }
	    var a = main.children;
	    for (var i = 0; i < a.length; ++i) {
	        if (a[i]._dom_zIndex != null && a[i]._dom_zIndex > zIndex) {
	            break;
	        }
	    }

	    var tmp = new Group();
	    main.insert(i, tmp);
	    tmp._dom_zIndex = zIndex;

	    if (main !== group) {
	        // console.log("Placing", element, "in", nodeInfo._stackingContext.element, "at position", i, " / ", a.length);
	        // console.log(a.slice(i+1));

	        // if (nodeInfo._matrix) {
	        //     tmp.transform(nodeInfo._matrix);
	        // }
	        if (nodeInfo._clipbox) {
	            var m = nodeInfo._matrix.invert();
	            var r = nodeInfo._clipbox.transformCopy(m);
	            setClipping(tmp, Path.fromRect(r));
	            // console.log(r);
	            // tmp.append(Path.fromRect(r));
	            // tmp.append(new Text(element.className || element.id, r.topLeft()));
	        }
	    }

	    return tmp;
	}

	function renderElement(element, container) {
	    var style = getComputedStyle(element);

	    var counterReset = getPropertyValue(style, "counter-reset");
	    if (counterReset) {
	        doCounters(splitProperty(counterReset, /^\s+/), resetCounter, 0);
	    }

	    var counterIncrement = getPropertyValue(style, "counter-increment");
	    if (counterIncrement) {
	        doCounters(splitProperty(counterIncrement, /^\s+/), incCounter, 1);
	    }

	    if (/^(style|script|link|meta|iframe|svg|col|colgroup)$/i.test(element.tagName)) {
	        return;
	    }

	    if (nodeInfo._clipbox == null) {
	        return;
	    }

	    var opacity = parseFloat(getPropertyValue(style, "opacity"));
	    var visibility = getPropertyValue(style, "visibility");
	    var display = getPropertyValue(style, "display");

	    if (opacity === 0 || visibility == "hidden" || display == "none") {
	        return;
	    }

	    var tr = getTransform(style);
	    var group;

	    var zIndex = getPropertyValue(style, "z-index");
	    if ((tr || opacity < 1) && zIndex == "auto") {
	        zIndex = 0;
	    }
	    group = groupInStackingContext(element, container, zIndex);

	    // XXX: remove at some point
	    // group._pdfElement = element;
	    // group.options._pdfDebug = "";
	    // if (element.id) {
	    //     group.options._pdfDebug = "#" + element.id;
	    // }
	    // if (element.className) {
	    //     group.options._pdfDebug += "." + element.className.split(" ").join(".");
	    // }

	    if (opacity < 1) {
	        group.opacity(opacity * group.opacity());
	    }

	    pushNodeInfo(element, style, group);

	    if (!tr) {
	        _renderWithPseudoElements(element, group);
	    }
	    else {
	        saveStyle(element, function(){
	            // must clear transform, so getBoundingClientRect returns correct values.
	            pleaseSetPropertyValue(element.style, "transform", "none", "important");

	            // must also clear transitions, so correct values are returned *immediately*
	            pleaseSetPropertyValue(element.style, "transition", "none", "important");

	            // the presence of any transform makes it behave like it had position: relative,
	            // because why not.
	            // http://meyerweb.com/eric/thoughts/2011/09/12/un-fixing-fixed-elements-with-css-transforms/
	            if (getPropertyValue(style, "position") == "static") {
	                // but only if it's not already positioned. :-/
	                pleaseSetPropertyValue(element.style, "position", "relative", "important");
	            }

	            // must translate to origin before applying the CSS
	            // transformation, then translate back.
	            var bbox = element.getBoundingClientRect();
	            var x = bbox.left + tr.origin[0];
	            var y = bbox.top + tr.origin[1];
	            var m = [ 1, 0, 0, 1, -x, -y ];
	            m = mmul(m, tr.matrix);
	            m = mmul(m, [ 1, 0, 0, 1, x, y ]);
	            m = setTransform(group, m);

	            nodeInfo._matrix = nodeInfo._matrix.multiplyCopy(m);

	            _renderWithPseudoElements(element, group);
	        });
	    }

	    popNodeInfo();

	    //drawDebugBox(element.getBoundingClientRect(), container);
	}

	// function drawDebugBox(box, group, color) {
	//     var path = Path.fromRect(new geo.Rect([ box.left, box.top ], [ box.width, box.height ]));
	//     if (color) {
	//         path.stroke(color);
	//     }
	//     group.append(path);
	// }

	// function dumpTextNode(node) {
	//     var txt = node.data.replace(/^\s+/, "");
	//     if (txt.length < 100) {
	//         console.log(node.data.length + ": |" + txt);
	//     } else {
	//         console.log(node.data.length + ": |" + txt.substr(0, 50) + "|...|" + txt.substr(-50));
	//     }
	// }

	function mmul(a, b) {
	    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
	    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
	    return [
	        a1*a2 + b1*c2,          a1*b2 + b1*d2,
	        c1*a2 + d1*c2,          c1*b2 + d1*d2,
	        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
	    ];
	}

	var drawing = {
		svg: svg,
		canvas: canvas,
		util: util,
		PathParser: PathParser,
		Surface: Surface,
		BaseNode: BaseNode,
		SurfaceFactory: SurfaceFactory,
		OptionsStore: OptionsStore,
		exportImage: exportImage,
		exportSVG: exportSVG,
		QuadNode: QuadNode,
		ShapesQuadTree: ShapesQuadTree,
		ObserversMixin: ObserversMixin,
		Element: Element$1,
		Circle: Circle,
		Arc: Arc,
		Path: Path,
		MultiPath: MultiPath,
		Text: Text,
		Image: Image$1,
		Group: Group,
		Layout: Layout,
		Rect: Rect$2,
		align: align,
		vAlign: vAlign,
		stack: stack,
		vStack: vStack,
		wrap: wrap,
		vWrap: vWrap,
		fit: fit,
		LinearGradient: LinearGradient,
		RadialGradient: RadialGradient,
		GradientStop: GradientStop,
		Gradient: Gradient,
		Animation: Animation,
		AnimationFactory: AnimationFactory,
		drawDOM: drawDOM
	};

	kendo.deepExtend(kendo, {
	    drawing: drawing,
	    geometry: geometry
	});

	kendo.drawing.Segment = kendo.geometry.Segment;
	kendo.dataviz.drawing = kendo.drawing;
	kendo.dataviz.geometry = kendo.geometry;
	kendo.drawing.util.measureText = kendo.util.measureText;
	kendo.drawing.util.objectKey = kendo.util.objectKey;
	kendo.drawing.Color = kendo.Color;

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ },

/***/ 498:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./util */ 54);

/***/ },

/***/ 499:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.color */ 55);

/***/ },

/***/ 500:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../util/text-metrics */ 145);

/***/ }

/******/ });

/***/ }),
/* 23 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.list.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(757);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 581:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data */ 6);

/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 757:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(581), __webpack_require__(596) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "list",
	    name: "List",
	    category: "framework",
	    depends: [ "data", "popup" ],
	    hidden: true
	};

	/*jshint evil: true*/
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        Widget = ui.Widget,
	        keys = kendo.keys,
	        support = kendo.support,
	        htmlEncode = kendo.htmlEncode,
	        activeElement = kendo._activeElement,
	        ObservableArray = kendo.data.ObservableArray,
	        ID = "id",
	        CHANGE = "change",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        LOADING = "k-i-loading",
	        HIDDENCLASS = "k-loading-hidden",
	        OPEN = "open",
	        CLOSE = "close",
	        CASCADE = "cascade",
	        SELECT = "select",
	        SELECTED = "selected",
	        REQUESTSTART = "requestStart",
	        REQUESTEND = "requestEnd",
	        WIDTH = "width",
	        extend = $.extend,
	        proxy = $.proxy,
	        isArray = $.isArray,
	        browser = support.browser,
	        isIE = browser.msie,
	        isIE8 = isIE && browser.version < 9,
	        quotRegExp = /"/g,
	        alternativeNames = {
	            "ComboBox": "DropDownList",
	            "DropDownList": "ComboBox"
	        };

	    var List = kendo.ui.DataBoundWidget.extend({
	        init: function(element, options) {
	            var that = this,
	                ns = that.ns,
	                id;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;
	            options = that.options;

	            that._isSelect = element.is(SELECT);

	            if (that._isSelect && that.element[0].length) {
	                if (!options.dataSource) {
	                    options.dataTextField = options.dataTextField || "text";
	                    options.dataValueField = options.dataValueField || "value";
	                }
	            }

	            that.ul = $('<ul unselectable="on" class="k-list k-reset"/>')
	                        .attr({
	                            tabIndex: -1,
	                            "aria-hidden": true
	                        });

	            that.list = $("<div class='k-list-container'/>")
	                        .append(that.ul)
	                        .on("mousedown" + ns, proxy(that._listMousedown, that));

	            id = element.attr(ID);

	            if (id) {
	                that.list.attr(ID, id + "-list");
	                that.ul.attr(ID, id + "_listbox");
	            }

	            that._header();
	            that._noData();
	            that._footer();
	            that._accessors();
	            that._initValue();
	        },

	        options: {
	            valuePrimitive: false,
	            footerTemplate: "",
	            headerTemplate: "",
	            noDataTemplate: "No data found."
	        },

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);

	            if (options && options.enable !== undefined) {
	                options.enabled = options.enable;
	            }

	            this._header();
	            this._noData();
	            this._footer();

	            this._renderFooter();
	            this._renderNoData();
	        },

	        focus: function() {
	            this._focused.focus();
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        _listOptions: function(options) {
	            var that = this;
	            var currentOptions = that.options;
	            var virtual = currentOptions.virtual;
	            var listBoundHandler = proxy(that._listBound, that);

	            virtual = typeof virtual === "object" ? virtual : {};

	            options = $.extend({
	                autoBind: false,
	                selectable: true,
	                dataSource: that.dataSource,
	                click: proxy(that._click, that),
	                change: proxy(that._listChange, that),
	                activate: proxy(that._activateItem, that),
	                deactivate: proxy(that._deactivateItem, that),
	                dataBinding: function() {
	                    that.trigger("dataBinding");
	                },
	                dataBound: listBoundHandler,
	                height: currentOptions.height,
	                dataValueField: currentOptions.dataValueField,
	                dataTextField: currentOptions.dataTextField,
	                groupTemplate: currentOptions.groupTemplate,
	                fixedGroupTemplate: currentOptions.fixedGroupTemplate,
	                template: currentOptions.template
	            }, options, virtual);

	            if (!options.template) {
	                options.template = "#:" + kendo.expr(options.dataTextField, "data") + "#";
	            }

	            if (currentOptions.$angular) {
	                options.$angular = currentOptions.$angular;
	            }

	            return options;
	        },

	        _initList: function() {
	            var that = this;
	            var listOptions = that._listOptions({
	                selectedItemChange: proxy(that._listChange, that)
	            });

	            if (!that.options.virtual) {
	                that.listView = new kendo.ui.StaticList(that.ul, listOptions);
	            } else {
	                that.listView = new kendo.ui.VirtualList(that.ul, listOptions);
	            }

	            that.listView.bind("listBound", proxy(that._listBound, that));
	            that._setListValue();
	        },

	        _setListValue: function(value) {
	            value = value || this.options.value;

	            if (value !== undefined) {
	                this.listView.value(value)
	                    .done(proxy(this._updateSelectionState, this));
	            }
	        },

	        _updateSelectionState: $.noop,

	        _listMousedown: function(e) {
	            if (!this.filterInput || this.filterInput[0] !== e.target) {
	                e.preventDefault();
	            }
	        },

	        _isFilterEnabled: function() {
	            var filter = this.options.filter;
	            return filter && filter !== "none";
	        },

	        _hideClear: function() {
	            var that = this;

	            if(that._clear) {
	                this._clear.addClass(HIDDENCLASS);
	            }
	        },

	        _showClear: function() {
	            var that = this;

	            if(that._clear) {
	                this._clear.removeClass(HIDDENCLASS);
	            }
	        },

	        _clearValue: function() {
	            this.listView.value([]);
	            this._clearText();
	            this._accessor("");
	            if(this._isFilterEnabled()) {
	                this._filter({word: "", open: false});
	            }
	            this._change();
	        },

	        _clearText: function() {
	            this.text("");
	        },

	        _clearFilter: function() {
	            if (!this.options.virtual) {
	                this.listView.bound(false);
	            }

	            this._filterSource();
	        },

	        _filterSource: function(filter, force) {
	            var that = this;
	            var options = that.options;
	            var dataSource = that.dataSource;
	            var expression = extend({}, dataSource.filter() || {});
	            var resetPageSettings = filter || (expression.filters && expression.filters.length && !filter);

	            var removed = removeFiltersForField(expression, options.dataTextField);

	            if ((filter || removed) && that.trigger("filtering", { filter: filter })) {
	                return;
	            }

	            var newExpression = {
	                filters: [],
	                logic: "and"
	            };

	            if (isValidFilterExpr(filter)) {
	                newExpression.filters.push(filter);
	            }

	            if (isValidFilterExpr(expression)) {
	                newExpression.filters.push(expression);
	            }

	            if (that._cascading) {
	                this.listView.setDSFilter(newExpression);
	            }

	            var dataSourceState = extend({}, {
	                page: resetPageSettings ? 1 : dataSource.page(),
	                pageSize: resetPageSettings ? dataSource.options.pageSize : dataSource.pageSize(),
	                sort: dataSource.sort(),
	                filter: dataSource.filter(),
	                group: dataSource.group(),
	                aggregate: dataSource.aggregate()
	            }, { filter: newExpression });

	            dataSource[force ? "read" : "query"](dataSource._mergeState(dataSourceState));
	        },

	        _angularElement: function(element, action) {
	            if (!element) {
	                return;
	            }

	            this.angular(action, function() {
	                return { elements: element };
	            });
	        },

	        _noData: function() {
	            var noData = $(this.noData);
	            var template = this.options.noDataTemplate;

	            this.angular("cleanup", function() { return { elements: noData }; });
	            kendo.destroy(noData);
	            noData.remove();

	            if (!template) {
	                this.noData = null;
	                return;
	            }

	            this.noData = $('<div class="k-nodata" style="display:none"><div></div></div>').appendTo(this.list);
	            this.noDataTemplate = typeof template !== "function" ? kendo.template(template) : template;
	        },

	        _renderNoData: function() {
	            var noData = this.noData;

	            if (!noData) {
	                return;
	            }

	            this._angularElement(noData, "cleanup");
	            noData.children(":first").html(this.noDataTemplate({ instance: this }));
	            this._angularElement(noData, "compile");
	        },

	        _toggleNoData: function(show) {
	            $(this.noData).toggle(show);
	        },

	        _footer: function() {
	            var footer = $(this.footer);
	            var template = this.options.footerTemplate;

	            this._angularElement(footer, "cleanup");
	            kendo.destroy(footer);
	            footer.remove();

	            if (!template) {
	                this.footer = null;
	                return;
	            }

	            this.footer = $('<div class="k-footer"></div>').appendTo(this.list);
	            this.footerTemplate = typeof template !== "function" ? kendo.template(template) : template;
	        },

	        _renderFooter: function() {
	            var footer = this.footer;

	            if (!footer) {
	                return;
	            }

	            this._angularElement(footer, "cleanup");
	            footer.html(this.footerTemplate({ instance: this }));
	            this._angularElement(footer, "compile");
	        },

	        _header: function() {
	            var header = $(this.header);
	            var template = this.options.headerTemplate;

	            this._angularElement(header, "cleanup");
	            kendo.destroy(header);
	            header.remove();

	            if (!template) {
	                this.header = null;
	                return;
	            }

	            var headerTemplate = typeof template !== "function" ? kendo.template(template) : template;
	            header = $(headerTemplate({}));

	            this.header = header[0] ? header : null;
	            this.list.prepend(header);

	            this._angularElement(this.header, "compile");
	        },

	        _allowOpening: function() {
	            return this.options.noDataTemplate || this.dataSource.flatView().length;
	        },

	        _initValue: function() {
	            var that = this,
	                value = that.options.value;

	            if (value !== null) {
	                that.element.val(value);
	            } else {
	                value = that._accessor();
	                that.options.value = value;
	            }

	            that._old = value;
	        },

	        _ignoreCase: function() {
	            var that = this,
	                model = that.dataSource.reader.model,
	                field;

	            if (model && model.fields) {
	                field = model.fields[that.options.dataTextField];

	                if (field && field.type && field.type !== "string") {
	                    that.options.ignoreCase = false;
	                }
	            }
	        },

	        _focus: function(candidate) {
	            return this.listView.focus(candidate);
	        },

	        _filter: function(options) {
	            var that = this;
	            var widgetOptions = that.options;
	            var ignoreCase = widgetOptions.ignoreCase;
	            var field = widgetOptions.dataTextField;

	            var expression = {
	                value: ignoreCase ? options.word.toLowerCase() : options.word,
	                field: field,
	                operator: widgetOptions.filter,
	                ignoreCase: ignoreCase
	            };

	            that._open = options.open;
	            that._filterSource(expression);

	        },

	        search: function(word) {
	            var options = this.options;

	            word = typeof word === "string" ? word : this._inputValue();

	            clearTimeout(this._typingTimeout);

	            if ((!options.enforceMinLength && !word.length) || word.length >= options.minLength) {
	                this._state = "filter";
	                if (!this._isFilterEnabled()) {
	                    this._searchByWord(word);
	                } else {
	                    this._filter({word: word, open: true});
	                }
	            }
	        },

	        current: function(candidate) {
	            return this._focus(candidate);
	        },

	        items: function() {
	            return this.ul[0].children;
	        },

	        destroy: function() {
	            var that = this;
	            var ns = that.ns;

	            Widget.fn.destroy.call(that);

	            that._unbindDataSource();

	            that.listView.destroy();
	            that.list.off(ns);

	            that.popup.destroy();

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        dataItem: function(index) {
	            var that = this;

	            if (index === undefined) {
	                return that.listView.selectedDataItems()[0];
	            }

	            if (typeof index !== "number") {
	                if (that.options.virtual) {
	                    return that.dataSource.getByUid($(index).data("uid"));
	                }

	                index = $(that.items()).index(index);
	            }

	            return that.dataSource.flatView()[index];
	        },

	        _activateItem: function() {
	            var current = this.listView.focus();
	            if (current) {
	                this._focused.add(this.filterInput).attr("aria-activedescendant", current.attr("id"));
	            }
	        },

	        _deactivateItem: function() {
	            this._focused.add(this.filterInput).removeAttr("aria-activedescendant");
	        },

	        _accessors: function() {
	            var that = this;
	            var element = that.element;
	            var options = that.options;
	            var getter = kendo.getter;
	            var textField = element.attr(kendo.attr("text-field"));
	            var valueField = element.attr(kendo.attr("value-field"));

	            if (!options.dataTextField && textField) {
	                options.dataTextField = textField;
	            }

	            if (!options.dataValueField && valueField) {
	                options.dataValueField = valueField;
	            }

	            that._text = getter(options.dataTextField);
	            that._value = getter(options.dataValueField);
	        },

	        _aria: function(id) {
	            var that = this,
	                options = that.options,
	                element = that._focused.add(that.filterInput);

	            if (options.suggest !== undefined) {
	                element.attr("aria-autocomplete", options.suggest ? "both" : "list");
	            }

	            id = id ? id + " " + that.ul[0].id : that.ul[0].id;

	            element.attr("aria-owns", id);

	            that.ul.attr("aria-live", !that._isFilterEnabled() ? "off" : "polite");
	        },

	        _blur: function() {
	            var that = this;

	            that._change();
	            that.close();
	        },

	        _change: function() {
	            var that = this;
	            var index = that.selectedIndex;
	            var optionValue = that.options.value;
	            var value = that.value();
	            var trigger;

	            if (that._isSelect && !that.listView.bound() && optionValue) {
	                value = optionValue;
	            }

	            if (value !== unifyType(that._old, typeof value)) {
	                trigger = true;
	            } else if (index !== undefined && index !== that._oldIndex) {
	                trigger = true;
	            }

	            if (trigger) {
	                that._old = value;
	                that._oldIndex = index;

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	            }

	            that.typing = false;
	        },

	        _data: function() {
	            return this.dataSource.view();
	        },

	        _enable: function() {
	            var that = this,
	                options = that.options,
	                disabled = that.element.is("[disabled]");

	            if (options.enable !== undefined) {
	                options.enabled = options.enable;
	            }

	            if (!options.enabled || disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(that.element.is("[readonly]"));
	            }
	        },

	        _dataValue: function(dataItem) {
	            var value = this._value(dataItem);

	            if (value === undefined) {
	                value = this._text(dataItem);
	            }

	            return value;
	        },

	        _offsetHeight: function() {
	            var offsetHeight = 0;
	            var siblings = this.listView.content.prevAll(":visible");

	            siblings.each(function() {
	                var element = $(this);

	                if (element.hasClass("k-list-filter")) {
	                    offsetHeight += outerHeight(element.children());
	                } else {
	                    offsetHeight += outerHeight(element);
	                }
	            });

	            return offsetHeight;
	        },

	        _height: function(length) {
	            var that = this;
	            var list = that.list;
	            var height = that.options.height;
	            var visible = that.popup.visible();
	            var offsetTop;
	            var popups;
	            var footerHeight;

	            if (length || that.options.noDataTemplate) {
	                popups = list.add(list.parent(".k-animation-container")).show();

	                if (!list.is(":visible")) {
	                    popups.hide();
	                    return;
	                }

	                height = that.listView.content[0].scrollHeight > height ? height : "auto";

	                popups.height(height);

	                if (height !== "auto") {
	                    offsetTop = that._offsetHeight();
	                    footerHeight = outerHeight($(that.footer)) || 0;
	                    height = height - offsetTop - footerHeight;
	                }

	                that.listView.content.height(height);

	                if (!visible) {
	                    popups.hide();
	                }
	            }

	            return height;
	        },

	        _adjustListWidth: function() {
	            var list = this.list,
	                width = list[0].style.width,
	                wrapper = this.wrapper,
	                computedStyle, computedWidth;

	            if (!list.data(WIDTH) && width) {
	                return;
	            }

	            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
	            computedWidth = parseFloat(computedStyle  && computedStyle.width) || outerWidth(wrapper);

	            if (computedStyle && browser.msie) { // getComputedStyle returns different box in IE.
	                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
	            }

	            if (list.css("box-sizing") !== "border-box") {
	                width = computedWidth - (outerWidth(list) - list.width());
	            } else {
	                width = computedWidth;
	            }

	            list.css({
	                fontFamily: wrapper.css("font-family"),
	                width: this.options.autoWidth ? "auto" : width,
	                minWidth: width
	            })
	            .data(WIDTH, width);

	            return true;
	        },

	        _openHandler: function(e) {
	            this._adjustListWidth();

	            if (this.trigger(OPEN)) {
	                e.preventDefault();
	            } else {
	                this._focused.attr("aria-expanded", true);
	                this.ul.attr("aria-hidden", false);
	            }
	        },

	        _closeHandler: function(e) {
	            if (this.trigger(CLOSE)) {
	                e.preventDefault();
	            } else {
	                this._focused.attr("aria-expanded", false);
	                this.ul.attr("aria-hidden", true);
	            }
	        },

	        _focusItem: function() {
	            var listView = this.listView;
	            var noFocusedItem = !listView.focus();
	            var index = last(listView.select());

	            if (index === undefined && this.options.highlightFirst && noFocusedItem) {
	                index = 0;
	            }

	            if (index !== undefined) {
	                listView.focus(index);
	            } else if (noFocusedItem) {
	                listView.scrollToIndex(0);
	            }
	        },

	        _calculateGroupPadding: function(height) {
	            var li = this.ul.children(".k-first:first");
	            var groupHeader = this.listView.content.prev(".k-group-header");
	            var padding = 0;

	            if (groupHeader[0] && groupHeader[0].style.display !== "none") {
	                if (height !== "auto") {
	                    padding = kendo.support.scrollbar();
	                }

	                padding += parseFloat(li.css("border-right-width"), 10) + parseFloat(li.children(".k-group").css("padding-right"), 10);

	                groupHeader.css("padding-right", padding);
	            }
	        },

	        _calculatePopupHeight: function(force) {
	            var height = this._height(this.dataSource.flatView().length || force);
	            this._calculateGroupPadding(height);
	        },

	        _resizePopup: function(force) {
	            if (this.options.virtual) {
	                return;
	            }

	            if (!this.popup.element.is(":visible")) {
	                this.popup.one("open", (function(force) {
	                    return proxy(function() {
	                        this._calculatePopupHeight(force);
	                    }, this);
	                }).call(this, force));
	            } else {
	                this._calculatePopupHeight(force);
	            }
	        },

	        _popup: function() {
	            var that = this;

	            that.popup = new ui.Popup(that.list, extend({}, that.options.popup, {
	                anchor: that.wrapper,
	                open: proxy(that._openHandler, that),
	                close: proxy(that._closeHandler, that),
	                animation: that.options.animation,
	                isRtl: support.isRtl(that.wrapper)
	            }));
	        },

	        _makeUnselectable: function() {
	            if (isIE8) {
	                this.list.find("*").not(".k-textbox").attr("unselectable", "on");
	            }
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _toggle: function(open, preventFocus) {
	            var that = this;
	            var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);

	            open = open !== undefined? open : !that.popup.visible();

	            if (!preventFocus && !touchEnabled && that._focused[0] !== activeElement()) {
	                that._prevent = true;
	                that._focused.focus();
	                that._prevent = false;
	            }

	            that[open ? OPEN : CLOSE]();
	        },

	        _triggerCascade: function() {
	            var that = this;

	            if (!that._cascadeTriggered || that._old !== that.value() || that._oldIndex !== that.selectedIndex) {
	                that._cascadeTriggered = true;
	                that.trigger(CASCADE, { userTriggered: that._userTriggered });
	            }
	        },

	        _triggerChange: function() {
	            if (this._valueBeforeCascade !== this.value()) {
	                this.trigger(CHANGE);
	            }
	        },

	        _unbindDataSource: function() {
	            var that = this;

	            that.dataSource.unbind(REQUESTSTART, that._requestStartHandler)
	                           .unbind(REQUESTEND, that._requestEndHandler)
	                           .unbind("error", that._errorHandler);
	        },

	        requireValueMapper: function(options, value) {
	            var hasValue = (options.value instanceof Array ? options.value.length : options.value) || (value instanceof Array ? value.length : value);
	            if (hasValue && options.virtual && typeof options.virtual.valueMapper !== "function") {
	                throw new Error("ValueMapper is not provided while the value is being set. See http://docs.telerik.com/kendo-ui/controls/editors/combobox/virtualization#the-valuemapper-function");
	            }
	        }
	    });

	    function unifyType(value, type) {
	        if (value !== undefined && value !== "" && value !== null) {
	            if (type === "boolean") {
	                value = Boolean(value);
	            } else if (type === "number") {
	                value = Number(value);
	            } else if (type === "string") {
	                value = value.toString();
	            }
	        }

	        return value;
	    }

	    extend(List, {
	        inArray: function(node, parentNode) {
	            var idx, length, siblings = parentNode.children;

	            if (!node || node.parentNode !== parentNode) {
	                return -1;
	            }

	            for (idx = 0, length = siblings.length; idx < length; idx++) {
	                if (node === siblings[idx]) {
	                    return idx;
	                }
	            }

	            return -1;
	        },
	        unifyType: unifyType
	    });

	    kendo.ui.List = List;

	    ui.Select = List.extend({
	        init: function(element, options) {
	            List.fn.init.call(this, element, options);
	            this._initial = this.element.val();
	        },

	        setDataSource: function(dataSource) {
	            var that = this;
	            var parent;

	            that.options.dataSource = dataSource;

	            that._dataSource();

	            if (that.listView.bound()) {
	                that._initialIndex = null;
	            }

	            that.listView.setDataSource(that.dataSource);

	            if (that.options.autoBind) {
	                that.dataSource.fetch();
	            }

	            parent = that._parentWidget();

	            if (parent) {
	                that._cascadeSelect(parent);
	            }
	        },

	        close: function() {
	            this.popup.close();
	        },

	        select: function(candidate) {
	            var that = this;

	            if (candidate === undefined) {
	                return that.selectedIndex;
	            } else {
	                return that._select(candidate).done(function() {
	                    that._old = that._accessor();
	                    that._oldIndex = that.selectedIndex;
	                });
	            }
	        },

	        _accessor: function(value, idx) {
	            return this[this._isSelect ? "_accessorSelect" : "_accessorInput"](value, idx);
	        },

	        _accessorInput: function(value) {
	            var element = this.element[0];

	            if (value === undefined) {
	                return element.value;
	            } else {
	                if (value === null) {
	                    value = "";
	                }
	                element.value = value;
	            }
	        },

	        _accessorSelect: function(value, idx) {
	            var element = this.element[0];
	            var hasValue;

	            if (value === undefined) {
	                return getSelectedOption(element).value || "";
	            }

	            getSelectedOption(element).selected = false;

	            if (idx === undefined) {
	                idx = -1;
	            }

	            hasValue = (value !== null && value !== "");

	            if (hasValue && idx == -1) {
	                this._custom(value);
	            } else {
	                if (value) {
	                    element.value = value;
	                } else {
	                    element.selectedIndex = idx;
	                }
	            }
	        },

	        _custom: function(value) {
	            var that = this;
	            var element = that.element;
	            var custom = that._customOption;

	            if (!custom) {
	                custom = $("<option/>");
	                that._customOption = custom;

	                element.append(custom);
	            }

	            custom.text(value);
	            custom[0].selected = true;
	        },

	        _hideBusy: function () {
	            var that = this;
	            clearTimeout(that._busy);
	            that._arrow.removeClass(LOADING);
	            that._focused.attr("aria-busy", false);
	            that._busy = null;
	            that._showClear();
	        },

	        _showBusy: function () {
	            var that = this;

	            that._request = true;

	            if (that._busy) {
	                return;
	            }

	            that._busy = setTimeout(function () {
	                if (that._arrow) { //destroyed after request start
	                    that._focused.attr("aria-busy", true);
	                    that._arrow.addClass(LOADING);
	                    that._hideClear();
	                }
	            }, 100);
	        },

	        _requestEnd: function() {
	            this._request = false;
	            this._hideBusy();
	        },

	        _dataSource: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                dataSource = options.dataSource || {},
	                idx;

	            dataSource = $.isArray(dataSource) ? {data: dataSource} : dataSource;

	            if (that._isSelect) {
	                idx = element[0].selectedIndex;
	                if (idx > -1) {
	                    options.index = idx;
	                }

	                dataSource.select = element;
	                dataSource.fields = [{ field: options.dataTextField },
	                                     { field: options.dataValueField }];
	            }

	            if (that.dataSource) {
	                that._unbindDataSource();
	            } else {
	                that._requestStartHandler = proxy(that._showBusy, that);
	                that._requestEndHandler = proxy(that._requestEnd, that);
	                that._errorHandler = proxy(that._hideBusy, that);
	            }

	            that.dataSource = kendo.data.DataSource.create(dataSource)
	                                   .bind(REQUESTSTART, that._requestStartHandler)
	                                   .bind(REQUESTEND, that._requestEndHandler)
	                                   .bind("error", that._errorHandler);
	        },

	        _firstItem: function() {
	            this.listView.focusFirst();
	        },

	        _lastItem: function() {
	            this.listView.focusLast();
	        },

	        _nextItem: function() {
	            this.listView.focusNext();
	        },

	        _prevItem: function() {
	            this.listView.focusPrev();
	        },

	        _move: function(e) {
	            var that = this;
	            var listView = that.listView;
	            var key = e.keyCode;
	            var down = key === keys.DOWN;
	            var dataItem;
	            var pressed;
	            var current;

	            if (key === keys.UP || down) {
	                if (e.altKey) {
	                    that.toggle(down);
	                } else {
	                    if (!listView.bound()) {
	                        if (!that._fetch) {
	                            that.dataSource.one(CHANGE, function() {
	                                that._fetch = false;
	                                that._move(e);
	                            });

	                            that._fetch = true;
	                            that._filterSource();
	                        }

	                        e.preventDefault();

	                        return true; //pressed
	                    }

	                    current = that._focus();

	                    if (!that._fetch && (!current || current.hasClass("k-state-selected"))) {
	                        if (down) {
	                            that._nextItem();

	                            if (!that._focus()) {
	                                that._lastItem();
	                            }
	                        } else {
	                            that._prevItem();

	                            if (!that._focus()) {
	                                that._firstItem();
	                            }
	                        }
	                    }

	                    dataItem = listView.dataItemByIndex(listView.getElementIndex(that._focus()));

	                    if (that.trigger(SELECT, { dataItem: dataItem, item: that._focus() })) {
	                        that._focus(current);
	                        return;
	                    }

	                    that._select(that._focus(), true).done(function() {
	                        if (!that.popup.visible()) {
	                            that._blur();
	                        }
	                    });
	                }

	                e.preventDefault();
	                pressed = true;
	            } else if (key === keys.ENTER || key === keys.TAB) {
	                if (that.popup.visible()) {
	                    e.preventDefault();
	                }

	                current = that._focus();
	                dataItem = that.dataItem();

	                if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {
	                    current = null;
	                }

	                var activeFilter = that.filterInput && that.filterInput[0] === activeElement();

	                if (current) {
	                    dataItem = listView.dataItemByIndex(listView.getElementIndex(current));

	                    if (that.trigger(SELECT, { dataItem: dataItem, item: current })) {
	                        return;
	                    }

	                    that._select(current);
	                } else if (that.input) {
	                    that._accessor(that.input.val());
	                    that.listView.value(that.input.val());
	                }

	                if (that._focusElement) {
	                    that._focusElement(that.wrapper);
	                }

	                if (activeFilter && key === keys.TAB) {
	                    that.wrapper.focusout();
	                } else {
	                    that._blur();
	                }

	                that.close();
	                pressed = true;
	            } else if (key === keys.ESC) {
	                if (that.popup.visible()) {
	                    e.preventDefault();
	                }
	                that.close();
	                pressed = true;
	            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
	                e.preventDefault();

	                var direction = key === keys.PAGEDOWN ? 1 : -1;
	                listView.scrollWith(direction * listView.screenHeight());

	                pressed = true;
	            }

	            return pressed;
	        },

	        _fetchData: function() {
	            var that = this;
	            var hasItems = !!that.dataSource.view().length;

	            if (that._request || that.options.cascadeFrom) {
	                return;
	            }

	            if (!that.listView.bound() && !that._fetch && !hasItems) {
	                that._fetch = true;
	                that.dataSource.fetch().done(function() {
	                    that._fetch = false;
	                });
	            }
	        },

	        _options: function(data, optionLabel, value) {
	            var that = this,
	                element = that.element,
	                htmlElement = element[0],
	                length = data.length,
	                options = "",
	                option,
	                dataItem,
	                dataText,
	                dataValue,
	                idx = 0;

	            if (optionLabel) {
	                options = optionLabel;
	            }

	            for (; idx < length; idx++) {
	                option = "<option";
	                dataItem = data[idx];
	                dataText = that._text(dataItem);
	                dataValue = that._value(dataItem);

	                if (dataValue !== undefined) {
	                    dataValue += "";

	                    if (dataValue.indexOf('"') !== -1) {
	                        dataValue = dataValue.replace(quotRegExp, "&quot;");
	                    }

	                    option += ' value="' + dataValue + '"';
	                }

	                option += ">";

	                if (dataText !== undefined) {
	                    option += htmlEncode(dataText);
	                }

	                option += "</option>";
	                options += option;
	            }

	            element.html(options);

	            if (value !== undefined) {
	                htmlElement.value = value;
	                if (htmlElement.value && !value) {
	                    htmlElement.selectedIndex = -1;
	                }
	            }

	            if (htmlElement.selectedIndex !== -1) {
	                option = getSelectedOption(htmlElement);

	                if (option) {
	                    option.setAttribute(SELECTED, SELECTED);
	                }
	            }
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(that._initial);
	                    });
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _parentWidget: function() {
	            var name = this.options.name;

	            if (!this.options.cascadeFrom) {
	                return;
	            }

	            var parentElement = $("#" + this.options.cascadeFrom);
	            var parent = parentElement.data("kendo" + name);

	            if (!parent) {
	                parent = parentElement.data("kendo" + alternativeNames[name]);
	            }

	            return parent;
	        },

	        _cascade: function() {
	            var that = this;
	            var options = that.options;
	            var cascade = options.cascadeFrom;
	            var parent;

	            if (cascade) {
	                parent = that._parentWidget();

	                if (!parent) {
	                    return;
	                }

	                that._cascadeHandlerProxy = proxy(that._cascadeHandler, that);
	                that._cascadeFilterRequests = [];

	                options.autoBind = false;

	                parent.bind("set", function() { //will cascade
	                    that.one("set", function(e) { //get your value
	                        that._selectedValue = e.value;
	                    });
	                });

	                parent.first(CASCADE, that._cascadeHandlerProxy);

	                //refresh was called
	                if (parent.listView.bound()) {
	                    that._toggleCascadeOnFocus();
	                    that._cascadeSelect(parent);
	                } else {
	                    parent.one("dataBound", function() {
	                        that._toggleCascadeOnFocus();
	                    });

	                    if (!parent.value()) {
	                        that.enable(false);
	                    }
	                }
	            }
	        },

	        _toggleCascadeOnFocus: function() {
	            var that = this;
	            var parent = that._parentWidget();
	            var focusout = isIE ? "blur" : "focusout";

	            parent._focused.add(parent.filterInput).bind("focus", function() {
	                parent.unbind(CASCADE, that._cascadeHandlerProxy);
	                parent.first(CHANGE, that._cascadeHandlerProxy);
	            });

	            parent._focused.add(parent.filterInput).bind(focusout, function() {
	                parent.unbind(CHANGE, that._cascadeHandlerProxy);
	                parent.first(CASCADE, that._cascadeHandlerProxy);
	            });
	        },

	        _cascadeHandler: function(e) {
	            var parent = this._parentWidget();
	            var valueBeforeCascade = this.value();

	            this._userTriggered = e.userTriggered;

	            if (this.listView.bound()) {
	                this._clearSelection(parent, true);
	            }

	            this._cascadeSelect(parent, valueBeforeCascade);
	        },

	        _cascadeChange: function(parent) {
	            var that = this;
	            var value = that._accessor() || that._selectedValue;

	            if (!that._cascadeFilterRequests.length) {
	                that._selectedValue = null;
	            }

	            if (that._userTriggered) {
	                that._clearSelection(parent, true);
	            } else if (value) {
	                if (value !== that.listView.value()[0]) {
	                    that.value(value);
	                }

	                if (!that.dataSource.view()[0] || that.selectedIndex === -1) {
	                    that._clearSelection(parent, true);
	                }
	            } else if (that.dataSource.flatView().length) {
	                that.select(that.options.index);
	            }

	            that.enable();
	            that._triggerCascade();
	            that._triggerChange();
	            that._userTriggered = false;
	        },

	        _cascadeSelect: function(parent, valueBeforeCascade) {
	            var that = this;
	            var dataItem = parent.dataItem();
	            var filterValue = dataItem ? parent._value(dataItem) : null;
	            var valueField = that.options.cascadeFromField || parent.options.dataValueField;
	            var expressions;

	            that._valueBeforeCascade = valueBeforeCascade !== undefined ? valueBeforeCascade : that.value();

	            if (filterValue || filterValue === 0) {
	                expressions = that.dataSource.filter() || {};
	                removeFiltersForField(expressions, valueField);

	                var handler = function () {
	                    var currentHandler = that._cascadeFilterRequests.shift();
	                    if (currentHandler) {
	                        that.unbind('dataBound', currentHandler);
	                    }

	                    currentHandler = that._cascadeFilterRequests[0];
	                    if (currentHandler) {
	                        that.first('dataBound', currentHandler);
	                    }

	                    that._cascadeChange(parent);
	                };

	                that._cascadeFilterRequests.push(handler);

	                if (that._cascadeFilterRequests.length === 1) {
	                    that.first('dataBound', handler);
	                }

	                that._cascading = true;
	                that._filterSource({
	                    field: valueField,
	                    operator: "eq",
	                    value: filterValue
	                });
	                that._cascading = false;
	            } else {
	                that.enable(false);
	                that._clearSelection(parent);
	                that._triggerCascade();
	                that._triggerChange();
	                that._userTriggered = false;
	            }
	        }
	    });

	    var STATIC_LIST_NS = ".StaticList";

	    var StaticList = kendo.ui.DataBoundWidget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            this.element.attr("role", "listbox")
	                        .on("click" + STATIC_LIST_NS, "li", proxy(this._click, this))
	                        .on("mouseenter" + STATIC_LIST_NS, "li", function() { $(this).addClass(HOVER); })
	                        .on("mouseleave" + STATIC_LIST_NS, "li", function() { $(this).removeClass(HOVER); });

	            this.content = this.element.wrap("<div class='k-list-scroller' unselectable='on'></div>").parent();
	            this.header = this.content.before('<div class="k-group-header" style="display:none"></div>').prev();

	            this.bound(false);

	            this._optionID = kendo.guid();

	            this._selectedIndices = [];

	            this._view = [];
	            this._dataItems = [];
	            this._values = [];

	            var value = this.options.value;

	            if (value) {
	                this._values = $.isArray(value) ? value.slice(0) : [value];
	            }

	            this._getter();
	            this._templates();

	            this.setDataSource(this.options.dataSource);

	            this._onScroll = proxy(function() {
	                var that = this;
	                clearTimeout(that._scrollId);

	                that._scrollId = setTimeout(function() {
	                    that._renderHeader();
	                }, 50);
	            }, this);
	        },

	        options: {
	            name: "StaticList",
	            dataValueField: null,
	            valuePrimitive: false,
	            selectable: true,
	            template: null,
	            groupTemplate: null,
	            fixedGroupTemplate: null
	        },

	        events: [
	           "click",
	            CHANGE,
	           "activate",
	           "deactivate",
	           "dataBinding",
	           "dataBound",
	           "selectedItemChange"
	        ],

	        setDataSource: function(source) {
	            var that = this;
	            var dataSource = source || {};
	            var value;

	            dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;
	            dataSource = kendo.data.DataSource.create(dataSource);

	            if (that.dataSource) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);

	                value = that.value();

	                that.value([]);
	                that.bound(false);

	                that.value(value);
	            } else {
	                that._refreshHandler = proxy(that.refresh, that);
	            }

	            that.setDSFilter(dataSource.filter());

	            that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);
	            that._fixedHeader();
	        },

	        skip: function() {
	            return this.dataSource.skip();
	        },

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);

	            this._getter();
	            this._templates();
	            this._render();
	        },

	        destroy: function() {
	            this.element.off(STATIC_LIST_NS);

	            if (this._refreshHandler) {
	                this.dataSource.unbind(CHANGE, this._refreshHandler);
	            }

	            clearTimeout(this._scrollId);

	            Widget.fn.destroy.call(this);
	        },

	        dataItemByIndex: function(index) {
	            return this.dataSource.flatView()[index];
	        },

	        screenHeight: function() {
	            return this.content[0].clientHeight;
	        },

	        scrollToIndex: function(index) {
	            var item = this.element[0].children[index];

	            if (item) {
	                this.scroll(item);
	            }
	        },

	        scrollWith: function(value) {
	            this.content.scrollTop(this.content.scrollTop() + value);
	        },

	        scroll: function (item) {
	            if (!item) {
	                return;
	            }

	            if (item[0]) {
	                item = item[0];
	            }

	            var content = this.content[0],
	                itemOffsetTop = item.offsetTop,
	                itemOffsetHeight = item.offsetHeight,
	                contentScrollTop = content.scrollTop,
	                contentOffsetHeight = content.clientHeight,
	                bottomDistance = itemOffsetTop + itemOffsetHeight;

	                if (contentScrollTop > itemOffsetTop) {
	                    contentScrollTop = itemOffsetTop;
	                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
	                    contentScrollTop = (bottomDistance - contentOffsetHeight);
	                }

	                content.scrollTop = contentScrollTop;
	        },

	        selectedDataItems: function(dataItems) {
	            if (dataItems === undefined) {
	                return this._dataItems.slice();
	            }

	            this._dataItems = dataItems;
	            this._values = this._getValues(dataItems);
	        },

	        _getValues: function(dataItems) {
	            var getter = this._valueGetter;

	            return $.map(dataItems, function(dataItem) {
	                return getter(dataItem);
	            });
	        },

	        focusNext: function() {
	            var current = this.focus();

	            if (!current) {
	                current = 0;
	            } else {
	                current = current.next();
	            }

	            this.focus(current);
	        },

	        focusPrev: function() {
	            var current = this.focus();

	            if (!current) {
	                current = this.element[0].children.length - 1;
	            } else {
	                current = current.prev();
	            }

	            this.focus(current);
	        },

	        focusFirst: function() {
	            this.focus(this.element[0].children[0]);
	        },

	        focusLast: function() {
	            this.focus(last(this.element[0].children));
	        },

	        focus: function(candidate) {
	            var that = this;
	            var id = that._optionID;
	            var hasCandidate;

	            if (candidate === undefined) {
	                return that._current;
	            }

	            candidate = last(that._get(candidate));
	            candidate = $(this.element[0].children[candidate]);

	            if (that._current) {
	                that._current
	                    .removeClass(FOCUSED)
	                    .removeAttr("aria-selected")
	                    .removeAttr(ID);

	                that.trigger("deactivate");
	            }

	            hasCandidate = !!candidate[0];

	            if (hasCandidate) {
	                candidate.addClass(FOCUSED);
	                that.scroll(candidate);

	                candidate.attr("id", id);
	            }

	            that._current = hasCandidate ? candidate : null;
	            that.trigger("activate");
	        },

	        focusIndex: function() {
	            return this.focus() ? this.focus().index() : undefined;
	        },

	        skipUpdate: function(skipUpdate) {
	            this._skipUpdate = skipUpdate;
	        },

	        select: function(indices) {
	            var that = this;
	            var selectable = that.options.selectable;
	            var singleSelection = selectable !== "multiple" && selectable !== false;
	            var selectedIndices = that._selectedIndices;

	            var added = [];
	            var removed = [];
	            var result;

	            if (indices === undefined) {
	                return selectedIndices.slice();
	            }

	            indices = that._get(indices);

	            if (indices.length === 1 && indices[0] === -1) {
	                indices = [];
	            }

	            var deferred = $.Deferred().resolve();
	            var filtered = that.isFiltered();

	            if (filtered && !singleSelection && that._deselectFiltered(indices)) {
	                return deferred;
	            }

	            if (singleSelection && !filtered && $.inArray(last(indices), selectedIndices) !== -1) {
	                if (that._dataItems.length && that._view.length) {
	                    that._dataItems = [that._view[selectedIndices[0]].item];
	                }

	                return deferred;
	            }

	            result = that._deselect(indices);

	            removed = result.removed;
	            indices = result.indices;

	            if (indices.length) {
	                if (singleSelection) {
	                    indices = [last(indices)];
	                }

	                added = that._select(indices);
	            }

	            if (added.length || removed.length) {
	                that._valueComparer = null;
	                that.trigger(CHANGE, {
	                    added: added,
	                    removed: removed
	                });
	            }

	            return deferred;
	        },

	        removeAt: function(position) {
	            this._selectedIndices.splice(position, 1);
	            this._values.splice(position, 1);
	            this._valueComparer = null;

	            return {
	                position: position,
	                dataItem: this._dataItems.splice(position, 1)[0]
	            };
	        },

	        setValue: function(value) {
	            value = $.isArray(value) || value instanceof ObservableArray ? value.slice(0) : [value];

	            this._values = value;

	            this._valueComparer = null;
	        },

	        value: function(value) {
	            var that = this;
	            var deferred = that._valueDeferred;
	            var indices;

	            if (value === undefined) {
	                return that._values.slice();
	            }

	            that.setValue(value);

	            if (!deferred || deferred.state() === "resolved") {
	                that._valueDeferred = deferred = $.Deferred();
	            }

	            if (that.bound()) {
	                indices = that._valueIndices(that._values);

	                if (that.options.selectable === "multiple") {
	                    that.select(-1);
	                }

	                that.select(indices);

	                deferred.resolve();
	            }

	            that._skipUpdate = false;

	            return deferred;
	        },

	        items: function() {
	            return this.element.children(".k-item");
	        },

	        _click: function(e) {
	            if (!e.isDefaultPrevented()) {
	                if (!this.trigger("click", { item: $(e.currentTarget) })) {
	                    this.select(e.currentTarget);
	                }
	            }
	        },

	        _valueExpr: function(type, values) {
	            var that = this;
	            var idx = 0;

	            var body;
	            var comparer;
	            var normalized = [];

	            if (!that._valueComparer  || that._valueType !== type) {
	                that._valueType = type;

	                for (; idx < values.length; idx++) {
	                    normalized.push(unifyType(values[idx], type));
	                }

	                body = "for (var idx = 0; idx < " + normalized.length + "; idx++) {" +
	                        " if (current === values[idx]) {" +
	                        "   return idx;" +
	                        " }" +
	                        "} " +
	                        "return -1;";

	                comparer = new Function("current", "values", body);

	                that._valueComparer = function(current) {
	                    return comparer(current, normalized);
	                };
	            }

	            return that._valueComparer;
	        },

	        _dataItemPosition: function(dataItem, values) {
	            var value = this._valueGetter(dataItem);

	            var valueExpr = this._valueExpr(typeof value, values);

	            return valueExpr(value);
	        },

	        _getter: function() {
	            this._valueGetter = kendo.getter(this.options.dataValueField);
	        },

	        _deselect: function(indices) {
	            var that = this;
	            var children = that.element[0].children;
	            var selectable = that.options.selectable;
	            var selectedIndices = that._selectedIndices;
	            var dataItems = that._dataItems;
	            var values = that._values;
	            var removed = [];
	            var i = 0;
	            var j;

	            var index, selectedIndex;
	            var removedIndices = 0;

	            indices = indices.slice();

	            if (selectable === true || !indices.length) {
	                for (; i < selectedIndices.length; i++) {
	                    $(children[selectedIndices[i]]).removeClass("k-state-selected");

	                    removed.push({
	                        position: i,
	                        dataItem: dataItems[i]
	                    });
	                }

	                that._values = [];
	                that._dataItems = [];
	                that._selectedIndices = [];
	            } else if (selectable === "multiple") {
	                for (; i < indices.length; i++) {
	                    index = indices[i];

	                    if (!$(children[index]).hasClass("k-state-selected")) {
	                        continue;
	                    }

	                    for (j = 0; j < selectedIndices.length; j++) {
	                        selectedIndex = selectedIndices[j];

	                        if (selectedIndex === index) {
	                            $(children[selectedIndex]).removeClass("k-state-selected");

	                            removed.push({
	                                position: j + removedIndices,
	                                dataItem: dataItems.splice(j, 1)[0]
	                            });

	                            selectedIndices.splice(j, 1);
	                            indices.splice(i, 1);
	                            values.splice(j, 1);

	                            removedIndices += 1;
	                            i -= 1;
	                            j -= 1;
	                            break;
	                        }
	                    }
	                }
	            }

	            return {
	                indices: indices,
	                removed: removed
	            };
	        },

	        _deselectFiltered: function(indices) {
	            var children = this.element[0].children;
	            var dataItem, index, position;
	            var removed = [];
	            var idx = 0;

	            for (; idx < indices.length; idx++) {
	                index = indices[idx];
	                dataItem = this._view[index].item;
	                position = this._dataItemPosition(dataItem, this._values);

	                if (position > -1) {
	                    removed.push(this.removeAt(position));
	                    $(children[index]).removeClass("k-state-selected");
	                }
	            }

	            if (removed.length) {
	                this.trigger(CHANGE, {
	                    added: [],
	                    removed: removed
	                });

	                return true;
	            }

	            return false;
	        },

	        _select: function(indices) {
	            var that = this;
	            var children = that.element[0].children;
	            var data = that._view;
	            var dataItem, index;
	            var added = [];
	            var idx = 0;

	            if (last(indices) !== -1) {
	                that.focus(indices);
	            }

	            for (; idx < indices.length; idx++) {
	                index = indices[idx];
	                dataItem = data[index];

	                if (index === -1 || !dataItem) {
	                    continue;
	                }

	                dataItem = dataItem.item;

	                that._selectedIndices.push(index);
	                that._dataItems.push(dataItem);
	                that._values.push(that._valueGetter(dataItem));

	                $(children[index]).addClass("k-state-selected").attr("aria-selected", true);

	                added.push({
	                    dataItem: dataItem
	                });
	            }

	            return added;
	        },

	        getElementIndex: function(element) {
	            return $(element).data("offset-index");
	        },

	        _get: function(candidate) {
	            if (typeof candidate === "number") {
	                candidate = [candidate];
	            } else if (!isArray(candidate)) {
	                candidate = this.getElementIndex(candidate);
	                candidate = [candidate !== undefined ? candidate : -1];
	            }

	            return candidate;
	        },

	        _template: function() {
	            var that = this;
	            var options = that.options;
	            var template = options.template;

	            if (!template) {
	                template = kendo.template('<li tabindex="-1" role="option" unselectable="on" class="k-item">${' + kendo.expr(options.dataTextField, "data") + "}</li>", { useWithBlock: false });
	            } else {
	                template = kendo.template(template);
	                template = function(data) {
	                    return '<li tabindex="-1" role="option" unselectable="on" class="k-item">' + template(data) + "</li>";
	                };
	            }

	            return template;
	        },

	        _templates: function() {
	            var template;
	            var options = this.options;
	            var templates = {
	                template: options.template,
	                groupTemplate: options.groupTemplate,
	                fixedGroupTemplate: options.fixedGroupTemplate
	            };

	            for (var key in templates) {
	                template = templates[key];
	                if (template && typeof template !== "function") {
	                    templates[key] = kendo.template(template);
	                }
	            }

	            this.templates = templates;
	        },

	        _normalizeIndices: function(indices) {
	            var newIndices = [];
	            var idx = 0;

	            for (; idx < indices.length; idx++) {
	                if (indices[idx] !== undefined) {
	                    newIndices.push(indices[idx]);
	                }
	            }

	            return newIndices;
	        },

	        _valueIndices: function(values, indices) {
	            var data = this._view;
	            var idx = 0;
	            var index;

	            indices = indices ? indices.slice() : [];

	            if (!values.length) {
	                return [];
	            }

	            for (; idx < data.length; idx++) {
	                index = this._dataItemPosition(data[idx].item, values);

	                if (index !== -1) {
	                    indices[index] = idx;
	                }
	            }

	            return this._normalizeIndices(indices);
	        },

	        _firstVisibleItem: function() {
	            var element = this.element[0];
	            var content = this.content[0];
	            var scrollTop = content.scrollTop;
	            var itemHeight = $(element.children[0]).height();
	            var itemIndex = Math.floor(scrollTop / itemHeight) || 0;
	            var item = element.children[itemIndex] || element.lastChild;
	            var forward = item.offsetTop < scrollTop;

	            while (item) {
	                if (forward) {
	                    if ((item.offsetTop + itemHeight) > scrollTop || !item.nextSibling) {
	                        break;
	                    }

	                    item = item.nextSibling;
	                } else {
	                    if (item.offsetTop <= scrollTop || !item.previousSibling) {
	                        break;
	                    }

	                    item = item.previousSibling;
	                }
	            }

	            return this._view[$(item).data("offset-index")];
	        },

	        _fixedHeader: function() {
	            if (this.isGrouped() && this.templates.fixedGroupTemplate) {
	                this.header.show();
	                this.content.scroll(this._onScroll);
	            } else {
	                this.header.hide();
	                this.content.off("scroll", this._onScroll);
	            }
	        },

	        _renderHeader: function() {
	            var template = this.templates.fixedGroupTemplate;
	            if (!template) {
	                return;
	            }

	            var visibleItem = this._firstVisibleItem();

	            if (visibleItem) {
	                this.header.html(template(visibleItem.group));
	            }
	        },

	        _renderItem: function(context) {
	            var item = '<li tabindex="-1" role="option" unselectable="on" class="k-item';

	            var dataItem = context.item;
	            var notFirstItem = context.index !== 0;
	            var selected = context.selected;

	            if (notFirstItem && context.newGroup) {
	                item += ' k-first';
	            }

	            if (selected) {
	                item += ' k-state-selected';
	            }

	            item += '"' + (selected ? ' aria-selected="true"' : "") + ' data-offset-index="' + context.index + '">';

	            item += this.templates.template(dataItem);

	            if (notFirstItem && context.newGroup) {
	                item += '<div class="k-group">' + this.templates.groupTemplate(context.group) + '</div>';
	            }

	            return item + "</li>";
	        },

	        _render: function() {
	            var html = "";

	            var i = 0;
	            var idx = 0;
	            var context;
	            var dataContext = [];
	            var view = this.dataSource.view();
	            var values = this.value();

	            var group, newGroup, j;
	            var isGrouped = this.isGrouped();

	            if (isGrouped) {
	                for (i = 0; i < view.length; i++) {
	                    group = view[i];
	                    newGroup = true;

	                    for (j = 0; j < group.items.length; j++) {
	                        context = {
	                            selected: this._selected(group.items[j], values),
	                            item: group.items[j],
	                            group: group.value,
	                            newGroup: newGroup,
	                            index: idx };
	                        dataContext[idx] = context;
	                        idx += 1;

	                        html += this._renderItem(context);
	                        newGroup = false;
	                    }
	                }
	            } else {
	                for (i = 0; i < view.length; i++) {
	                    context = { selected: this._selected(view[i], values), item: view[i], index: i };

	                    dataContext[i] = context;

	                    html += this._renderItem(context);
	                }
	            }

	            this._view = dataContext;

	            this.element[0].innerHTML = html;

	            if (isGrouped && dataContext.length) {
	                this._renderHeader();
	            }
	        },

	        _selected: function(dataItem, values) {
	            var select = !this.isFiltered() || this.options.selectable === "multiple";
	            return select && this._dataItemPosition(dataItem, values) !== -1;
	        },

	        setDSFilter: function(filter) {
	            this._lastDSFilter = extend({}, filter);
	        },

	        isFiltered: function() {
	            if (!this._lastDSFilter) {
	                this.setDSFilter(this.dataSource.filter());
	            }

	            return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);
	        },

	        refresh: function(e) {
	            var that = this;
	            var action = e && e.action;
	            var skipUpdateOnBind = that.options.skipUpdateOnBind;
	            var isItemChange = action === "itemchange";
	            var result;

	            that.trigger("dataBinding");
	            that._angularItems("cleanup");

	            that._fixedHeader();

	            that._render();

	            that.bound(true);

	            if (isItemChange || action === "remove") {
	                result = mapChangedItems(that._dataItems, e.items);

	                if (result.changed.length) {
	                    if (isItemChange) {
	                        that.trigger("selectedItemChange", {
	                            items: result.changed
	                        });
	                    } else {
	                        that.value(that._getValues(result.unchanged));
	                    }
	                }
	            } else if (that.isFiltered() || that._skipUpdate) {
	                that.focus(0);
	                if (that._skipUpdate) {
	                    that._skipUpdate = false;
	                    that._selectedIndices = that._valueIndices(that._values, that._selectedIndices);
	                }
	            } else if (!skipUpdateOnBind && (!action || action === "add")) {
	                that.value(that._values);
	            }

	            if (that._valueDeferred) {
	                that._valueDeferred.resolve();
	            }

	            that._angularItems("compile");
	            that.trigger("dataBound");
	        },

	        bound: function(bound) {
	            if (bound === undefined) {
	                return this._bound;
	            }

	            this._bound = bound;
	        },

	        isGrouped: function() {
	            return (this.dataSource.group() || []).length;
	        }
	    });

	    ui.plugin(StaticList);

	    function last(list) {
	        return list[list.length - 1];
	    }

	    function getSelectedOption(select) {
	        var index = select.selectedIndex;
	        return index > -1 ? select.options[index] : {};
	    }

	    function mapChangedItems(selected, itemsToMatch) {
	        var itemsLength = itemsToMatch.length;
	        var selectedLength = selected.length;
	        var dataItem;
	        var found;
	        var i, j;

	        var changed = [];
	        var unchanged = [];

	        if (selectedLength) {
	            for (i = 0; i < selectedLength; i++) {
	                dataItem = selected[i];
	                found = false;

	                for (j = 0; j < itemsLength; j++) {
	                    if (dataItem === itemsToMatch[j]) {
	                        found = true;
	                        changed.push({ index: i, item: dataItem });
	                        break;
	                    }
	                }

	                if (!found) {
	                    unchanged.push(dataItem);
	                }
	            }
	        }

	        return {
	            changed: changed,
	            unchanged: unchanged
	        };
	    }

	    function isValidFilterExpr(expression) {
	        if (!expression || $.isEmptyObject(expression)) {
	            return false;
	        }

	        if (expression.filters && !expression.filters.length) {
	            return false;
	        }

	        return true;
	    }

	    function removeFiltersForField(expression, field) {
	        var filters;
	        var found = false;

	        if (expression.filters) {
	            filters = $.grep(expression.filters, function(filter) {
	                found = removeFiltersForField(filter, field);
	                if (filter.filters) {
	                    return filter.filters.length;
	                } else {
	                    return filter.field != field;
	                }
	            });

	            if (!found && expression.filters.length !== filters.length) {
	                found = true;
	            }

	            expression.filters = filters;
	        }

	        return found;
	    }

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 24 */
/* unknown exports provided */
/* all exports used */
/*!*****************************!*\
  !*** ./~/debounce/index.js ***!
  \*****************************/
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var now = __webpack_require__(/*! date-now */ 36);

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */

module.exports = function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = now() - timestamp;

    if (last < wait && last > 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    }
  };

  return function debounced() {
    context = this;
    args = arguments;
    timestamp = now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };
};


/***/ }),
/* 25 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./~/events/events.js ***!
  \****************************/
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 26 */
/* unknown exports provided */
/* all exports used */
/*!*********************!*\
  !*** external "qs" ***!
  \*********************/
/***/ (function(module, exports) {

module.exports = require("qs");

/***/ }),
/* 27 */
/* unknown exports provided */
/* all exports used */
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ (function(module, exports) {

module.exports = require("uuid");

/***/ }),
/* 28 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.binder.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(590);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 581:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data */ 6);

/***/ },

/***/ 590:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(581) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "binder",
	    name: "MVVM",
	    category: "framework",
	    description: "Model View ViewModel (MVVM) is a design pattern which helps developers separate the Model (the data) from the View (the UI).",
	    depends: [ "core", "data" ]
	};

	/*jshint eqnull: true */
	(function ($, undefined) {
	    var kendo = window.kendo,
	        Observable = kendo.Observable,
	        ObservableObject = kendo.data.ObservableObject,
	        ObservableArray = kendo.data.ObservableArray,
	        toString = {}.toString,
	        binders = {},
	        Class = kendo.Class,
	        proxy = $.proxy,
	        VALUE = "value",
	        SOURCE = "source",
	        EVENTS = "events",
	        CHECKED = "checked",
	        CSS = "css",
	        deleteExpando = true,
	        FUNCTION = "function",
	        CHANGE = "change";

	    (function() {
	        var a = document.createElement("a");

	        try {
	            delete a.test;
	        } catch(e) {
	            deleteExpando = false;
	        }
	    })();

	    var Binding = Observable.extend( {
	        init: function(parents, path) {
	            var that = this;

	            Observable.fn.init.call(that);

	            that.source = parents[0];
	            that.parents = parents;
	            that.path = path;
	            that.dependencies = {};
	            that.dependencies[path] = true;
	            that.observable = that.source instanceof Observable;

	            that._access = function(e) {
	                that.dependencies[e.field] = true;
	            };

	            if (that.observable) {
	                that._change = function(e) {
	                    that.change(e);
	                };

	                that.source.bind(CHANGE, that._change);
	            }
	        },

	        _parents: function() {
	            var parents = this.parents;
	            var value = this.get();

	            if (value && typeof value.parent == "function") {
	                var parent = value.parent();

	                if ($.inArray(parent, parents) < 0) {
	                    parents = [parent].concat(parents);
	                }
	            }

	            return parents;
	        },

	        change: function(e) {
	            var dependency,
	                ch,
	                field = e.field,
	                that = this;

	            if (that.path === "this") {
	                that.trigger(CHANGE, e);
	            } else {
	                for (dependency in that.dependencies) {
	                    if (dependency.indexOf(field) === 0) {
	                       ch = dependency.charAt(field.length);

	                       if (!ch || ch === "." || ch === "[") {
	                            that.trigger(CHANGE, e);
	                            break;
	                       }
	                    }
	                }
	            }
	        },

	        start: function(source) {
	            source.bind("get", this._access);
	        },

	        stop: function(source) {
	            source.unbind("get", this._access);
	        },

	        get: function() {

	            var that = this,
	                source = that.source,
	                index = 0,
	                path = that.path,
	                result = source;

	            if (!that.observable) {
	                return result;
	            }

	            that.start(that.source);

	            result = source.get(path);

	            // Traverse the observable hierarchy if the binding is not resolved at the current level.
	            while (result === undefined && source) {

	                source = that.parents[++index];

	                if (source instanceof ObservableObject) {
	                    result = source.get(path);
	                }
	            }

	            // second pass try to get the parent from the object hierarchy
	            if (result === undefined) {
	                source = that.source; //get the initial source

	                while (result === undefined && source) {
	                    source = source.parent();

	                    if (source instanceof ObservableObject) {
	                        result = source.get(path);
	                    }
	                }
	            }

	            // If the result is a function - invoke it
	            if (typeof result === "function") {
	                index = path.lastIndexOf(".");

	                // If the function is a member of a nested observable object make that nested observable the context (this) of the function
	                if (index > 0) {
	                    source = source.get(path.substring(0, index));
	                }

	                // Invoke the function
	                that.start(source);

	                if (source !== that.source) {
	                    result = result.call(source, that.source);
	                } else {
	                    result = result.call(source);
	                }

	                that.stop(source);
	            }

	            // If the binding is resolved by a parent object
	            if (source && source !== that.source) {

	                that.currentSource = source; // save parent object

	                // Listen for changes in the parent object
	                source.unbind(CHANGE, that._change)
	                      .bind(CHANGE, that._change);
	            }

	            that.stop(that.source);

	            return result;
	        },

	        set: function(value) {
	            var source = this.currentSource || this.source;

	            var field = kendo.getter(this.path)(source);

	            if (typeof field === "function") {
	                if (source !== this.source) {
	                    field.call(source, this.source, value);
	                } else {
	                    field.call(source, value);
	                }
	            } else {
	                source.set(this.path, value);
	            }
	        },

	        destroy: function() {
	            if (this.observable) {
	                this.source.unbind(CHANGE, this._change);
	                if(this.currentSource) {
	                    this.currentSource.unbind(CHANGE, this._change);
	                }
	            }

	            this.unbind();
	        }
	    });

	    var EventBinding = Binding.extend( {
	        get: function() {
	            var source = this.source,
	                path = this.path,
	                index = 0,
	                handler;

	            handler = source.get(path);

	            while (!handler && source) {
	                source = this.parents[++index];

	                if (source instanceof ObservableObject) {
	                    handler = source.get(path);
	                }
	            }

	            return proxy(handler, source);
	        }
	    });

	    var TemplateBinding = Binding.extend( {
	        init: function(source, path, template) {
	            var that = this;

	            Binding.fn.init.call(that, source, path);

	            that.template = template;
	        },

	        render: function(value) {
	            var html;

	            this.start(this.source);

	            html = kendo.render(this.template, value);

	            this.stop(this.source);

	            return html;
	        }
	    });

	    var Binder = Class.extend({
	        init: function(element, bindings, options) {
	            this.element = element;
	            this.bindings = bindings;
	            this.options = options;
	        },

	        bind: function(binding, attribute) {
	            var that = this;

	            binding = attribute ? binding[attribute] : binding;

	            binding.bind(CHANGE, function(e) {
	                that.refresh(attribute || e);
	            });

	            that.refresh(attribute);
	        },

	        destroy: function() {
	        }
	    });

	    var TypedBinder = Binder.extend({
	        dataType: function() {
	            var dataType = this.element.getAttribute("data-type") || this.element.type || "text";
	            return dataType.toLowerCase();
	        },

	        parsedValue: function() {
	            return this._parseValue(this.element.value, this.dataType());
	        },

	        _parseValue: function (value, dataType){
	            if (dataType == "date") {
	                value = kendo.parseDate(value, "yyyy-MM-dd");
	            } else if (dataType == "datetime-local") {
	                value = kendo.parseDate(value, ["yyyy-MM-ddTHH:mm:ss", "yyyy-MM-ddTHH:mm"] );
	            } else if (dataType == "number") {
	                value = kendo.parseFloat(value);
	            } else if (dataType == "boolean"){
	                value = value.toLowerCase();
	                if(kendo.parseFloat(value) !== null){
	                    value = Boolean(kendo.parseFloat(value));
	                }else{
	                    value = (value.toLowerCase() === "true");
	                }
	            }
	            return value;
	        }
	    });

	    binders.attr = Binder.extend({
	        refresh: function(key) {
	            this.element.setAttribute(key, this.bindings.attr[key].get());
	        }
	    });

	    binders.css = Binder.extend({
	        init: function(element, bindings, options) {
	            Binder.fn.init.call(this, element, bindings, options);
	            this.classes = {};
	        },
	        refresh: function(className) {
	            var element = $(this.element),
	                binding = this.bindings.css[className],
	                hasClass = this.classes[className] = binding.get();
	            if(hasClass){
	                element.addClass(className);
	            }else{
	                element.removeClass(className);
	            }
	        }
	    });

	    binders.style = Binder.extend({
	        refresh: function(key) {
	            this.element.style[key] = this.bindings.style[key].get() || "";
	        }
	    });

	    binders.enabled = Binder.extend({
	        refresh: function() {
	            if (this.bindings.enabled.get()) {
	                this.element.removeAttribute("disabled");
	            } else {
	                this.element.setAttribute("disabled", "disabled");
	            }
	        }
	    });

	    binders.readonly = Binder.extend({
	       refresh: function() {
	            if (this.bindings.readonly.get()) {
	                this.element.setAttribute("readonly", "readonly");
	            } else {
	                this.element.removeAttribute("readonly");
	            }
	       }
	    });

	    binders.disabled = Binder.extend({
	        refresh: function() {
	            if (this.bindings.disabled.get()) {
	                this.element.setAttribute("disabled", "disabled");
	            } else {
	                this.element.removeAttribute("disabled");
	            }
	        }
	    });

	    binders.events = Binder.extend({
	        init: function(element, bindings, options) {
	            Binder.fn.init.call(this, element, bindings, options);
	            this.handlers = {};
	        },

	        refresh: function(key) {
	            var element = $(this.element),
	                binding = this.bindings.events[key],
	                handler = this.handlers[key];

	            if (handler) {
	                element.off(key, handler);
	            }

	            handler = this.handlers[key] = binding.get();

	            element.on(key, binding.source, handler);
	        },

	        destroy: function() {
	            var element = $(this.element),
	                handler;

	            for (handler in this.handlers) {
	                element.off(handler, this.handlers[handler]);
	            }
	        }
	    });

	    binders.text = Binder.extend({
	        refresh: function() {
	            var text = this.bindings.text.get();
	            var dataFormat = this.element.getAttribute("data-format") || "";
	            if (text == null) {
	                text = "";
	            }

	            $(this.element).text(kendo.toString(text, dataFormat));
	        }
	    });

	    binders.visible = Binder.extend({
	        refresh: function() {
	            if (this.bindings.visible.get()) {
	                this.element.style.display = "";
	            } else {
	                this.element.style.display = "none";
	            }
	        }
	    });

	    binders.invisible = Binder.extend({
	        refresh: function() {
	            if (!this.bindings.invisible.get()) {
	                this.element.style.display = "";
	            } else {
	                this.element.style.display = "none";
	            }
	        }
	  });

	    binders.html = Binder.extend({
	        refresh: function() {
	            this.element.innerHTML = this.bindings.html.get();
	        }
	    });

	    binders.value = TypedBinder.extend({
	        init: function(element, bindings, options) {
	            TypedBinder.fn.init.call(this, element, bindings, options);

	            this._change = proxy(this.change, this);
	            this.eventName = options.valueUpdate || CHANGE;

	            $(this.element).on(this.eventName, this._change);

	            this._initChange = false;
	        },

	        change: function() {
	            this._initChange = this.eventName != CHANGE;

	            this.bindings[VALUE].set(this.parsedValue());

	            this._initChange = false;
	        },

	        refresh: function() {
	            if (!this._initChange) {
	                var value = this.bindings[VALUE].get();

	                if (value == null) {
	                    value = "";
	                }

	                var type = this.dataType();

	                if (type == "date") {
	                    value = kendo.toString(value, "yyyy-MM-dd");
	                } else if (type == "datetime-local") {
	                    value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");
	                }

	                this.element.value = value;
	            }

	            this._initChange = false;
	        },

	        destroy: function() {
	            $(this.element).off(this.eventName, this._change);
	        }
	    });

	    binders.source = Binder.extend({
	        init: function(element, bindings, options) {
	            Binder.fn.init.call(this, element, bindings, options);

	            var source = this.bindings.source.get();

	            if (source instanceof kendo.data.DataSource && options.autoBind !== false) {
	                source.fetch();
	            }
	        },

	        refresh: function(e) {
	            var that = this,
	                source = that.bindings.source.get();

	            if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {
	                e = e || {};

	                if (e.action == "add") {
	                    that.add(e.index, e.items);
	                } else if (e.action == "remove") {
	                    that.remove(e.index, e.items);
	                } else if (e.action != "itemchange") {
	                    that.render();
	                }
	            } else {
	                that.render();
	            }
	        },

	        container: function() {
	            var element = this.element;

	            if (element.nodeName.toLowerCase() == "table") {
	                if (!element.tBodies[0]) {
	                    element.appendChild(document.createElement("tbody"));
	                }
	                element = element.tBodies[0];
	            }

	            return element;
	        },

	        template: function() {
	            var options = this.options,
	                template = options.template,
	                nodeName = this.container().nodeName.toLowerCase();

	            if (!template) {
	                if (nodeName == "select") {
	                    if (options.valueField || options.textField) {
	                        template = kendo.format('<option value="#:{0}#">#:{1}#</option>',
	                            options.valueField || options.textField, options.textField || options.valueField);
	                    } else {
	                        template = "<option>#:data#</option>";
	                    }
	                } else if (nodeName == "tbody") {
	                    template = "<tr><td>#:data#</td></tr>";
	                } else if (nodeName == "ul" || nodeName == "ol") {
	                    template = "<li>#:data#</li>";
	                } else {
	                    template = "#:data#";
	                }
	                template = kendo.template(template);
	            }

	            return template;
	        },

	        add: function(index, items) {
	            var element = this.container(),
	                parents,
	                idx,
	                length,
	                child,
	                clone = element.cloneNode(false),
	                reference = element.children[index];

	            $(clone).html(kendo.render(this.template(), items));

	            if (clone.children.length) {
	                parents = this.bindings.source._parents();

	                for (idx = 0, length = items.length; idx < length; idx++) {
	                    child = clone.children[0];
	                    element.insertBefore(child, reference || null);
	                    bindElement(child, items[idx], this.options.roles, [items[idx]].concat(parents));
	                }
	            }
	        },

	        remove: function(index, items) {
	            var idx, element = this.container();

	            for (idx = 0; idx < items.length; idx++) {
	                var child = element.children[index];
	                unbindElementTree(child, true);
	                if (child.parentNode == element) {
	                    element.removeChild(child);
	                }
	            }
	        },

	        render: function() {
	            var source = this.bindings.source.get(),
	                parents,
	                idx,
	                length,
	                element = this.container(),
	                template = this.template();

	            if (source == null) {
	                return;
	            }

	            if (source instanceof kendo.data.DataSource) {
	                source = source.view();
	            }

	            if (!(source instanceof ObservableArray) && toString.call(source) !== "[object Array]") {
	                source = [source];
	            }

	            if (this.bindings.template) {
	                unbindElementChildren(element, true);

	                $(element).html(this.bindings.template.render(source));

	                if (element.children.length) {
	                    parents = this.bindings.source._parents();

	                    for (idx = 0, length = source.length; idx < length; idx++) {
	                        bindElement(element.children[idx], source[idx], this.options.roles, [source[idx]].concat(parents));
	                    }
	                }
	            } else {
	                $(element).html(kendo.render(template, source));
	            }
	        }
	    });

	    binders.input = {
	        checked: TypedBinder.extend({
	            init: function(element, bindings, options) {
	                TypedBinder.fn.init.call(this, element, bindings, options);
	                this._change = proxy(this.change, this);

	                $(this.element).change(this._change);
	            },

	            change: function() {
	                var element = this.element;
	                var value = this.value();

	                if (element.type == "radio") {
	                    value = this.parsedValue();
	                    this.bindings[CHECKED].set(value);
	                } else if (element.type == "checkbox") {
	                    var source = this.bindings[CHECKED].get();
	                    var index;

	                    if (source instanceof ObservableArray) {
	                        value = this.parsedValue();
	                        if (value instanceof Date) {
	                            for(var i = 0; i < source.length; i++){
	                                if(source[i] instanceof Date && +source[i] === +value){
	                                    index = i;
	                                    break;
	                                }
	                            }
	                        }else{
	                            index = source.indexOf(value);
	                        }
	                        if (index > -1) {
	                            source.splice(index, 1);
	                        } else {
	                            source.push(value);
	                        }
	                    } else {
	                        this.bindings[CHECKED].set(value);
	                    }
	                }
	            },

	            refresh: function() {
	                var value = this.bindings[CHECKED].get(),
	                    source = value,
	                    type = this.dataType(),
	                    element = this.element;

	                if (element.type == "checkbox") {
	                    if (source instanceof ObservableArray) {
	                        var index = -1;
	                        value = this.parsedValue();
	                        if(value instanceof Date){
	                            for(var i = 0; i < source.length; i++){
	                                if(source[i] instanceof Date && +source[i] === +value){
	                                    index = i;
	                                    break;
	                                }
	                            }
	                        }else{
	                            index = source.indexOf(value);
	                        }
	                        element.checked = (index >= 0);
	                    }else{
	                        element.checked = source;
	                    }
	                } else if (element.type == "radio" && value != null) {
	                    if (type == "date") {
	                        value = kendo.toString(value, "yyyy-MM-dd");
	                    } else if (type == "datetime-local") {
	                        value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");
	                    }
	                    if (element.value === value.toString()) {
	                        element.checked = true;
	                    }else{
	                        element.checked = false;
	                    }
	                }
	            },

	            value: function() {
	                var element = this.element,
	                    value = element.value;

	                if (element.type == "checkbox") {
	                    value = element.checked;
	                }

	                return value;
	            },
	            destroy: function() {
	                $(this.element).off(CHANGE, this._change);
	            }
	        })
	    };

	    binders.select = {
	        source: binders.source.extend({
	            refresh: function(e) {
	                var that = this,
	                    source = that.bindings.source.get();

	                if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {
	                    e = e || {};
	                    if (e.action == "add") {
	                        that.add(e.index, e.items);
	                    } else if (e.action == "remove") {
	                        that.remove(e.index, e.items);
	                    } else if (e.action == "itemchange" || e.action === undefined) {
	                        that.render();
	                        if(that.bindings.value){
	                            if (that.bindings.value) {
	                                var val = retrievePrimitiveValues(that.bindings.value.get(), $(that.element).data("valueField"));
	                                if(val === null) {
	                                    that.element.selectedIndex = -1;
	                                } else {
	                                    that.element.value = val;
	                                }
	                            }
	                        }
	                    }
	                } else {
	                    that.render();
	                }
	            }
	        }),
	        value: TypedBinder.extend({
	            init: function(target, bindings, options) {
	                TypedBinder.fn.init.call(this, target, bindings, options);

	                this._change = proxy(this.change, this);
	                $(this.element).change(this._change);
	            },

	            parsedValue : function() {
	                var dataType = this.dataType();
	                var values = [];
	                var value, option, idx, length;
	                for (idx = 0, length = this.element.options.length; idx < length; idx++) {
	                    option = this.element.options[idx];

	                    if (option.selected) {
	                        value = option.attributes.value;

	                        if (value && value.specified) {
	                            value = option.value;
	                        } else {
	                            value = option.text;
	                        }

	                        values.push(this._parseValue(value, dataType));
	                    }
	                }
	                return values;
	            },

	            change: function() {
	                var values = [],
	                    element = this.element,
	                    source,
	                    field = this.options.valueField || this.options.textField,
	                    valuePrimitive = this.options.valuePrimitive,
	                    option,
	                    valueIndex,
	                    value,
	                    idx,
	                    length;

	                for (idx = 0, length = element.options.length; idx < length; idx++) {
	                    option = element.options[idx];

	                    if (option.selected) {
	                        value = option.attributes.value;

	                        if (value && value.specified) {
	                            value = option.value;
	                        } else {
	                            value = option.text;
	                        }

	                        if (field) {
	                            values.push(value);
	                        } else {
	                            values.push(this._parseValue(value, this.dataType()));
	                        }

	                    }
	                }

	                if (field) {
	                    source = this.bindings.source.get();
	                    if (source instanceof kendo.data.DataSource) {
	                        source = source.view();
	                    }

	                    for (valueIndex = 0; valueIndex < values.length; valueIndex++) {
	                        for (idx = 0, length = source.length; idx < length; idx++) {
	                            var sourceValue = source[idx].get(field);
	                            var match = (String(sourceValue) === values[valueIndex]);
	                            if (match) {
	                                values[valueIndex] = source[idx];
	                                break;
	                            }
	                        }
	                    }
	                }

	                value = this.bindings[VALUE].get();
	                if (value instanceof ObservableArray) {
	                    value.splice.apply(value, [0, value.length].concat(values));
	                } else if (!valuePrimitive && (value instanceof ObservableObject || value === null || value === undefined || !field)) {
	                    this.bindings[VALUE].set(values[0]);
	                } else {
	                    this.bindings[VALUE].set(values[0].get(field));
	                }
	            },
	            refresh: function() {
	                var optionIndex,
	                    element = this.element,
	                    options = element.options,
	                    value = this.bindings[VALUE].get(),
	                    values = value,
	                    field = this.options.valueField || this.options.textField,
	                    found = false,
	                    type = this.dataType(),
	                    optionValue;

	                if (!(values instanceof ObservableArray)) {
	                    values = new ObservableArray([value]);
	                }

	                element.selectedIndex = -1;

	                for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
	                    value = values[valueIndex];


	                    if (field && value instanceof ObservableObject) {
	                        value = value.get(field);
	                    }

	                    if (type == "date") {
	                        value = kendo.toString(values[valueIndex], "yyyy-MM-dd");
	                    } else if (type == "datetime-local") {
	                        value = kendo.toString(values[valueIndex], "yyyy-MM-ddTHH:mm:ss");
	                    }

	                    for (optionIndex = 0; optionIndex < options.length; optionIndex++) {
	                        optionValue = options[optionIndex].value;

	                        if (optionValue === "" && value !== "") {
	                            optionValue = options[optionIndex].text;
	                        }

	                        if (value != null && optionValue == value.toString()) {
	                            options[optionIndex].selected = true;
	                            found = true;
	                        }
	                    }
	                }
	            },
	            destroy: function() {
	                $(this.element).off(CHANGE, this._change);
	            }
	        })
	    };

	    function dataSourceBinding(bindingName, fieldName, setter) {
	        return Binder.extend({
	            init: function(widget, bindings, options) {
	                var that = this;

	                Binder.fn.init.call(that, widget.element[0], bindings, options);

	                that.widget = widget;
	                that._dataBinding = proxy(that.dataBinding, that);
	                that._dataBound = proxy(that.dataBound, that);
	                that._itemChange = proxy(that.itemChange, that);
	            },

	            itemChange: function(e) {
	                bindElement(e.item[0], e.data, this._ns(e.ns), [e.data].concat(this.bindings[bindingName]._parents()));
	            },

	            dataBinding: function(e) {
	                var idx,
	                    length,
	                    widget = this.widget,
	                    items = e.removedItems || widget.items();

	                for (idx = 0, length = items.length; idx < length; idx++) {
	                    unbindElementTree(items[idx], false);
	                }
	            },

	            _ns: function(ns) {
	                ns = ns || kendo.ui;
	                var all = [ kendo.ui, kendo.dataviz.ui, kendo.mobile.ui ];
	                all.splice($.inArray(ns, all), 1);
	                all.unshift(ns);

	                return kendo.rolesFromNamespaces(all);
	            },

	            dataBound: function(e) {
	                var idx,
	                    length,
	                    widget = this.widget,
	                    items = e.addedItems || widget.items(),
	                    dataSource = widget[fieldName],
	                    view,
	                    parents,
	                    hds = kendo.data.HierarchicalDataSource;

	                if (hds && dataSource instanceof hds) {
	                    // suppress binding of HDS items, because calling view() on root
	                    // will return only root items, and widget.items() returns all items
	                    return;
	                }

	                if (items.length) {
	                    view = e.addedDataItems || dataSource.flatView();
	                    parents = this.bindings[bindingName]._parents();

	                    for (idx = 0, length = view.length; idx < length; idx++) {
	                        bindElement(items[idx], view[idx], this._ns(e.ns), [view[idx]].concat(parents));
	                    }
	                }
	            },

	            refresh: function(e) {
	                var that = this,
	                    source,
	                    widget = that.widget,
	                    select, multiselect;

	                e = e || {};

	                if (!e.action) {
	                    that.destroy();

	                    widget.bind("dataBinding", that._dataBinding);
	                    widget.bind("dataBound", that._dataBound);
	                    widget.bind("itemChange", that._itemChange);

	                    source = that.bindings[bindingName].get();

	                    if (widget[fieldName] instanceof kendo.data.DataSource && widget[fieldName] != source) {
	                        if (source instanceof kendo.data.DataSource) {
	                            widget[setter](source);
	                        } else if (source && source._dataSource) {
	                            widget[setter](source._dataSource);
	                        } else {
	                            widget[fieldName].data(source);

	                            select = kendo.ui.Select && widget instanceof kendo.ui.Select;
	                            multiselect = kendo.ui.MultiSelect && widget instanceof kendo.ui.MultiSelect;

	                            if (that.bindings.value && (select || multiselect)) {
	                                widget.value(retrievePrimitiveValues(that.bindings.value.get(), widget.options.dataValueField));
	                            }
	                        }
	                    }
	                }
	            },

	            destroy: function() {
	                var widget = this.widget;

	                widget.unbind("dataBinding", this._dataBinding);
	                widget.unbind("dataBound", this._dataBound);
	                widget.unbind("itemChange", this._itemChange);
	            }
	        });
	    }

	    binders.widget = {
	        events : Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);
	                this.widget = widget;
	                this.handlers = {};
	            },

	            refresh: function(key) {
	                var binding = this.bindings.events[key],
	                    handler = this.handlers[key];

	                if (handler) {
	                    this.widget.unbind(key, handler);
	                }

	                handler = binding.get();

	                this.handlers[key] = function(e) {
	                    e.data = binding.source;

	                    handler(e);

	                    if (e.data === binding.source) {
	                        delete e.data;
	                    }
	                };

	                this.widget.bind(key, this.handlers[key]);
	            },

	            destroy: function() {
	                var handler;

	                for (handler in this.handlers) {
	                    this.widget.unbind(handler, this.handlers[handler]);
	                }
	            }
	        }),

	        checked: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	                this._change = proxy(this.change, this);
	                this.widget.bind(CHANGE, this._change);
	            },
	            change: function() {
	                this.bindings[CHECKED].set(this.value());
	            },

	            refresh: function() {
	                this.widget.check(this.bindings[CHECKED].get() === true);
	            },

	            value: function() {
	                var element = this.element,
	                    value = element.value;

	                if (value == "on" || value == "off") {
	                    value = element.checked;
	                }

	                return value;
	            },

	            destroy: function() {
	                this.widget.unbind(CHANGE, this._change);
	            }
	        }),

	        visible: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                var visible = this.bindings.visible.get();
	                this.widget.wrapper[0].style.display = visible ? "" : "none";
	            }
	        }),

	        invisible: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                var invisible = this.bindings.invisible.get();
	                this.widget.wrapper[0].style.display = invisible ? "none" : "";
	            }
	        }),

	        enabled: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                if (this.widget.enable) {
	                    this.widget.enable(this.bindings.enabled.get());
	                }
	            }
	        }),

	        disabled: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                if (this.widget.enable) {
	                    this.widget.enable(!this.bindings.disabled.get());
	                }
	            }
	        }),

	        source: dataSourceBinding("source", "dataSource", "setDataSource"),

	        value: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	                this._change = $.proxy(this.change, this);
	                this.widget.first(CHANGE, this._change);

	                var value = this.bindings.value.get();

	                this._valueIsObservableObject = !options.valuePrimitive && (value == null || value instanceof ObservableObject);
	                this._valueIsObservableArray = value instanceof ObservableArray;
	                this._initChange = false;
	            },

	            _source: function() {
	                var source;

	                if (this.widget.dataItem) {
	                    source = this.widget.dataItem();
	                    if (source && source instanceof ObservableObject) {
	                        return [source];
	                    }
	                }

	                if (this.bindings.source) {
	                    source = this.bindings.source.get();
	                }

	                if (!source || source instanceof kendo.data.DataSource) {
	                    source = this.widget.dataSource.flatView();
	                }

	                return source;
	            },

	            change: function() {
	                var value = this.widget.value(),
	                    field = this.options.dataValueField || this.options.dataTextField,
	                    isArray = toString.call(value) === "[object Array]",
	                    isObservableObject = this._valueIsObservableObject,
	                    valueIndex, valueLength, values = [],
	                    sourceItem, sourceValue,
	                    idx, length, source;

	                this._initChange = true;

	                if (field) {

	                    if (value === "" && (isObservableObject || this.options.valuePrimitive)) {
	                        value = null;
	                    } else {
	                        source = this._source();

	                        if (isArray) {
	                            valueLength = value.length;
	                            values = value.slice(0);
	                        }

	                        for (idx = 0, length = source.length; idx < length; idx++) {
	                            sourceItem = source[idx];
	                            sourceValue = sourceItem.get(field);

	                            if (isArray) {
	                                for (valueIndex = 0; valueIndex < valueLength; valueIndex++) {
	                                    if (sourceValue == values[valueIndex]) {
	                                        values[valueIndex] = sourceItem;
	                                        break;
	                                    }
	                                }
	                            } else if (sourceValue == value) {
	                                value = isObservableObject ? sourceItem : sourceValue;
	                                break;
	                            }
	                        }

	                        if (values[0]) {
	                            if (this._valueIsObservableArray) {
	                                value = values;
	                            } else if (isObservableObject || !field) {
	                                value = values[0];
	                            } else {
	                                value = values[0].get(field);
	                            }
	                        }
	                    }
	                }

	                this.bindings.value.set(value);
	                this._initChange = false;
	            },

	            refresh: function() {
	                if (!this._initChange) {
	                    var widget = this.widget;
	                    var options = widget.options;
	                    var textField = options.dataTextField;
	                    var valueField = options.dataValueField || textField;
	                    var value = this.bindings.value.get();
	                    var text = options.text || "";
	                    var idx = 0, length;
	                    var values = [];

	                    if (value === undefined) {
	                        value = null;
	                    }

	                    if (valueField) {
	                        if (value instanceof ObservableArray) {
	                            for (length = value.length; idx < length; idx++) {
	                                values[idx] = value[idx].get(valueField);
	                            }
	                            value = values;
	                        } else if (value instanceof ObservableObject) {
	                            text = value.get(textField);
	                            value = value.get(valueField);
	                        }
	                    }

	                    if (options.autoBind === false && !options.cascadeFrom && widget.listView && !widget.listView.bound()) {
	                        if (textField === valueField && !text) {
	                            text = value;
	                        }

	                        if (!text && (value || value === 0) && options.valuePrimitive) {
	                            widget.value(value);
	                        } else {
	                            widget._preselect(value, text);
	                        }
	                    } else {
	                        widget.value(value);
	                    }
	                }

	                this._initChange = false;
	            },

	            destroy: function() {
	                this.widget.unbind(CHANGE, this._change);
	            }
	        }),

	        gantt: {
	            dependencies: dataSourceBinding("dependencies", "dependencies", "setDependenciesDataSource")
	        },

	        multiselect: {
	            value: Binder.extend({
	                init: function(widget, bindings, options) {
	                    Binder.fn.init.call(this, widget.element[0], bindings, options);

	                    this.widget = widget;
	                    this._change = $.proxy(this.change, this);
	                    this.widget.first(CHANGE, this._change);
	                    this._initChange = false;
	                },

	                change: function() {
	                    var that = this,
	                        oldValues = that.bindings[VALUE].get(),
	                        valuePrimitive = that.options.valuePrimitive,
	                        newValues = valuePrimitive ? that.widget.value() : that.widget.dataItems();

	                    var field = this.options.dataValueField || this.options.dataTextField;

	                    newValues = newValues.slice(0);

	                    that._initChange = true;

	                    if (oldValues instanceof ObservableArray) {
	                        var remove = [];

	                        var newLength = newValues.length;

	                        var i = 0, j = 0;
	                        var old = oldValues[i];
	                        var same = false;
	                        var removeIndex;
	                        var newValue;
	                        var found;

	                        while (old !== undefined) {
	                            found = false;
	                            for (j = 0; j < newLength; j++) {
	                                if (valuePrimitive) {
	                                    same = newValues[j] == old;
	                                } else {
	                                    newValue = newValues[j];

	                                    newValue = newValue.get ? newValue.get(field) : newValue;
	                                    same = newValue == (old.get ? old.get(field) : old);
	                                }

	                                if (same) {
	                                    newValues.splice(j, 1);
	                                    newLength -= 1;
	                                    found = true;
	                                    break;
	                                }
	                            }

	                            if (!found) {
	                                remove.push(old);
	                                arraySplice(oldValues, i, 1);
	                                removeIndex = i;
	                            } else {
	                                i += 1;
	                            }

	                            old = oldValues[i];
	                        }

	                        arraySplice(oldValues, oldValues.length, 0, newValues);

	                        if (remove.length) {
	                            oldValues.trigger("change", {
	                                action: "remove",
	                                items: remove,
	                                index: removeIndex
	                            });
	                        }

	                        if (newValues.length) {
	                            oldValues.trigger("change", {
	                                action: "add",
	                                items: newValues,
	                                index: oldValues.length - 1
	                            });
	                        }
	                    } else {
	                        that.bindings[VALUE].set(newValues);
	                    }

	                    that._initChange = false;
	                },

	                refresh: function() {
	                    if (!this._initChange) {
	                        var options = this.options,
	                            widget = this.widget,
	                            field = options.dataValueField || options.dataTextField,
	                            value = this.bindings.value.get(),
	                            data = value,
	                            idx = 0, length,
	                            values = [],
	                            selectedValue;

	                        if (value === undefined) {
	                            value = null;
	                        }

	                        if (field) {
	                            if (value instanceof ObservableArray) {
	                                for (length = value.length; idx < length; idx++) {
	                                    selectedValue = value[idx];
	                                    values[idx] = selectedValue.get ? selectedValue.get(field) : selectedValue;
	                                }
	                                value = values;
	                            } else if (value instanceof ObservableObject) {
	                                value = value.get(field);
	                            }
	                        }

	                        if (options.autoBind === false && options.valuePrimitive !== true && !widget._isBound()) {
	                            widget._preselect(data, value);
	                        } else {
	                            widget.value(value);
	                        }
	                    }
	                },

	                destroy: function() {
	                    this.widget.unbind(CHANGE, this._change);
	                }

	            })
	        },
	        scheduler: {
	            source: dataSourceBinding("source", "dataSource", "setDataSource").extend({
	                dataBound: function(e) {
	                    var idx;
	                    var length;
	                    var widget = this.widget;
	                    var elements = e.addedItems || widget.items();
	                    var data, parents;

	                    if (elements.length) {
	                        data = e.addedDataItems || widget.dataItems();
	                        parents = this.bindings.source._parents();

	                        for (idx = 0, length = data.length; idx < length; idx++) {
	                            bindElement(elements[idx], data[idx], this._ns(e.ns), [data[idx]].concat(parents));
	                        }
	                    }
	                }
	            })
	        }
	    };

	    var arraySplice = function(arr, idx, remove, add) {
	        add = add || [];
	        remove = remove || 0;

	        var addLength = add.length;
	        var oldLength = arr.length;

	        var shifted = [].slice.call(arr, idx + remove);
	        var shiftedLength = shifted.length;
	        var index;

	        if (addLength) {
	            addLength = idx + addLength;
	            index = 0;

	            for (; idx < addLength; idx++) {
	                arr[idx] = add[index];
	                index++;
	            }

	            arr.length = addLength;
	        } else if (remove) {
	            arr.length = idx;

	            remove += idx;
	            while (idx < remove) {
	                delete arr[--remove];
	            }
	        }

	        if (shiftedLength) {
	            shiftedLength = idx + shiftedLength;
	            index = 0;

	            for (; idx < shiftedLength; idx++) {
	                arr[idx] = shifted[index];
	                index++;
	            }

	            arr.length = shiftedLength;
	        }

	        idx = arr.length;

	        while (idx < oldLength) {
	            delete arr[idx];
	            idx++;
	        }
	    };

	    var BindingTarget = Class.extend( {
	        init: function(target, options) {
	            this.target = target;
	            this.options = options;
	            this.toDestroy = [];
	        },

	        bind: function(bindings) {
	            var key,
	                hasValue,
	                hasSource,
	                hasEvents,
	                hasChecked,
	                hasCss,
	                widgetBinding = this instanceof WidgetBindingTarget,
	                specificBinders = this.binders();

	            for (key in bindings) {
	                if (key == VALUE) {
	                    hasValue = true;
	                } else if (key == SOURCE) {
	                    hasSource = true;
	                } else if (key == EVENTS && !widgetBinding) {
	                    hasEvents = true;
	                } else if (key == CHECKED) {
	                    hasChecked = true;
	                } else if (key == CSS) {
	                    hasCss = true;
	                } else {
	                    this.applyBinding(key, bindings, specificBinders);
	                }
	            }
	            if (hasSource) {
	                this.applyBinding(SOURCE, bindings, specificBinders);
	            }

	            if (hasValue) {
	                this.applyBinding(VALUE, bindings, specificBinders);
	            }

	            if (hasChecked) {
	                this.applyBinding(CHECKED, bindings, specificBinders);
	            }

	            if (hasEvents && !widgetBinding) {
	                this.applyBinding(EVENTS, bindings, specificBinders);
	            }

	            if (hasCss && !widgetBinding) {
	                this.applyBinding(CSS, bindings, specificBinders);
	            }
	        },

	        binders: function() {
	            return binders[this.target.nodeName.toLowerCase()] || {};
	        },

	        applyBinding: function(name, bindings, specificBinders) {
	            var binder = specificBinders[name] || binders[name],
	                toDestroy = this.toDestroy,
	                attribute,
	                binding = bindings[name];

	            if (binder) {
	                binder = new binder(this.target, bindings, this.options);

	                toDestroy.push(binder);

	                if (binding instanceof Binding) {
	                    binder.bind(binding);
	                    toDestroy.push(binding);
	                } else {
	                    for (attribute in binding) {
	                        binder.bind(binding, attribute);
	                        toDestroy.push(binding[attribute]);
	                    }
	                }
	            } else if (name !== "template") {
	                throw new Error("The " + name + " binding is not supported by the " + this.target.nodeName.toLowerCase() + " element");
	            }
	        },

	        destroy: function() {
	            var idx,
	                length,
	                toDestroy = this.toDestroy;

	            for (idx = 0, length = toDestroy.length; idx < length; idx++) {
	                toDestroy[idx].destroy();
	            }
	        }
	    });

	    var WidgetBindingTarget = BindingTarget.extend( {
	        binders: function() {
	            return binders.widget[this.target.options.name.toLowerCase()] || {};
	        },

	        applyBinding: function(name, bindings, specificBinders) {
	            var binder = specificBinders[name] || binders.widget[name],
	                toDestroy = this.toDestroy,
	                attribute,
	                binding = bindings[name];

	            if (binder) {
	                binder = new binder(this.target, bindings, this.target.options);

	                toDestroy.push(binder);


	                if (binding instanceof Binding) {
	                    binder.bind(binding);
	                    toDestroy.push(binding);
	                } else {
	                    for (attribute in binding) {
	                        binder.bind(binding, attribute);
	                        toDestroy.push(binding[attribute]);
	                    }
	                }
	            } else {
	                throw new Error("The " + name + " binding is not supported by the " + this.target.options.name + " widget");
	            }
	        }
	    });

	    function bindingTargetForRole(element, roles) {
	        var widget = kendo.initWidget(element, {}, roles);

	        if (widget) {
	            return new WidgetBindingTarget(widget);
	        }
	    }

	    var keyValueRegExp = /[A-Za-z0-9_\-]+:(\{([^}]*)\}|[^,}]+)/g,
	        whiteSpaceRegExp = /\s/g;

	    function parseBindings(bind) {
	        var result = {},
	            idx,
	            length,
	            token,
	            colonIndex,
	            key,
	            value,
	            tokens;

	        tokens = bind.match(keyValueRegExp);

	        for (idx = 0, length = tokens.length; idx < length; idx++) {
	            token = tokens[idx];
	            colonIndex = token.indexOf(":");

	            key = token.substring(0, colonIndex);
	            value = token.substring(colonIndex + 1);

	            if (value.charAt(0) == "{") {
	                value = parseBindings(value);
	            }

	            result[key] = value;
	        }

	        return result;
	    }

	    function createBindings(bindings, source, type) {
	        var binding,
	            result = {};

	        for (binding in bindings) {
	            result[binding] = new type(source, bindings[binding]);
	        }

	        return result;
	    }

	    function bindElement(element, source, roles, parents) {
	        var role = element.getAttribute("data-" + kendo.ns + "role"),
	            idx,
	            bind = element.getAttribute("data-" + kendo.ns + "bind"),
	            childrenCopy = [],
	            deep = true,
	            bindings,
	            options = {},
	            target;

	        parents = parents || [source];

	        if (role || bind) {
	            unbindElement(element, false);
	        }

	        if (role) {
	            target = bindingTargetForRole(element, roles);
	        }

	        if (bind) {
	            bind = parseBindings(bind.replace(whiteSpaceRegExp, ""));

	            if (!target) {
	                options = kendo.parseOptions(element, {textField: "", valueField: "", template: "", valueUpdate: CHANGE, valuePrimitive: false, autoBind: true});
	                options.roles = roles;
	                target = new BindingTarget(element, options);
	            }

	            target.source = source;

	            bindings = createBindings(bind, parents, Binding);

	            if (options.template) {
	                bindings.template = new TemplateBinding(parents, "", options.template);
	            }

	            if (bindings.click) {
	                bind.events = bind.events || {};
	                bind.events.click = bind.click;
	                bindings.click.destroy();
	                delete bindings.click;
	            }

	            if (bindings.source) {
	                deep = false;
	            }

	            if (bind.attr) {
	                bindings.attr = createBindings(bind.attr, parents, Binding);
	            }

	            if (bind.style) {
	                bindings.style = createBindings(bind.style, parents, Binding);
	            }

	            if (bind.events) {
	                bindings.events = createBindings(bind.events, parents, EventBinding);
	            }

	            if (bind.css) {
	                bindings.css = createBindings(bind.css, parents, Binding);
	            }

	            target.bind(bindings);
	        }

	        if (target) {
	            element.kendoBindingTarget = target;
	        }

	        var children = element.children;
	        if (deep && children) {
	            // https://github.com/telerik/kendo/issues/1240 for the weirdness.
	            for (idx = 0; idx < children.length; idx++) {
	                childrenCopy[idx] = children[idx];
	            }

	            for (idx = 0; idx < childrenCopy.length; idx++) {
	                bindElement(childrenCopy[idx], source, roles, parents);
	            }
	        }
	    }

	    function bind(dom, object) {
	        var idx,
	            length,
	            node,
	            roles = kendo.rolesFromNamespaces([].slice.call(arguments, 2));

	        object = kendo.observable(object);
	        dom = $(dom);

	        for (idx = 0, length = dom.length; idx < length; idx++) {
	            node = dom[idx];
	            if (node.nodeType === 1) {
	                bindElement(node, object, roles);
	            }
	        }
	    }

	    function unbindElement(element, destroyWidget) {
	        var bindingTarget = element.kendoBindingTarget;

	        if (bindingTarget) {
	            bindingTarget.destroy();

	            if (deleteExpando) {
	                delete element.kendoBindingTarget;
	            } else if (element.removeAttribute) {
	                element.removeAttribute("kendoBindingTarget");
	            } else {
	                element.kendoBindingTarget = null;
	            }
	        }

	        if(destroyWidget) {
	            var widget = kendo.widgetInstance($(element));
	            if (widget && typeof widget.destroy === FUNCTION) {
	                widget.destroy();
	            }
	        }
	    }

	    function unbindElementTree(element, destroyWidgets) {
	        unbindElement(element, destroyWidgets);

	        unbindElementChildren(element, destroyWidgets);
	    }

	    function unbindElementChildren(element, destroyWidgets) {
	        var children = element.children;

	        if (children) {
	            for (var idx = 0, length = children.length; idx < length; idx++) {
	                unbindElementTree(children[idx], destroyWidgets);
	            }
	        }
	    }

	    function unbind(dom) {
	        var idx, length;

	        dom = $(dom);

	        for (idx = 0, length = dom.length; idx < length; idx++ ) {
	            unbindElementTree(dom[idx], false);
	        }
	    }

	    function notify(widget, namespace) {
	        var element = widget.element,
	            bindingTarget = element[0].kendoBindingTarget;

	        if (bindingTarget) {
	            bind(element, bindingTarget.source, namespace);
	        }
	    }

	    function retrievePrimitiveValues(value, valueField) {
	        var values = [];
	        var idx = 0;
	        var length;
	        var item;

	        if (!valueField) {
	            return value;
	        }

	        if (value instanceof ObservableArray) {
	            for (length = value.length; idx < length; idx++) {
	                item = value[idx];
	                values[idx] = item.get ? item.get(valueField) : item[valueField];
	            }
	            value = values;
	        } else if (value instanceof ObservableObject) {
	            value = value.get(valueField);
	        }

	        return value;
	    }

	    kendo.unbind = unbind;
	    kendo.bind = bind;
	    kendo.data.binders = binders;
	    kendo.data.Binder = Binder;
	    kendo.notify = notify;

	    kendo.observable = function(object) {
	        if (!(object instanceof ObservableObject)) {
	            object = new ObservableObject(object);
	        }

	        return object;
	    };

	    kendo.observableHierarchy = function(array) {
	        var dataSource = kendo.data.HierarchicalDataSource.create(array);

	        function recursiveRead(data) {
	            var i, children;

	            for (i = 0; i < data.length; i++) {
	                data[i]._initChildren();

	                children = data[i].children;

	                children.fetch();

	                data[i].items = children.data();

	                recursiveRead(data[i].items);
	            }
	        }

	        dataSource.fetch();

	        recursiveRead(dataSource.data());

	        dataSource._data._dataSource = dataSource;

	        return dataSource._data;
	    };

	})(window.kendo.jQuery);

	return window.kendo;


	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 29 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.dropdownlist.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(686);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 588:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.list */ 23);

/***/ },

/***/ 589:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ 9);

/***/ },

/***/ 686:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(588), __webpack_require__(589) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "dropdownlist",
	    name: "DropDownList",
	    category: "web",
	    description: "The DropDownList widget displays a list of values and allows the selection of a single value from the list.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        List = ui.List,
	        Select = ui.Select,
	        support = kendo.support,
	        activeElement = kendo._activeElement,
	        ObservableObject = kendo.data.ObservableObject,
	        keys = kendo.keys,
	        ns = ".kendoDropDownList",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        CHANGE = "change",
	        FOCUSED = "k-state-focused",
	        DEFAULT = "k-state-default",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_DISABLED = "aria-disabled",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        TABINDEX = "tabindex",
	        STATE_FILTER = "filter",
	        STATE_ACCEPT = "accept",
	        MSG_INVALID_OPTION_LABEL = "The `optionLabel` option is not valid due to missing fields. Define a custom optionLabel as shown here http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-optionLabel",
	        proxy = $.proxy;

	    var DropDownList = Select.extend( {
	        init: function(element, options) {
	            var that = this;
	            var index = options && options.index;
	            var optionLabel, text, disabled;

	            that.ns = ns;
	            options = $.isArray(options) ? { dataSource: options } : options;

	            Select.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element.on("focus" + ns, proxy(that._focusHandler, that));

	            that._focusInputHandler = $.proxy(that._focusInput, that);

	            that.optionLabel = $();
	            that._optionLabel();

	            that._inputTemplate();

	            that._reset();

	            that._prev = "";
	            that._word = "";

	            that._wrapper();

	            that._tabindex();
	            that.wrapper.data(TABINDEX, that.wrapper.attr(TABINDEX));

	            that._span();

	            that._popup();

	            that._mobile();

	            that._dataSource();

	            that._ignoreCase();

	            that._filterHeader();

	            that._aria();

	            that._enable();

	            that._oldIndex = that.selectedIndex = -1;

	            if (index !== undefined) {
	                options.index = index;
	            }

	            that._initialIndex = options.index;

	            that.requireValueMapper(that.options);
	            that._initList();

	            that._cascade();

	            if (options.autoBind) {
	                that.dataSource.fetch();
	            } else if (that.selectedIndex === -1) { //selectedIndex !== -1 when cascade functionality happens instantly
	                text = options.text || "";
	                if (!text) {
	                    optionLabel = options.optionLabel;

	                    if (optionLabel && options.index === 0) {
	                        text = optionLabel;
	                    } else if (that._isSelect) {
	                        text = element.children(":selected").text();
	                    }
	                }

	                that._textAccessor(text);
	            }

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            that.listView.bind("click", function(e) { e.preventDefault(); });

	            kendo.notify(that);
	        },

	        options: {
	            name: "DropDownList",
	            enabled: true,
	            autoBind: true,
	            index: 0,
	            text: null,
	            value: null,
	            delay: 500,
	            height: 200,
	            dataTextField: "",
	            dataValueField: "",
	            optionLabel: "",
	            cascadeFrom: "",
	            cascadeFromField: "",
	            ignoreCase: true,
	            animation: {},
	            filter: "none",
	            minLength: 1,
	            enforceMinLength: false,
	            virtual: false,
	            template: null,
	            valueTemplate: null,
	            optionLabelTemplate: null,
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#"
	        },

	        events: [
	            "open",
	            "close",
	            CHANGE,
	            "select",
	            "filtering",
	            "dataBinding",
	            "dataBound",
	            "cascade",
	            "set"
	        ],

	        setOptions: function(options) {
	            Select.fn.setOptions.call(this, options);

	            this.listView.setOptions(this._listOptions(options));

	            this._optionLabel();
	            this._inputTemplate();
	            this._accessors();
	            this._filterHeader();
	            this._enable();
	            this._aria();

	            if (!this.value() && this.hasOptionLabel()) {
	                this.select(0);
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Select.fn.destroy.call(that);

	            that.wrapper.off(ns);
	            that.element.off(ns);
	            that._inputWrapper.off(ns);

	            that._arrow.off();
	            that._arrow = null;

	            that.optionLabel.off();
	        },

	        open: function() {
	            var that = this;

	            if (that.popup.visible()) {
	                return;
	            }

	            if (!that.listView.bound() || that._state === STATE_ACCEPT) {
	                that._open = true;
	                that._state = "rebind";

	                if (that.filterInput) {
	                    that.filterInput.val("");
	                    that._prev = "";
	                }

	                if (that.filterInput && that.options.minLength !== 1) {
	                    that.refresh();
	                    that.popup.one("activate", that._focusInputHandler);
	                    that.popup.open();
	                    that._resizeFilterInput();
	                } else {
	                    that._filterSource();
	                }
	            } else if (that._allowOpening()) {
	                that.popup.one("activate", that._focusInputHandler);
	                that.popup.open();
	                that._resizeFilterInput();
	                that._focusItem();
	            }
	        },

	        _focusInput: function () {
	            this._focusElement(this.filterInput);
	        },

	        _resizeFilterInput: function () {
	            var filterInput = this.filterInput;
	            var originalPrevent = this._prevent;

	            if (!filterInput) {
	                return;
	            }

	            var isInputActive = this.filterInput[0] === activeElement();
	            var caret = kendo.caret(this.filterInput[0])[0];

	            this._prevent = true;

	            filterInput.css("display", "none")
	                       .css("width", this.popup.element.css("width"))
	                       .css("display", "inline-block");

	            if (isInputActive) {
	                filterInput.focus();
	                kendo.caret(filterInput[0], caret);
	            }

	            this._prevent = originalPrevent;
	        },

	        _allowOpening: function() {
	            return this.hasOptionLabel() || this.filterInput || Select.fn._allowOpening.call(this);
	        },

	        toggle: function(toggle) {
	            this._toggle(toggle, true);
	        },

	        current: function(candidate) {
	            var current;

	            if (candidate === undefined) {
	                current = this.listView.focus();

	                if (!current && this.selectedIndex === 0 && this.hasOptionLabel()) {
	                    return this.optionLabel;
	                }

	                return current;
	            }

	            this._focus(candidate);
	        },

	        dataItem: function(index) {
	            var that = this;
	            var dataItem = null;

	            if (index === null) { return index; }

	            if (index === undefined) {
	                dataItem = that.listView.selectedDataItems()[0];
	            } else {
	                if (typeof index !== "number") {
	                    if (that.options.virtual) {
	                        return that.dataSource.getByUid($(index).data("uid"));
	                    }
	                    if (index.hasClass("k-list-optionlabel")) {
	                        index = -1;
	                    } else {
	                        index = $(that.items()).index(index);
	                    }
	                } else if (that.hasOptionLabel()) {
	                    index -= 1;
	                }

	                dataItem = that.dataSource.flatView()[index];
	            }

	            if (!dataItem) {
	                dataItem = that._optionLabelDataItem();
	            }

	            return dataItem;
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        text: function (text) {
	            var that = this;
	            var loweredText;
	            var ignoreCase = that.options.ignoreCase;

	            text = text === null ? "" : text;

	            if (text !== undefined) {
	                if (typeof text !== "string") {
	                    that._textAccessor(text);
	                    return;
	                }

	                loweredText = ignoreCase ? text.toLowerCase() : text;

	                that._select(function(data) {
	                    data = that._text(data);

	                    if (ignoreCase) {
	                        data = (data + "").toLowerCase();
	                    }

	                    return data === loweredText;
	                }).done(function() {
	                    that._textAccessor(that.dataItem() || text);
	                });

	            } else {
	                return that._textAccessor();
	            }
	        },

	        _clearFilter: function() {
	            $(this.filterInput).val("");
	            Select.fn._clearFilter.call(this);
	        },

	        value: function(value) {
	            var that = this;
	            var listView = that.listView;
	            var dataSource = that.dataSource;

	            if (value === undefined) {
	                value = that._accessor() || that.listView.value()[0];
	                return value === undefined || value === null ? "" : value;
	            }

	            that.requireValueMapper(that.options, value);

	            if (value || !that.hasOptionLabel()) {
	                that._initialIndex = null;
	            }

	            this.trigger("set", { value: value });

	            if (that._request && that.options.cascadeFrom && that.listView.bound()) {
	                if (that._valueSetter) {
	                    dataSource.unbind(CHANGE, that._valueSetter);
	                }

	                that._valueSetter = proxy(function() { that.value(value); }, that);

	                dataSource.one(CHANGE, that._valueSetter);
	                return;
	            }

	            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {
	                that._clearFilter();
	            } else {
	                that._fetchData();
	            }

	            listView.value(value).done(function() {
	                that._old = that._accessor();
	                that._oldIndex = that.selectedIndex;
	            });
	        },

	        hasOptionLabel: function() {
	            return this.optionLabel && !!this.optionLabel[0];
	        },

	        _optionLabel: function() {
	            var that = this;
	            var options = that.options;
	            var optionLabel = options.optionLabel;
	            var template = options.optionLabelTemplate;

	            if (!optionLabel) {
	                that.optionLabel.off().remove();
	                that.optionLabel = $();
	                return;
	            }

	            if (!template) {
	                template = "#:";

	                if (typeof optionLabel === "string") {
	                    template += "data";
	                } else {
	                    template += kendo.expr(options.dataTextField, "data");
	                }

	                template += "#";
	            }

	            if (typeof template !== "function") {
	                template = kendo.template(template);
	            }

	            that.optionLabelTemplate = template;

	            if (!that.hasOptionLabel()) {
	                that.optionLabel = $('<div class="k-list-optionlabel"></div>').prependTo(that.list);
	            }

	            that.optionLabel.html(template(optionLabel))
	                            .off()
	                            .click(proxy(that._click, that))
	                            .on(HOVEREVENTS, that._toggleHover);

	            that.angular("compile", function() {
	                return { elements: that.optionLabel, data: [{ dataItem: that._optionLabelDataItem() }] };
	            });
	        },

	        _optionLabelText: function() {
	            var optionLabel = this.options.optionLabel;
	            return (typeof optionLabel === "string") ? optionLabel : this._text(optionLabel);
	        },

	        _optionLabelDataItem: function() {
	            var that = this;
	            var optionLabel = that.options.optionLabel;

	            if (that.hasOptionLabel()) {
	                return $.isPlainObject(optionLabel) ? new ObservableObject(optionLabel) : that._assignInstance(that._optionLabelText(), "");
	            }

	            return null;
	        },

	        _buildOptions: function(data) {
	            var that = this;
	            if (!that._isSelect) {
	                return;
	            }

	            var value = that.listView.value()[0];
	            var optionLabel = that._optionLabelDataItem();
	            var optionLabelValue = optionLabel && that._value(optionLabel);

	            if (value === undefined || value === null) {
	                value = "";
	            }

	            if (optionLabel) {
	                if (optionLabelValue === undefined || optionLabelValue === null) {
	                    optionLabelValue = "";
	                }

	                optionLabel = '<option value="' + optionLabelValue + '">' + that._text(optionLabel) + "</option>";
	            }

	            that._options(data, optionLabel, value);

	            if (value !== List.unifyType(that._accessor(), typeof value)) {
	                that._customOption = null;
	                that._custom(value);
	            }
	        },

	        _listBound: function() {
	            var that = this;
	            var initialIndex = that._initialIndex;
	            var filtered = that._state === STATE_FILTER;

	            var data = that.dataSource.flatView();
	            var dataItem;

	            that._presetValue = false;

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!data.length);

	            that._resizePopup(true);

	            that.popup.position();

	            that._buildOptions(data);

	            that._makeUnselectable();

	            if (!filtered) {
	                if (that._open) {
	                    that.toggle(that._allowOpening());
	                }

	                that._open = false;

	                if (!that._fetch) {
	                    if (data.length) {
	                        if (!that.listView.value().length && initialIndex > -1 && initialIndex !== null) {
	                            that.select(initialIndex);
	                        }

	                        that._initialIndex = null;
	                        dataItem = that.listView.selectedDataItems()[0];
	                        if (dataItem && that.text() !== that._text(dataItem)) {
	                            that._selectValue(dataItem);
	                        }
	                    } else if (that._textAccessor() !== that._optionLabelText()) {
	                        that.listView.value("");
	                        that._selectValue(null);
	                        that._oldIndex = that.selectedIndex;
	                    }
	                }
	            }

	            that._hideBusy();
	            that.trigger("dataBound");
	        },

	        _listChange: function() {
	            this._selectValue(this.listView.selectedDataItems()[0]);

	            if (this._presetValue || (this._old && this._oldIndex === -1)) {
	                this._oldIndex = this.selectedIndex;
	            }
	        },

	        _filterPaste: function() {
	            this._search();
	        },

	        _focusHandler: function() {
	            this.wrapper.focus();
	        },

	        _focusinHandler: function() {
	            this._inputWrapper.addClass(FOCUSED);
	            this._prevent = false;
	        },

	        _focusoutHandler: function() {
	            var that = this;
	            var filtered = that._state === STATE_FILTER;
	            var isIFrame = window.self !== window.top;
	            var focusedItem = that._focus();
	            var dataItem = that._getElementDataItem(focusedItem);
	            var shouldTrigger;

	            if (!that._prevent) {
	                clearTimeout(that._typingTimeout);

	                var done = function() {
	                    if (support.mobileOS.ios && isIFrame) {
	                        that._change();
	                    } else {
	                        that._blur();
	                    }

	                    that._inputWrapper.removeClass(FOCUSED);
	                    that._prevent = true;
	                    that._open = false;
	                    that.element.blur();
	                };

	                shouldTrigger = !filtered && focusedItem && that._value(dataItem) !== that.value();

	                if (shouldTrigger && !that.trigger("select", { dataItem: dataItem, item: focusedItem })) {
	                    that._select(focusedItem, !that.dataSource.view().length).done(done);
	                } else {
	                    done();
	                }
	            }
	        },

	        _wrapperMousedown: function() {
	            this._prevent = !!this.filterInput;
	        },

	        _wrapperClick: function(e) {
	            e.preventDefault();
	            this.popup.unbind("activate", this._focusInputHandler);
	            this._focused = this.wrapper;
	            this._toggle();
	        },

	        _editable: function(options) {
	            var that = this;
	            var element = that.element;
	            var disable = options.disable;
	            var readonly = options.readonly;
	            var wrapper = that.wrapper.add(that.filterInput).off(ns);
	            var dropDownWrapper = that._inputWrapper.off(HOVEREVENTS);

	            if (!readonly && !disable) {
	                element.removeAttr(DISABLED).removeAttr(READONLY);

	                dropDownWrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                wrapper
	                    .attr(TABINDEX, wrapper.data(TABINDEX))
	                    .attr(ARIA_DISABLED, false)
	                    .on("keydown" + ns, proxy(that._keydown, that))
	                    .on("focusin" + ns, proxy(that._focusinHandler, that))
	                    .on("focusout" + ns, proxy(that._focusoutHandler, that))
	                    .on("mousedown" + ns, proxy(that._wrapperMousedown, that))
	                    .on("paste" + ns, proxy(that._filterPaste, that));

	                that.wrapper.on("click" + ns, proxy(that._wrapperClick, that));

	                if (!that.filterInput) {
	                    wrapper.on("keypress" + ns, proxy(that._keypress, that));
	                }

	            } else if (disable) {
	                wrapper.removeAttr(TABINDEX);
	                dropDownWrapper
	                    .addClass(STATEDISABLED)
	                    .removeClass(DEFAULT);
	            } else {
	                dropDownWrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED);

	                wrapper
	                    .on("focusin" + ns, proxy(that._focusinHandler, that))
	                    .on("focusout" + ns, proxy(that._focusoutHandler, that));
	            }

	            element.attr(DISABLED, disable)
	                   .attr(READONLY, readonly);

	            wrapper.attr(ARIA_DISABLED, disable);
	        },

	        _keydown: function(e) {
	            var that = this;
	            var key = e.keyCode;
	            var altKey = e.altKey;
	            var isInputActive;
	            var handled;

	            var isPopupVisible = that.popup.visible();

	            if (that.filterInput) {
	                isInputActive = that.filterInput[0] === activeElement();
	            }

	            if (key === keys.LEFT) {
	                key = keys.UP;
	                handled = true;
	            } else if (key === keys.RIGHT) {
	                key = keys.DOWN;
	                handled = true;
	            }

	            if (handled && isInputActive) {
	                return;
	            }

	            e.keyCode = key;

	            if ((altKey && key === keys.UP) || key === keys.ESC) {
	                that._focusElement(that.wrapper);
	            }

	            if (that._state === STATE_FILTER && key === keys.ESC) {
	                that._clearFilter();
	            }

	            if (key === keys.ENTER && that._typingTimeout && that.filterInput && isPopupVisible) {
	                e.preventDefault();
	                return;
	            }

	            handled = that._move(e);

	            if (handled) {
	                return;
	            }

	            if (!isPopupVisible || !that.filterInput) {
	                var current = that._focus();

	                if (key === keys.HOME) {
	                    handled = true;
	                    that._firstItem();
	                } else if (key === keys.END) {
	                    handled = true;
	                    that._lastItem();
	                }

	                if (handled) {
	                    if (that.trigger("select", { dataItem: that._getElementDataItem(that._focus()), item: that._focus() })) {
	                        that._focus(current);
	                        return;
	                    }

	                    that._select(that._focus(), true).done(function() {
	                        if (!isPopupVisible) {
	                            that._blur();
	                        }
	                    });
	                }
	            }

	            if (!altKey && !handled && that.filterInput) {
	                that._search();
	            }
	        },

	        _matchText: function(text, word) {
	            var ignoreCase = this.options.ignoreCase;

	            if (text === undefined || text === null) {
	                return false;
	            }

	            text = text + "";

	            if (ignoreCase) {
	                text = text.toLowerCase();
	            }

	            return text.indexOf(word) === 0;
	        },

	        _shuffleData: function(data, splitIndex) {
	            var optionDataItem = this._optionLabelDataItem();

	            if (optionDataItem) {
	                data = [optionDataItem].concat(data);
	            }

	            return data.slice(splitIndex).concat(data.slice(0, splitIndex));
	        },

	        _selectNext: function() {
	            var that = this;
	            var data = that.dataSource.flatView();
	            var dataLength = data.length + (that.hasOptionLabel() ? 1 : 0);
	            var isInLoop = sameCharsOnly(that._word, that._last);
	            var startIndex = that.selectedIndex;
	            var oldFocusedItem;
	            var text;

	            if (startIndex === -1) {
	                startIndex = 0;
	            } else {
	                startIndex += isInLoop ? 1 : 0;
	                startIndex = normalizeIndex(startIndex, dataLength);
	            }

	            data = data.toJSON ? data.toJSON() : data.slice();
	            data = that._shuffleData(data, startIndex);

	            for (var idx = 0; idx < dataLength; idx++) {
	                text = that._text(data[idx]);

	                if (isInLoop && that._matchText(text, that._last)) {
	                    break;
	                } else if (that._matchText(text, that._word)) {
	                    break;
	                }
	            }

	            if (idx !== dataLength) {
	                oldFocusedItem = that._focus();

	                that._select(normalizeIndex(startIndex + idx, dataLength)).done(function() {
	                    var done = function() {
	                        if (!that.popup.visible()) {
	                            that._change();
	                        }
	                    };

	                    if (that.trigger("select", { dataItem: that._getElementDataItem(that._focus()), item: that._focus() })) {
	                        that._select(oldFocusedItem).done(done);
	                    } else {
	                        done();
	                    }
	                });
	            }
	        },

	        _keypress: function(e) {
	            var that = this;

	            if (e.which === 0 || e.keyCode === kendo.keys.ENTER) {
	                return;
	            }

	            var character = String.fromCharCode(e.charCode || e.keyCode);

	            if (that.options.ignoreCase) {
	                character = character.toLowerCase();
	            }

	            if (character === " ") {
	                e.preventDefault();
	            }

	            that._word += character;
	            that._last = character;

	            that._search();
	        },

	        _popupOpen: function() {
	            var popup = this.popup;

	            popup.wrapper = kendo.wrap(popup.element);

	            if (popup.element.closest(".km-root")[0]) {
	                popup.wrapper.addClass("km-popup km-widget");
	                this.wrapper.addClass("km-widget");
	            }
	        },

	        _popup: function() {
	            Select.fn._popup.call(this);
	            this.popup.one("open", proxy(this._popupOpen, this));
	        },

	        _getElementDataItem: function(element) {
	            if (!element || !element[0]) {
	                return null;
	            }

	            if (element[0] === this.optionLabel[0]) {
	                return this._optionLabelDataItem();
	            }

	            return this.listView.dataItemByIndex(this.listView.getElementIndex(element));
	        },

	        _click: function (e) {
	            var that = this;
	            var item = e.item || $(e.currentTarget);

	            e.preventDefault();

	            if (that.trigger("select", { dataItem: that._getElementDataItem(item), item: item })) {
	                that.close();
	                return;
	            }

	            that._userTriggered = true;

	            that._select(item).done(function() {
	                that._focusElement(that.wrapper);
	                that._blur();
	            });
	        },

	        _focusElement: function(element) {
	            var active = activeElement();
	            var wrapper = this.wrapper;
	            var filterInput = this.filterInput;
	            var compareElement = element === filterInput ? wrapper : filterInput;
	            var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);

	            if (filterInput && filterInput[0] === element[0] && touchEnabled) {
	                return;
	            }

	            if (filterInput && compareElement[0] === active) {
	                this._prevent = true;
	                this._focused = element.focus();
	            }
	        },

	        _searchByWord: function(word) {
	            if (!word) {
	                return;
	            }

	            var that = this;
	            var ignoreCase = that.options.ignoreCase;

	            if (ignoreCase) {
	                word = word.toLowerCase();
	            }

	            that._select(function(dataItem) {
	                return that._matchText(that._text(dataItem), word);
	            });
	        },

	        _inputValue: function() {
	            return this.text();
	        },

	        _search: function() {
	            var that = this;
	            var dataSource = that.dataSource;

	            clearTimeout(that._typingTimeout);

	            if (that._isFilterEnabled()) {
	                that._typingTimeout = setTimeout(function() {
	                    var value = that.filterInput.val();

	                    if (that._prev !== value) {
	                        that._prev = value;
	                        that.search(value);
	                        that._resizeFilterInput();
	                    }

	                    that._typingTimeout = null;
	                }, that.options.delay);
	            } else {
	                that._typingTimeout = setTimeout(function() {
	                    that._word = "";
	                }, that.options.delay);

	                if (!that.listView.bound()) {
	                    dataSource.fetch().done(function () {
	                        that._selectNext();
	                    });
	                    return;
	                }

	                that._selectNext();
	            }
	        },

	        _get: function(candidate) {
	            var data, found, idx;
	            var isFunction = typeof candidate === "function";
	            var jQueryCandidate = !isFunction ? $(candidate) : $();

	            if (this.hasOptionLabel()) {
	                if (typeof candidate === "number") {
	                    if (candidate > -1) {
	                        candidate -= 1;
	                    }
	                } else if (jQueryCandidate.hasClass("k-list-optionlabel")) {
	                    candidate = -1;
	                }
	            }

	            if (isFunction) {
	                data = this.dataSource.flatView();

	                for (idx = 0; idx < data.length; idx++) {
	                    if (candidate(data[idx])) {
	                        candidate = idx;
	                        found = true;
	                        break;
	                    }
	                }

	                if (!found) {
	                    candidate = -1;
	                }
	            }

	            return candidate;
	        },

	        _firstItem: function() {
	            if (this.hasOptionLabel()) {
	                this._focus(this.optionLabel);
	            } else {
	                this.listView.focusFirst();
	            }
	        },

	        _lastItem: function() {
	            this._resetOptionLabel();
	            this.listView.focusLast();
	        },

	        _nextItem: function() {
	            if (this.optionLabel.hasClass("k-state-focused")) {
	                this._resetOptionLabel();
	                this.listView.focusFirst();
	            } else {
	                this.listView.focusNext();
	            }
	        },

	        _prevItem: function() {
	            if (this.optionLabel.hasClass("k-state-focused")) {
	                return;
	            }

	            this.listView.focusPrev();
	            if (!this.listView.focus()) {
	                this._focus(this.optionLabel);
	            }
	        },

	        _focusItem: function() {
	            var listView = this.listView;
	            var focusedItem = listView.focus();
	            var index = listView.select();

	            index = index[index.length - 1];

	            if (index === undefined && this.options.highlightFirst && !focusedItem) {
	                index = 0;
	            }

	            if (index !== undefined) {
	                listView.focus(index);
	            } else {
	                if (this.options.optionLabel) {
	                    this._focus(this.optionLabel);
	                    this._select(this.optionLabel);
	                } else {
	                    listView.scrollToIndex(0);
	                }
	            }
	        },

	        _resetOptionLabel: function(additionalClass) {
	            this.optionLabel.removeClass("k-state-focused" + (additionalClass || "")).removeAttr("id");
	        },

	        _focus: function(candidate) {
	            var listView = this.listView;
	            var optionLabel = this.optionLabel;

	            if (candidate === undefined) {
	                candidate = listView.focus();

	                if (!candidate && optionLabel.hasClass("k-state-focused")) {
	                    candidate = optionLabel;
	                }

	                return candidate;
	            }

	            this._resetOptionLabel();

	            candidate = this._get(candidate);

	            listView.focus(candidate);

	            if (candidate === -1) {
	                optionLabel.addClass("k-state-focused")
	                           .attr("id", listView._optionID);

	                this._focused.add(this.filterInput)
	                    .removeAttr("aria-activedescendant")
	                    .attr("aria-activedescendant", listView._optionID);
	            }
	        },

	        _select: function(candidate, keepState) {
	            var that = this;

	            candidate = that._get(candidate);

	            return that.listView.select(candidate).done(function() {
	                if (!keepState && that._state === STATE_FILTER) {
	                    that._state = STATE_ACCEPT;
	                }

	                if (candidate === -1) {
	                    that._selectValue(null);
	                }
	            });
	        },

	        _selectValue: function(dataItem) {
	            var that = this;
	            var optionLabel = that.options.optionLabel;
	            var idx = that.listView.select();

	            var value = "";
	            var text = "";

	            idx = idx[idx.length - 1];
	            if (idx === undefined) {
	                idx = -1;
	            }

	            this._resetOptionLabel(" k-state-selected");

	            if (dataItem) {
	                text = dataItem;
	                value = that._dataValue(dataItem);
	                if (optionLabel) {
	                    idx += 1;
	                }
	            } else if (optionLabel) {
	                that._focus(that.optionLabel.addClass("k-state-selected"));

	                text = that._optionLabelText();

	                if (typeof optionLabel === "string") {
	                    value = "";
	                } else {
	                    value = that._value(optionLabel);
	                }

	                idx = 0;
	            }

	            that.selectedIndex = idx;

	            if (value === null) {
	                value = "";
	            }

	            that._textAccessor(text);
	            that._accessor(value, idx);

	            that._triggerCascade();
	        },

	        _mobile: function() {
	            var that = this,
	                popup = that.popup,
	                mobileOS = support.mobileOS,
	                root = popup.element.parents(".km-root").eq(0);

	            if (root.length && mobileOS) {
	                popup.options.animation.open.effects = (mobileOS.android || mobileOS.meego) ? "fadeIn" : (mobileOS.ios || mobileOS.wp) ? "slideIn:up" : popup.options.animation.open.effects;
	            }
	        },

	        _filterHeader: function() {
	            var icon;

	            if (this.filterInput) {
	                this.filterInput
	                    .off(ns)
	                    .parent()
	                    .remove();

	                this.filterInput = null;
	            }

	            if (this._isFilterEnabled()) {
	                icon = '<span class="k-icon k-i-zoom"></span>';

	                this.filterInput = $('<input class="k-textbox"/>')
	                                      .attr({
	                                          placeholder: this.element.attr("placeholder"),
	                                          title: this.element.attr("title"),
	                                          role: "listbox",
	                                          "aria-haspopup": true,
	                                          "aria-expanded": false
	                                      });
	                this.list
	                    .prepend($('<span class="k-list-filter" />')
	                    .append(this.filterInput.add(icon)));
	            }
	        },

	        _span: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                SELECTOR = "span.k-input",
	                span;

	            span = wrapper.find(SELECTOR);

	            if (!span[0]) {
	                wrapper.append('<span unselectable="on" class="k-dropdown-wrap k-state-default"><span unselectable="on" class="k-input">&nbsp;</span><span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-arrow-60-down"></span></span></span>')
	                       .append(that.element);

	                span = wrapper.find(SELECTOR);
	            }

	            that.span = span;
	            that._inputWrapper = $(wrapper[0].firstChild);
	            that._arrow = wrapper.find(".k-icon");
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                DOMelement = element[0],
	                wrapper;

	            wrapper = element.parent();

	            if (!wrapper.is("span.k-widget")) {
	                wrapper = element.wrap("<span />").parent();
	                wrapper[0].style.cssText = DOMelement.style.cssText;
	                wrapper[0].title = DOMelement.title;
	            }

	            that._focused = that.wrapper = wrapper
	                              .addClass("k-widget k-dropdown k-header")
	                              .addClass(DOMelement.className)
	                              .css("display", "")
	                              .attr({
	                                  accesskey: element.attr("accesskey"),
	                                  unselectable: "on",
	                                  role: "listbox",
	                                  "aria-haspopup": true,
	                                  "aria-expanded": false
	                              });

	            element.hide().removeAttr("accesskey");
	        },

	        _clearSelection: function(parent) {
	            this.select(parent.value() ? 0 : -1);
	        },

	        _inputTemplate: function() {
	            var that = this,
	                template = that.options.valueTemplate;


	            if (!template) {
	                template = $.proxy(kendo.template('#:this._text(data)#', { useWithBlock: false }), that);
	            } else {
	                template = kendo.template(template);
	            }

	            that.valueTemplate = template;

	            if (that.hasOptionLabel() && !that.options.optionLabelTemplate) {
	                try {
	                    that.valueTemplate(that._optionLabelDataItem());
	                } catch(e) {
	                    throw new Error(MSG_INVALID_OPTION_LABEL);
	                }
	            }
	        },

	        _textAccessor: function(text) {
	            var dataItem = null;
	            var template = this.valueTemplate;
	            var optionLabelText = this._optionLabelText();
	            var span = this.span;

	            if (text === undefined) {
	                return span.text();
	            }

	            if ($.isPlainObject(text) || text instanceof ObservableObject) {
	                dataItem = text;
	            } else if (optionLabelText && optionLabelText === text) {
	                dataItem = this.options.optionLabel;
	            }

	            if (!dataItem) {
	                dataItem = this._assignInstance(text, this._accessor());
	            }

	            if (this.hasOptionLabel()) {
	                if (dataItem === optionLabelText || this._text(dataItem) === optionLabelText) {
	                    template = this.optionLabelTemplate;

	                    if (typeof this.options.optionLabel === "string" && !this.options.optionLabelTemplate) {
	                        dataItem = optionLabelText;
	                    }
	                }
	            }

	            var getElements = function(){
	                return {
	                    elements: span.get(),
	                    data: [ { dataItem: dataItem } ]
	                };
	            };

	            this.angular("cleanup", getElements);

	            try {
	                span.html(template(dataItem));
	            } catch(e) {
	                //dataItem has missing fields required in custom template
	                span.html("");
	            }

	            this.angular("compile", getElements);
	        },

	        _preselect: function(value, text) {
	            if (!value && !text) {
	                text = this._optionLabelText();
	            }

	            this._accessor(value);
	            this._textAccessor(text);

	            this._old = this._accessor();
	            this._oldIndex = this.selectedIndex;

	            this.listView.setValue(value);

	            this._initialIndex = null;
	            this._presetValue = true;
	        },

	        _assignInstance: function(text, value) {
	            var dataTextField = this.options.dataTextField;
	            var dataItem = {};

	            if (dataTextField) {
	                assign(dataItem, dataTextField.split("."), text);
	                assign(dataItem, this.options.dataValueField.split("."), value);
	                dataItem = new ObservableObject(dataItem);
	            } else {
	                dataItem = text;
	            }

	            return dataItem;
	        }
	    });

	    function assign(instance, fields, value) {
	        var idx = 0,
	            lastIndex = fields.length - 1,
	            field;

	        for (; idx < lastIndex; ++idx) {
	            field = fields[idx];

	            if (!(field in instance)) {
	                instance[field] = {};
	            }

	            instance = instance[field];
	        }

	        instance[fields[lastIndex]] = value;
	    }

	    function normalizeIndex(index, length) {
	        if (index >= length) {
	            index -= length;
	        }
	        return index;
	    }

	    function sameCharsOnly(word, character) {
	        for (var idx = 0; idx < word.length; idx++) {
	            if (word.charAt(idx) !== character) {
	                return false;
	            }
	        }
	        return true;
	    }

	    ui.plugin(DropDownList);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 30 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.fx.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(731);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 731:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "fx",
	    name: "Effects",
	    category: "framework",
	    description: "Required for animation effects in all Kendo UI widgets.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        fx = kendo.effects,
	        each = $.each,
	        extend = $.extend,
	        proxy = $.proxy,
	        support = kendo.support,
	        browser = support.browser,
	        transforms = support.transforms,
	        transitions = support.transitions,
	        scaleProperties = { scale: 0, scalex: 0, scaley: 0, scale3d: 0 },
	        translateProperties = { translate: 0, translatex: 0, translatey: 0, translate3d: 0 },
	        hasZoom = (typeof document.documentElement.style.zoom !== "undefined") && !transforms,
	        matrix3dRegExp = /matrix3?d?\s*\(.*,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?/i,
	        cssParamsRegExp = /^(-?[\d\.\-]+)?[\w\s]*,?\s*(-?[\d\.\-]+)?[\w\s]*/i,
	        translateXRegExp = /translatex?$/i,
	        oldEffectsRegExp = /(zoom|fade|expand)(\w+)/,
	        singleEffectRegExp = /(zoom|fade|expand)/,
	        unitRegExp = /[xy]$/i,
	        transformProps = ["perspective", "rotate", "rotatex", "rotatey", "rotatez", "rotate3d", "scale", "scalex", "scaley", "scalez", "scale3d", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "translatez", "translate3d", "matrix", "matrix3d"],
	        transform2d = ["rotate", "scale", "scalex", "scaley", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "matrix"],
	        transform2units = { "rotate": "deg", scale: "", skew: "px", translate: "px" },
	        cssPrefix = transforms.css,
	        round = Math.round,
	        BLANK = "",
	        PX = "px",
	        NONE = "none",
	        AUTO = "auto",
	        WIDTH = "width",
	        HEIGHT = "height",
	        HIDDEN = "hidden",
	        ORIGIN = "origin",
	        ABORT_ID = "abortId",
	        OVERFLOW = "overflow",
	        TRANSLATE = "translate",
	        POSITION = "position",
	        COMPLETE_CALLBACK = "completeCallback",
	        TRANSITION = cssPrefix + "transition",
	        TRANSFORM = cssPrefix + "transform",
	        BACKFACE = cssPrefix + "backface-visibility",
	        PERSPECTIVE = cssPrefix + "perspective",
	        DEFAULT_PERSPECTIVE = "1500px",
	        TRANSFORM_PERSPECTIVE = "perspective(" + DEFAULT_PERSPECTIVE + ")",
	        directions = {
	            left: {
	                reverse: "right",
	                property: "left",
	                transition: "translatex",
	                vertical: false,
	                modifier: -1
	            },
	            right: {
	                reverse: "left",
	                property: "left",
	                transition: "translatex",
	                vertical: false,
	                modifier: 1
	            },
	            down: {
	                reverse: "up",
	                property: "top",
	                transition: "translatey",
	                vertical: true,
	                modifier: 1
	            },
	            up: {
	                reverse: "down",
	                property: "top",
	                transition: "translatey",
	                vertical: true,
	                modifier: -1
	            },
	            top: {
	                reverse: "bottom"
	            },
	            bottom: {
	                reverse: "top"
	            },
	            "in": {
	                reverse: "out",
	                modifier: -1
	            },
	            out: {
	                reverse: "in",
	                modifier: 1
	            },

	            vertical: {
	                reverse: "vertical"
	            },

	            horizontal: {
	                reverse: "horizontal"
	            }
	        };

	    kendo.directions = directions;

	    extend($.fn, {
	        kendoStop: function(clearQueue, gotoEnd) {
	            if (transitions) {
	                return fx.stopQueue(this, clearQueue || false, gotoEnd || false);
	            } else {
	                return this.stop(clearQueue, gotoEnd);
	            }
	        }
	    });

	    /* jQuery support for all transform animations (FF 3.5/3.6, Opera 10.x, IE9 */

	    if (transforms && !transitions) {
	        each(transform2d, function(idx, value) {
	            $.fn[value] = function(val) {
	                if (typeof val == "undefined") {
	                    return animationProperty(this, value);
	                } else {
	                    var that = $(this)[0],
	                        transformValue = value + "(" + val + transform2units[value.replace(unitRegExp, "")] + ")";

	                    if (that.style.cssText.indexOf(TRANSFORM) == -1) {
	                        $(this).css(TRANSFORM, transformValue);
	                    } else {
	                        that.style.cssText = that.style.cssText.replace(new RegExp(value + "\\(.*?\\)", "i"), transformValue);
	                    }
	                }
	                return this;
	            };

	            $.fx.step[value] = function (fx) {
	                $(fx.elem)[value](fx.now);
	            };
	        });

	        var curProxy = $.fx.prototype.cur;
	        $.fx.prototype.cur = function () {
	            if (transform2d.indexOf(this.prop) != -1) {
	                return parseFloat($(this.elem)[this.prop]());
	            }

	            return curProxy.apply(this, arguments);
	        };
	    }

	    kendo.toggleClass = function(element, classes, options, add) {
	        if (classes) {
	            classes = classes.split(" ");

	            if (transitions) {
	                options = extend({
	                    exclusive: "all",
	                    duration: 400,
	                    ease: "ease-out"
	                }, options);

	                element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease);
	                setTimeout(function() {
	                    element.css(TRANSITION, "").css(HEIGHT);
	                }, options.duration); // TODO: this should fire a kendoAnimate session instead.
	            }

	            each(classes, function(idx, value) {
	                element.toggleClass(value, add);
	            });
	        }

	        return element;
	    };

	    kendo.parseEffects = function(input, mirror) {
	        var effects = {};

	        if (typeof input === "string") {
	            each(input.split(" "), function(idx, value) {
	                var redirectedEffect = !singleEffectRegExp.test(value),
	                    resolved = value.replace(oldEffectsRegExp, function(match, $1, $2) {
	                        return $1 + ":" + $2.toLowerCase();
	                    }), // Support for old zoomIn/fadeOut style, now deprecated.
	                    effect = resolved.split(":"),
	                    direction = effect[1],
	                    effectBody = {};

	                if (effect.length > 1) {
	                    effectBody.direction = (mirror && redirectedEffect ? directions[direction].reverse : direction);
	                }

	                effects[effect[0]] = effectBody;
	            });
	        } else {
	            each(input, function(idx) {
	                var direction = this.direction;

	                if (direction && mirror && !singleEffectRegExp.test(idx)) {
	                    this.direction = directions[direction].reverse;
	                }

	                effects[idx] = this;
	            });
	        }

	        return effects;
	    };

	    function parseInteger(value) {
	        return parseInt(value, 10);
	    }

	    function parseCSS(element, property) {
	        return parseInteger(element.css(property));
	    }

	    function keys(obj) {
	        var acc = [];
	        for (var propertyName in obj) {
	            acc.push(propertyName);
	        }
	        return acc;
	    }

	    function strip3DTransforms(properties) {
	        for (var key in properties) {
	            if (transformProps.indexOf(key) != -1 && transform2d.indexOf(key) == -1) {
	                delete properties[key];
	            }
	        }

	        return properties;
	    }

	    function normalizeCSS(element, properties) {
	        var transformation = [], cssValues = {}, lowerKey, key, value, isTransformed;

	        for (key in properties) {
	            lowerKey = key.toLowerCase();
	            isTransformed = transforms && transformProps.indexOf(lowerKey) != -1;

	            if (!support.hasHW3D && isTransformed && transform2d.indexOf(lowerKey) == -1) {
	                delete properties[key];
	            } else {
	                value = properties[key];

	                if (isTransformed) {
	                    transformation.push(key + "(" + value + ")");
	                } else {
	                    cssValues[key] = value;
	                }
	            }
	        }

	        if (transformation.length) {
	            cssValues[TRANSFORM] = transformation.join(" ");
	        }

	        return cssValues;
	    }

	    if (transitions) {
	        extend(fx, {
	            transition: function(element, properties, options) {
	                var css,
	                    delay = 0,
	                    oldKeys = element.data("keys") || [],
	                    timeoutID;

	                options = extend({
	                        duration: 200,
	                        ease: "ease-out",
	                        complete: null,
	                        exclusive: "all"
	                    },
	                    options
	                );

	                var stopTransitionCalled = false;

	                var stopTransition = function() {
	                    if (!stopTransitionCalled) {
	                        stopTransitionCalled = true;

	                        if (timeoutID) {
	                            clearTimeout(timeoutID);
	                            timeoutID = null;
	                        }

	                        element
	                        .removeData(ABORT_ID)
	                        .dequeue()
	                        .css(TRANSITION, "")
	                        .css(TRANSITION);

	                        options.complete.call(element);
	                    }
	                };

	                options.duration = $.fx ? $.fx.speeds[options.duration] || options.duration : options.duration;

	                css = normalizeCSS(element, properties);

	                $.merge(oldKeys, keys(css));
	                element
	                    .data("keys", $.unique(oldKeys))
	                    .height();

	                element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease).css(TRANSITION);
	                element.css(css).css(TRANSFORM);

	                /**
	                 * Use transitionEnd event for browsers who support it - but duplicate it with setTimeout, as the transitionEnd event will not be triggered if no CSS properties change.
	                 * This should be cleaned up at some point (widget by widget), and refactored to widgets not relying on the complete callback if no transition occurs.
	                 *
	                 * For IE9 and below, resort to setTimeout.
	                 */
	                if (transitions.event) {
	                    element.one(transitions.event, stopTransition);
	                    if (options.duration !== 0) {
	                        delay = 500;
	                    }
	                }

	                timeoutID = setTimeout(stopTransition, options.duration + delay);
	                element.data(ABORT_ID, timeoutID);
	                element.data(COMPLETE_CALLBACK, stopTransition);
	            },

	            stopQueue: function(element, clearQueue, gotoEnd) {
	                var cssValues,
	                    taskKeys = element.data("keys"),
	                    retainPosition = (!gotoEnd && taskKeys),
	                    completeCallback = element.data(COMPLETE_CALLBACK);

	                if (retainPosition) {
	                    cssValues = kendo.getComputedStyles(element[0], taskKeys);
	                }

	                if (completeCallback) {
	                    completeCallback();
	                }

	                if (retainPosition) {
	                    element.css(cssValues);
	                }

	                return element
	                        .removeData("keys")
	                        .stop(clearQueue);
	            }
	        });
	    }

	    function animationProperty(element, property) {
	        if (transforms) {
	            var transform = element.css(TRANSFORM);
	            if (transform == NONE) {
	                return property == "scale" ? 1 : 0;
	            }

	            var match = transform.match(new RegExp(property + "\\s*\\(([\\d\\w\\.]+)")),
	                computed = 0;

	            if (match) {
	                computed = parseInteger(match[1]);
	            } else {
	                match = transform.match(matrix3dRegExp) || [0, 0, 0, 0, 0];
	                property = property.toLowerCase();

	                if (translateXRegExp.test(property)) {
	                    computed = parseFloat(match[3] / match[2]);
	                } else if (property == "translatey") {
	                    computed = parseFloat(match[4] / match[2]);
	                } else if (property == "scale") {
	                    computed = parseFloat(match[2]);
	                } else if (property == "rotate") {
	                    computed = parseFloat(Math.atan2(match[2], match[1]));
	                }
	            }

	            return computed;
	        } else {
	            return parseFloat(element.css(property));
	        }
	    }

	    var EffectSet = kendo.Class.extend({
	        init: function(element, options) {
	            var that = this;

	            that.element = element;
	            that.effects = [];
	            that.options = options;
	            that.restore = [];
	        },

	        run: function(effects) {
	            var that = this,
	                effect,
	                idx, jdx,
	                length = effects.length,
	                element = that.element,
	                options = that.options,
	                deferred = $.Deferred(),
	                start = {},
	                end = {},
	                target,
	                children,
	                childrenLength;

	            that.effects = effects;

	            deferred.then($.proxy(that, "complete"));

	            element.data("animating", true);

	            for (idx = 0; idx < length; idx ++) {
	                effect = effects[idx];

	                effect.setReverse(options.reverse);
	                effect.setOptions(options);

	                that.addRestoreProperties(effect.restore);

	                effect.prepare(start, end);

	                children = effect.children();

	                for (jdx = 0, childrenLength = children.length; jdx < childrenLength; jdx ++) {
	                    children[jdx].duration(options.duration).run();
	                }
	            }

	            // legacy support for options.properties
	            for (var effectName in options.effects) {
	                extend(end, options.effects[effectName].properties);
	            }

	            // Show the element initially
	            if (!element.is(":visible")) {
	                extend(start, { display: element.data("olddisplay") || "block" });
	            }

	            if (transforms && !options.reset) {
	                target = element.data("targetTransform");

	                if (target) {
	                    start = extend(target, start);
	                }
	            }

	            start = normalizeCSS(element, start);

	            if (transforms && !transitions) {
	                start = strip3DTransforms(start);
	            }

	            element.css(start)
	                   .css(TRANSFORM); // Nudge

	            for (idx = 0; idx < length; idx ++) {
	                effects[idx].setup();
	            }

	            if (options.init) {
	                options.init();
	            }

	            element.data("targetTransform", end);
	            fx.animate(element, end, extend({}, options, { complete: deferred.resolve }));

	            return deferred.promise();
	        },

	        stop: function() {
	            $(this.element).kendoStop(true, true);
	        },

	        addRestoreProperties: function(restore) {
	            var element = this.element,
	                value,
	                i = 0,
	                length = restore.length;

	            for (; i < length; i ++) {
	                value = restore[i];

	                this.restore.push(value);

	                if (!element.data(value)) {
	                    element.data(value, element.css(value));
	                }
	            }
	        },

	        restoreCallback: function() {
	            var element = this.element;

	            for (var i = 0, length = this.restore.length; i < length; i ++) {
	                var value = this.restore[i];
	                element.css(value, element.data(value));
	            }
	        },

	        complete: function() {
	            var that = this,
	                idx = 0,
	                element = that.element,
	                options = that.options,
	                effects = that.effects,
	                length = effects.length;

	            element
	                .removeData("animating")
	                .dequeue(); // call next animation from the queue

	            if (options.hide) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            this.restoreCallback();

	            if (hasZoom && !transforms) {
	                setTimeout($.proxy(this, "restoreCallback"), 0); // Again jQuery callback in IE8-
	            }

	            for (; idx < length; idx ++) {
	                effects[idx].teardown();
	            }

	            if (options.completeCallback) {
	                options.completeCallback(element);
	            }
	        }
	    });

	    fx.promise = function(element, options) {
	        var effects = [],
	            effectClass,
	            effectSet = new EffectSet(element, options),
	            parsedEffects = kendo.parseEffects(options.effects),
	            effect;

	        options.effects = parsedEffects;

	        for (var effectName in parsedEffects) {
	            effectClass = fx[capitalize(effectName)];

	            if (effectClass) {
	                effect = new effectClass(element, parsedEffects[effectName].direction);
	                effects.push(effect);
	           }
	        }

	        if (effects[0]) {
	            effectSet.run(effects);
	        } else { // Not sure how would an fx promise reach this state - means that you call kendoAnimate with no valid effects? Why?
	            if (!element.is(":visible")) {
	                element.css({ display: element.data("olddisplay") || "block" }).css("display");
	            }

	            if (options.init) {
	                options.init();
	            }

	            element.dequeue();
	            effectSet.complete();
	        }
	    };

	    extend(fx, {
	        animate: function(elements, properties, options) {
	            var useTransition = options.transition !== false;
	            delete options.transition;

	            if (transitions && "transition" in fx && useTransition) {
	                fx.transition(elements, properties, options);
	            } else {
	                if (transforms) {
	                    elements.animate(strip3DTransforms(properties), { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
	                } else {
	                    elements.each(function() {
	                        var element = $(this),
	                            multiple = {};

	                        each(transformProps, function(idx, value) { // remove transforms to avoid IE and older browsers confusion
	                            var params,
	                                currentValue = properties ? properties[value]+ " " : null; // We need to match

	                            if (currentValue) {
	                                var single = properties;

	                                if (value in scaleProperties && properties[value] !== undefined) {
	                                    params = currentValue.match(cssParamsRegExp);
	                                    if (transforms) {
	                                        extend(single, { scale: +params[0] });
	                                    }
	                                } else {
	                                    if (value in translateProperties && properties[value] !== undefined) {
	                                        var position = element.css(POSITION),
	                                            isFixed = (position == "absolute" || position == "fixed");

	                                        if (!element.data(TRANSLATE)) {
	                                            if (isFixed) {
	                                                element.data(TRANSLATE, {
	                                                    top: parseCSS(element, "top") || 0,
	                                                    left: parseCSS(element, "left") || 0,
	                                                    bottom: parseCSS(element, "bottom"),
	                                                    right: parseCSS(element, "right")
	                                                });
	                                            } else {
	                                                element.data(TRANSLATE, {
	                                                    top: parseCSS(element, "marginTop") || 0,
	                                                    left: parseCSS(element, "marginLeft") || 0
	                                                });
	                                            }
	                                        }

	                                        var originalPosition = element.data(TRANSLATE);

	                                        params = currentValue.match(cssParamsRegExp);
	                                        if (params) {

	                                            var dX = value == TRANSLATE + "y" ? +null : +params[1],
	                                                dY = value == TRANSLATE + "y" ? +params[1] : +params[2];

	                                            if (isFixed) {
	                                                if (!isNaN(originalPosition.right)) {
	                                                    if (!isNaN(dX)) { extend(single, { right: originalPosition.right - dX }); }
	                                                } else {
	                                                    if (!isNaN(dX)) { extend(single, { left: originalPosition.left + dX }); }
	                                                }

	                                                if (!isNaN(originalPosition.bottom)) {
	                                                    if (!isNaN(dY)) { extend(single, { bottom: originalPosition.bottom - dY }); }
	                                                } else {
	                                                    if (!isNaN(dY)) { extend(single, { top: originalPosition.top + dY }); }
	                                                }
	                                            } else {
	                                                if (!isNaN(dX)) { extend(single, { marginLeft: originalPosition.left + dX }); }
	                                                if (!isNaN(dY)) { extend(single, { marginTop: originalPosition.top + dY }); }
	                                            }
	                                        }
	                                    }
	                                }

	                                if (!transforms && value != "scale" && value in single) {
	                                    delete single[value];
	                                }

	                                if (single) {
	                                    extend(multiple, single);
	                                }
	                            }
	                        });

	                        if (browser.msie) {
	                            delete multiple.scale;
	                        }

	                        element.animate(multiple, { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
	                    });
	                }
	            }
	        }
	    });

	    fx.animatedPromise = fx.promise;

	    var Effect = kendo.Class.extend({
	        init: function(element, direction) {
	            var that = this;
	            that.element = element;
	            that._direction = direction;
	            that.options = {};
	            that._additionalEffects = [];

	            if (!that.restore) {
	                that.restore = [];
	            }
	        },

	// Public API
	        reverse: function() {
	            this._reverse = true;
	            return this.run();
	        },

	        play: function() {
	            this._reverse = false;
	            return this.run();
	        },

	        add: function(additional) {
	            this._additionalEffects.push(additional);
	            return this;
	        },

	        direction: function(value) {
	            this._direction = value;
	            return this;
	        },

	        duration: function(duration) {
	            this._duration = duration;
	            return this;
	        },

	        compositeRun: function() {
	            var that = this,
	                effectSet = new EffectSet(that.element, { reverse: that._reverse, duration: that._duration }),
	                effects = that._additionalEffects.concat([ that ]);

	            return effectSet.run(effects);
	        },

	        run: function() {
	            if (this._additionalEffects && this._additionalEffects[0]) {
	                return this.compositeRun();
	            }

	            var that = this,
	                element = that.element,
	                idx = 0,
	                restore = that.restore,
	                length = restore.length,
	                value,
	                deferred = $.Deferred(),
	                start = {},
	                end = {},
	                target,
	                children = that.children(),
	                childrenLength = children.length;

	            deferred.then($.proxy(that, "_complete"));

	            element.data("animating", true);

	            for (idx = 0; idx < length; idx ++) {
	                value = restore[idx];

	                if (!element.data(value)) {
	                    element.data(value, element.css(value));
	                }
	            }

	            for (idx = 0; idx < childrenLength; idx ++) {
	                children[idx].duration(that._duration).run();
	            }

	            that.prepare(start, end);

	            if (!element.is(":visible")) {
	                extend(start, { display: element.data("olddisplay") || "block" });
	            }

	            if (transforms) {
	                target = element.data("targetTransform");

	                if (target) {
	                    start = extend(target, start);
	                }
	            }

	            start = normalizeCSS(element, start);

	            if (transforms && !transitions) {
	                start = strip3DTransforms(start);
	            }

	            element.css(start).css(TRANSFORM); // Trick webkit into re-rendering

	            that.setup();

	            element.data("targetTransform", end);
	            fx.animate(element, end, { duration: that._duration, complete: deferred.resolve });

	            return deferred.promise();
	        },

	        stop: function() {
	            var idx = 0,
	                children = this.children(),
	                childrenLength = children.length;

	            for (idx = 0; idx < childrenLength; idx ++) {
	                children[idx].stop();
	            }

	            $(this.element).kendoStop(true, true);
	            return this;
	        },

	        restoreCallback: function() {
	            var element = this.element;

	            for (var i = 0, length = this.restore.length; i < length; i ++) {
	                var value = this.restore[i];
	                element.css(value, element.data(value));
	            }
	        },

	        _complete: function() {
	            var that = this,
	                element = that.element;

	            element
	                .removeData("animating")
	                .dequeue(); // call next animation from the queue

	            that.restoreCallback();

	            if (that.shouldHide()) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            if (hasZoom && !transforms) {
	                setTimeout($.proxy(that, "restoreCallback"), 0); // Again jQuery callback in IE8-
	            }

	            that.teardown();
	        },

	        /////////////////////////// Support for kendo.animate;
	        setOptions: function(options) {
	            extend(true, this.options, options);
	        },

	        children: function() {
	            return [];
	        },

	        shouldHide: $.noop,

	        setup: $.noop,
	        prepare: $.noop,
	        teardown: $.noop,
	        directions: [],

	        setReverse: function(reverse) {
	            this._reverse = reverse;
	            return this;
	        }
	    });

	    function capitalize(word) {
	        return word.charAt(0).toUpperCase() + word.substring(1);
	    }

	    function createEffect(name, definition) {
	        var effectClass = Effect.extend(definition),
	            directions = effectClass.prototype.directions;

	        fx[capitalize(name)] = effectClass;

	        fx.Element.prototype[name] = function(direction, opt1, opt2, opt3) {
	            return new effectClass(this.element, direction, opt1, opt2, opt3);
	        };

	        each(directions, function(idx, theDirection) {
	            fx.Element.prototype[name + capitalize(theDirection)] = function(opt1, opt2, opt3) {
	                return new effectClass(this.element, theDirection, opt1, opt2, opt3);
	            };
	        });
	    }

	    var FOUR_DIRECTIONS = ["left", "right", "up", "down"],
	        IN_OUT = ["in", "out"];

	    createEffect("slideIn", {
	        directions: FOUR_DIRECTIONS,

	        divisor: function(value) {
	            this.options.divisor = value;
	            return this;
	        },

	        prepare: function(start, end) {
	            var that = this,
	                tmp,
	                element = that.element,
	                outerWidth = kendo._outerWidth,
	                outerHeight = kendo._outerHeight,
	                direction = directions[that._direction],
	                offset = -direction.modifier * (direction.vertical ? outerHeight(element) : outerWidth(element)),
	                startValue = offset / (that.options && that.options.divisor || 1) + PX,
	                endValue = "0px";

	            if (that._reverse) {
	                tmp = start;
	                start = end;
	                end = tmp;
	            }

	            if (transforms) {
	                start[direction.transition] = startValue;
	                end[direction.transition] = endValue;
	            } else {
	                start[direction.property] = startValue;
	                end[direction.property] = endValue;
	            }
	        }
	    });

	    createEffect("tile", {
	        directions: FOUR_DIRECTIONS,

	        init: function(element, direction, previous) {
	            Effect.prototype.init.call(this, element, direction);
	            this.options = { previous: previous };
	        },

	        previousDivisor: function(value) {
	            this.options.previousDivisor = value;
	            return this;
	        },

	        children: function() {
	            var that = this,
	                reverse = that._reverse,
	                previous = that.options.previous,
	                divisor = that.options.previousDivisor || 1,
	                dir = that._direction;

	            var children = [ kendo.fx(that.element).slideIn(dir).setReverse(reverse) ];

	            if (previous) {
	                children.push( kendo.fx(previous).slideIn(directions[dir].reverse).divisor(divisor).setReverse(!reverse) );
	            }

	            return children;
	        }
	    });

	    function createToggleEffect(name, property, defaultStart, defaultEnd) {
	        createEffect(name, {
	            directions: IN_OUT,

	            startValue: function(value) {
	                this._startValue = value;
	                return this;
	            },

	            endValue: function(value) {
	                this._endValue = value;
	                return this;
	            },

	            shouldHide: function() {
	               return this._shouldHide;
	            },

	            prepare: function(start, end) {
	                var that = this,
	                    startValue,
	                    endValue,
	                    out = this._direction === "out",
	                    startDataValue = that.element.data(property),
	                    startDataValueIsSet = !(isNaN(startDataValue) || startDataValue == defaultStart);

	                if (startDataValueIsSet) {
	                    startValue = startDataValue;
	                } else if (typeof this._startValue !== "undefined") {
	                    startValue = this._startValue;
	                } else {
	                    startValue = out ? defaultStart : defaultEnd;
	                }

	                if (typeof this._endValue !== "undefined") {
	                    endValue = this._endValue;
	                } else {
	                    endValue = out ? defaultEnd : defaultStart;
	                }

	                if (this._reverse) {
	                    start[property] = endValue;
	                    end[property] = startValue;
	                } else {
	                    start[property] = startValue;
	                    end[property] = endValue;
	                }

	                that._shouldHide = end[property] === defaultEnd;
	            }
	        });
	    }

	    createToggleEffect("fade", "opacity", 1, 0);
	    createToggleEffect("zoom", "scale", 1, 0.01);

	    createEffect("slideMargin", {
	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                origin = element.data(ORIGIN),
	                offset = options.offset,
	                margin,
	                reverse = that._reverse;

	            if (!reverse && origin === null) {
	                element.data(ORIGIN, parseFloat(element.css("margin-" + options.axis)));
	            }

	            margin = (element.data(ORIGIN) || 0);
	            end["margin-" + options.axis] = !reverse ? margin + offset : margin;
	        }
	    });

	    createEffect("slideTo", {
	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                offset = options.offset.split(","),
	                reverse = that._reverse;

	            if (transforms) {
	                end.translatex = !reverse ? offset[0] : 0;
	                end.translatey = !reverse ? offset[1] : 0;
	            } else {
	                end.left = !reverse ? offset[0] : 0;
	                end.top = !reverse ? offset[1] : 0;
	            }
	            element.css("left");
	        }
	    });

	    createEffect("expand", {
	        directions: ["horizontal", "vertical"],

	        restore: [ OVERFLOW ],

	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                reverse = that._reverse,
	                property = that._direction === "vertical" ? HEIGHT : WIDTH,
	                setLength = element[0].style[property],
	                oldLength = element.data(property),
	                length = parseFloat(oldLength || setLength),
	                realLength = round(element.css(property, AUTO)[property]());

	            start.overflow = HIDDEN;

	            length = (options && options.reset) ? realLength || length : length || realLength;

	            end[property] = (reverse ? 0 : length) + PX;
	            start[property] = (reverse ? length : 0) + PX;

	            if (oldLength === undefined) {
	                element.data(property, setLength);
	            }
	        },

	        shouldHide: function() {
	           return this._reverse;
	        },

	        teardown: function() {
	            var that = this,
	                element = that.element,
	                property = that._direction === "vertical" ? HEIGHT : WIDTH,
	                length = element.data(property);

	            if (length == AUTO || length === BLANK) {
	                setTimeout(function() { element.css(property, AUTO).css(property); }, 0); // jQuery animate complete callback in IE is called before the last animation step!
	            }
	        }
	    });

	    var TRANSFER_START_STATE = { position: "absolute", marginLeft: 0, marginTop: 0, scale: 1 };
	    /**
	     * Intersection point formulas are taken from here - http://zonalandeducation.com/mmts/intersections/intersectionOfTwoLines1/intersectionOfTwoLines1.html
	     * Formula for a linear function from two points from here - http://demo.activemath.org/ActiveMath2/search/show.cmd?id=mbase://AC_UK_calculus/functions/ex_linear_equation_two_points
	     * The transform origin point is the intersection point of the two lines from the top left corners/top right corners of the element and target.
	     * The math and variables below MAY BE SIMPLIFIED (zeroes removed), but this would make the formula too cryptic.
	     */
	    createEffect("transfer", {
	        init: function(element, target) {
	            this.element = element;
	            this.options = { target: target };
	            this.restore = [];
	        },

	        setup: function() {
	            this.element.appendTo(document.body);
	        },

	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                outerBox = fx.box(element),
	                innerBox = fx.box(that.options.target),
	                currentScale = animationProperty(element, "scale"),
	                scale = fx.fillScale(innerBox, outerBox),
	                transformOrigin = fx.transformOrigin(innerBox, outerBox);

	            extend(start, TRANSFER_START_STATE);
	            end.scale = 1;

	            element.css(TRANSFORM, "scale(1)").css(TRANSFORM);
	            element.css(TRANSFORM, "scale(" + currentScale + ")");

	            start.top = outerBox.top;
	            start.left = outerBox.left;
	            start.transformOrigin = transformOrigin.x + PX + " " + transformOrigin.y + PX;

	            if (that._reverse) {
	                start.scale = scale;
	            } else {
	                end.scale = scale;
	            }
	        }
	    });


	    var CLIPS = {
	        top: "rect(auto auto $size auto)",
	        bottom: "rect($size auto auto auto)",
	        left: "rect(auto $size auto auto)",
	        right: "rect(auto auto auto $size)"
	    };

	    var ROTATIONS = {
	        top:    { start: "rotatex(0deg)", end: "rotatex(180deg)" },
	        bottom: { start: "rotatex(-180deg)", end: "rotatex(0deg)" },
	        left:   { start: "rotatey(0deg)", end: "rotatey(-180deg)" },
	        right:  { start: "rotatey(180deg)", end: "rotatey(0deg)" }
	    };

	    function clipInHalf(container, direction) {
	        var vertical = kendo.directions[direction].vertical,
	            size = (container[vertical ? HEIGHT : WIDTH]() / 2) + "px";

	        return CLIPS[direction].replace("$size", size);
	    }

	    createEffect("turningPage", {
	        directions: FOUR_DIRECTIONS,

	        init: function(element, direction, container) {
	            Effect.prototype.init.call(this, element, direction);
	            this._container = container;
	        },

	        prepare: function(start, end) {
	            var that = this,
	                reverse = that._reverse,
	                direction = reverse ? directions[that._direction].reverse : that._direction,
	                rotation = ROTATIONS[direction];

	            start.zIndex = 1;

	            if (that._clipInHalf) {
	               start.clip = clipInHalf(that._container, kendo.directions[direction].reverse);
	            }

	            start[BACKFACE] = HIDDEN;

	            end[TRANSFORM] = TRANSFORM_PERSPECTIVE + (reverse ? rotation.start : rotation.end);
	            start[TRANSFORM] = TRANSFORM_PERSPECTIVE + (reverse ? rotation.end : rotation.start);
	        },

	        setup: function() {
	            this._container.append(this.element);
	        },

	        face: function(value) {
	            this._face = value;
	            return this;
	        },

	        shouldHide: function() {
	            var that = this,
	                reverse = that._reverse,
	                face = that._face;

	            return (reverse && !face) || (!reverse && face);
	        },

	        clipInHalf: function(value) {
	            this._clipInHalf = value;
	            return this;
	        },

	        temporary: function() {
	            this.element.addClass('temp-page');
	            return this;
	        }
	    });

	    createEffect("staticPage", {
	        directions: FOUR_DIRECTIONS,

	        init: function(element, direction, container) {
	            Effect.prototype.init.call(this, element, direction);
	            this._container = container;
	        },

	        restore: ["clip"],

	        prepare: function(start, end) {
	            var that = this,
	                direction = that._reverse ? directions[that._direction].reverse : that._direction;

	            start.clip = clipInHalf(that._container, direction);
	            start.opacity = 0.999;
	            end.opacity = 1;
	        },

	        shouldHide: function() {
	            var that = this,
	                reverse = that._reverse,
	                face = that._face;

	            return (reverse && !face) || (!reverse && face);
	        },

	        face: function(value) {
	            this._face = value;
	            return this;
	        }
	    });

	    createEffect("pageturn", {
	        directions: ["horizontal", "vertical"],

	        init: function(element, direction, face, back) {
	            Effect.prototype.init.call(this, element, direction);
	            this.options = {};
	            this.options.face = face;
	            this.options.back = back;
	        },

	        children: function() {
	            var that = this,
	                options = that.options,
	                direction = that._direction === "horizontal" ? "left" : "top",
	                reverseDirection = kendo.directions[direction].reverse,
	                reverse = that._reverse,
	                temp,
	                faceClone = options.face.clone(true).removeAttr("id"),
	                backClone = options.back.clone(true).removeAttr("id"),
	                element = that.element;

	            if (reverse) {
	                temp = direction;
	                direction = reverseDirection;
	                reverseDirection = temp;
	            }

	            return [
	                kendo.fx(options.face).staticPage(direction, element).face(true).setReverse(reverse),
	                kendo.fx(options.back).staticPage(reverseDirection, element).setReverse(reverse),
	                kendo.fx(faceClone).turningPage(direction, element).face(true).clipInHalf(true).temporary().setReverse(reverse),
	                kendo.fx(backClone).turningPage(reverseDirection, element).clipInHalf(true).temporary().setReverse(reverse)
	            ];
	        },

	        prepare: function(start, end) {
	            start[PERSPECTIVE] = DEFAULT_PERSPECTIVE;
	            start.transformStyle = "preserve-3d";
	            // hack to trigger transition end.
	            start.opacity = 0.999;
	            end.opacity = 1;
	        },

	        teardown: function() {
	            this.element.find(".temp-page").remove();
	        }
	    });

	    createEffect("flip", {
	        directions: ["horizontal", "vertical"],

	        init: function(element, direction, face, back) {
	            Effect.prototype.init.call(this, element, direction);
	            this.options = {};
	            this.options.face = face;
	            this.options.back = back;
	        },

	        children: function() {
	            var that = this,
	                options = that.options,
	                direction = that._direction === "horizontal" ? "left" : "top",
	                reverseDirection = kendo.directions[direction].reverse,
	                reverse = that._reverse,
	                temp,
	                element = that.element;

	            if (reverse) {
	                temp = direction;
	                direction = reverseDirection;
	                reverseDirection = temp;
	            }

	            return [
	                kendo.fx(options.face).turningPage(direction, element).face(true).setReverse(reverse),
	                kendo.fx(options.back).turningPage(reverseDirection, element).setReverse(reverse)
	            ];
	        },

	        prepare: function(start) {
	            start[PERSPECTIVE] = DEFAULT_PERSPECTIVE;
	            start.transformStyle = "preserve-3d";
	        }
	    });

	    var RESTORE_OVERFLOW = !support.mobileOS.android;
	    var IGNORE_TRANSITION_EVENT_SELECTOR = ".km-touch-scrollbar, .km-actionsheet-wrapper";

	    createEffect("replace", {
	        _before: $.noop,
	        _after: $.noop,
	        init: function(element, previous, transitionClass) {
	            Effect.prototype.init.call(this, element);
	            this._previous = $(previous);
	            this._transitionClass = transitionClass;
	        },

	        duration: function() {
	            throw new Error("The replace effect does not support duration setting; the effect duration may be customized through the transition class rule");
	        },

	        beforeTransition: function(callback) {
	            this._before = callback;
	            return this;
	        },

	        afterTransition: function(callback) {
	            this._after = callback;
	            return this;
	        },

	        _both: function() {
	            return $().add(this._element).add(this._previous);
	        },

	        _containerClass: function() {
	            var direction = this._direction,
	                containerClass = "k-fx k-fx-start k-fx-" + this._transitionClass;

	            if (direction) {
	                containerClass += " k-fx-" + direction;
	            }

	            if (this._reverse) {
	                containerClass += " k-fx-reverse";
	            }

	            return containerClass;
	        },

	        complete: function(e) {
	            if (!this.deferred || (e && $(e.target).is(IGNORE_TRANSITION_EVENT_SELECTOR))) {
	                return;
	            }

	            var container = this.container;

	            container
	                .removeClass("k-fx-end")
	                .removeClass(this._containerClass())
	                .off(transitions.event, this.completeProxy);

	            this._previous.hide().removeClass("k-fx-current");
	            this.element.removeClass("k-fx-next");

	            if (RESTORE_OVERFLOW) {
	                container.css(OVERFLOW, "");
	            }

	            if (!this.isAbsolute) {
	                this._both().css(POSITION, "");
	            }

	            this.deferred.resolve();
	            delete this.deferred;
	        },

	        run: function() {
	            if (this._additionalEffects && this._additionalEffects[0]) {
	                return this.compositeRun();
	            }

	            var that = this,
	                element = that.element,
	                previous = that._previous,
	                container = element.parents().filter(previous.parents()).first(),
	                both = that._both(),
	                deferred = $.Deferred(),
	                originalPosition = element.css(POSITION),
	                originalOverflow;

	            // edge case for grid/scheduler, where the previous is already destroyed.
	            if (!container.length) {
	                container = element.parent();
	            }

	            this.container = container;
	            this.deferred = deferred;
	            this.isAbsolute = originalPosition  == "absolute";

	            if (!this.isAbsolute) {
	                both.css(POSITION, "absolute");
	            }

	            if (RESTORE_OVERFLOW) {
	                originalOverflow = container.css(OVERFLOW);
	                container.css(OVERFLOW, "hidden");
	            }

	            if (!transitions) {
	                this.complete();
	            } else {
	                element.addClass("k-fx-hidden");

	                container.addClass(this._containerClass());

	                this.completeProxy = $.proxy(this, "complete");
	                container.on(transitions.event, this.completeProxy);

	                kendo.animationFrame(function() {
	                    element.removeClass("k-fx-hidden").addClass("k-fx-next");
	                    previous.css("display", "").addClass("k-fx-current");
	                    that._before(previous, element);
	                    kendo.animationFrame(function() {
	                        container.removeClass("k-fx-start").addClass("k-fx-end");
	                        that._after(previous, element);
	                    });
	                });
	            }

	            return deferred.promise();
	        },

	        stop: function() {
	            this.complete();
	        }
	    });

	    var Animation = kendo.Class.extend({
	        init: function() {
	            var that = this;
	            that._tickProxy = proxy(that._tick, that);
	            that._started = false;
	        },

	        tick: $.noop,
	        done: $.noop,
	        onEnd: $.noop,
	        onCancel: $.noop,

	        start: function() {
	            if (!this.enabled()) {
	                return;
	            }

	            if (!this.done()) {
	                this._started = true;
	                kendo.animationFrame(this._tickProxy);
	            } else {
	                this.onEnd();
	            }
	        },

	        enabled: function() {
	            return true;
	        },

	        cancel: function() {
	            this._started = false;
	            this.onCancel();
	        },

	        _tick: function() {
	            var that = this;
	            if (!that._started) { return; }

	            that.tick();

	            if (!that.done()) {
	                kendo.animationFrame(that._tickProxy);
	            } else {
	                that._started = false;
	                that.onEnd();
	            }
	        }
	    });

	    var Transition = Animation.extend({
	        init: function(options) {
	            var that = this;
	            extend(that, options);
	            Animation.fn.init.call(that);
	        },

	        done: function() {
	            return this.timePassed() >= this.duration;
	        },

	        timePassed: function() {
	            return Math.min(this.duration, (new Date()) - this.startDate);
	        },

	        moveTo: function(options) {
	            var that = this,
	                movable = that.movable;

	            that.initial = movable[that.axis];
	            that.delta = options.location - that.initial;

	            that.duration = typeof options.duration == "number" ? options.duration : 300;

	            that.tick = that._easeProxy(options.ease);

	            that.startDate = new Date();
	            that.start();
	        },

	        _easeProxy: function(ease) {
	            var that = this;

	            return function() {
	                that.movable.moveAxis(that.axis, ease(that.timePassed(), that.initial, that.delta, that.duration));
	            };
	        }
	    });

	    extend(Transition, {
	        easeOutExpo: function (t, b, c, d) {
	            return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	        },

	        easeOutBack: function (t, b, c, d, s) {
	            s = 1.70158;
	            return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
	        }
	    });

	    fx.Animation = Animation;
	    fx.Transition = Transition;
	    fx.createEffect = createEffect;

	    fx.box = function(element) {
	        element = $(element);
	        var result = element.offset();
	        result.width = kendo._outerWidth(element);
	        result.height = kendo._outerHeight(element);
	        return result;
	    };

	    fx.transformOrigin = function(inner, outer) {
	        var x = (inner.left - outer.left) * outer.width / (outer.width - inner.width),
	            y = (inner.top - outer.top) * outer.height / (outer.height - inner.height);

	        return {
	            x: isNaN(x) ? 0 : x,
	            y: isNaN(y) ? 0 : y
	        };
	    };

	    fx.fillScale = function(inner, outer) {
	        return Math.min(inner.width / outer.width, inner.height / outer.height);
	    };

	    fx.fitScale = function(inner, outer) {
	        return Math.max(inner.width / outer.width, inner.height / outer.height);
	    };
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 31 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.pane.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(790);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 766:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.loader */ 125);

/***/ },

/***/ 767:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.view */ 128);

/***/ },

/***/ 790:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(767), __webpack_require__(766) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.pane",
	    name: "Pane",
	    category: "mobile",
	    description: "Mobile Pane",
	    depends: [ "mobile.view", "mobile.loader" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        roleSelector = kendo.roleSelector,
	        ui = mobile.ui,
	        Widget = ui.Widget,
	        ViewEngine = mobile.ViewEngine,
	        View = ui.View,
	        Loader = mobile.ui.Loader,

	        EXTERNAL = "external",
	        HREF = "href",
	        DUMMY_HREF = "#!",

	        NAVIGATE = "navigate",
	        VIEW_SHOW = "viewShow",
	        SAME_VIEW_REQUESTED = "sameViewRequested",
	        OS = kendo.support.mobileOS,
	        SKIP_TRANSITION_ON_BACK_BUTTON = OS.ios && !OS.appMode && OS.flatVersion >= 700,
	        WIDGET_RELS = /popover|actionsheet|modalview|drawer/,
	        BACK = "#:back",

	        attrValue = kendo.attrValue;

	    var Pane = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element;

	            element.addClass("km-pane");

	            if (that.options.collapsible) {
	                element.addClass("km-collapsible-pane");
	            }

	            this.history = [];

	            this.historyCallback = function(url, params, backButtonPressed) {
	                var transition = that.transition;
	                that.transition = null;

	                // swiping back in iOS leaves the app in a very broken state if we perform a transition
	                if (SKIP_TRANSITION_ON_BACK_BUTTON && backButtonPressed) {
	                    transition = "none";
	                }

	                return that.viewEngine.showView(url, transition, params);
	            };

	            this._historyNavigate = function(url) {
	                if (url === BACK) {
	                    if (that.history.length === 1) {
	                        return;
	                    }

	                    that.history.pop();
	                    url = that.history[that.history.length - 1];
	                } else {
	                    that.history.push(url);
	                }

	                that.historyCallback(url, kendo.parseQueryStringParams(url));
	            };

	            this._historyReplace = function(url) {
	                var params = kendo.parseQueryStringParams(url);
	                that.history[that.history.length - 1] = url;
	                that.historyCallback(url, params);
	            };

	            that.loader = new Loader(element, {
	                loading: that.options.loading
	            });

	            that.viewEngine = new ViewEngine({
	                container: element,
	                transition: options.transition,
	                modelScope: options.modelScope,
	                rootNeeded: !options.initial,
	                serverNavigation: options.serverNavigation,
	                remoteViewURLPrefix: options.root || "",
	                layout: options.layout,
	                $angular: options.$angular,
	                loader: that.loader,

	                showStart: function() {
	                    that.loader.transition();
	                    that.closeActiveDialogs();
	                },

	                after: function() {
	                    that.loader.transitionDone();
	                },

	                viewShow: function(e) {
	                    that.trigger(VIEW_SHOW, e);
	                },

	                loadStart: function() {
	                    that.loader.show();
	                },

	                loadComplete: function() {
	                    that.loader.hide();
	                },

	                sameViewRequested: function() {
	                    that.trigger(SAME_VIEW_REQUESTED);
	                },

	                viewTypeDetermined: function(e) {
	                    if (!e.remote || !that.options.serverNavigation)  {
	                        that.trigger(NAVIGATE, { url: e.url });
	                    }
	                }
	            });


	            this._setPortraitWidth();

	            kendo.onResize(function() {
	                that._setPortraitWidth();
	            });

	            that._setupAppLinks();
	        },

	        closeActiveDialogs: function() {
	            var dialogs = this.element.find(roleSelector("actionsheet popover modalview")).filter(":visible");
	            dialogs.each(function() {
	                kendo.widgetInstance($(this), ui).close();
	            });
	        },

	        navigateToInitial: function() {
	            var initial = this.options.initial;

	            if (initial) {
	                this.navigate(initial);
	            }

	            return initial;
	        },

	        options: {
	            name: "Pane",
	            portraitWidth: "",
	            transition: "",
	            layout: "",
	            collapsible: false,
	            initial: null,
	            modelScope: window,
	            loading: "<h1>Loading...</h1>"
	        },

	        events: [
	            NAVIGATE,
	            VIEW_SHOW,
	            SAME_VIEW_REQUESTED
	        ],

	        append: function(html) {
	            return this.viewEngine.append(html);
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.viewEngine.destroy();
	            this.userEvents.destroy();
	        },

	        navigate: function(url, transition) {
	            if (url instanceof View) {
	                url = url.id;
	            }

	            this.transition = transition;

	            this._historyNavigate(url);
	        },

	        replace: function(url, transition) {
	            if (url instanceof View) {
	                url = url.id;
	            }

	            this.transition = transition;

	            this._historyReplace(url);
	        },

	        bindToRouter: function(router) {
	            var that = this,
	                history = this.history,
	                viewEngine = this.viewEngine;

	            router.bind("init", function(e) {
	                var url = e.url,
	                    attrUrl = router.pushState ? url : "/";

	                viewEngine.rootView.attr(kendo.attr("url"), attrUrl);

	                // if current is set, then this means that the pane has navigated to a given view - we need to update the router accordingly.
	                var length = history.length;

	                if (url === "/" && length) {
	                    router.navigate(history[length - 1], true);
	                    e.preventDefault(); // prevents from executing routeMissing, by default
	                }
	            });

	            router.bind("routeMissing", function(e) {
	                if (!that.historyCallback(e.url, e.params, e.backButtonPressed)) {
	                    e.preventDefault();
	                }
	            });

	            router.bind("same", function() {
	                that.trigger(SAME_VIEW_REQUESTED);
	            });

	            that._historyNavigate = function(url) {
	                router.navigate(url);
	            };

	            that._historyReplace = function(url) {
	                router.replace(url);
	            };
	        },

	        hideLoading: function() {
	            this.loader.hide();
	        },

	        showLoading: function() {
	            this.loader.show();
	        },

	        changeLoadingMessage: function(message) {
	            this.loader.changeMessage(message);
	        },

	        view: function() {
	            return this.viewEngine.view();
	        },

	        _setPortraitWidth: function() {
	            var width,
	                portraitWidth = this.options.portraitWidth;

	            if (portraitWidth) {
	                width = kendo.mobile.application.element.is(".km-vertical") ? portraitWidth : "auto";
	                this.element.css("width", width);
	            }
	        },

	        _setupAppLinks: function() {
	            var that = this,
	                linkRoles = "tab",
	                pressedButtonSelector = "[data-" + kendo.ns + "navigate-on-press]",

	                buttonSelectors = $.map(["button", "backbutton", "detailbutton", "listview-link"] , function(role) {
	                    return roleSelector(role) + ":not(" + pressedButtonSelector + ")";
	                }).join(",");

	            this.element.handler(this)
	                .on("down", roleSelector(linkRoles) + "," + pressedButtonSelector, "_mouseup")
	                .on("click", roleSelector(linkRoles) + "," + buttonSelectors + "," + pressedButtonSelector, "_appLinkClick");

	            this.userEvents = new kendo.UserEvents(this.element, {
	                fastTap: true,
	                filter: buttonSelectors,
	                tap: function(e) {
	                    e.event.currentTarget = e.touch.currentTarget;
	                    that._mouseup(e.event);
	                }
	            });

	            // remove the ms-touch-action added by the user events, breaks native scrolling in WP8
	            this.element.css('-ms-touch-action', '');
	        },

	        _appLinkClick: function (e) {
	            var href = $(e.currentTarget).attr("href");
	            var remote = href && href[0] !== "#" && this.options.serverNavigation;

	            if(!remote && attrValue($(e.currentTarget), "rel") != EXTERNAL) {
	                e.preventDefault();
	            }
	        },

	        _mouseup: function(e) {
	            if (e.which > 1 || e.isDefaultPrevented()) {
	                return;
	            }

	            var pane = this,
	                link = $(e.currentTarget),
	                transition = attrValue(link, "transition"),
	                rel = attrValue(link, "rel") || "",
	                target = attrValue(link, "target"),
	                href = link.attr(HREF),
	                delayedTouchEnd = SKIP_TRANSITION_ON_BACK_BUTTON && link[0].offsetHeight === 0,
	                remote = href && href[0] !== "#" && this.options.serverNavigation;

	            if (delayedTouchEnd || remote || rel === EXTERNAL || (typeof href === "undefined") || href === DUMMY_HREF) {
	                return;
	            }

	            // Prevent iOS address bar progress display for in app navigation
	            link.attr(HREF, DUMMY_HREF);
	            setTimeout(function() { link.attr(HREF, href); });

	            if (rel.match(WIDGET_RELS)) {
	                kendo.widgetInstance($(href), ui).openFor(link);
	                // if propagation is not stopped and actionsheet is opened from tabstrip,
	                // the actionsheet is closed immediately.
	                if (rel === "actionsheet" || rel === "drawer") {
	                    e.stopPropagation();
	                }
	            } else {
	                if (target === "_top") {
	                    pane = mobile.application.pane;
	                }
	                else if (target) {
	                    pane = $("#" + target).data("kendoMobilePane");
	                }

	                pane.navigate(href, transition);
	            }

	            e.preventDefault();
	        }
	    });

	    Pane.wrap = function(element) {
	        if (!element.is(roleSelector("view"))) {
	            element = element.wrap('<div data-' + kendo.ns + 'role="view" data-stretch="true"></div>').parent();
	        }

	        var paneContainer = element.wrap('<div class="km-pane-wrapper"><div></div></div>').parent(),
	            pane = new Pane(paneContainer);

	        pane.navigate("");

	        return pane;
	    };
	    ui.plugin(Pane);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 32 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.numerictextbox.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(801);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 598:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.userevents */ 33);

/***/ },

/***/ 801:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(598) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "numerictextbox",
	    name: "NumericTextBox",
	    category: "web",
	    description: "The NumericTextBox widget can format and display numeric, percentage or currency textbox.",
	    depends: [ "core", "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        caret = kendo.caret,
	        keys = kendo.keys,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        activeElement = kendo._activeElement,
	        extractFormat = kendo._extractFormat,
	        parse = kendo.parseFloat,
	        placeholderSupported = kendo.support.placeholder,
	        getCulture = kendo.getCulture,
	        CHANGE = "change",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        INPUT = "k-input",
	        SPIN = "spin",
	        ns = ".kendoNumericTextBox",
	        TOUCHEND = "touchend",
	        MOUSELEAVE = "mouseleave" + ns,
	        HOVEREVENTS = "mouseenter" + ns + " " + MOUSELEAVE,
	        DEFAULT = "k-state-default",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        FOCUS = "focus",
	        POINT = ".",
	        SELECTED = "k-state-selected",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_DISABLED = "aria-disabled",
	        INTEGER_REGEXP = /^(-)?(\d*)$/,
	        NULL = null,
	        proxy = $.proxy,
	        extend = $.extend;

	    var NumericTextBox = Widget.extend({
	         init: function(element, options) {
	             var that = this,
	             isStep = options && options.step !== undefined,
	             min, max, step, value, disabled;

	             Widget.fn.init.call(that, element, options);

	             options = that.options;
	             element = that.element
	                           .on("focusout" + ns, proxy(that._focusout, that))
	                           .attr("role", "spinbutton");

	             options.placeholder = options.placeholder || element.attr("placeholder");

	             that._initialOptions = extend({}, options);

	             min = that.min(element.attr("min"));
	             max = that.max(element.attr("max"));
	             step = that._parse(element.attr("step"));

	             if (options.min === NULL && min !== NULL) {
	                 options.min = min;
	             }

	             if (options.max === NULL && max !== NULL) {
	                 options.max = max;
	             }

	             if (!isStep && step !== NULL) {
	                 options.step = step;
	             }

	             that._reset();
	             that._wrapper();
	             that._arrows();
	             that._input();

	             if (!kendo.support.mobileOS) {
	                 that._text.on(FOCUS + ns, proxy(that._click, that));
	             } else {
	                 that._text.on(TOUCHEND + ns + " " + FOCUS + ns, function() {
	                     if (kendo.support.browser.edge) {
	                         that._text.one(FOCUS + ns, function() {
	                             that._toggleText(false);
	                             element.focus();
	                         });
	                     } else {
	                         that._toggleText(false);
	                         element.focus();
	                     }
	                 });
	             }

	             element.attr("aria-valuemin", options.min)
	                    .attr("aria-valuemax", options.max);

	             options.format = extractFormat(options.format);

	             value = options.value;
	             that.value(value !== NULL ? value : element.val());

	             disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

	             if (disabled) {
	                 that.enable(false);
	             } else {
	                 that.readonly(element.is("[readonly]"));
	             }

	             kendo.notify(that);
	         },

	        options: {
	            name: "NumericTextBox",
	            decimals: NULL,
	            restrictDecimals: false,
	            min: NULL,
	            max: NULL,
	            value: NULL,
	            step: 1,
	            round: true,
	            culture: "",
	            format: "n",
	            spinners: true,
	            placeholder: "",
	            upArrowText: "Increase value",
	            downArrowText: "Decrease value"
	        },
	        events: [
	            CHANGE,
	            SPIN
	        ],

	        _editable: function(options) {
	            var that = this,
	                element = that.element,
	                disable = options.disable,
	                readonly = options.readonly,
	                text = that._text.add(element),
	                wrapper = that._inputWrapper.off(HOVEREVENTS);

	            that._toggleText(true);

	            that._upArrowEventHandler.unbind("press");
	            that._downArrowEventHandler.unbind("press");
	            element.off("keydown" + ns).off("keypress" + ns).off("paste" + ns);

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                text.removeAttr(DISABLED)
	                    .removeAttr(READONLY)
	                    .attr(ARIA_DISABLED, false);

	                that._upArrowEventHandler.bind("press", function(e) {
	                    e.preventDefault();
	                    that._spin(1);
	                    that._upArrow.addClass(SELECTED);
	                });

	                that._downArrowEventHandler.bind("press", function(e) {
	                    e.preventDefault();
	                    that._spin(-1);
	                    that._downArrow.addClass(SELECTED);
	                });

	                that.element
	                    .on("keydown" + ns, proxy(that._keydown, that))
	                    .on("keypress" + ns, proxy(that._keypress, that))
	                    .on("paste" + ns, proxy(that._paste, that));

	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                text.attr(DISABLED, disable)
	                    .attr(READONLY, readonly)
	                    .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            that.element
	                .add(that._text)
	                .add(that._upArrow)
	                .add(that._downArrow)
	                .add(that._inputWrapper)
	                .off(ns);

	            that._upArrowEventHandler.destroy();
	            that._downArrowEventHandler.destroy();

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }

	            Widget.fn.destroy.call(that);
	        },

	        min: function(value) {
	            return this._option("min", value);
	        },

	        max: function(value) {
	            return this._option("max", value);
	        },

	        step: function(value) {
	            return this._option("step", value);
	        },

	        value: function(value) {
	            var that = this, adjusted;

	            if (value === undefined) {
	                return that._value;
	            }

	            value = that._parse(value);
	            adjusted = that._adjust(value);

	            if (value !== adjusted) {
	                return;
	            }

	            that._update(value);
	            that._old = that._value;
	        },

	        focus: function() {
	            this._focusin();
	        },

	        _adjust: function(value) {
	            var that = this,
	            options = that.options,
	            min = options.min,
	            max = options.max;

	            if (value === NULL) {
	                return value;
	            }

	            if (min !== NULL && value < min) {
	                value = min;
	            } else if (max !== NULL && value > max) {
	                value = max;
	            }

	            return value;
	        },

	        _arrows: function() {
	            var that = this,
	            arrows,
	            _release = function() {
	                clearTimeout( that._spinning );
	                arrows.removeClass(SELECTED);
	            },
	            options = that.options,
	            spinners = options.spinners,
	            element = that.element;

	            arrows = element.siblings(".k-icon");

	            if (!arrows[0]) {
	                arrows = $(buttonHtml("increase", options.upArrowText) + buttonHtml("decrease", options.downArrowText))
	                        .insertAfter(element);

	                arrows.wrapAll('<span class="k-select"/>');
	            }

	            if (!spinners) {
	                arrows.parent().toggle(spinners);
	                that._inputWrapper.addClass("k-expand-padding");
	            }

	            that._upArrow = arrows.eq(0);
	            that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });
	            that._downArrow = arrows.eq(1);
	            that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });
	        },

	        _blur: function() {
	            var that = this;

	            that._toggleText(true);
	            that._change(that.element.val());
	        },

	        _click: function(e) {
	            var that = this;

	            clearTimeout(that._focusing);
	            that._focusing = setTimeout(function() {
	                var input = e.target,
	                    idx = caret(input)[0],
	                    value = input.value.substring(0, idx),
	                    format = that._format(that.options.format),
	                    group = format[","],
	                    result, groupRegExp, extractRegExp,
	                    caretPosition = 0;

	                if (group) {
	                    groupRegExp = new RegExp("\\" + group, "g");
	                    extractRegExp = new RegExp("([\\d\\" + group + "]+)(\\" + format[POINT] + ")?(\\d+)?");
	                }

	                if (extractRegExp) {
	                    result = extractRegExp.exec(value);
	                }

	                if (result) {
	                    caretPosition = result[0].replace(groupRegExp, "").length;

	                    if (value.indexOf("(") != -1 && that._value < 0) {
	                        caretPosition++;
	                    }
	                }

	                that._focusin();

	                caret(that.element[0], caretPosition);
	            });
	        },

	        _change: function(value) {
	            var that = this;

	            that._update(value);
	            value = that._value;

	            if (that._old != value) {
	                that._old = value;

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _culture: function(culture) {
	            return culture || getCulture(this.options.culture);
	        },

	        _focusin: function() {
	            var that = this;
	            that._inputWrapper.addClass(FOCUSED);
	            that._toggleText(false);
	            that.element[0].focus();
	        },

	        _focusout: function() {
	            var that = this;

	            clearTimeout(that._focusing);
	            that._inputWrapper.removeClass(FOCUSED).removeClass(HOVER);
	            that._blur();
	        },

	        _format: function(format, culture) {
	            var numberFormat = this._culture(culture).numberFormat;

	            format = format.toLowerCase();

	            if (format.indexOf("c") > -1) {
	                numberFormat = numberFormat.currency;
	            } else if (format.indexOf("p") > -1) {
	                numberFormat = numberFormat.percent;
	            }

	            return numberFormat;
	        },

	        _input: function() {
	            var that = this,
	                options = that.options,
	                CLASSNAME = "k-formatted-value",
	                element = that.element.addClass(INPUT).show()[0],
	                accessKey = element.accessKey,
	                wrapper = that.wrapper,
	                text;

	            text = wrapper.find(POINT + CLASSNAME);

	            if (!text[0]) {
	                text = $('<input type="text"/>').insertBefore(element).addClass(CLASSNAME);
	            }

	            try {
	                element.setAttribute("type", "text");
	            } catch(e) {
	                element.type = "text";
	            }

	            that._initialTitle = element.title;
	            text[0].title = element.title;
	            text[0].tabIndex = element.tabIndex;
	            text[0].style.cssText = element.style.cssText;
	            text.prop("placeholder", options.placeholder);

	            if (accessKey) {
	                text.attr("accesskey", accessKey);
	                element.accessKey = "";
	            }

	            that._text = text.addClass(element.className)
	                             .attr({
	                                 "role": "spinbutton",
	                                 "aria-valuemin": options.min,
	                                 "aria-valuemax": options.max
	                             });
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode;

	            that._key = key;

	            if (key == keys.DOWN) {
	                that._step(-1);
	            } else if (key == keys.UP) {
	                that._step(1);
	            } else if (key == keys.ENTER) {
	                that._change(that.element.val());
	            } else {
	                that._typing = true;
	            }

	        },

	        _keypress: function(e) {
	            if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === keys.BACKSPACE || e.keyCode === keys.ENTER) {
	                return;
	            }

	            var that = this;
	            var min = that.options.min;
	            var element = that.element;
	            var selection = caret(element);
	            var selectionStart = selection[0];
	            var selectionEnd = selection[1];
	            var character = String.fromCharCode(e.which);
	            var numberFormat = that._format(that.options.format);
	            var isNumPadDecimal = that._key === keys.NUMPAD_DOT;
	            var value = element.val();
	            var isValid;

	            if (isNumPadDecimal) {
	                character = numberFormat[POINT];
	            }

	            value = value.substring(0, selectionStart) + character + value.substring(selectionEnd);
	            isValid = that._numericRegex(numberFormat).test(value);

	            if (isValid && isNumPadDecimal) {
	                element.val(value);
	                caret(element, selectionStart + character.length);

	                e.preventDefault();
	            } else if ((min !== null && min >= 0 && value.charAt(0) === "-") || !isValid) {
	                e.preventDefault();
	            }

	            that._key = 0;
	        },

	        _numericRegex: function(numberFormat) {
	            var that = this;
	            var separator = numberFormat[POINT];
	            var precision = that.options.decimals;
	            var fractionRule = "*";

	            if (separator === POINT) {
	                separator = "\\" + separator;
	            }

	            if (precision === NULL) {
	                precision = numberFormat.decimals;
	            }

	            if (precision === 0) {
	                return INTEGER_REGEXP;
	            }

	            if (that.options.restrictDecimals) {
	                fractionRule = "{0," + precision + "}";
	            }

	            if (that._separator !== separator) {
	                that._separator = separator;
	                that._floatRegExp = new RegExp("^(-)?(((\\d+(" + separator + "\\d" + fractionRule + ")?)|(" + separator + "\\d" + fractionRule + ")))?$");
	            }

	            return that._floatRegExp;
	        },

	        _paste: function(e) {
	            var that = this;
	            var element = e.target;
	            var value = element.value;
	            var numberFormat = that._format(that.options.format);

	            setTimeout(function() {
	                var result = that._parse(element.value);
	                var isValid = that._numericRegex(numberFormat).test(element.value);

	                if (result === NULL || that._adjust(result) !== result || !isValid) {
	                    that._update(value);
	                }
	            });
	        },

	        _option: function(option, value) {
	            var that = this,
	                element = that.element,
	                options = that.options;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = that._parse(value);

	            if (!value && option === "step") {
	                return;
	            }

	            options[option] = value;
	            element
	                .add(that._text)
	                .attr("aria-value" + option, value);

	            element.attr(option, value);
	        },

	        _spin: function(step, timeout) {
	            var that = this;

	            timeout = timeout || 500;

	            clearTimeout( that._spinning );
	            that._spinning = setTimeout(function() {
	                that._spin(step, 50);
	            }, timeout );

	            that._step(step);
	        },

	        _step: function(step) {
	            var that = this,
	                element = that.element,
	                value = that._parse(element.val()) || 0;

	            if (activeElement() != element[0]) {
	                that._focusin();
	            }

	            value += that.options.step * step;

	            that._update(that._adjust(value));
	            that._typing = false;

	            that.trigger(SPIN);
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _toggleText: function(toggle) {
	            var that = this;

	            that._text.toggle(toggle);
	            that.element.toggle(!toggle);
	        },

	        _parse: function(value, culture) {
	            return parse(value, this._culture(culture), this.options.format);
	        },

	        _round: function(value, precision) {
	            var rounder = this.options.round ? kendo._round : truncate;

	            return rounder(value, precision);
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                format = options.format,
	                decimals = options.decimals,
	                culture = that._culture(),
	                numberFormat = that._format(format, culture),
	                isNotNull;

	            if (decimals === NULL) {
	                decimals = numberFormat.decimals;
	            }

	            value = that._parse(value, culture);

	            isNotNull = value !== NULL;

	            if (isNotNull) {
	                value = parseFloat(that._round(value, decimals), 10);
	            }

	            that._value = value = that._adjust(value);
	            that._placeholder(kendo.toString(value, format, culture));

	            if (isNotNull) {
	                value = value.toString();
	                if (value.indexOf("e") !== -1) {
	                    value = that._round(+value, decimals);
	                }
	                value = value.replace(POINT, numberFormat[POINT]);
	            } else {
	                value = null;
	            }

	            that.element.val(value);
	            that.element.add(that._text).attr("aria-valuenow", value);
	        },

	        _placeholder: function(value) {
	            var input = this._text;

	            input.val(value);
	            if (!placeholderSupported && !value) {
	                input.val(this.options.placeholder);
	            }

	            input.attr("title", this._initialTitle || input.val());
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                DOMElement = element[0],
	                wrapper;

	            wrapper = element.parents(".k-numerictextbox");

	            if (!wrapper.is("span.k-numerictextbox")) {
	                wrapper = element.hide().wrap('<span class="k-numeric-wrap k-state-default" />').parent();
	                wrapper = wrapper.wrap("<span/>").parent();
	            }

	            wrapper[0].style.cssText = DOMElement.style.cssText;
	            DOMElement.style.width = "";
	            that.wrapper = wrapper.addClass("k-widget k-numerictextbox")
	                                  .addClass(DOMElement.className)
	                                  .css("display", "");

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(element[0].value);
	                        that.max(that._initialOptions.max);
	                        that.min(that._initialOptions.min);
	                    });
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        }
	    });

	    function buttonHtml(direction, text) {
	        var className = "k-i-arrow-" + (direction === "increase" ? "60-up" : "60-down");

	        return (
	            '<span unselectable="on" class="k-link k-link-' + direction + '" aria-label="' + text + '" title="' + text + '">' +
	                '<span unselectable="on" class="k-icon ' + className + '"></span>' +
	            '</span>'
	        );
	    }

	    function truncate(value, precision) {
	        var parts = parseFloat(value, 10).toString().split(POINT);

	        if (parts[1]) {
	            parts[1] = parts[1].substring(0, precision);
	        }

	        return parts.join(POINT);

	    }

	    ui.plugin(NumericTextBox);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 33 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.userevents.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(894);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 894:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "userevents",
	    name: "User Events",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        Class = kendo.Class,
	        Observable = kendo.Observable,
	        now = $.now,
	        extend = $.extend,
	        OS = support.mobileOS,
	        invalidZeroEvents = OS && OS.android,
	        DEFAULT_MIN_HOLD = 800,
	        DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.

	        // UserEvents events
	        PRESS = "press",
	        HOLD = "hold",
	        SELECT = "select",
	        START = "start",
	        MOVE = "move",
	        END = "end",
	        CANCEL = "cancel",
	        TAP = "tap",
	        RELEASE = "release",
	        GESTURESTART = "gesturestart",
	        GESTURECHANGE = "gesturechange",
	        GESTUREEND = "gestureend",
	        GESTURETAP = "gesturetap";

	    var THRESHOLD = {
	        "api": 0,
	        "touch": 0,
	        "mouse": 9,
	        "pointer": 9
	    };

	    var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);

	    function touchDelta(touch1, touch2) {
	        var x1 = touch1.x.location,
	            y1 = touch1.y.location,
	            x2 = touch2.x.location,
	            y2 = touch2.y.location,
	            dx = x1 - x2,
	            dy = y1 - y2;

	        return {
	            center: {
	               x: (x1 + x2) / 2,
	               y: (y1 + y2) / 2
	            },

	            distance: Math.sqrt(dx*dx + dy*dy)
	        };
	    }

	    function getTouches(e) {
	        var touches = [],
	            originalEvent = e.originalEvent,
	            currentTarget = e.currentTarget,
	            idx = 0, length,
	            changedTouches,
	            touch;

	        if (e.api) {
	            touches.push({
	                id: 2,  // hardcoded ID for API call;
	                event: e,
	                target: e.target,
	                currentTarget: e.target,
	                location: e,
	                type: "api"
	            });
	        }
	        else if (e.type.match(/touch/)) {
	            changedTouches = originalEvent ? originalEvent.changedTouches : [];
	            for (length = changedTouches.length; idx < length; idx ++) {
	                touch = changedTouches[idx];
	                touches.push({
	                    location: touch,
	                    event: e,
	                    target: touch.target,
	                    currentTarget: currentTarget,
	                    id: touch.identifier,
	                    type: "touch"
	                });
	            }
	        }
	        else if (support.pointers || support.msPointers) {
	            touches.push({
	                location: originalEvent,
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                id: originalEvent.pointerId,
	                type: "pointer"
	            });
	        } else {
	            touches.push({
	                id: 1, // hardcoded ID for mouse event;
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                location: e,
	                type: "mouse"
	            });
	        }

	        return touches;
	    }

	    var TouchAxis = Class.extend({
	        init: function(axis, location) {
	            var that = this;

	            that.axis = axis;

	            that._updateLocationData(location);

	            that.startLocation = that.location;
	            that.velocity = that.delta = 0;
	            that.timeStamp = now();
	        },

	        move: function(location) {
	            var that = this,
	                offset = location["page" + that.axis],
	                timeStamp = now(),
	                timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;

	            if (!offset && invalidZeroEvents) {
	                return;
	            }

	            that.delta = offset - that.location;

	            that._updateLocationData(location);

	            that.initialDelta = offset - that.startLocation;
	            that.velocity = that.delta / timeDelta;
	            that.timeStamp = timeStamp;
	        },

	        _updateLocationData: function(location) {
	            var that = this, axis = that.axis;

	            that.location = location["page" + axis];
	            that.client = location["client" + axis];
	            that.screen = location["screen" + axis];
	        }
	    });

	    var Touch = Class.extend({
	        init: function(userEvents, target, touchInfo) {
	            extend(this, {
	                x: new TouchAxis("X", touchInfo.location),
	                y: new TouchAxis("Y", touchInfo.location),
	                type: touchInfo.type,
	                useClickAsTap: userEvents.useClickAsTap,
	                threshold: userEvents.threshold || THRESHOLD[touchInfo.type],
	                userEvents: userEvents,
	                target: target,
	                currentTarget: touchInfo.currentTarget,
	                initialTouch: touchInfo.target,
	                id: touchInfo.id,
	                pressEvent: touchInfo,
	                _moved: false,
	                _finished: false
	            });
	        },

	        press: function() {
	            this._holdTimeout = setTimeout($.proxy(this, "_hold"), this.userEvents.minHold);
	            this._trigger(PRESS, this.pressEvent);
	        },

	        _hold: function() {
	            this._trigger(HOLD, this.pressEvent);
	        },

	        move: function(touchInfo) {
	            var that = this;

	            if (that._finished) { return; }

	            that.x.move(touchInfo.location);
	            that.y.move(touchInfo.location);

	            if (!that._moved) {
	                if (that._withinIgnoreThreshold()) {
	                    return;
	                }

	                if (!UserEvents.current || UserEvents.current === that.userEvents) {
	                    that._start(touchInfo);
	                } else {
	                    return that.dispose();
	                }
	            }

	            // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.
	            if (!that._finished) {
	                that._trigger(MOVE, touchInfo);
	            }
	        },

	        end: function(touchInfo) {
	            this.endTime = now();

	            if (this._finished) { return; }

	            // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)
	            this._finished = true;

	            this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)

	            if (this._moved) {
	                this._trigger(END, touchInfo);
	            } else {
	                if (!this.useClickAsTap) {
	                    this._trigger(TAP, touchInfo);
	                }
	            }

	            clearTimeout(this._holdTimeout);

	            this.dispose();
	        },

	        dispose: function() {
	            var userEvents = this.userEvents,
	                activeTouches = userEvents.touches;

	            this._finished = true;
	            this.pressEvent = null;
	            clearTimeout(this._holdTimeout);

	            activeTouches.splice($.inArray(this, activeTouches), 1);
	        },

	        skip: function() {
	            this.dispose();
	        },

	        cancel: function() {
	            this.dispose();
	        },

	        isMoved: function() {
	            return this._moved;
	        },

	        _start: function(touchInfo) {
	            clearTimeout(this._holdTimeout);

	            this.startTime = now();
	            this._moved = true;
	            this._trigger(START, touchInfo);
	        },

	        _trigger: function(name, touchInfo) {
	            var that = this,
	                jQueryEvent = touchInfo.event,
	                data = {
	                    touch: that,
	                    x: that.x,
	                    y: that.y,
	                    target: that.target,
	                    event: jQueryEvent
	                };

	            if(that.userEvents.notify(name, data)) {
	                jQueryEvent.preventDefault();
	            }
	        },

	        _withinIgnoreThreshold: function() {
	            var xDelta = this.x.initialDelta,
	                yDelta = this.y.initialDelta;

	            return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;
	        }
	    });

	    function withEachUpEvent(callback) {
	        var downEvents = kendo.eventMap.up.split(" "),
	            idx = 0,
	            length = downEvents.length;

	        for(; idx < length; idx ++) {
	            callback(downEvents[idx]);
	        }
	    }

	    var UserEvents = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                filter,
	                ns = kendo.guid();

	            options = options || {};
	            filter = that.filter = options.filter;
	            that.threshold = options.threshold || DEFAULT_THRESHOLD;
	            that.minHold = options.minHold || DEFAULT_MIN_HOLD;
	            that.touches = [];
	            that._maxTouches = options.multiTouch ? 2 : 1;
	            that.allowSelection = options.allowSelection;
	            that.captureUpIfMoved = options.captureUpIfMoved;
	            that.useClickAsTap = !options.fastTap && !support.delayedClick();
	            that.eventNS = ns;

	            element = $(element).handler(that);
	            Observable.fn.init.call(that);

	            extend(that, {
	                element: element,
	                // the touch events lock to the element anyway, so no need for the global setting
	                surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),
	                stopPropagation: options.stopPropagation,
	                pressed: false
	            });

	            that.surface.handler(that)
	                .on(kendo.applyEventMap("move", ns), "_move")
	                .on(kendo.applyEventMap("up cancel", ns), "_end");

	            element.on(kendo.applyEventMap("down", ns), filter, "_start");

	            if (that.useClickAsTap) {
	                element.on(kendo.applyEventMap("click", ns), filter, "_click");
	            }

	            if (support.pointers || support.msPointers) {
	                if (support.browser.version < 11) {
	                    element.css("-ms-touch-action", "pinch-zoom double-tap-zoom");
	                } else {
	                    element.css("touch-action", options.touchAction || "none");
	                }
	            }

	            if (options.preventDragEvent) {
	                element.on(kendo.applyEventMap("dragstart", ns), kendo.preventDefault);
	            }

	            element.on(kendo.applyEventMap("mousedown", ns), filter, { root: element }, "_select");

	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0],
	                    preventIfMovingProxy = $.proxy(that.preventIfMoving, that);

	                withEachUpEvent(function(eventName) {
	                    surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);
	                });
	            }

	            that.bind([
	            PRESS,
	            HOLD,
	            TAP,
	            START,
	            MOVE,
	            END,
	            RELEASE,
	            CANCEL,
	            GESTURESTART,
	            GESTURECHANGE,
	            GESTUREEND,
	            GESTURETAP,
	            SELECT
	            ], options);
	        },

	        preventIfMoving: function(e) {
	            if (this._isMoved()) {
	                e.preventDefault();
	            }
	        },

	        destroy: function() {
	            var that = this;

	            if (that._destroyed) {
	                return;
	            }

	            that._destroyed = true;

	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0];
	                withEachUpEvent(function(eventName) {
	                    surfaceElement.removeEventListener(eventName, that.preventIfMoving);
	                });
	            }

	            that.element.kendoDestroy(that.eventNS);
	            that.surface.kendoDestroy(that.eventNS);
	            that.element.removeData("handler");
	            that.surface.removeData("handler");
	            that._disposeAll();

	            that.unbind();
	            delete that.surface;
	            delete that.element;
	            delete that.currentTarget;
	        },

	        capture: function() {
	            UserEvents.current = this;
	        },

	        cancel: function() {
	            this._disposeAll();
	            this.trigger(CANCEL);
	        },

	        notify: function(eventName, data) {
	            var that = this,
	                touches = that.touches;

	            if (this._isMultiTouch()) {
	                switch(eventName) {
	                    case MOVE:
	                        eventName = GESTURECHANGE;
	                        break;
	                    case END:
	                        eventName = GESTUREEND;
	                        break;
	                    case TAP:
	                        eventName = GESTURETAP;
	                        break;
	                }

	                extend(data, {touches: touches}, touchDelta(touches[0], touches[1]));
	            }

	            return this.trigger(eventName, extend(data, {type: eventName}));
	        },

	        // API
	        press: function(x, y, target) {
	            this._apiCall("_start", x, y, target);
	        },

	        move: function(x, y) {
	            this._apiCall("_move", x, y);
	        },

	        end: function(x, y) {
	            this._apiCall("_end", x, y);
	        },

	        _isMultiTouch: function() {
	            return this.touches.length > 1;
	        },

	        _maxTouchesReached: function() {
	            return this.touches.length >= this._maxTouches;
	        },

	        _disposeAll: function() {
	            var touches = this.touches;
	            while (touches.length > 0) {
	                touches.pop().dispose();
	            }
	        },

	        _isMoved: function() {
	            return $.grep(this.touches, function(touch) {
	                return touch.isMoved();
	            }).length;
	        },

	        _select: function(e) {
	           if (!this.allowSelection || this.trigger(SELECT, { event: e })) {
	               e.preventDefault();
	           }
	        },

	        _start: function(e) {
	            var that = this,
	                idx = 0,
	                filter = that.filter,
	                target,
	                touches = getTouches(e),
	                length = touches.length,
	                touch,
	                which = e.which;

	            if ((which && which > 1) || (that._maxTouchesReached())){
	                return;
	            }

	            UserEvents.current = null;

	            that.currentTarget = e.currentTarget;

	            if (that.stopPropagation) {
	                e.stopPropagation();
	            }

	            for (; idx < length; idx ++) {
	                if (that._maxTouchesReached()) {
	                    break;
	                }

	                touch = touches[idx];

	                if (filter) {
	                    target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);
	                } else {
	                    target = that.element;
	                }

	                if (!target.length) {
	                    continue;
	                }

	                touch = new Touch(that, target, touch);
	                that.touches.push(touch);
	                touch.press();

	                if (that._isMultiTouch()) {
	                    that.notify("gesturestart", {});
	                }
	            }
	        },

	        _move: function(e) {
	            this._eachTouch("move", e);
	        },

	        _end: function(e) {
	            this._eachTouch("end", e);
	        },

	        _click: function(e) {
	            var data = {
	                touch: {
	                    initialTouch: e.target,
	                    target: $(e.currentTarget),
	                    endTime: now(),
	                    x: {
	                        location: e.pageX,
	                        client: e.clientX
	                    },
	                    y: {
	                        location: e.pageY,
	                        client: e.clientY
	                    }
	                },
	                x: e.pageX,
	                y: e.pageY,
	                target: $(e.currentTarget),
	                event: e,
	                type: "tap"
	            };

	            if (this.trigger("tap", data)) {
	                e.preventDefault();
	            }
	        },

	        _eachTouch: function(methodName, e) {
	            var that = this,
	                dict = {},
	                touches = getTouches(e),
	                activeTouches = that.touches,
	                idx,
	                touch,
	                touchInfo,
	                matchingTouch;

	            for (idx = 0; idx < activeTouches.length; idx ++) {
	                touch = activeTouches[idx];
	                dict[touch.id] = touch;
	            }

	            for (idx = 0; idx < touches.length; idx ++) {
	                touchInfo = touches[idx];
	                matchingTouch = dict[touchInfo.id];

	                if (matchingTouch) {
	                    matchingTouch[methodName](touchInfo);
	                }
	            }
	        },

	        _apiCall: function(type, x, y, target) {
	            this[type]({
	                api: true,
	                pageX: x,
	                pageY: y,
	                clientX: x,
	                clientY: y,
	                target: $(target || this.element)[0],
	                stopPropagation: $.noop,
	                preventDefault: $.noop
	            });
	        }
	    });

	    UserEvents.defaultThreshold = function(value) {
	        DEFAULT_THRESHOLD = value;
	    };

	    UserEvents.minHold = function(value) {
	        DEFAULT_MIN_HOLD = value;
	    };

	    kendo.getTouches = getTouches;
	    kendo.touchDelta = touchDelta;
	    kendo.UserEvents = UserEvents;
	 })(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 34 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./~/angular-aria/angular-aria.js ***!
  \****************************************/
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.5.9
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

/**
 * @ngdoc module
 * @name ngAria
 * @description
 *
 * The `ngAria` module provides support for common
 * [<abbr title="Accessible Rich Internet Applications">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)
 * attributes that convey state or semantic information about the application for users
 * of assistive technologies, such as screen readers.
 *
 * <div doc-module-components="ngAria"></div>
 *
 * ## Usage
 *
 * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following
 * directives are supported:
 * `ngModel`, `ngChecked`, `ngReadonly`, `ngRequired`, `ngValue`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`,
 * `ngDblClick`, and `ngMessages`.
 *
 * Below is a more detailed breakdown of the attributes handled by ngAria:
 *
 * | Directive                                   | Supported Attributes                                                                   |
 * |---------------------------------------------|----------------------------------------------------------------------------------------|
 * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |
 * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |
 * | {@link ng.directive:ngRequired ngRequired}  | aria-required
 * | {@link ng.directive:ngChecked ngChecked}    | aria-checked
 * | {@link ng.directive:ngReadonly ngReadonly}  | aria-readonly                                                                          |
 * | {@link ng.directive:ngValue ngValue}        | aria-checked                                                                           |
 * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |
 * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |
 * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |
 * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |
 * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                  |
 *
 * Find out more information about each directive by reading the
 * {@link guide/accessibility ngAria Developer Guide}.
 *
 * ## Example
 * Using ngDisabled with ngAria:
 * ```html
 * <md-checkbox ng-disabled="disabled">
 * ```
 * Becomes:
 * ```html
 * <md-checkbox ng-disabled="disabled" aria-disabled="true">
 * ```
 *
 * ## Disabling Attributes
 * It's possible to disable individual attributes added by ngAria with the
 * {@link ngAria.$ariaProvider#config config} method. For more details, see the
 * {@link guide/accessibility Developer Guide}.
 */
var ngAriaModule = angular.module('ngAria', ['ng']).
                        provider('$aria', $AriaProvider);

/**
* Internal Utilities
*/
var nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];

var isNodeOneOf = function(elem, nodeTypeArray) {
  if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {
    return true;
  }
};
/**
 * @ngdoc provider
 * @name $ariaProvider
 * @this
 *
 * @description
 *
 * Used for configuring the ARIA attributes injected and managed by ngAria.
 *
 * ```js
 * angular.module('myApp', ['ngAria'], function config($ariaProvider) {
 *   $ariaProvider.config({
 *     ariaValue: true,
 *     tabindex: false
 *   });
 * });
 *```
 *
 * ## Dependencies
 * Requires the {@link ngAria} module to be installed.
 *
 */
function $AriaProvider() {
  var config = {
    ariaHidden: true,
    ariaChecked: true,
    ariaReadonly: true,
    ariaDisabled: true,
    ariaRequired: true,
    ariaInvalid: true,
    ariaValue: true,
    tabindex: true,
    bindKeypress: true,
    bindRoleForClick: true
  };

  /**
   * @ngdoc method
   * @name $ariaProvider#config
   *
   * @param {object} config object to enable/disable specific ARIA attributes
   *
   *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags
   *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags
   *  - **ariaReadonly** – `{boolean}` – Enables/disables aria-readonly tags
   *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags
   *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags
   *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags
   *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags
   *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags
   *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `div` and
   *    `li` elements with ng-click
   *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`
   *    using ng-click, making them more accessible to users of assistive technologies
   *
   * @description
   * Enables/disables various ARIA attributes
   */
  this.config = function(newConfig) {
    config = angular.extend(config, newConfig);
  };

  function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {
    return function(scope, elem, attr) {
      var ariaCamelName = attr.$normalize(ariaAttr);
      if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {
        scope.$watch(attr[attrName], function(boolVal) {
          // ensure boolean value
          boolVal = negate ? !boolVal : !!boolVal;
          elem.attr(ariaAttr, boolVal);
        });
      }
    };
  }
  /**
   * @ngdoc service
   * @name $aria
   *
   * @description
   * @priority 200
   *
   * The $aria service contains helper methods for applying common
   * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.
   *
   * ngAria injects common accessibility attributes that tell assistive technologies when HTML
   * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,
   * let's review a code snippet from ngAria itself:
   *
   *```js
   * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {
   *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled', nodeBlackList, false);
   * }])
   *```
   * Shown above, the ngAria module creates a directive with the same signature as the
   * traditional `ng-disabled` directive. But this ngAria version is dedicated to
   * solely managing accessibility attributes on custom elements. The internal `$aria` service is
   * used to watch the boolean attribute `ngDisabled`. If it has not been explicitly set by the
   * developer, `aria-disabled` is injected as an attribute with its value synchronized to the
   * value in `ngDisabled`.
   *
   * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do
   * anything to enable this feature. The `aria-disabled` attribute is automatically managed
   * simply as a silent side-effect of using `ng-disabled` with the ngAria module.
   *
   * The full list of directives that interface with ngAria:
   * * **ngModel**
   * * **ngChecked**
   * * **ngReadonly**
   * * **ngRequired**
   * * **ngDisabled**
   * * **ngValue**
   * * **ngShow**
   * * **ngHide**
   * * **ngClick**
   * * **ngDblclick**
   * * **ngMessages**
   *
   * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each
   * directive.
   *
   *
   * ## Dependencies
   * Requires the {@link ngAria} module to be installed.
   */
  this.$get = function() {
    return {
      config: function(key) {
        return config[key];
      },
      $$watchExpr: watchExpr
    };
  };
}


ngAriaModule.directive('ngShow', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);
}])
.directive('ngHide', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);
}])
.directive('ngValue', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngValue', 'aria-checked', nodeBlackList, false);
}])
.directive('ngChecked', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngChecked', 'aria-checked', nodeBlackList, false);
}])
.directive('ngReadonly', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngReadonly', 'aria-readonly', nodeBlackList, false);
}])
.directive('ngRequired', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngRequired', 'aria-required', nodeBlackList, false);
}])
.directive('ngModel', ['$aria', function($aria) {

  function shouldAttachAttr(attr, normalizedAttr, elem, allowBlacklistEls) {
    return $aria.config(normalizedAttr) && !elem.attr(attr) && (allowBlacklistEls || !isNodeOneOf(elem, nodeBlackList));
  }

  function shouldAttachRole(role, elem) {
    // if element does not have role attribute
    // AND element type is equal to role (if custom element has a type equaling shape) <-- remove?
    // AND element is not INPUT
    return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');
  }

  function getShape(attr, elem) {
    var type = attr.type,
        role = attr.role;

    return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :
           ((type || role) === 'radio'    || role === 'menuitemradio') ? 'radio' :
           (type === 'range'              || role === 'progressbar' || role === 'slider') ? 'range' : '';
  }

  return {
    restrict: 'A',
    require: 'ngModel',
    priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value
    compile: function(elem, attr) {
      var shape = getShape(attr, elem);

      return {
        pre: function(scope, elem, attr, ngModel) {
          if (shape === 'checkbox') {
            //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles
            ngModel.$isEmpty = function(value) {
              return value === false;
            };
          }
        },
        post: function(scope, elem, attr, ngModel) {
          var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem, false);

          function ngAriaWatchModelValue() {
            return ngModel.$modelValue;
          }

          function getRadioReaction(newVal) {
            // Strict comparison would cause a BC
            // eslint-disable-next-line eqeqeq
            var boolVal = (attr.value == ngModel.$viewValue);
            elem.attr('aria-checked', boolVal);
          }

          function getCheckboxReaction() {
            elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));
          }

          switch (shape) {
            case 'radio':
            case 'checkbox':
              if (shouldAttachRole(shape, elem)) {
                elem.attr('role', shape);
              }
              if (shouldAttachAttr('aria-checked', 'ariaChecked', elem, false)) {
                scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?
                    getRadioReaction : getCheckboxReaction);
              }
              if (needsTabIndex) {
                elem.attr('tabindex', 0);
              }
              break;
            case 'range':
              if (shouldAttachRole(shape, elem)) {
                elem.attr('role', 'slider');
              }
              if ($aria.config('ariaValue')) {
                var needsAriaValuemin = !elem.attr('aria-valuemin') &&
                    (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));
                var needsAriaValuemax = !elem.attr('aria-valuemax') &&
                    (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));
                var needsAriaValuenow = !elem.attr('aria-valuenow');

                if (needsAriaValuemin) {
                  attr.$observe('min', function ngAriaValueMinReaction(newVal) {
                    elem.attr('aria-valuemin', newVal);
                  });
                }
                if (needsAriaValuemax) {
                  attr.$observe('max', function ngAriaValueMinReaction(newVal) {
                    elem.attr('aria-valuemax', newVal);
                  });
                }
                if (needsAriaValuenow) {
                  scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {
                    elem.attr('aria-valuenow', newVal);
                  });
                }
              }
              if (needsTabIndex) {
                elem.attr('tabindex', 0);
              }
              break;
          }

          if (!attr.hasOwnProperty('ngRequired') && ngModel.$validators.required
            && shouldAttachAttr('aria-required', 'ariaRequired', elem, false)) {
            // ngModel.$error.required is undefined on custom controls
            attr.$observe('required', function() {
              elem.attr('aria-required', !!attr['required']);
            });
          }

          if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem, true)) {
            scope.$watch(function ngAriaInvalidWatch() {
              return ngModel.$invalid;
            }, function ngAriaInvalidReaction(newVal) {
              elem.attr('aria-invalid', !!newVal);
            });
          }
        }
      };
    }
  };
}])
.directive('ngDisabled', ['$aria', function($aria) {
  return $aria.$$watchExpr('ngDisabled', 'aria-disabled', nodeBlackList, false);
}])
.directive('ngMessages', function() {
  return {
    restrict: 'A',
    require: '?ngMessages',
    link: function(scope, elem, attr, ngMessages) {
      if (!elem.attr('aria-live')) {
        elem.attr('aria-live', 'assertive');
      }
    }
  };
})
.directive('ngClick',['$aria', '$parse', function($aria, $parse) {
  return {
    restrict: 'A',
    compile: function(elem, attr) {
      var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);
      return function(scope, elem, attr) {

        if (!isNodeOneOf(elem, nodeBlackList)) {

          if ($aria.config('bindRoleForClick') && !elem.attr('role')) {
            elem.attr('role', 'button');
          }

          if ($aria.config('tabindex') && !elem.attr('tabindex')) {
            elem.attr('tabindex', 0);
          }

          if ($aria.config('bindKeypress') && !attr.ngKeypress) {
            elem.on('keypress', function(event) {
              var keyCode = event.which || event.keyCode;
              if (keyCode === 32 || keyCode === 13) {
                scope.$apply(callback);
              }

              function callback() {
                fn(scope, { $event: event });
              }
            });
          }
        }
      };
    }
  };
}])
.directive('ngDblclick', ['$aria', function($aria) {
  return function(scope, elem, attr) {
    if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {
      elem.attr('tabindex', 0);
    }
  };
}]);


})(window, window.angular);


/***/ }),
/* 35 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/angular-messages/angular-messages.js ***!
  \************************************************/
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.5.9
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

var forEach;
var isArray;
var isString;
var jqLite;

/**
 * @ngdoc module
 * @name ngMessages
 * @description
 *
 * The `ngMessages` module provides enhanced support for displaying messages within templates
 * (typically within forms or when rendering message objects that return key/value data).
 * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to
 * show and hide error messages specific to the state of an input field, the `ngMessages` and
 * `ngMessage` directives are designed to handle the complexity, inheritance and priority
 * sequencing based on the order of how the messages are defined in the template.
 *
 * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`
 * `ngMessage` and `ngMessageExp` directives.
 *
 * # Usage
 * The `ngMessages` directive allows keys in a key/value collection to be associated with a child element
 * (or 'message') that will show or hide based on the truthiness of that key's value in the collection. A common use
 * case for `ngMessages` is to display error messages for inputs using the `$error` object exposed by the
 * {@link ngModel ngModel} directive.
 *
 * The child elements of the `ngMessages` directive are matched to the collection keys by a `ngMessage` or
 * `ngMessageExp` directive. The value of these attributes must match a key in the collection that is provided by
 * the `ngMessages` directive.
 *
 * Consider the following example, which illustrates a typical use case of `ngMessages`. Within the form `myForm` we
 * have a text input named `myField` which is bound to the scope variable `field` using the {@link ngModel ngModel}
 * directive.
 *
 * The `myField` field is a required input of type `email` with a maximum length of 15 characters.
 *
 * ```html
 * <form name="myForm">
 *   <label>
 *     Enter text:
 *     <input type="email" ng-model="field" name="myField" required maxlength="15" />
 *   </label>
 *   <div ng-messages="myForm.myField.$error" role="alert">
 *     <div ng-message="required">Please enter a value for this field.</div>
 *     <div ng-message="email">This field must be a valid email address.</div>
 *     <div ng-message="maxlength">This field can be at most 15 characters long.</div>
 *   </div>
 * </form>
 * ```
 *
 * In order to show error messages corresponding to `myField` we first create an element with an `ngMessages` attribute
 * set to the `$error` object owned by the `myField` input in our `myForm` form.
 *
 * Within this element we then create separate elements for each of the possible errors that `myField` could have.
 * The `ngMessage` attribute is used to declare which element(s) will appear for which error - for example,
 * setting `ng-message="required"` specifies that this particular element should be displayed when there
 * is no value present for the required field `myField` (because the key `required` will be `true` in the object
 * `myForm.myField.$error`).
 *
 * ### Message order
 *
 * By default, `ngMessages` will only display one message for a particular key/value collection at any time. If more
 * than one message (or error) key is currently true, then which message is shown is determined by the order of messages
 * in the HTML template code (messages declared first are prioritised). This mechanism means the developer does not have
 * to prioritise messages using custom JavaScript code.
 *
 * Given the following error object for our example (which informs us that the field `myField` currently has both the
 * `required` and `email` errors):
 *
 * ```javascript
 * <!-- keep in mind that ngModel automatically sets these error flags -->
 * myField.$error = { required : true, email: true, maxlength: false };
 * ```
 * The `required` message will be displayed to the user since it appears before the `email` message in the DOM.
 * Once the user types a single character, the `required` message will disappear (since the field now has a value)
 * but the `email` message will be visible because it is still applicable.
 *
 * ### Displaying multiple messages at the same time
 *
 * While `ngMessages` will by default only display one error element at a time, the `ng-messages-multiple` attribute can
 * be applied to the `ngMessages` container element to cause it to display all applicable error messages at once:
 *
 * ```html
 * <!-- attribute-style usage -->
 * <div ng-messages="myForm.myField.$error" ng-messages-multiple>...</div>
 *
 * <!-- element-style usage -->
 * <ng-messages for="myForm.myField.$error" multiple>...</ng-messages>
 * ```
 *
 * ## Reusing and Overriding Messages
 * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline
 * template. This allows for generic collection of messages to be reused across multiple parts of an
 * application.
 *
 * ```html
 * <script type="text/ng-template" id="error-messages">
 *   <div ng-message="required">This field is required</div>
 *   <div ng-message="minlength">This field is too short</div>
 * </script>
 *
 * <div ng-messages="myForm.myField.$error" role="alert">
 *   <div ng-messages-include="error-messages"></div>
 * </div>
 * ```
 *
 * However, including generic messages may not be useful enough to match all input fields, therefore,
 * `ngMessages` provides the ability to override messages defined in the remote template by redefining
 * them within the directive container.
 *
 * ```html
 * <!-- a generic template of error messages known as "my-custom-messages" -->
 * <script type="text/ng-template" id="my-custom-messages">
 *   <div ng-message="required">This field is required</div>
 *   <div ng-message="minlength">This field is too short</div>
 * </script>
 *
 * <form name="myForm">
 *   <label>
 *     Email address
 *     <input type="email"
 *            id="email"
 *            name="myEmail"
 *            ng-model="email"
 *            minlength="5"
 *            required />
 *   </label>
 *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will
 *        override the messages present in the ng-messages-include template -->
 *   <div ng-messages="myForm.myEmail.$error" role="alert">
 *     <!-- this required message has overridden the template message -->
 *     <div ng-message="required">You did not enter your email address</div>
 *
 *     <!-- this is a brand new message and will appear last in the prioritization -->
 *     <div ng-message="email">Your email address is invalid</div>
 *
 *     <!-- and here are the generic error messages -->
 *     <div ng-messages-include="my-custom-messages"></div>
 *   </div>
 * </form>
 * ```
 *
 * In the example HTML code above the message that is set on required will override the corresponding
 * required message defined within the remote template. Therefore, with particular input fields (such
 * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied
 * while more generic messages can be used to handle other, more general input errors.
 *
 * ## Dynamic Messaging
 * ngMessages also supports using expressions to dynamically change key values. Using arrays and
 * repeaters to list messages is also supported. This means that the code below will be able to
 * fully adapt itself and display the appropriate message when any of the expression data changes:
 *
 * ```html
 * <form name="myForm">
 *   <label>
 *     Email address
 *     <input type="email"
 *            name="myEmail"
 *            ng-model="email"
 *            minlength="5"
 *            required />
 *   </label>
 *   <div ng-messages="myForm.myEmail.$error" role="alert">
 *     <div ng-message="required">You did not enter your email address</div>
 *     <div ng-repeat="errorMessage in errorMessages">
 *       <!-- use ng-message-exp for a message whose key is given by an expression -->
 *       <div ng-message-exp="errorMessage.type">{{ errorMessage.text }}</div>
 *     </div>
 *   </div>
 * </form>
 * ```
 *
 * The `errorMessage.type` expression can be a string value or it can be an array so
 * that multiple errors can be associated with a single error message:
 *
 * ```html
 *   <label>
 *     Email address
 *     <input type="email"
 *            ng-model="data.email"
 *            name="myEmail"
 *            ng-minlength="5"
 *            ng-maxlength="100"
 *            required />
 *   </label>
 *   <div ng-messages="myForm.myEmail.$error" role="alert">
 *     <div ng-message-exp="'required'">You did not enter your email address</div>
 *     <div ng-message-exp="['minlength', 'maxlength']">
 *       Your email must be between 5 and 100 characters long
 *     </div>
 *   </div>
 * ```
 *
 * Feel free to use other structural directives such as ng-if and ng-switch to further control
 * what messages are active and when. Be careful, if you place ng-message on the same element
 * as these structural directives, Angular may not be able to determine if a message is active
 * or not. Therefore it is best to place the ng-message on a child element of the structural
 * directive.
 *
 * ```html
 * <div ng-messages="myForm.myEmail.$error" role="alert">
 *   <div ng-if="showRequiredError">
 *     <div ng-message="required">Please enter something</div>
 *   </div>
 * </div>
 * ```
 *
 * ## Animations
 * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and
 * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from
 * the DOM by the `ngMessages` directive.
 *
 * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS
 * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no
 * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can
 * hook into the animations whenever these classes are added/removed.
 *
 * Let's say that our HTML code for our messages container looks like so:
 *
 * ```html
 * <div ng-messages="myMessages" class="my-messages" role="alert">
 *   <div ng-message="alert" class="some-message">...</div>
 *   <div ng-message="fail" class="some-message">...</div>
 * </div>
 * ```
 *
 * Then the CSS animation code for the message container looks like so:
 *
 * ```css
 * .my-messages {
 *   transition:1s linear all;
 * }
 * .my-messages.ng-active {
 *   // messages are visible
 * }
 * .my-messages.ng-inactive {
 *   // messages are hidden
 * }
 * ```
 *
 * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter
 * and leave animation is triggered for each particular element bound to the `ngMessage` directive.
 *
 * Therefore, the CSS code for the inner messages looks like so:
 *
 * ```css
 * .some-message {
 *   transition:1s linear all;
 * }
 *
 * .some-message.ng-enter {}
 * .some-message.ng-enter.ng-enter-active {}
 *
 * .some-message.ng-leave {}
 * .some-message.ng-leave.ng-leave-active {}
 * ```
 *
 * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.
 */
angular.module('ngMessages', [], function initAngularHelpers() {
  // Access helpers from angular core.
  // Do it inside a `config` block to ensure `window.angular` is available.
  forEach = angular.forEach;
  isArray = angular.isArray;
  isString = angular.isString;
  jqLite = angular.element;
})

  /**
   * @ngdoc directive
   * @module ngMessages
   * @name ngMessages
   * @restrict AE
   *
   * @description
   * `ngMessages` is a directive that is designed to show and hide messages based on the state
   * of a key/value object that it listens on. The directive itself complements error message
   * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).
   *
   * `ngMessages` manages the state of internal messages within its container element. The internal
   * messages use the `ngMessage` directive and will be inserted/removed from the page depending
   * on if they're present within the key/value object. By default, only one message will be displayed
   * at a time and this depends on the prioritization of the messages within the template. (This can
   * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)
   *
   * A remote template can also be used to promote message reusability and messages can also be
   * overridden.
   *
   * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
   *
   * @usage
   * ```html
   * <!-- using attribute directives -->
   * <ANY ng-messages="expression" role="alert">
   *   <ANY ng-message="stringValue">...</ANY>
   *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
   *   <ANY ng-message-exp="expressionValue">...</ANY>
   * </ANY>
   *
   * <!-- or by using element directives -->
   * <ng-messages for="expression" role="alert">
   *   <ng-message when="stringValue">...</ng-message>
   *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
   *   <ng-message when-exp="expressionValue">...</ng-message>
   * </ng-messages>
   * ```
   *
   * @param {string} ngMessages an angular expression evaluating to a key/value object
   *                 (this is typically the $error object on an ngModel instance).
   * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true
   *
   * @example
   * <example name="ngMessages-directive" module="ngMessagesExample"
   *          deps="angular-messages.js"
   *          animations="true" fixBase="true">
   *   <file name="index.html">
   *     <form name="myForm">
   *       <label>
   *         Enter your name:
   *         <input type="text"
   *                name="myName"
   *                ng-model="name"
   *                ng-minlength="5"
   *                ng-maxlength="20"
   *                required />
   *       </label>
   *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>
   *
   *       <div ng-messages="myForm.myName.$error" style="color:maroon" role="alert">
   *         <div ng-message="required">You did not enter a field</div>
   *         <div ng-message="minlength">Your field is too short</div>
   *         <div ng-message="maxlength">Your field is too long</div>
   *       </div>
   *     </form>
   *   </file>
   *   <file name="script.js">
   *     angular.module('ngMessagesExample', ['ngMessages']);
   *   </file>
   * </example>
   */
  .directive('ngMessages', ['$animate', function($animate) {
    var ACTIVE_CLASS = 'ng-active';
    var INACTIVE_CLASS = 'ng-inactive';

    return {
      require: 'ngMessages',
      restrict: 'AE',
      controller: ['$element', '$scope', '$attrs', function NgMessagesCtrl($element, $scope, $attrs) {
        var ctrl = this;
        var latestKey = 0;
        var nextAttachId = 0;

        this.getAttachId = function getAttachId() { return nextAttachId++; };

        var messages = this.messages = {};
        var renderLater, cachedCollection;

        this.render = function(collection) {
          collection = collection || {};

          renderLater = false;
          cachedCollection = collection;

          // this is true if the attribute is empty or if the attribute value is truthy
          var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||
                         isAttrTruthy($scope, $attrs.multiple);

          var unmatchedMessages = [];
          var matchedKeys = {};
          var messageItem = ctrl.head;
          var messageFound = false;
          var totalMessages = 0;

          // we use != instead of !== to allow for both undefined and null values
          while (messageItem != null) {
            totalMessages++;
            var messageCtrl = messageItem.message;

            var messageUsed = false;
            if (!messageFound) {
              forEach(collection, function(value, key) {
                if (!messageUsed && truthy(value) && messageCtrl.test(key)) {
                  // this is to prevent the same error name from showing up twice
                  if (matchedKeys[key]) return;
                  matchedKeys[key] = true;

                  messageUsed = true;
                  messageCtrl.attach();
                }
              });
            }

            if (messageUsed) {
              // unless we want to display multiple messages then we should
              // set a flag here to avoid displaying the next message in the list
              messageFound = !multiple;
            } else {
              unmatchedMessages.push(messageCtrl);
            }

            messageItem = messageItem.next;
          }

          forEach(unmatchedMessages, function(messageCtrl) {
            messageCtrl.detach();
          });

          if (unmatchedMessages.length !== totalMessages) {
            $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS);
          } else {
            $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);
          }
        };

        $scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);

        // If the element is destroyed, proactively destroy all the currently visible messages
        $element.on('$destroy', function() {
          forEach(messages, function(item) {
            item.message.detach();
          });
        });

        this.reRender = function() {
          if (!renderLater) {
            renderLater = true;
            $scope.$evalAsync(function() {
              if (renderLater && cachedCollection) {
                ctrl.render(cachedCollection);
              }
            });
          }
        };

        this.register = function(comment, messageCtrl) {
          var nextKey = latestKey.toString();
          messages[nextKey] = {
            message: messageCtrl
          };
          insertMessageNode($element[0], comment, nextKey);
          comment.$$ngMessageNode = nextKey;
          latestKey++;

          ctrl.reRender();
        };

        this.deregister = function(comment) {
          var key = comment.$$ngMessageNode;
          delete comment.$$ngMessageNode;
          removeMessageNode($element[0], comment, key);
          delete messages[key];
          ctrl.reRender();
        };

        function findPreviousMessage(parent, comment) {
          var prevNode = comment;
          var parentLookup = [];

          while (prevNode && prevNode !== parent) {
            var prevKey = prevNode.$$ngMessageNode;
            if (prevKey && prevKey.length) {
              return messages[prevKey];
            }

            // dive deeper into the DOM and examine its children for any ngMessage
            // comments that may be in an element that appears deeper in the list
            if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) === -1) {
              parentLookup.push(prevNode);
              prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];
            } else if (prevNode.previousSibling) {
              prevNode = prevNode.previousSibling;
            } else {
              prevNode = prevNode.parentNode;
              parentLookup.push(prevNode);
            }
          }
        }

        function insertMessageNode(parent, comment, key) {
          var messageNode = messages[key];
          if (!ctrl.head) {
            ctrl.head = messageNode;
          } else {
            var match = findPreviousMessage(parent, comment);
            if (match) {
              messageNode.next = match.next;
              match.next = messageNode;
            } else {
              messageNode.next = ctrl.head;
              ctrl.head = messageNode;
            }
          }
        }

        function removeMessageNode(parent, comment, key) {
          var messageNode = messages[key];

          var match = findPreviousMessage(parent, comment);
          if (match) {
            match.next = messageNode.next;
          } else {
            ctrl.head = messageNode.next;
          }
        }
      }]
    };

    function isAttrTruthy(scope, attr) {
     return (isString(attr) && attr.length === 0) || //empty attribute
            truthy(scope.$eval(attr));
    }

    function truthy(val) {
      return isString(val) ? val.length : !!val;
    }
  }])

  /**
   * @ngdoc directive
   * @name ngMessagesInclude
   * @restrict AE
   * @scope
   *
   * @description
   * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template
   * code from a remote template and place the downloaded template code into the exact spot
   * that the ngMessagesInclude directive is placed within the ngMessages container. This allows
   * for a series of pre-defined messages to be reused and also allows for the developer to
   * determine what messages are overridden due to the placement of the ngMessagesInclude directive.
   *
   * @usage
   * ```html
   * <!-- using attribute directives -->
   * <ANY ng-messages="expression" role="alert">
   *   <ANY ng-messages-include="remoteTplString">...</ANY>
   * </ANY>
   *
   * <!-- or by using element directives -->
   * <ng-messages for="expression" role="alert">
   *   <ng-messages-include src="expressionValue1">...</ng-messages-include>
   * </ng-messages>
   * ```
   *
   * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
   *
   * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.
   */
  .directive('ngMessagesInclude',
    ['$templateRequest', '$document', '$compile', function($templateRequest, $document, $compile) {

    return {
      restrict: 'AE',
      require: '^^ngMessages', // we only require this for validation sake
      link: function($scope, element, attrs) {
        var src = attrs.ngMessagesInclude || attrs.src;
        $templateRequest(src).then(function(html) {
          if ($scope.$$destroyed) return;

          if (isString(html) && !html.trim()) {
            // Empty template - nothing to compile
            replaceElementWithMarker(element, src);
          } else {
            // Non-empty template - compile and link
            $compile(html)($scope, function(contents) {
              element.after(contents);
              replaceElementWithMarker(element, src);
            });
          }
        });
      }
    };

    // Helpers
    function replaceElementWithMarker(element, src) {
      // A comment marker is placed for debugging purposes
      var comment = $compile.$$createComment ?
          $compile.$$createComment('ngMessagesInclude', src) :
          $document[0].createComment(' ngMessagesInclude: ' + src + ' ');
      var marker = jqLite(comment);
      element.after(marker);

      // Don't pollute the DOM anymore by keeping an empty directive element
      element.remove();
    }
  }])

  /**
   * @ngdoc directive
   * @name ngMessage
   * @restrict AE
   * @scope
   *
   * @description
   * `ngMessage` is a directive with the purpose to show and hide a particular message.
   * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element
   * must be situated since it determines which messages are visible based on the state
   * of the provided key/value map that `ngMessages` listens on.
   *
   * More information about using `ngMessage` can be found in the
   * {@link module:ngMessages `ngMessages` module documentation}.
   *
   * @usage
   * ```html
   * <!-- using attribute directives -->
   * <ANY ng-messages="expression" role="alert">
   *   <ANY ng-message="stringValue">...</ANY>
   *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
   * </ANY>
   *
   * <!-- or by using element directives -->
   * <ng-messages for="expression" role="alert">
   *   <ng-message when="stringValue">...</ng-message>
   *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
   * </ng-messages>
   * ```
   *
   * @param {expression} ngMessage|when a string value corresponding to the message key.
   */
  .directive('ngMessage', ngMessageDirectiveFactory())


  /**
   * @ngdoc directive
   * @name ngMessageExp
   * @restrict AE
   * @priority 1
   * @scope
   *
   * @description
   * `ngMessageExp` is a directive with the purpose to show and hide a particular message.
   * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element
   * must be situated since it determines which messages are visible based on the state
   * of the provided key/value map that `ngMessages` listens on.
   *
   * @usage
   * ```html
   * <!-- using attribute directives -->
   * <ANY ng-messages="expression">
   *   <ANY ng-message-exp="expressionValue">...</ANY>
   * </ANY>
   *
   * <!-- or by using element directives -->
   * <ng-messages for="expression">
   *   <ng-message when-exp="expressionValue">...</ng-message>
   * </ng-messages>
   * ```
   *
   * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
   *
   * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.
   */
  .directive('ngMessageExp', ngMessageDirectiveFactory());

function ngMessageDirectiveFactory() {
  return ['$animate', function($animate) {
    return {
      restrict: 'AE',
      transclude: 'element',
      priority: 1, // must run before ngBind, otherwise the text is set on the comment
      terminal: true,
      require: '^^ngMessages',
      link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {
        var commentNode = element[0];

        var records;
        var staticExp = attrs.ngMessage || attrs.when;
        var dynamicExp = attrs.ngMessageExp || attrs.whenExp;
        var assignRecords = function(items) {
          records = items
              ? (isArray(items)
                  ? items
                  : items.split(/[\s,]+/))
              : null;
          ngMessagesCtrl.reRender();
        };

        if (dynamicExp) {
          assignRecords(scope.$eval(dynamicExp));
          scope.$watchCollection(dynamicExp, assignRecords);
        } else {
          assignRecords(staticExp);
        }

        var currentElement, messageCtrl;
        ngMessagesCtrl.register(commentNode, messageCtrl = {
          test: function(name) {
            return contains(records, name);
          },
          attach: function() {
            if (!currentElement) {
              $transclude(function(elm, newScope) {
                $animate.enter(elm, null, element);
                currentElement = elm;

                // Each time we attach this node to a message we get a new id that we can match
                // when we are destroying the node later.
                var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();

                // in the event that the element or a parent element is destroyed
                // by another structural directive then it's time
                // to deregister the message from the controller
                currentElement.on('$destroy', function() {
                  if (currentElement && currentElement.$$attachId === $$attachId) {
                    ngMessagesCtrl.deregister(commentNode);
                    messageCtrl.detach();
                  }
                  newScope.$destroy();
                });
              });
            }
          },
          detach: function() {
            if (currentElement) {
              var elm = currentElement;
              currentElement = null;
              $animate.leave(elm);
            }
          }
        });
      }
    };
  }];

  function contains(collection, key) {
    if (collection) {
      return isArray(collection)
          ? collection.indexOf(key) >= 0
          : collection.hasOwnProperty(key);
    }
  }
}


})(window, window.angular);


/***/ }),
/* 36 */
/* unknown exports provided */
/* all exports used */
/*!*****************************!*\
  !*** ./~/date-now/index.js ***!
  \*****************************/
/***/ (function(module, exports) {

module.exports = Date.now || now

function now() {
    return new Date().getTime()
}


/***/ }),
/* 37 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./~/es6-promise/dist/es6-promise.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var require;var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.0.2
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$toString = {}.toString;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // see https://github.com/cujojs/when/issues/410 for details
      return function() {
        process.nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertx() {
      try {
        var r = require;
        var vertx = __webpack_require__(/*! vertx */ 52);
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFulfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      var enumerator = this;

      enumerator._instanceConstructor = Constructor;
      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (enumerator._validateInput(input)) {
        enumerator._input     = input;
        enumerator.length     = input.length;
        enumerator._remaining = input.length;

        enumerator._init();

        if (enumerator.length === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        } else {
          enumerator.length = enumerator.length || 0;
          enumerator._enumerate();
          if (enumerator._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
      }
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return lib$es6$promise$utils$$isArray(input);
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var enumerator = this;

      var length  = enumerator.length;
      var promise = enumerator.promise;
      var input   = enumerator._input;

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        enumerator._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var enumerator = this;
      var c = enumerator._instanceConstructor;

      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
          entry._onerror = null;
          enumerator._settledAt(entry._state, i, entry._result);
        } else {
          enumerator._willSettleAt(c.resolve(entry), i);
        }
      } else {
        enumerator._remaining--;
        enumerator._result[i] = entry;
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var enumerator = this;
      var promise = enumerator.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        enumerator._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          enumerator._result[i] = value;
        }
      }

      if (enumerator._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!lib$es6$promise$utils$$isArray(entries)) {
        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

    var lib$es6$promise$promise$$counter = 0;

    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this._id = lib$es6$promise$promise$$counter++;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        if (!lib$es6$promise$utils$$isFunction(resolver)) {
          lib$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
          lib$es6$promise$promise$$needsNew();
        }

        lib$es6$promise$$internal$$initializePromise(this, resolver);
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection) {
        var parent = this;
        var state = parent._state;

        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
          return this;
        }

        var child = new this.constructor(lib$es6$promise$$internal$$noop);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          lib$es6$promise$asap$$asap(function(){
            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 41), __webpack_require__(/*! ./../../webpack/buildin/global.js */ 42)))

/***/ }),
/* 38 */
/* unknown exports provided */
/* all exports used */
/*!****************************!*\
  !*** ./~/moment/locale en ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./en-au": 11,
	"./en-au.js": 11,
	"./en-ca": 12,
	"./en-ca.js": 12,
	"./en-gb": 13,
	"./en-gb.js": 13,
	"./en-ie": 14,
	"./en-ie.js": 14,
	"./en-nz": 15,
	"./en-nz.js": 15
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 38;


/***/ }),
/* 39 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/lib/thAutocomplete/autocomplete.errors.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AutocompleteError = (function (_super) {
    __extends(AutocompleteError, _super);
    function AutocompleteError(name, message) {
        var _this = _super.call(this, message) || this;
        _this.name = "th-autocomplete: " + name;
        return _this;
    }
    return AutocompleteError;
}(Error));
var AutocompleteProviderError = (function (_super) {
    __extends(AutocompleteProviderError, _super);
    function AutocompleteProviderError(message) {
        return _super.call(this, "Provider", message) || this;
    }
    return AutocompleteProviderError;
}(AutocompleteError));
exports.AutocompleteProviderError = AutocompleteProviderError;
var AutocompleteComponentError = (function (_super) {
    __extends(AutocompleteComponentError, _super);
    function AutocompleteComponentError(message) {
        return _super.call(this, "Component", message) || this;
    }
    return AutocompleteComponentError;
}(AutocompleteError));
exports.AutocompleteComponentError = AutocompleteComponentError;


/***/ }),
/* 40 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/lib/thAutocomplete/providers/autocomplete.abstract.ts ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(/*! jquery */ 3);
var autocomplete_errors_1 = __webpack_require__(/*! ../autocomplete.errors */ 39);
var AutocompleteAbstract = (function () {
    function AutocompleteAbstract(config) {
        this.config = config;
        this.enabled = true;
        this.autoBind = true;
        this.initializeOptions();
        this.create();
    }
    AutocompleteAbstract.prototype.validateOptions = function () {
        if (!this.config.options) {
            throw new autocomplete_errors_1.AutocompleteProviderError("You must provide the \"options\" parameter.");
        }
        if (!this.config.options.displayField) {
            throw new autocomplete_errors_1.AutocompleteProviderError("options.displayField is required");
        }
    };
    AutocompleteAbstract.prototype.validateValueIsObject = function () {
        if (this.config.value && this.config.value instanceof Object === false) {
            throw new autocomplete_errors_1.AutocompleteProviderError("options.value invalid. Value \"" + this.config.value + "\" should be an object");
        }
    };
    AutocompleteAbstract.prototype.initializeOptions = function () {
        this.validateOptions();
        if (this.config.ngDisabled) {
            this.enabled = false;
        }
        if (this.config.options.hasOwnProperty("autoBind") && this.config.options.autoBind === false) {
            this.autoBind = false;
        }
        this.config.options.filter = this.config.options.filter || "startswith";
        this.config.options.trackField = this.config.options.trackField || "id";
        this.config.options.noDataTemplate = this.config.options.noDataTemplate || "No results.";
        this.config.options.minLength = this.config.options.minLength || 2;
        this.setInitialValue();
        if (this.config.options.groupBy) {
            this.config.options.dataSource.group({ field: this.config.options.groupBy });
        }
    };
    Object.defineProperty(AutocompleteAbstract.prototype, "isEnabled", {
        get: function () {
            return this.enabled;
        },
        enumerable: true,
        configurable: true
    });
    AutocompleteAbstract.prototype.setValue = function (theValue) {
        if (this.kendoComponent) {
            var newValue = theValue ? theValue[this.config.options.displayField] : "";
            this.kendoComponent.value(newValue);
        }
    };
    AutocompleteAbstract.prototype.toggleEnabled = function () {
        this.enabled = !this.enabled;
        if (this.kendoComponent) {
            this.kendoComponent.enable(this.enabled);
        }
    };
    AutocompleteAbstract.prototype.toggleSearchHint = function (showHint) {
        if (this.kendoComponent) {
            var list = this.kendoComponent.list;
            if (showHint === true) {
                // TODO: #i18n
                $(list).append("<span class=\"search-hint\">Type to find more results</span>");
            }
            else {
                $(list).find(".search-hint").remove();
            }
        }
    };
    return AutocompleteAbstract;
}());
exports.default = AutocompleteAbstract;


/***/ }),
/* 41 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 42 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 43 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 44 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./src/polyfills/Array.find.polyfill.js ***!
  \**********************************************/
/***/ (function(module, exports) {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill

if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}


/***/ }),
/* 45 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/polyfills/Array.findIndex.polyfill.js ***!
  \***************************************************/
/***/ (function(module, exports) {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex#Polyfill

if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(predicate) {
      if (this == null) {
        throw new TypeError('Array.prototype.findIndex called on null or undefined');
      }
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }
      var list = Object(this);
      var length = list.length >>> 0;
      var thisArg = arguments[1];
      var value;

      for (var i = 0; i < length; i++) {
        if (i in list) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return i;
          }
        }
      }
      return -1;
    }
  });
}


/***/ }),
/* 46 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/polyfills/Array.includes.polyfill.js ***!
  \**************************************************/
/***/ (function(module, exports) {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes

if (!Array.prototype.includes) {
  Array.prototype.includes = function(searchElement /*, fromIndex*/ ) {
    'use strict';
    var O = Object(this);
    var len = parseInt(O.length, 10) || 0;
    if (len === 0) {
      return false;
    }
    var n = parseInt(arguments[1], 10) || 0;
    var k;
    if (n >= 0) {
      k = n;
    } else {
      k = len + n;
      if (k < 0) {k = 0;}
    }
    var currentElement;
    while (k < len) {
      currentElement = O[k];
      if (searchElement === currentElement ||
         (searchElement !== searchElement && currentElement !== currentElement)) { // NaN !== NaN
        return true;
      }
      k++;
    }
    return false;
  };
}


/***/ }),
/* 47 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/polyfills/Element.matches.polyfill.js ***!
  \***************************************************/
/***/ (function(module, exports) {

(function(ElementPrototype) {
	ElementPrototype.matches = ElementPrototype.matches ||
		ElementPrototype.matchesSelector ||
		ElementPrototype.mozMatchesSelector ||
		ElementPrototype.msMatchesSelector ||
		ElementPrototype.oMatchesSelector ||
		ElementPrototype.webkitMatchesSelector ||
		function (selector) {
			var element = this;
			var matches = (element.document || element.ownerDocument).querySelectorAll(selector);
			var i = 0;

			while (matches[i] && matches[i] !== element) {
				i++;
			}

			return matches[i] ? true : false;
		}
})(Element.prototype);


/***/ }),
/* 48 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/polyfills/Object.assign.polyfill.js ***!
  \*************************************************/
/***/ (function(module, exports) {

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill

if (!Object.assign) {
  Object.defineProperty(Object, 'assign', {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      'use strict';
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert first argument to object');
      }

      var to = Object(target);
      for (var i = 1; i < arguments.length; i++) {
        var nextSource = arguments[i];
        if (nextSource === undefined || nextSource === null) {
          continue;
        }
        nextSource = Object(nextSource);

        var keysArray = Object.keys(nextSource);
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
          var nextKey = keysArray[nextIndex];
          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
          if (desc !== undefined && desc.enumerable) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
      return to;
    }
  });
}


/***/ }),
/* 49 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/polyfills/String.includes.polyfill.js ***!
  \***************************************************/
/***/ (function(module, exports) {

// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill

if (!String.prototype.includes) {
  String.prototype.includes = function() {'use strict';
    return String.prototype.indexOf.apply(this, arguments) !== -1;
  };
}


/***/ }),
/* 50 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/polyfills/jQuery.typeAttribute.patch.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

// Patch for jQuery that lets 'type' attributes to be set if the browser allows it.
// ex: <th-button type="standard">name<th-button>
// This was only relevant for IE 8 and below which we do not support anyhow.
// https://github.com/jquery/jquery/commit/aad235b3251494afe71fd5bb6031e11965af9bdb

if (typeof jQuery == 'function') {
  if (/1\.(7|8)\.\d/.test(jQuery.fn.jquery)) {
    jQuery.extend({
      attrHooks: {
        type: {
          set: function( elem, value ) {
              // Setting the type on a radio button after the value resets the value in IE6-9
              // Reset value to it's default in case type is set after value
              // This is for element creation
            if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
            // Reset value to default in case type is set after value during creation
              var val = elem.value;
              elem.setAttribute( "type", value );
              if ( val ) {
                elem.value = val;
              }
              return value;
            }
          }
        }
      }
    });
  }
}


/***/ }),
/* 51 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/polyfills/scrollingElement.polyfill.js ***!
  \****************************************************/
/***/ (function(module, exports) {

/*! https://mths.be/scrollingelement v1.5.1 by @diegoperini & @mathias | MIT license */
if (!('scrollingElement' in document)) (function() {

	function computeStyle(element) {
		if (window.getComputedStyle) {
			// Support Firefox < 4 which throws on a single parameter.
			return getComputedStyle(element, null);
		}
		// Support Internet Explorer < 9.
		return element.currentStyle;
	}

	function isBodyElement(element) {
		// The `instanceof` check gives the correct result for e.g. `body` in a
		// non-HTML namespace.
		if (window.HTMLBodyElement) {
			return element instanceof HTMLBodyElement;
		}
		// Fall back to a `tagName` check for old browsers.
		return /body/i.test(element.tagName);
	}

	function getNextBodyElement(frameset) {
		// We use this function to be correct per spec in case `document.body` is
		// a `frameset` but there exists a later `body`. Since `document.body` is
		// a `frameset`, we know the root is an `html`, and there was no `body`
		// before the `frameset`, so we just need to look at siblings after the
		// `frameset`.
		var current = frameset;
		while (current = current.nextSibling) {
			if (current.nodeType == 1 && isBodyElement(current)) {
				return current;
			}
		}
		// No `body` found.
		return null;
	}

	// Note: standards mode / quirks mode can be toggled at runtime via
	// `document.write`.
	var isCompliantCached;
	var isCompliant = function() {
		var isStandardsMode = /^CSS1/.test(document.compatMode);
		if (!isStandardsMode) {
			// In quirks mode, the result is equivalent to the non-compliant
			// standards mode behavior.
			return false;
		}
		if (isCompliantCached === void 0) {
			// When called for the first time, check whether the browser is
			// standard-compliant, and cache the result.
			var iframe = document.createElement('iframe');
			iframe.style.height = '1px';
			(document.body || document.documentElement || document).appendChild(iframe);
			var doc = iframe.contentWindow.document;
			doc.write('<!DOCTYPE html><div style="height:9999em">x</div>');
			doc.close();
			isCompliantCached = doc.documentElement.scrollHeight > doc.body.scrollHeight;
			iframe.parentNode.removeChild(iframe);
		}
		return isCompliantCached;
	};

	function isRendered(style) {
		return style.display != 'none' && !(style.visibility == 'collapse' &&
			/^table-(.+-group|row|column)$/.test(style.display));
	}

	function isScrollable(body) {
		// A `body` element is scrollable if `body` and `html` both have
		// non-`visible` overflow and are both being rendered.
		var bodyStyle = computeStyle(body);
		var htmlStyle = computeStyle(document.documentElement);
		return bodyStyle.overflow != 'visible' && htmlStyle.overflow != 'visible' &&
			isRendered(bodyStyle) && isRendered(htmlStyle);
	}

	var scrollingElement = function() {
		if (isCompliant()) {
			return document.documentElement;
		}
		var body = document.body;
		// Note: `document.body` could be a `frameset` element, or `null`.
		// `tagName` is uppercase in HTML, but lowercase in XML.
		var isFrameset = body && !/body/i.test(body.tagName);
		body = isFrameset ? getNextBodyElement(body) : body;
		// If `body` is itself scrollable, it is not the `scrollingElement`.
		return body && isScrollable(body) ? null : body;
	};

	if (Object.defineProperty) {
		// Support modern browsers that lack a native implementation.
		Object.defineProperty(document, 'scrollingElement', {
			'get': scrollingElement
		});
	} else if (document.__defineGetter__) {
		// Support Firefox ≤ 3.6.9, Safari ≤ 4.1.3.
		document.__defineGetter__('scrollingElement', scrollingElement);
	} else {
		// IE ≤ 4 lacks `attachEvent`, so it only gets this one assignment. IE ≤ 7
		// gets it too, but the value is updated later (see `propertychange`).
		document.scrollingElement = scrollingElement();
		document.attachEvent && document.attachEvent('onpropertychange', function() {
			// This is for IE ≤ 7 only.
			// A `propertychange` event fires when `<body>` is parsed because
			// `document.activeElement` then changes.
			if (window.event.propertyName == 'activeElement') {
				document.scrollingElement = scrollingElement();
			}
		});
	}
}());


/***/ }),
/* 52 */
/* unknown exports provided */
/* all exports used */
/*!***********************!*\
  !*** vertx (ignored) ***!
  \***********************/
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 53 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/drawing/surface-tooltip.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(503);
	module.exports = __webpack_require__(503);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 496:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo-drawing */ 22);

/***/ },

/***/ 503:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(504), __webpack_require__(496) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	    var NS = ".kendo";
	    var kendo = window.kendo;
	    var deepExtend = kendo.deepExtend;
	    var utils = kendo.drawing.util;
	    var defined = utils.defined;
	    var limitValue = utils.limitValue;
	    var eventCoordinates = utils.eventCoordinates;
	    var outerWidth = kendo._outerWidth;
	    var outerHeight = kendo._outerHeight;
	    var proxy = $.proxy;

	    var TOOLTIP_TEMPLATE = '<div class="k-tooltip">' +
	            '<div class="k-tooltip-content"></div>' +
	        '</div>';
	    var TOOLTIP_CLOSE_TEMPLATE = '<div class="k-tooltip-button"><a href="\\#" class="k-icon k-i-close">close</a></div>';

	    var SurfaceTooltip = kendo.Class.extend({
	        init: function(surface, options) {
	            this.element = $(TOOLTIP_TEMPLATE);
	            this.content = this.element.children(".k-tooltip-content");

	            options = options || {};

	            this.options = deepExtend({}, this.options, this._tooltipOptions(options));
	            this.popupOptions = {
	                appendTo: options.appendTo,
	                animation: options.animation,
	                copyAnchorStyles: false,
	                collision: "fit fit"
	            };

	            this._openPopupHandler = $.proxy(this._openPopup, this);

	            this.surface = surface;
	            this._bindEvents();
	        },

	        options: {
	            position: "top",
	            showOn: "mouseenter",
	            offset: 7,
	            autoHide: true,
	            hideDelay: 0,
	            showAfter: 100
	        },

	        _bindEvents: function() {
	            this._showHandler = proxy(this._showEvent, this);
	            this._surfaceLeaveHandler = proxy(this._surfaceLeave, this);
	            this._mouseleaveHandler = proxy(this._mouseleave, this);
	            this._mousemoveHandler = proxy(this._mousemove, this);

	            this.surface.bind("click", this._showHandler);
	            this.surface.bind("mouseenter", this._showHandler);
	            this.surface.bind("mouseleave", this._mouseleaveHandler);
	            this.surface.bind("mousemove", this._mousemoveHandler);

	            this.surface.element.on("mouseleave" + NS, this._surfaceLeaveHandler);

	            this.element.on("click" + NS, ".k-tooltip-button", proxy(this._hideClick, this));
	        },

	        getPopup: function() {
	            if (!this.popup) {
	                this.popup = new kendo.ui.Popup(this.element, this.popupOptions);
	            }

	            return this.popup;
	        },

	        destroy: function() {
	            var popup = this.popup;

	            this.surface.unbind("click", this._showHandler);
	            this.surface.unbind("mouseenter", this._showHandler);
	            this.surface.unbind("mouseleave", this._mouseleaveHandler);
	            this.surface.unbind("mousemove", this._mousemoveHandler);

	            this.surface.element.off("mouseleave" + NS, this._surfaceLeaveHandler);
	            this.element.off("click" + NS);

	            if (popup) {
	                popup.destroy();
	                delete this.popup;
	            }
	            delete this.popupOptions;

	            clearTimeout(this._timeout);

	            delete this.element;
	            delete this.content;
	            delete this.surface;
	        },

	        _tooltipOptions: function(options) {
	            options = options || {};
	            return {
	                position: options.position,
	                showOn: options.showOn,
	                offset: options.offset,
	                autoHide: options.autoHide,
	                width: options.width,
	                height: options.height,
	                content: options.content,
	                shared: options.shared,
	                hideDelay: options.hideDelay,
	                showAfter: options.showAfter
	            };
	        },

	        _tooltipShape: function(shape) {
	            while(shape && !shape.options.tooltip) {
	                shape = shape.parent;
	            }
	            return shape;
	        },

	        _updateContent: function(target, shape, options) {
	            var content = options.content;
	            if (kendo.isFunction(content)) {
	                content = content({
	                    element: shape,
	                    target: target
	                });
	            }

	            if (content) {
	                this.content.html(content);
	                return true;
	            }
	        },

	        _position: function(shape, options, elementSize, event) {
	            var position = options.position;
	            var tooltipOffset = options.offset || 0;
	            var surface = this.surface;
	            var offset = surface._instance._elementOffset();
	            var size = surface.getSize();
	            var surfaceOffset = surface._instance._offset;
	            var bbox = shape.bbox();
	            var width = elementSize.width;
	            var height = elementSize.height;
	            var left = 0, top = 0;

	            bbox.origin.translate(offset.left, offset.top);
	            if (surfaceOffset) {
	                bbox.origin.translate(-surfaceOffset.x, -surfaceOffset.y);
	            }

	            if (position == "cursor" && event) {
	                var coord = eventCoordinates(event);
	                left = coord.x - width / 2;
	                top = coord.y - height - tooltipOffset;
	            } else if (position == "left") {
	                left = bbox.origin.x - width - tooltipOffset;
	                top = bbox.center().y - height / 2;
	            } else if (position == "right") {
	                left = bbox.bottomRight().x + tooltipOffset;
	                top = bbox.center().y - height / 2;
	            } else if (position == "bottom") {
	                left = bbox.center().x - width / 2;
	                top = bbox.bottomRight().y + tooltipOffset;
	            } else {
	                left = bbox.center().x - width / 2;
	                top = bbox.origin.y - height - tooltipOffset;
	            }

	            return {
	                left: limitValue(left, offset.left, offset.left + size.width),
	                top: limitValue(top, offset.top, offset.top + size.height)
	            };
	        },

	        show: function(shape, options) {
	            this._show(shape, shape, deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip), options));
	        },

	        hide: function() {
	            var popup = this.popup;
	            var current = this._current;
	            delete this._current;
	            clearTimeout(this._showTimeout);
	            if (popup && popup.visible() && current &&
	                !this.surface.trigger("tooltipClose", { element: current.shape, target: current.target, popup: popup})) {
	                popup.close();
	            }
	        },

	        _hideClick: function(e) {
	            e.preventDefault();
	            this.hide();
	        },

	        _show: function(target, shape, options, event, delay) {
	            var current = this._current;

	            clearTimeout(this._timeout);

	            if (current && ((current.shape === shape && options.shared) || current.target === target)) {
	                return;
	            }

	            clearTimeout(this._showTimeout);

	            var popup = this.getPopup();

	            if (!this.surface.trigger("tooltipOpen", { element: shape, target: target, popup: popup }) &&
	                this._updateContent(target, shape, options)) {

	                this._autoHide(options);
	                var elementSize = this._measure(options);

	                if (popup.visible()) {
	                    popup.close(true);
	                }

	                this._current = {
	                    options: options,
	                    elementSize: elementSize,
	                    shape: shape,
	                    target: target,
	                    position: this._position(options.shared ? shape: target, options, elementSize, event)
	                };

	                if (delay) {
	                    this._showTimeout = setTimeout(this._openPopupHandler, options.showAfter || 0);
	                } else {
	                    this._openPopup();
	                }
	            }
	        },

	        _openPopup: function() {
	            var current = this._current;
	            var position = current.position;

	            this.getPopup().open(position.left, position.top);
	        },

	        _autoHide: function(options) {
	            if (options.autoHide && this._closeButton) {
	                this.element.removeClass("k-tooltip-closable");
	                this._closeButton.remove();
	                delete this._closeButton;
	            }

	            if (!options.autoHide && !this._closeButton) {
	                this.element.addClass("k-tooltip-closable");
	                this._closeButton = $(TOOLTIP_CLOSE_TEMPLATE).prependTo(this.element);
	            }
	        },

	        _showEvent: function(e) {
	            var shape = this._tooltipShape(e.element);
	            if (shape) {
	                var options = deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip));

	                if (options && options.showOn == e.type) {
	                    this._show(e.element, shape, options, e.originalEvent, true);
	                }
	            }
	        },

	        _measure: function(options) {
	            var popup = this.getPopup();
	            var width, height;
	            this.element.css({
	                width: "auto",
	                height: "auto"
	            });
	            var visible = popup.visible();
	            if (!visible) {
	                popup.wrapper.show();
	            }

	            this.element.css({
	                width: defined(options.width) ? options.width : "auto",
	                height: defined(options.height) ? options.height : "auto"
	            });

	            width = outerWidth(this.element);
	            height = outerHeight(this.element);

	            if (!visible) {
	                popup.wrapper.hide();
	            }

	            return {
	                width: width,
	                height: height
	            };
	        },

	        _mouseleave: function(e) {
	            if (this.popup && !this._popupRelatedTarget(e.originalEvent)) {
	                var tooltip = this;
	                var current = tooltip._current;

	                if (current && current.options.autoHide) {
	                    tooltip._timeout = setTimeout(function() {
	                        clearTimeout(tooltip._showTimeout);
	                        tooltip.hide();
	                    }, current.options.hideDelay || 0);
	                }
	            }
	        },

	        _mousemove: function(e) {
	            var current = this._current;
	            if (current && e.element) {
	                var options = current.options;
	                if (options.position == "cursor") {
	                    var position = this._position(e.element, options, current.elementSize, e.originalEvent);
	                    current.position = position;
	                    this.getPopup().wrapper.css({left: position.left, top: position.top});
	                }
	            }
	        },

	        _surfaceLeave: function(e) {
	            if (this.popup && !this._popupRelatedTarget(e)) {
	                clearTimeout(this._showTimeout);
	                this.hide();
	            }
	        },

	        _popupRelatedTarget: function(e) {
	            return e.relatedTarget && $(e.relatedTarget).closest(this.popup.wrapper).length;
	        }
	    });

	    kendo.drawing.SurfaceTooltip = SurfaceTooltip;

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ },

/***/ 504:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.popup */ 4);

/***/ }

/******/ });

/***/ }),
/* 54 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/@progress/kendo-ui/js/drawing/util.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(505);
	module.exports = __webpack_require__(505);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 505:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(506)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function($) {

	    function createPromise() {
	        return $.Deferred();
	    }

	    function promiseAll(promises) {
	        return $.when.apply($, promises);
	    }

	    kendo.drawing.util = kendo.drawing.util || {};
	    kendo.deepExtend(kendo.drawing.util, {
	        createPromise: createPromise,
	        promiseAll: promiseAll
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));

/***/ },

/***/ 506:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.core */ 0);

/***/ }

/******/ });

/***/ }),
/* 55 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.color.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(593);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 593:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "color",
	        name: "Color utils",
	        category: "framework",
	        advanced: true,
	        description: "Color utilities used across components",
	        depends: [ "core" ]
	    };

	/*jshint eqnull:true  */

	window.kendo = window.kendo || {};

	var Class = kendo.Class;
	var support = kendo.support;

	var namedColors = {
	    aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff",
	    aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc",
	    bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd",
	    blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a",
	    burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00",
	    chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed",
	    cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff",
	    darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b",
	    darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400",
	    darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f",
	    darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000",
	    darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b",
	    darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1",
	    darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff",
	    dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff",
	    firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22",
	    fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff",
	    gold: "ffd700", goldenrod: "daa520", gray: "808080",
	    grey: "808080", green: "008000", greenyellow: "adff2f",
	    honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c",
	    indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
	    lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00",
	    lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080",
	    lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3",
	    lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1",
	    lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa",
	    lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de",
	    lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32",
	    linen: "faf0e6", magenta: "ff00ff", maroon: "800000",
	    mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3",
	    mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee",
	    mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585",
	    midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1",
	    moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080",
	    oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23",
	    orange: "ffa500", orangered: "ff4500", orchid: "da70d6",
	    palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee",
	    palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9",
	    peru: "cd853f", pink: "ffc0cb", plum: "dda0dd",
	    powderblue: "b0e0e6", purple: "800080", red: "ff0000",
	    rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513",
	    salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57",
	    seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0",
	    skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090",
	    slategrey: "708090", snow: "fffafa", springgreen: "00ff7f",
	    steelblue: "4682b4", tan: "d2b48c", teal: "008080",
	    thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0",
	    violet: "ee82ee", wheat: "f5deb3", white: "ffffff",
	    whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32"
	};

	var browser = support.browser;
	var namedColorRegexp = [ "transparent" ];

	for (var i in namedColors) {
	    if (namedColors.hasOwnProperty(i)) {
	        namedColorRegexp.push(i);
	    }
	}

	namedColorRegexp = new RegExp("^(" + namedColorRegexp.join("|") + ")(\\W|$)", "i");

	var BaseColor = Class.extend({
	    init: function() {  },

	    toHSV: function() { return this; },

	    toRGB: function() { return this; },

	    toHex: function() { return this.toBytes().toHex(); },

	    toBytes: function() { return this; },

	    toCss: function() { return "#" + this.toHex(); },

	    toCssRgba: function() {
	        var rgb = this.toBytes();
	        return ("rgba(" + (rgb.r) + ", " + (rgb.g) + ", " + (rgb.b) + ", " + (parseFloat((Number(this.a)).toFixed(3))) + ")");
	    },

	    toDisplay: function() {
	        if (browser.msie && browser.version < 9) {
	            return this.toCss(); // no RGBA support; does it support any opacity in colors?
	        }
	        return this.toCssRgba();
	    },

	    equals: function(c) {
	        return c === this || c !== null && this.toCssRgba() === parseColor(c).toCssRgba();
	    },

	    diff: function(other) {
	        if (other === null) {
	            return NaN;
	        }

	        var c1 = this.toBytes();
	        var c2 = other.toBytes();

	        return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +
	                         Math.pow((c1.g - c2.g) * 0.59, 2) +
	                         Math.pow((c1.b - c2.b) * 0.11, 2));
	    },

	    clone: function() {
	        var c = this.toBytes();
	        if (c === this) {
	            c = new Bytes(c.r, c.g, c.b, c.a);
	        }

	        return c;
	    }
	});

	var RGB = BaseColor.extend({
	    init: function(r, g, b, a) {
	        BaseColor.fn.init.call(this);

	        this.r = r;
	        this.g = g;
	        this.b = b;
	        this.a = a;
	    },

	    toHSV: function() {
	        var ref = this;
	        var r = ref.r;
	        var g = ref.g;
	        var b = ref.b;
	        var min = Math.min(r, g, b);
	        var max = Math.max(r, g, b);
	        var delta = max - min;
	        var v = max;
	        var h, s;

	        if (delta === 0) {
	            return new HSV(0, 0, v, this.a);
	        }

	        if (max !== 0) {
	            s = delta / max;
	            if (r === max) {
	                h = (g - b) / delta;
	            } else if (g === max) {
	                h = 2 + (b - r) / delta;
	            } else {
	                h = 4 + (r - g) / delta;
	            }

	            h *= 60;
	            if (h < 0) {
	                h += 360;
	            }
	        } else {
	            s = 0;
	            h = -1;
	        }

	        return new HSV(h, s, v, this.a);
	    },

	    toHSL: function() {
	        var ref = this;
	        var r = ref.r;
	        var g = ref.g;
	        var b = ref.b;
	        var max = Math.max(r, g, b);
	        var min = Math.min(r, g, b);
	        var h, s, l = (max + min) / 2;

	        if (max === min) {
	            h = s = 0;
	        } else {
	            var d = max - min;
	            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	            switch (max) {
	                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	                case g: h = (b - r) / d + 2; break;
	                case b: h = (r - g) / d + 4; break;
	                default: break;
	            }

	            h *= 60;
	            s *= 100;
	            l *= 100;
	        }

	        return new HSL(h, s, l, this.a);
	    },

	    toBytes: function() {
	        return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
	    }
	});

	var Bytes = RGB.extend({
	    init: function(r, g, b, a) {
	        RGB.fn.init.call(this, Math.round(r), Math.round(g), Math.round(b), a);
	    },

	    toRGB: function() {
	        return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
	    },

	    toHSV: function() {
	        return this.toRGB().toHSV();
	    },

	    toHSL: function() {
	        return this.toRGB().toHSL();
	    },

	    toHex: function() {
	        return hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);
	    },

	    toBytes: function() {
	        return this;
	    }
	});

	function hex(n, width, pad) {
	    if (pad === void 0) { pad = "0"; }

	    var result = n.toString(16);
	    while (width > result.length) {
	        result = pad + result;
	    }

	    return result;
	}

	var HSV = BaseColor.extend({
	    init: function(h, s, v, a) {
	        BaseColor.fn.init.call(this);

	        this.h = h;
	        this.s = s;
	        this.v = v;
	        this.a = a;
	    },

	    toRGB: function() {
	        var ref = this;
	        var h = ref.h;
	        var s = ref.s;
	        var v = ref.v;
	        var r, g, b;

	        if (s === 0) {
	            r = g = b = v;
	        } else {
	            h /= 60;

	            var i = Math.floor(h);
	            var f = h - i;
	            var p = v * (1 - s);
	            var q = v * (1 - s * f);
	            var t = v * (1 - s * (1 - f));

	            switch (i) {
	                case 0: r = v; g = t; b = p; break;
	                case 1: r = q; g = v; b = p; break;
	                case 2: r = p; g = v; b = t; break;
	                case 3: r = p; g = q; b = v; break;
	                case 4: r = t; g = p; b = v; break;
	                default: r = v; g = p; b = q; break;
	            }
	        }

	        return new RGB(r, g, b, this.a);
	    },

	    toHSL: function() {
	        return this.toRGB().toHSL();
	    },

	    toBytes: function() {
	        return this.toRGB().toBytes();
	    }
	});

	var HSL = BaseColor.extend({
	    init: function(h, s, l, a) {
	        BaseColor.fn.init.call(this);

	        this.h = h;
	        this.s = s;
	        this.l = l;
	        this.a = a;
	    },

	    toRGB: function() {
	        var ref = this;
	        var h = ref.h;
	        var s = ref.s;
	        var l = ref.l;
	        var r, g, b;

	        if (s === 0) {
	            r = g = b = l; // achromatic
	        } else {
	            h /= 360;
	            s /= 100;
	            l /= 100;

	            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	            var p = 2 * l - q;
	            r = hue2rgb(p, q, h + 1 / 3);
	            g = hue2rgb(p, q, h);
	            b = hue2rgb(p, q, h - 1 / 3);
	        }

	        return new RGB(r, g, b, this.a);
	    },

	    toHSV: function() {
	        return this.toRGB().toHSV();
	    },

	    toBytes: function() {
	        return this.toRGB().toBytes();
	    }
	});

	function hue2rgb(p, q, s) {
	    var t = s;

	    if (t < 0) {
	        t += 1;
	    }

	    if (t > 1) {
	        t -= 1;
	    }

	    if (t < 1 / 6) {
	        return p + (q - p) * 6 * t;
	    }

	    if (t < 1 / 2) {
	        return q;
	    }

	    if (t < 2 / 3) {
	        return p + (q - p) * (2 / 3 - t) * 6;
	    }

	    return p;
	}

	function parseColor(value, safe) {
	    var m, ret;

	    if (value == null || value === "none") {
	        return null;
	    }

	    if (value instanceof BaseColor) {
	        return value;
	    }

	    var color = value.toLowerCase();
	    if ((m = namedColorRegexp.exec(color))) {
	        if (m[1] === "transparent") {
	            color = new RGB(1, 1, 1, 0);
	        } else {
	            color = parseColor(namedColors[m[1]], safe);
	        }
	        color.match = [ m[1] ];
	        return color;
	    }
	    if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 16),
	                        parseInt(m[2], 16),
	                        parseInt(m[3], 16), 1);
	    } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) {
	        ret = new Bytes(parseInt(m[1] + m[1], 16),
	                        parseInt(m[2] + m[2], 16),
	                        parseInt(m[3] + m[3], 16), 1);
	    } else if ((m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 10),
	                        parseInt(m[2], 10),
	                        parseInt(m[3], 10), 1);
	    } else if ((m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 10),
	                        parseInt(m[2], 10),
	                        parseInt(m[3], 10), parseFloat(m[4]));
	    } else if ((m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color))) {
	        ret = new RGB(parseFloat(m[1]) / 100,
	                      parseFloat(m[2]) / 100,
	                      parseFloat(m[3]) / 100, 1);
	    } else if ((m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
	        ret = new RGB(parseFloat(m[1]) / 100,
	                      parseFloat(m[2]) / 100,
	                      parseFloat(m[3]) / 100, parseFloat(m[4]));
	    }

	    if (ret) {
	        ret.match = m;
	    } else if (!safe) {
	        throw new Error("Cannot parse color: " + color);
	    }

	    return ret;
	}

	var Color = Class.extend({
	    init: function(value) {
	        var this$1 = this;

	        if (arguments.length === 1) {
	            var formats = Color.formats;
	            var resolvedColor = this.resolveColor(value);

	            for (var idx = 0; idx < formats.length; idx++) {
	                var formatRegex = formats[idx].re;
	                var processor = formats[idx].process;
	                var parts = formatRegex.exec(resolvedColor);

	                if (parts) {
	                    var channels = processor(parts);
	                    this$1.r = channels[0];
	                    this$1.g = channels[1];
	                    this$1.b = channels[2];
	                }
	            }
	        } else {
	            this.r = arguments[0];
	            this.g = arguments[1];
	            this.b = arguments[2];
	        }

	        this.r = this.normalizeByte(this.r);
	        this.g = this.normalizeByte(this.g);
	        this.b = this.normalizeByte(this.b);
	    },

	    toHex: function() {
	        var pad = this.padDigit;
	        var r = this.r.toString(16);
	        var g = this.g.toString(16);
	        var b = this.b.toString(16);

	        return "#" + pad(r) + pad(g) + pad(b);
	    },

	    resolveColor: function(value) {
	        var color = value || "black";

	        if (color.charAt(0) === "#") {
	            color = color.substr(1, 6);
	        }

	        color = color.replace(/ /g, "");
	        color = color.toLowerCase();
	        color = Color.namedColors[color] || color;

	        return color;
	    },

	    normalizeByte: function(value) {
	        if (value < 0 || isNaN(value)) {
	            return 0;
	        }

	        return value > 255 ? 255 : value;
	    },

	    padDigit: function(value) {
	        return (value.length === 1) ? "0" + value : value;
	    },

	    brightness: function(value) {
	        var round = Math.round;

	        this.r = round(this.normalizeByte(this.r * value));
	        this.g = round(this.normalizeByte(this.g * value));
	        this.b = round(this.normalizeByte(this.b * value));

	        return this;
	    },

	    percBrightness: function() {
	        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);
	    }
	});

	Color.fromBytes = function(r, g, b, a) {
	    return new Bytes(r, g, b, a != null ? a : 1);
	};

	Color.fromRGB = function(r, g, b, a) {
	    return new RGB(r, g, b, a != null ? a : 1);
	};

	Color.fromHSV = function(h, s, v, a) {
	    return new HSV(h, s, v, a != null ? a : 1);
	};

	Color.fromHSL = function(h, s, l, a) {
	    return new HSL(h, s, l, a != null ? a : 1);
	};

	Color.formats = [ {
	    re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
	        ];
	    }
	}, {
	    re: /^(\w{2})(\w{2})(\w{2})$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
	        ];
	    }
	}, {
	    re: /^(\w{1})(\w{1})(\w{1})$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1] + parts[1], 16),
	            parseInt(parts[2] + parts[2], 16),
	            parseInt(parts[3] + parts[3], 16)
	        ];
	    }
	} ];

	Color.namedColors = namedColors;

	kendo.deepExtend(kendo, {
	    parseColor: parseColor,
	    Color: Color
	});

	}, __webpack_require__(3));

/***/ }

/******/ });

/***/ }),
/* 56 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.drawing.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(680);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 680:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(681),
	        __webpack_require__(682),
	        __webpack_require__(683),
	        __webpack_require__(684),
	        __webpack_require__(685)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "drawing",
	        name: "Drawing API",
	        category: "framework",
	        description: "The Kendo UI low-level drawing API",
	        depends: [ "core", "color", "popup" ]
	    };

	}, __webpack_require__(3));

/***/ },

/***/ 681:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./drawing/util */ 54);

/***/ },

/***/ 682:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./drawing/kendo-drawing */ 22);

/***/ },

/***/ 683:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./drawing/surface-tooltip */ 53);

/***/ },

/***/ 684:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./drawing/surface */ 113);

/***/ },

/***/ 685:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./drawing/html */ 112);

/***/ }

/******/ });

/***/ }),
/* 57 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.editable.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(687);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 580:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.validator */ 64);

/***/ },

/***/ 618:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.binder */ 28);

/***/ },

/***/ 675:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.datepicker */ 8);

/***/ },

/***/ 687:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(675), __webpack_require__(688), __webpack_require__(580), __webpack_require__(618) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "editable",
	    name: "Editable",
	    category: "framework",
	    depends: [ "datepicker", "numerictextbox", "validator", "binder" ],
	    hidden: true
	};

	/* jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        extend = $.extend,
	        oldIE = kendo.support.browser.msie && kendo.support.browser.version < 9,
	        isFunction = kendo.isFunction,
	        isPlainObject = $.isPlainObject,
	        inArray = $.inArray,
	        nameSpecialCharRegExp = /("|\%|'|\[|\]|\$|\.|\,|\:|\;|\+|\*|\&|\!|\#|\(|\)|<|>|\=|\?|\@|\^|\{|\}|\~|\/|\||`)/g,
	        ERRORTEMPLATE = '<div class="k-widget k-tooltip k-tooltip-validation" style="margin:0.5em"><span class="k-icon k-i-warning"> </span>' +
	                    '#=message#<div class="k-callout k-callout-n"></div></div>',
	        CHANGE = "change";

	    var specialRules = ["url", "email", "number", "date", "boolean"];

	    function fieldType(field) {
	        field = field != null ? field : "";
	        return field.type || $.type(field) || "string";
	    }

	    function convertToValueBinding(container) {
	        container.find(":input:not(:button, [" + kendo.attr("role") + "=upload], [" + kendo.attr("skip") + "], [type=file]), select").each(function() {
	            var bindAttr = kendo.attr("bind"),
	                binding = this.getAttribute(bindAttr) || "",
	                bindingName = this.type === "checkbox" ||  this.type === "radio" ? "checked:" : "value:",
	                fieldName = this.name;

	            if (binding.indexOf(bindingName) === -1 && fieldName) {
	                binding += (binding.length ? "," : "") + bindingName + fieldName;

	                $(this).attr(bindAttr, binding);
	            }
	        });
	    }

	    function createAttributes(options) {
	        var field = (options.model.fields || options.model)[options.field],
	            type = fieldType(field),
	            validation = field ? field.validation : {},
	            ruleName,
	            DATATYPE = kendo.attr("type"),
	            BINDING = kendo.attr("bind"),
	            rule,
	            attr = {
	                name: options.field
	            };

	        for (ruleName in validation) {
	            rule = validation[ruleName];

	            if (inArray(ruleName, specialRules) >= 0) {
	                attr[DATATYPE] = ruleName;
	            } else if (!isFunction(rule)) {
	                attr[ruleName] = isPlainObject(rule) ? rule.value || ruleName : rule;
	            }

	            attr[kendo.attr(ruleName + "-msg")] = rule.message;
	        }

	        if (inArray(type, specialRules) >= 0) {
	            attr[DATATYPE] = type;
	        }

	        attr[BINDING] = (type === "boolean" ? "checked:" : "value:") + options.field;

	        return attr;
	    }

	    function convertItems(items) {
	        var idx,
	            length,
	            item,
	            value,
	            text,
	            result;

	        if (items && items.length) {
	            result = [];
	            for (idx = 0, length = items.length; idx < length; idx++) {
	                item = items[idx];
	                text = item.text || item.value || item;
	                value = item.value == null ? (item.text || item) : item.value;

	                result[idx] = { text: text, value: value };
	            }
	        }
	        return result;
	    }

	    var editors = {
	        "number": function(container, options) {
	            var attr = createAttributes(options);
	            $('<input type="text"/>').attr(attr).appendTo(container).kendoNumericTextBox({ format: options.format });
	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        },
	        "date": function(container, options) {
	            var attr = createAttributes(options),
	                format = options.format;

	            if (format) {
	                format = kendo._extractFormat(format);
	            }

	            attr[kendo.attr("format")] = format;

	            $('<input type="text"/>').attr(attr).appendTo(container).kendoDatePicker({ format: options.format });
	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        },
	        "string": function(container, options) {
	            var attr = createAttributes(options);

	            $('<input type="text" class="k-input k-textbox"/>').attr(attr).appendTo(container);
	        },
	        "boolean": function(container, options) {
	            var attr = createAttributes(options);
	            $('<input type="checkbox" />').attr(attr).appendTo(container);
	        },
	        "values": function(container, options) {
	            var attr = createAttributes(options);
	            var items = kendo.stringify(convertItems(options.values));
	            $('<select ' + kendo.attr("text-field") + '="text"' + kendo.attr("value-field") + '="value"' +
	                kendo.attr("source") + "=\'" + (items ? items.replace(/\'/g,"&apos;") : items) +
	                "\'" + kendo.attr("role") + '="dropdownlist"/>') .attr(attr).appendTo(container);
	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        }
	    };

	    function addValidationRules(modelField, rules) {
	        var validation = modelField ? (modelField.validation || {}) : {},
	            rule,
	            descriptor;

	        for (rule in validation) {
	            descriptor = validation[rule];

	            if (isPlainObject(descriptor) && descriptor.value) {
	                descriptor = descriptor.value;
	            }

	            if (isFunction(descriptor)) {
	                rules[rule] = descriptor;
	            }
	        }
	    }

	    var Editable = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            if (options.target) {
	                options.$angular = options.target.options.$angular;
	            }
	            Widget.fn.init.call(that, element, options);
	            that._validateProxy = $.proxy(that._validate, that);
	            that.refresh();
	        },

	        events: [CHANGE],

	        options: {
	            name: "Editable",
	            editors: editors,
	            clearContainer: true,
	            errorTemplate: ERRORTEMPLATE
	        },

	        editor: function(field, modelField) {
	            var that = this,
	                editors = that.options.editors,
	                isObject = isPlainObject(field),
	                fieldName = isObject ? field.field : field,
	                model = that.options.model || {},
	                isValuesEditor = isObject && field.values,
	                type = isValuesEditor ? "values" : fieldType(modelField),
	                isCustomEditor = isObject && field.editor,
	                editor = isCustomEditor ? field.editor : editors[type],
	                container = that.element.find("[" + kendo.attr("container-for") + "=" + fieldName.replace(nameSpecialCharRegExp, "\\$1")+ "]");

	            editor = editor ? editor : editors.string;

	            if (isCustomEditor && typeof field.editor === "string") {
	                editor = function(container) {
	                    container.append(field.editor);
	                };
	            }

	            container = container.length ? container : that.element;
	            editor(container, extend(true, {}, isObject ? field : { field: fieldName }, { model: model }));
	        },

	        _validate: function(e) {
	            var that = this,
	                input,
	                value = e.value,
	                preventChangeTrigger = that._validationEventInProgress,
	                values = {},
	                bindAttribute = kendo.attr("bind"),
	                fieldName = e.field.replace(nameSpecialCharRegExp, "\\$1"),
	                bindingRegex = new RegExp("(value|checked)\\s*:\\s*" + fieldName + "\\s*(,|$)");

	            values[e.field] = e.value;

	            input = $(':input[' + bindAttribute + '*="' + fieldName + '"]', that.element)
	                .filter("[" + kendo.attr("validate") + "!='false']").filter(function() {
	                   return bindingRegex.test($(this).attr(bindAttribute));
	                });
	            if (input.length > 1) {
	                input = input.filter(function () {
	                    var element = $(this);
	                    return !element.is(":radio") || element.val() == value;
	                });
	            }

	            try {
	                that._validationEventInProgress = true;

	                if (!that.validatable.validateInput(input) || (!preventChangeTrigger && that.trigger(CHANGE, { values: values }))) {
	                    e.preventDefault();
	                }

	            } finally {
	                that._validationEventInProgress = false;
	            }
	        },

	        end: function() {
	            return this.validatable.validate();
	        },

	        destroy: function() {
	            var that = this;

	            that.angular("cleanup", function(){
	                return { elements: that.element };
	            });

	            Widget.fn.destroy.call(that);

	            that.options.model.unbind("set", that._validateProxy);

	            kendo.unbind(that.element);

	            if (that.validatable) {
	                that.validatable.destroy();
	            }
	            kendo.destroy(that.element);

	            that.element.removeData("kendoValidator");

	            if (that.element.is("[" + kendo.attr("role") + "=editable]")) {
	                that.element.removeAttr(kendo.attr("role"));
	            }
	        },

	        refresh: function() {
	            var that = this,
	                idx,
	                length,
	                fields = that.options.fields || [],
	                container = that.options.clearContainer ? that.element.empty() : that.element,
	                model = that.options.model || {},
	                rules = {},
	                field,
	                isObject,
	                fieldName,
	                modelField,
	                modelFields;

	            if (!$.isArray(fields)) {
	                fields = [fields];
	            }

	            for (idx = 0, length = fields.length; idx < length; idx++) {
	                 field = fields[idx];
	                 isObject = isPlainObject(field);
	                 fieldName = isObject ? field.field : field;
	                 modelField = (model.fields || model)[fieldName];

	                 addValidationRules(modelField, rules);

	                 that.editor(field, modelField);
	            }

	            if (that.options.target) {
	                that.angular("compile", function(){
	                    return {
	                        elements: container,
	                        data: container.map(function() { return { dataItem: model }; })
	                    };
	                });
	            }

	            if (!length) {
	                modelFields = model.fields || model;
	                for (fieldName in modelFields) {
	                    addValidationRules(modelFields[fieldName], rules);
	               }
	            }

	            convertToValueBinding(container);

	            if (that.validatable) {
	                that.validatable.destroy();
	            }

	            kendo.bind(container, that.options.model);

	            that.options.model.unbind("set", that._validateProxy);
	            that.options.model.bind("set", that._validateProxy);

	            that.validatable = new kendo.ui.Validator(container, {
	                validateOnBlur: false,
	                errorTemplate: that.options.errorTemplate || undefined,
	                rules: rules });

	            var focusable = container.find(":kendoFocusable").eq(0).focus();
	            if (oldIE) {
	                focusable.focus();
	            }
	        }
	   });

	   ui.plugin(Editable);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 688:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.numerictextbox */ 32);

/***/ }

/******/ });

/***/ }),
/* 58 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.filtermenu.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(730);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 578:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.dropdownlist */ 29);

/***/ },

/***/ 618:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.binder */ 28);

/***/ },

/***/ 675:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.datepicker */ 8);

/***/ },

/***/ 688:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.numerictextbox */ 32);

/***/ },

/***/ 730:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(675), __webpack_require__(688), __webpack_require__(578), __webpack_require__(618) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "filtermenu",
	    name: "Filtering Menu",
	    category: "framework",
	    depends: [ "datepicker", "numerictextbox", "dropdownlist", "binder" ],
	    advanced: true
	};

	/* jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        proxy = $.proxy,
	        POPUP = "kendoPopup",
	        INIT = "init",
	        REFRESH = "refresh",
	        CHANGE = "change",
	        NS = ".kendoFilterMenu",
	        EQ = "Is equal to",
	        NEQ = "Is not equal to",
	        roles = {
	            "number": "numerictextbox",
	            "date": "datepicker"
	        },
	        mobileRoles = {
	            "string": "text",
	            "number": "number",
	            "date": "date"
	        },
	        isFunction = kendo.isFunction,
	        Widget = ui.Widget;

	    var booleanTemplate =
	            '<div>' +
	                '<div class="k-filter-help-text">#=messages.info#</div>'+
	                '<label>'+
	                    '<input type="radio" data-#=ns#bind="checked: filters[0].value" value="true" name="filters[0].value"/>' +
	                    '#=messages.isTrue#' +
	                '</label>' +
	                '<label>'+
	                    '<input type="radio" data-#=ns#bind="checked: filters[0].value" value="false" name="filters[0].value"/>' +
	                    '#=messages.isFalse#' +
	                '</label>' +
	                '<div>' +
	                '<button type="submit" class="k-button k-primary">#=messages.filter#</button>' +
	                '<button type="reset" class="k-button">#=messages.clear#</button>'+
	                '</div>' +
	            '</div>';

	    var defaultTemplate =
	            '<div>' +
	                '<div class="k-filter-help-text">#=messages.info#</div>'+
	                '<select title="#=messages.operator#" data-#=ns#bind="value: filters[0].operator" data-#=ns#role="dropdownlist">'+
	                    '#for(var op in operators){#'+
	                        '<option value="#=op#">#=operators[op]#</option>' +
	                    '#}#'+
	                '</select>'+
	                '#if(values){#' +
	                    '<select title="#=messages.value#" data-#=ns#bind="value:filters[0].value" data-#=ns#text-field="text" data-#=ns#value-field="value" data-#=ns#source=\'#=kendo.stringify(values).replace(/\'/g,"&\\#39;")#\' data-#=ns#role="dropdownlist" data-#=ns#option-label="#=messages.selectValue#" data-#=ns#value-primitive="true">' +
	                    '</select>' +
	                '#}else{#' +
	                    '<input title="#=messages.value#" data-#=ns#bind="value:filters[0].value" class="k-textbox" type="text" #=role ? "data-" + ns + "role=\'" + role + "\'" : ""# />'+
	                '#}#' +
	                '#if(extra){#'+
	                    '<select title="#=messages.logic#" class="k-filter-and" data-#=ns#bind="value: logic" data-#=ns#role="dropdownlist">'+
	                        '<option value="and">#=messages.and#</option>'+
	                        '<option value="or">#=messages.or#</option>'+
	                    '</select>'+
	                    '<select title="#=messages.additionalOperator#" data-#=ns#bind="value: filters[1].operator" data-#=ns#role="dropdownlist">'+
	                        '#for(var op in operators){#'+
	                            '<option value="#=op#">#=operators[op]#</option>'+
	                        '#}#'+
	                    '</select>'+
	                    '#if(values){#' +
	                        '<select title="#=messages.additionalValue#" data-#=ns#bind="value:filters[1].value" data-#=ns#text-field="text" data-#=ns#value-field="value" data-#=ns#source=\'#=kendo.stringify(values).replace(/\'/g,"&\\#39;")#\' data-#=ns#role="dropdownlist" data-#=ns#option-label="#=messages.selectValue#" data-#=ns#value-primitive="true">' +
	                        '</select>'+
	                    '#}else{#' +
	                        '<input title="#=messages.additionalValue#" data-#=ns#bind="value: filters[1].value" class="k-textbox" type="text" #=role ? "data-" + ns + "role=\'" + role + "\'" : ""#/>'+
	                    '#}#' +
	                '#}#'+
	                '<div>'+
	                '<button type="submit" class="k-button k-primary">#=messages.filter#</button>'+
	                '<button type="reset" class="k-button">#=messages.clear#</button>'+
	                '</div>'+
	            '</div>';

	        var defaultMobileTemplate =
	            '<div data-#=ns#role="view" data-#=ns#init-widgets="false" data-#=ns#use-native-scrolling="true" class="k-grid-filter-menu">'+
	                '<div data-#=ns#role="header" class="k-header">'+
	                    '<button class="k-button k-i-cancel">#=messages.cancel#</button>'+
	                    '#=title#'+
	                    '<button type="submit" class="k-button k-submit">#=messages.filter#</button>'+
	                '</div>'+
	                '<form title="#=messages.info#" class="k-filter-menu k-mobile-list">'+
	                    '<ul class="k-filter-help-text"><li><span class="k-link">#=messages.info#</span>'+
	                    '<ul>'+
	                        '<li class="k-item"><label class="k-label">#=messages.operator#'+
	                            '<select data-#=ns#bind="value: filters[0].operator">'+
	                                '#for(var op in operators){#'+
	                                    '<option value="#=op#">#=operators[op]#</option>' +
	                                '#}#'+
	                            '</select>'+
	                        '</label></li>' +
	                        '<li class="k-item"><label class="k-label">#=messages.value#'+
	                            '#if(values){#' +
	                                '<select data-#=ns#bind="value:filters[0].value">'+
	                                    '<option value="">#=messages.selectValue#</option>' +
	                                    '#for(var val in values){#'+
	                                        '<option value="#=values[val].value#">#=values[val].text#</option>' +
	                                    '#}#'+
	                                '</select>' +
	                            '#}else{#' +
	                                '<input data-#=ns#bind="value:filters[0].value" class="k-textbox" type="#=inputType#" '+
	                                '#=useRole ? "data-" + ns + "role=\'" + role + "\'" : ""# />'+
	                            '#}#' +
	                        '</label></li>'+
	                        '#if(extra){#'+
	                        '</ul>'+
	                        '<ul class="k-filter-help-text"><li><span class="k-link"></span>'+
	                            '<li class="k-item"><label class="k-label"><input type="radio" name="logic" class="k-check" data-#=ns#bind="checked: logic" value="and" />#=messages.and#</label></li>'+
	                            '<li class="k-item"><label class="k-label"><input type="radio" name="logic" class="k-check" data-#=ns#bind="checked: logic" value="or" />#=messages.or#</label></li>'+
	                        '</ul>'+
	                        '<ul class="k-filter-help-text"><li><span class="k-link"></span>'+
	                            '<li class="k-item"><label class="k-label">#=messages.additionalOperator#'+
	                                '<select data-#=ns#bind="value: filters[1].operator">'+
	                                    '#for(var op in operators){#'+
	                                        '<option value="#=op#">#=operators[op]#</option>' +
	                                    '#}#'+
	                                '</select>'+
	                            '</label></li>'+
	                            '<li class="k-item"><label class="k-label">#=messages.additionalValue#'+
	                                '#if(values){#' +
	                                    '<select data-#=ns#bind="value:filters[1].value">'+
	                                        '<option value="">#=messages.selectValue#</option>' +
	                                        '#for(var val in values){#'+
	                                            '<option value="#=values[val].value#">#=values[val].text#</option>' +
	                                        '#}#'+
	                                    '</select>' +
	                                '#}else{#' +
	                                    '<input data-#=ns#bind="value:filters[1].value" class="k-textbox" type="#=inputType#" '+
	                                    '#=useRole ? "data-" + ns + "role=\'" + role + "\'" : ""# />'+
	                                '#}#' +
	                            '</label></li>'+
	                        '#}#'+
	                        '</ul>'+
	                        '</li><li class="k-button-container">' +
	                            '<button type="reset" class="k-button">#=messages.clear#</button>'+
	                        '</li></ul>' +
	                    '</div>'+
	                '</form>'+
	            '</div>';

	    var booleanMobileTemplate =
	            '<div data-#=ns#role="view" data-#=ns#init-widgets="false" data-#=ns#use-native-scrolling="true" class="k-grid-filter-menu">'+
	                '<div data-#=ns#role="header" class="k-header">'+
	                    '<button class="k-button k-i-cancel">#=messages.cancel#</button>'+
	                    '#=title#'+
	                    '<button type="submit" class="k-button k-submit">#=messages.filter#</button>'+
	                '</div>'+
	                '<form title="#=messages.info#" class="k-filter-menu k-mobile-list">'+
	                    '<ul class="k-filter-help-text"><li><span class="k-link">#=messages.info#</span>'+
	                    '<ul>'+
	                        '<li class="k-item"><label class="k-label">'+
	                            '<input class="k-check" type="radio" data-#=ns#bind="checked: filters[0].value" value="true" name="filters[0].value"/>' +
	                            '#=messages.isTrue#' +
	                        '</label></li>' +
	                        '<li class="k-item"><label class="k-label">'+
	                            '<input class="k-check" type="radio" data-#=ns#bind="checked: filters[0].value" value="false" name="filters[0].value"/>' +
	                            '#=messages.isFalse#' +
	                        '</label></li>' +
	                    '</ul>'+
	                    '</li><li class="k-button-container">' +
	                        '<button type="reset" class="k-button">#=messages.clear#</button>'+
	                    '</li></ul>' +
	                '</form>'+
	            '</div>';

	    function removeFiltersForField(expression, field) {
	        if (expression.filters) {
	            expression.filters = $.grep(expression.filters, function(filter) {
	                removeFiltersForField(filter, field);
	                if (filter.filters) {
	                    return filter.filters.length;
	                } else {
	                    return filter.field != field;
	                }
	            });
	        }
	    }

	    function convertItems(items) {
	        var idx,
	            length,
	            item,
	            value,
	            text,
	            result;

	        if (items && items.length) {
	            result = [];
	            for (idx = 0, length = items.length; idx < length; idx++) {
	                item = items[idx];
	                text = item.text !== "" ? item.text || item.value || item : item.text;
	                value = item.value == null ? (item.text || item) : item.value;

	                result[idx] = { text: text, value: value };
	            }
	        }
	        return result;
	    }


	    function clearFilter(filters, field) {
	        return $.grep(filters, function(expr) {
	            if (expr.filters) {
	                expr.filters = $.grep(expr.filters, function(nested) {
	                    return nested.field != field;
	                });

	                return expr.filters.length;
	            }
	            return expr.field != field;
	        });
	    }

	    var FilterMenu = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                type = "string",
	                operators,
	                initial,
	                link,
	                field;

	            Widget.fn.init.call(that, element, options);

	            operators = that.operators = options.operators || {};

	            element = that.element;
	            options = that.options;

	            if (!options.appendToElement) {
	                link = element.addClass("k-with-icon k-filterable").find(".k-grid-filter");

	                if (!link[0]) {
	                    link = element.prepend('<a class="k-grid-filter" href="#" title="' + options.messages.filter + '"><span class="k-icon k-i-filter"></span></a>').find(".k-grid-filter");
	                }

	                link.attr("tabindex", -1).on("click" + NS, proxy(that._click, that));
	            }

	            that.link = link || $();

	            that.dataSource = DataSource.create(options.dataSource);

	            that.field = options.field || element.attr(kendo.attr("field"));

	            that.model = that.dataSource.reader.model;

	            that._parse = function(value) {
	                 return value != null ? (value + "") : value;
	            };

	            if (that.model && that.model.fields) {
	                field = that.model.fields[that.field];

	                if (field) {
	                    type = field.type || "string";
	                    if (field.parse) {
	                        that._parse = proxy(field.parse, field);
	                    }
	                }
	            }

	            if (options.values) {
	                type = "enums";
	            }

	            that.type = type;

	            operators = operators[type] || options.operators[type];

	            for (initial in operators) { // get the first operator
	                break;
	            }

	            that._defaultFilter = function() {
	                return { field: that.field, operator: initial || "eq", value: "" };
	            };

	            that._refreshHandler = proxy(that.refresh, that);

	            that.dataSource.bind(CHANGE, that._refreshHandler);

	            if (options.appendToElement) { // force creation if used in column menu
	                that._init();
	            } else {
	                that.refresh(); //refresh if DataSource is fitered before menu is created
	            }
	        },

	        _init: function() {
	            var that = this,
	                ui = that.options.ui,
	                setUI = isFunction(ui),
	                role;

	            that.pane = that.options.pane;
	            if (that.pane) {
	                that._isMobile = true;
	            }

	            if (!setUI) {
	                role = ui || roles[that.type];
	            }

	            if (that._isMobile) {
	                that._createMobileForm(role);
	            } else {
	                that._createForm(role);
	            }

	            that.form
	                .on("submit" + NS, proxy(that._submit, that))
	                .on("reset" + NS, proxy(that._reset, that));

	            if (setUI) {
	                that.form.find(".k-textbox")
	                    .removeClass("k-textbox")
	                    .each(function() {
	                        ui($(this));
	                    });
	            }

	            that.form
	                 .find("[" + kendo.attr("role") + "=numerictextbox]")
	                 .removeClass("k-textbox")
	                 .end()
	                 .find("[" + kendo.attr("role") + "=datetimepicker]")
	                 .removeClass("k-textbox")
	                 .end()
	                 .find("[" + kendo.attr("role") + "=timepicker]")
	                 .removeClass("k-textbox")
	                 .end()
	                 .find("[" + kendo.attr("role") + "=datepicker]")
	                 .removeClass("k-textbox");

	            that.refresh();

	            that.trigger(INIT, { field: that.field, container: that.form });

	            kendo.cycleForm(that.form);
	        },

	        _createForm: function(role) {
	            var that = this,
	                options = that.options,
	                operators = that.operators || {},
	                type = that.type;

	            operators = operators[type] || options.operators[type];

	            that.form = $('<form title="' + that.options.messages.info + '" class="k-filter-menu"/>')
	                .html(kendo.template(type === "boolean" ? booleanTemplate : defaultTemplate)({
	                    field: that.field,
	                    format: options.format,
	                    ns: kendo.ns,
	                    messages: options.messages,
	                    extra: options.extra,
	                    operators: operators,
	                    type: type,
	                    role: role,
	                    values: convertItems(options.values)
	                }));

	            if (!options.appendToElement) {
	                that.popup = that.form[POPUP]({
	                    anchor: that.link,
	                    open: proxy(that._open, that),
	                    activate: proxy(that._activate, that),
	                    close: function() {
	                        if (that.options.closeCallback) {
	                            that.options.closeCallback(that.element);
	                        }
	                    }
	                }).data(POPUP);
	            } else {
	                that.element.append(that.form);
	                that.popup = that.element.closest(".k-popup").data(POPUP);
	            }

	            that.form
	                .on("keydown" + NS, proxy(that._keydown, that));
	        },

	        _createMobileForm: function(role) {
	            var that = this,
	                options = that.options,
	                operators = that.operators || {},
	                type = that.type;

	            operators = operators[type] || options.operators[type];

	            that.form = $("<div />")
	                .html(kendo.template(type === "boolean" ? booleanMobileTemplate : defaultMobileTemplate)({
	                    field: that.field,
	                    title: options.title || that.field,
	                    format: options.format,
	                    ns: kendo.ns,
	                    messages: options.messages,
	                    extra: options.extra,
	                    operators: operators,
	                    type: type,
	                    role: role,
	                    useRole: (!kendo.support.input.date && type === "date") || type === "number",
	                    inputType: mobileRoles[type],
	                    values: convertItems(options.values)
	                }));

	            that.view = that.pane.append(that.form.html());
	            that.form = that.view.element.find("form");

	            that.view.element
	                .on("click", ".k-submit", function(e) {
	                    that.form.submit();
	                    e.preventDefault();
	                })
	                .on("click", ".k-i-cancel", function(e) {
	                    that._closeForm();
	                    e.preventDefault();
	                });
	        },

	        refresh: function() {
	            var that = this,
	                expression = that.dataSource.filter() || { filters: [], logic: "and" };

	            var defaultFilters = [ that._defaultFilter() ];
	            var defaultOperator = that._defaultFilter().operator;
	            if (that.options.extra || (defaultOperator !== "isnull" && defaultOperator !== "isnotnull")) {
	                defaultFilters.push(that._defaultFilter());
	            }

	            that.filterModel = kendo.observable({
	                logic: "and",
	                filters: defaultFilters
	            });

	            if (that.form) {
	                //NOTE: binding the form element directly causes weird error in IE when grid is bound through MVVM and column is sorted
	                kendo.bind(that.form.children().first(), that.filterModel);
	            }

	            if (that._bind(expression)) {
	                that.link.addClass("k-state-active");
	            } else {
	                that.link.removeClass("k-state-active");
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            if (that.form) {
	                kendo.unbind(that.form);
	                kendo.destroy(that.form);
	                that.form.unbind(NS);
	                if (that.popup) {
	                    that.popup.destroy();
	                    that.popup = null;
	                }
	                that.form = null;
	            }

	            if (that.view) {
	                that.view.purge();
	                that.view = null;
	            }

	            that.link.unbind(NS);

	            if (that._refreshHandler) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);
	                that.dataSource = null;
	            }

	            that.element = that.link = that._refreshHandler = that.filterModel = null;
	        },

	        _bind: function(expression) {
	            var that = this,
	                filters = expression.filters,
	                idx,
	                length,
	                found = false,
	                current = 0,
	                filterModel = that.filterModel,
	                currentFilter,
	                filter;

	            for (idx = 0, length = filters.length; idx < length; idx++) {
	                filter = filters[idx];
	                if (filter.field == that.field) {
	                    filterModel.set("logic", expression.logic);

	                    currentFilter = filterModel.filters[current];
	                    if (!currentFilter) {
	                        filterModel.filters.push({ field: that.field });
	                        currentFilter = filterModel.filters[current];
	                    }
	                    currentFilter.set("value", that._parse(filter.value));
	                    currentFilter.set("operator", filter.operator);

	                    current++;
	                    found = true;
	                } else if (filter.filters) {
	                    found = found || that._bind(filter);
	                }
	            }

	            return found;
	        },

	        _stripFilters: function(filters) {
	           return $.grep(filters, function(filter) {
	               return (filter.value !== "" && filter.value != null) ||
	               (filter.operator === "isnull" || filter.operator === "isnotnull" ||
	                   filter.operator === "isempty" || filter.operator === "isnotempty");
	            });
	        },

	        _merge: function(expression) {
	            var that = this,
	                logic = expression.logic || "and",
	                filters = this._stripFilters(expression.filters),
	                filter,
	                result = that.dataSource.filter() || { filters:[], logic: "and" },
	                idx,
	                length;

	            removeFiltersForField(result, that.field);

	            for (idx = 0, length = filters.length; idx < length; idx++) {
	                filter = filters[idx];
	                filter.value = that._parse(filter.value);
	            }

	            if (filters.length) {
	                if (result.filters.length) {
	                    expression.filters = filters;

	                    if (result.logic !== "and") {
	                        result.filters = [ { logic: result.logic, filters: result.filters }];
	                        result.logic = "and";
	                    }

	                    if (filters.length > 1) {
	                        result.filters.push(expression);
	                    } else {
	                        result.filters.push(filters[0]);
	                    }
	                } else {
	                    result.filters = filters;
	                    result.logic = logic;
	                }
	            }

	            return result;
	        },

	        filter: function(expression) {
	            var filters = this._stripFilters(expression.filters);
	            if (filters.length && this.trigger("change", {
	                    filter: { logic: expression.logic, filters: filters },
	                    field: this.field
	                })) {

	                return;
	            }

	            expression = this._merge(expression);

	            if (expression.filters.length) {
	                this.dataSource.filter(expression);
	            }
	        },

	        clear: function() {
	            var that = this,
	                expression = that.dataSource.filter() || { filters:[] };

	            if (this.trigger("change", { filter: null, field: that.field })) {
	                return;
	            }

	            expression.filters = $.grep(expression.filters, function(filter) {
	                if (filter.filters) {
	                    filter.filters = clearFilter(filter.filters, that.field);

	                    return filter.filters.length;
	                }

	                return filter.field != that.field;
	            });

	            if (!expression.filters.length) {
	                expression = null;
	            }

	            that.dataSource.filter(expression);
	        },

	        _submit: function(e) {
	            e.preventDefault();
	            e.stopPropagation();

	            this.filter(this.filterModel.toJSON());

	            this._closeForm();
	        },

	        _reset: function() {
	            this.clear();

	            if (this.options.search){
	                this.container.find("label").parent().show();
	            }
	            this._closeForm();
	        },

	        _closeForm: function() {
	            if (this._isMobile) {
	                this.pane.navigate("", this.options.animations.right);
	            } else {
	                this.popup.close();
	            }
	        },

	        _click: function(e) {
	            e.preventDefault();
	            e.stopPropagation();

	            if (!this.popup && !this.pane) {
	                this._init();
	            }

	            if (this._isMobile) {
	                this.pane.navigate(this.view, this.options.animations.left);
	            } else {
	                this.popup.toggle();
	            }
	        },

	        _open: function() {
	            var popup;

	            $(".k-filter-menu").not(this.form).each(function() {
	                popup = $(this).data(POPUP);
	                if (popup) {
	                    popup.close();
	                }
	            });
	        },

	        _activate: function() {
	            this.form.find(":kendoFocusable:first").focus();
	        },

	        _keydown: function(e) {
	            if (e.keyCode == kendo.keys.ESC) {
	                this.popup.close();
	            }
	        },

	        events: [ INIT, "change" ],

	        options: {
	            name: "FilterMenu",
	            extra: true,
	            appendToElement: false,
	            type: "string",
	            operators: {
	                string: {
	                    eq: EQ,
	                    neq: NEQ,
	                    startswith: "Starts with",
	                    contains: "Contains",
	                    doesnotcontain: "Does not contain",
	                    endswith: "Ends with",
	                    isnull: "Is null",
	                    isnotnull: "Is not null",
	                    isempty: "Is empty",
	                    isnotempty: "Is not empty"
	                },
	                number: {
	                    eq: EQ,
	                    neq: NEQ,
	                    gte: "Is greater than or equal to",
	                    gt: "Is greater than",
	                    lte: "Is less than or equal to",
	                    lt: "Is less than",
	                    isnull: "Is null",
	                    isnotnull: "Is not null"
	                },
	                date: {
	                    eq: EQ,
	                    neq: NEQ,
	                    gte: "Is after or equal to",
	                    gt: "Is after",
	                    lte: "Is before or equal to",
	                    lt: "Is before",
	                    isnull: "Is null",
	                    isnotnull: "Is not null"
	                },
	                enums: {
	                    eq: EQ,
	                    neq: NEQ,
	                    isnull: "Is null",
	                    isnotnull: "Is not null"
	                }
	            },
	            messages: {
	                info: "Show items with value that:",
	                isTrue: "is true",
	                isFalse: "is false",
	                filter: "Filter",
	                clear: "Clear",
	                and: "And",
	                or: "Or",
	                selectValue: "-Select value-",
	                operator: "Operator",
	                value: "Value",
	                additionalValue: "Additional value",
	                additionalOperator: "Additional operator",
	                logic: "Filters logic",
	                cancel: "Cancel"
	            },
	            animations: {
	                left: "slide",
	                right: "slide:right"
	            }
	        }
	    });

	    var multiCheckNS = ".kendoFilterMultiCheck";

	    function filterValuesForField(expression, field) {

	        if (expression.filters) {
	            expression.filters = $.grep(expression.filters, function(filter) {
	                filterValuesForField(filter, field);
	                if (filter.filters) {
	                    return filter.filters.length;
	                } else {
	                    return filter.field == field && filter.operator == "eq";
	                }
	            });
	        }
	    }

	    function flatFilterValues(expression) {
	        if (expression.logic == "and" && expression.filters.length > 1) {
	            return [];
	        }
	        if (expression.filters) {
	            return $.map(expression.filters, function(filter) {
	                return flatFilterValues(filter);
	            });
	        } else if (expression.value !== null && expression.value !== undefined) {
	            return [expression.value];
	        } else {
	            return [];
	        }
	    }

	    function distinct(items, field) {
	        var getter = kendo.getter(field, true),
	            result = [],
	            index = 0,
	            seen = {};

	        while (index < items.length) {
	            var item = items[index++],
	                text = getter(item);

	            if(text !== undefined && text !== null && !seen.hasOwnProperty(text)){
	                result.push(item);
	                seen[text] = true;
	            }
	        }

	        return result;
	    }

	    function removeDuplicates (dataSelector, dataTextField) {

	        return function(e) {
	            var items = dataSelector(e);

	            return distinct(items, dataTextField);
	        };
	    }

	    var DataSource = kendo.data.DataSource;

	    var multiCkeckMobileTemplate =
	        '<div data-#=ns#role="view" data-#=ns#init-widgets="false" class="k-grid-filter-menu">' +
	            '<div data-#=ns#role="header" class="k-header">' +
	                '<button class="k-button k-i-cancel">#=messages.cancel#</button>' +
	                '#=title#' +
	                '<button type="submit" class="k-button k-submit">#=messages.filter#</button>' +
	            '</div>' +
	            '<form class="k-filter-menu k-mobile-list">' +
	                '#if(search){#' +
	                "<div class='k-textbox k-space-right'>" +
	                    "<input placeholder='#=messages.search#'/>" +
	                    "<span class='k-icon k-i-zoom' />" +
	                    "</div>" +
	                '#}#' +
	                '<ul class="k-multicheck-wrap"></ul>' +
	                '</li><li class="k-button-container">' +
	                "#if(messages.selectedItemsFormat){#<div class='k-filter-selected-items'></div>#}#" +
	                    '<button type="reset" class="k-button">#=messages.clear#</button>' +
	                '</li></ul>' +
	            '</form>' +
	        '</div>';

	    var FilterMultiCheck = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            options = this.options;
	            this.element = $(element);
	            var field = this.field = this.options.field || this.element.attr(kendo.attr("field"));
	            var checkSource = options.checkSource;
	            if (this._foreignKeyValues()) {
	                this.checkSource = DataSource.create(options.values);
	                this.checkSource.fetch();
	            } else if (options.forceUnique) {
	                checkSource = options.dataSource.options;
	                delete checkSource.pageSize;

	                this.checkSource = DataSource.create(checkSource);
	                this.checkSource.reader.data = removeDuplicates(this.checkSource.reader.data, this.field);
	            } else {
	                this.checkSource = DataSource.create(checkSource);
	            }

	            this.dataSource = options.dataSource;
	            this.model = this.dataSource.reader.model;

	            this._parse = function(value) {
	                 return value + "";
	            };

	            if (this.model && this.model.fields) {
	                field = this.model.fields[this.field];

	                if (field) {
	                    if (field.type == "number") {
	                        this._parse = parseFloat;
	                    } else if (field.parse) {
	                        this._parse = proxy(field.parse, field);
	                    }
	                    this.type = field.type || "string";
	                }
	            }
	            if (!options.appendToElement) {
	                this._createLink();
	            } else {
	                this._init();
	            }

	            this._refreshHandler = proxy(this.refresh, this);
	            this.dataSource.bind(CHANGE, this._refreshHandler);

	        },
	        _createLink: function() {
	            var element = this.element;
	            var link = element.addClass("k-with-icon k-filterable").find(".k-grid-filter");

	            if (!link[0]) {
	                link = element.prepend('<a class="k-grid-filter" href="#"><span class="k-icon k-i-filter"/></a>').find(".k-grid-filter");
	            }

	            this._link = link.attr("tabindex", -1).on("click" + NS, proxy(this._click, this));
	        },
	        _init: function() {
	            var that = this;
	            var forceUnique = this.options.forceUnique;

	            var options = this.options;
	            this.pane = options.pane;

	            if (this.pane) {
	                this._isMobile = true;
	            }

	            this._createForm();

	            if (this._foreignKeyValues()) {
	                this.refresh();
	            } else if (forceUnique && !this.checkSource.options.serverPaging && this.dataSource.data().length) {
	                this.checkSource.data(distinct(this.dataSource.data(),this.field));
	                this.refresh();
	            } else {
	                this._attachProgress();

	                this.checkSource.fetch(function() {
	                    that.refresh.call(that);
	                });
	            }

	            if (!this.options.forceUnique) {
	                this.checkChangeHandler = function() {
	                    that.container.empty();
	                    that.refresh();
	                };
	                this.checkSource.bind(CHANGE, this.checkChangeHandler);
	            }

	            this.form.on("keydown" + multiCheckNS, proxy(this._keydown, this))
	                        .on("submit" + multiCheckNS, proxy(this._filter, this))
	                        .on("reset" + multiCheckNS, proxy(this._reset, this));

	            this.trigger(INIT, { field: this.field, container: this.form });
	        },

	        _attachProgress: function() {
	            var that = this;

	            this._progressHandler = function() {
	                ui.progress(that.container, true);
	            };

	            this._progressHideHandler = function() {
	                ui.progress(that.container, false);
	            };

	            this.checkSource
	                .bind("progress", this._progressHandler)
	                .bind("change", this._progressHideHandler);
	        },

	        _input: function () {
	            var that = this;
	            that._clearTypingTimeout();
	            that._typingTimeout = setTimeout(function () { that.search(); }, 100);
	        },

	        _clearTypingTimeout: function() {
	            if (this._typingTimeout) {
	                clearTimeout(this._typingTimeout);
	                this._typingTimeout = null;
	            }
	        },

	        search: function () {
	            var ignoreCase = this.options.ignoreCase;
	            var searchString = this.searchTextBox[0].value;
	            var labels = this.container.find("label");

	            if (ignoreCase) {
	                searchString = searchString.toLowerCase();
	            }
	            var i = 0;
	            if(this.options.checkAll && labels.length)
	            {
	                labels[0].parentNode.style.display = searchString ? "none" : "";
	                i++;
	            }

	            while (i < labels.length) {
	                var label = labels[i];
	                var labelText = label.textContent || label.innerText;
	                if (ignoreCase) {
	                    labelText = labelText.toLowerCase();
	                }
	                label.parentNode.style.display = labelText.indexOf(searchString) >= 0 ? "" : "none";
	                i++;
	            }
	        },
	        _activate: function() {
	            this.form.find(":kendoFocusable:first").focus();
	        },
	        _createForm: function() {
	            var options = this.options;
	            var html = "";
	            if (!this._isMobile) {
	                if (options.search) {
	                    html += "<div class='k-textbox k-space-right'>" +
	                    "<input placeholder='" + options.messages.search + "'/>" +
	                    "<span class='k-icon k-i-zoom' />" +
	                    "</div>";
	                }
	                html += "<ul class='k-reset k-multicheck-wrap'></ul>";
	                if (options.messages.selectedItemsFormat) {
	                    html += "<div class='k-filter-selected-items'>" + kendo.format(options.messages.selectedItemsFormat, 0) + "</div>";
	                }
	                html +="<button type='submit' class='k-button k-primary'>" + options.messages.filter + "</button>";
	                html += "<button type='reset' class='k-button'>" + options.messages.clear + "</button>";

	                this.form = $('<form class="k-filter-menu"/>').html(html);
	                this.container = this.form.find(".k-multicheck-wrap");
	            }
	            if (this._isMobile) {
	                var that = this;
	                that.form = $("<div />")
	                    .html(kendo.template(multiCkeckMobileTemplate)({
	                        field: that.field,
	                        title: options.title || that.field,
	                        ns: kendo.ns,
	                        messages: options.messages,
	                        search: options.search
	                    }));

	                that.view = that.pane.append(that.form.html());
	                that.form = that.view.element.find("form");
	                var element = this.view.element;
	                this.container = element.find(".k-multicheck-wrap");

	                element
	                    .on("click", ".k-submit", function (e) {
	                        that.form.submit();
	                        e.preventDefault();
	                    })
	                    .on("click", ".k-i-cancel", function (e) {
	                        that._closeForm();
	                        e.preventDefault();
	                    });
	            } else {
	                if (!options.appendToElement) {
	                    this.popup = this.form.kendoPopup({
	                        anchor: this._link,
	                        activate: proxy(this._activate, this)
	                    }).data(POPUP);
	                } else {
	                    this.popup = this.element.closest(".k-popup").data(POPUP);
	                    this.element.append(this.form);
	                }
	            }

	            if (options.search) {
	                this.searchTextBox = this.form.find(".k-textbox > input");
	                this.searchTextBox.on("input", proxy(this._input, this));
	            }
	        },
	        createCheckAllItem: function () {
	            var options = this.options;
	            var template = kendo.template(options.itemTemplate({ field: "all", mobile: this._isMobile }));
	            var checkAllContainer = $(template({ all: options.messages.checkAll}));
	            this.container.prepend(checkAllContainer);

	            this.checkBoxAll = checkAllContainer.find(":checkbox").eq(0).addClass("k-check-all");
	            this.checkAllHandler = proxy(this.checkAll, this);
	            this.checkBoxAll.on(CHANGE+ multiCheckNS, this.checkAllHandler);
	        },
	        updateCheckAllState: function() {
	            if (this.options.messages.selectedItemsFormat) {
	                this.form.find(".k-filter-selected-items").text(kendo.format(this.options.messages.selectedItemsFormat, this.container.find(":checked:not(.k-check-all)").length));
	            }
	            if (this.checkBoxAll) {
	                var state = this.container.find(":checkbox:not(.k-check-all)").length == this.container.find(":checked:not(.k-check-all)").length;
	                this.checkBoxAll.prop("checked", state);
	            }
	        },
	        refresh: function(e) {
	            var forceUnique = this.options.forceUnique;
	            var dataSource = this.dataSource;
	            var filters = this.getFilterArray();

	            if (this._link) {
	                this._link.toggleClass("k-state-active", filters.length !== 0);
	            }

	            if (this.form) {
	                if (e && forceUnique && e.sender === dataSource && !dataSource.options.serverPaging &&
	                     (e.action == "itemchange" || e.action == "add" || e.action == "remove" || (dataSource.options.autoSync && e.action === "sync")) &&
	                         !this._foreignKeyValues()) {
	                    this.checkSource.data(distinct(this.dataSource.data(),this.field));
	                    this.container.empty();
	                }

	                if (this.container.is(":empty")) {
	                    this.createCheckBoxes();
	                }
	                this.checkValues(filters);
	                this.trigger(REFRESH);
	            }
	        },
	        getFilterArray: function() {
	            var expression = $.extend(true, {}, { filters: [], logic: "and" }, this.dataSource.filter());
	            filterValuesForField(expression, this.field);
	            var flatValues = flatFilterValues(expression);
	            return flatValues;
	        },
	        createCheckBoxes: function() {
	            var options = this.options;
	            var data;
	            var templateOptions = {
	                field: this.field,
	                format: options.format,
	                mobile: this._isMobile,
	                type: this.type
	            };

	            if (!this.options.forceUnique) {
	                data = this.checkSource.view();
	            } else if (this._foreignKeyValues()) {
	                data = this.checkSource.data();
	                templateOptions.valueField = "value";
	                templateOptions.field = "text";
	            } else {
	                data = this.checkSource.data();
	            }

	            var template = kendo.template(options.itemTemplate(templateOptions));
	            var itemsHtml = kendo.render(template, data);
	            if (options.checkAll) {
	                this.createCheckAllItem();
	            }
	            this.container.on(CHANGE + multiCheckNS, ":checkbox", proxy(this.updateCheckAllState, this));

	            this.container.append(itemsHtml);

	        },
	        checkAll: function() {
	            var state = this.checkBoxAll.is(":checked");
	            this.container.find(":checkbox").prop("checked", state);
	        },
	        checkValues: function(values) {
	            var that = this;

	            $($.grep(this.container.find(":checkbox").prop("checked", false), function(ele) {
	                var found = false;
	                if ($(ele).is(".k-check-all")) {
	                    return;
	                }
	                var checkBoxVal = that._parse($(ele).val());
	                for (var i = 0; i < values.length; i++) {
	                    if (that.type == "date") {
	                        found = values[i].getTime() == checkBoxVal.getTime();
	                    } else {
	                        found = values[i] == checkBoxVal;
	                    }
	                    if (found) {
	                        return found;
	                    }
	                }
	            })).prop("checked", true);
	            this.updateCheckAllState();
	        },

	        _filter: function(e) {
	            e.preventDefault();
	            e.stopPropagation();

	            var expression = { logic: "or" };

	            var that = this;
	            expression.filters = $.map(this.form.find(":checkbox:checked:not(.k-check-all)"), function (item) {
	                return { value: $(item).val(), operator: "eq", field: that.field };
	            });

	            if (expression.filters.length && this.trigger("change", { filter: expression, field: that.field })) {
	                return;
	            }

	            expression = this._merge(expression);
	            if (expression.filters.length) {
	                this.dataSource.filter(expression);
	            }

	            this._closeForm();
	        },

	        _stripFilters: function(filters) {
	           return $.grep(filters, function(filter) {
	                return filter.value != null;
	            });
	        },

	        _foreignKeyValues: function() {
	            var options = this.options;
	            return options.values && !options.checkSource;
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            if (that.form) {
	                kendo.unbind(that.form);
	                kendo.destroy(that.form);
	                that.form.unbind(multiCheckNS);
	                if (that.popup) {
	                    that.popup.destroy();
	                    that.popup = null;
	                }
	                that.form = null;
	                if (that.container) {
	                    that.container.unbind(multiCheckNS);
	                    that.container = null;
	                }

	                if (that.checkBoxAll) {
	                    that.checkBoxAll.unbind(multiCheckNS);
	                }
	            }

	            if (that.view) {
	                that.view.purge();
	                that.view = null;
	            }

	            if (that._link) {
	                that._link.unbind(NS);
	            }

	            if (that._refreshHandler) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);
	                that.dataSource = null;
	            }

	            if (that.checkChangeHandler) {
	                that.checkSource.unbind(CHANGE, that.checkChangeHandler);
	            }

	            if (that._progressHandler) {
	                that.checkSource.unbind("progress", that._progressHandler);
	            }

	            if (that._progressHideHandler) {
	                that.checkSource.unbind("change", that._progressHideHandler);
	            }

	            this._clearTypingTimeout();
	            this.searchTextBox = null;

	            that.element = that.checkSource = that.container = that.checkBoxAll = that._link = that._refreshHandler = that.checkAllHandler = null;
	        },
	        options: {
	            name: "FilterMultiCheck",
	            itemTemplate: function(options) {
	                var field = options.field;
	                var format = options.format;
	                var valueField = options.valueField;
	                var mobile = options.mobile;
	                var valueFormat = "";

	                if (valueField === undefined) {
	                    valueField = field;
	                }
	                if (options.type == "date") {
	                    valueFormat = ":yyyy-MM-ddTHH:mm:sszzz";
	                }

	                return "<li class='k-item'>" +
	                          "<label class='k-label'>" +
	                              "<input type='checkbox' class='" + (mobile? "k-check" : "") +"'  value='#:kendo.format('{0"+ valueFormat + "}'," + valueField + ")#'/>" +
	                                 "#:kendo.format('" + ( format ?  format  : "{0}" ) + "', "  + field + ")#" +
	                          "</label>" +
	                        "</li>";
	            },
	            checkAll: true,
	            search: false,
	            ignoreCase: true,
	            appendToElement: false,
	            messages: {
	                checkAll: "Select All",
	                clear: "Clear",
	                filter: "Filter",
	                search: "Search",
	                cancel: "Cancel",
	                selectedItemsFormat: "{0} items selected"
	            },
	            forceUnique: true,
	            animations: {
	                left: "slide",
	                right: "slide:right"
	            }
	        },
	        events: [ INIT, REFRESH, "change"]
	    });

	    $.extend(FilterMultiCheck.fn, {
	        _click: FilterMenu.fn._click,
	        _keydown: FilterMenu.fn._keydown,
	        _reset: FilterMenu.fn._reset,
	        _closeForm: FilterMenu.fn._closeForm,
	        clear: FilterMenu.fn.clear,

	        _merge: FilterMenu.fn._merge
	    });

	    ui.plugin(FilterMenu);
	    ui.plugin(FilterMultiCheck);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 59 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.grid.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(743);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 573:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! jquery */ 3);

/***/ },

/***/ 581:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data */ 6);

/***/ },

/***/ 601:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.filtermenu */ 58);

/***/ },

/***/ 691:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.resizable */ 132);

/***/ },

/***/ 692:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.window */ 65);

/***/ },

/***/ 724:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.ooxml */ 62);

/***/ },

/***/ 736:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.pdf */ 63);

/***/ },

/***/ 739:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.columnsorter */ 117);

/***/ },

/***/ 741:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.editable */ 57);

/***/ },

/***/ 743:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(581), __webpack_require__(739), __webpack_require__(741), __webpack_require__(692), __webpack_require__(601), __webpack_require__(745), __webpack_require__(746), __webpack_require__(747), __webpack_require__(748), __webpack_require__(744), __webpack_require__(749), __webpack_require__(691), __webpack_require__(750), __webpack_require__(751), __webpack_require__(724), __webpack_require__(752), __webpack_require__(753), __webpack_require__(736) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "grid",
	    name: "Grid",
	    category: "web",
	    description: "The Grid widget displays tabular data and offers rich support for interacting with data,including paging, sorting, grouping, and selection.",
	    depends: [ "data", "columnsorter" ],
	    features: [ {
	        id: "grid-editing",
	        name: "Editing",
	        description: "Support for record editing",
	        depends: [ "editable", "window" ]
	    }, {
	        id: "grid-filtering",
	        name: "Filtering",
	        description: "Support for record filtering",
	        depends: [ "filtermenu" ]
	    }, {
	        id: "grid-columnmenu",
	        name: "Column menu",
	        description: "Support for header column menu",
	        depends: [ "columnmenu" ]
	    }, {
	        id: "grid-grouping",
	        name: "Grouping",
	        description: "Support for grid grouping",
	        depends: [ "groupable" ]
	    }, {
	        id: "grid-filtercell",
	        name: "Row filter",
	        description: "Support for grid header filtering",
	        depends: [ "filtercell" ]
	    }, {
	        id: "grid-paging",
	        name: "Paging",
	        description: "Support for grid paging",
	        depends: [ "pager" ]
	    }, {
	        id: "grid-selection",
	        name: "Selection",
	        description: "Support for row selection",
	        depends: [ "selectable" ]
	    }, {
	        id: "grid-column-reorder",
	        name: "Column reordering",
	        description: "Support for column reordering",
	        depends: [ "reorderable" ]
	    }, {
	        id: "grid-column-resize",
	        name: "Column resizing",
	        description: "Support for column resizing",
	        depends: [ "resizable" ]
	    }, {
	        id: "grid-mobile",
	        name: "Grid adaptive rendering",
	        description: "Support for adaptive rendering",
	        depends: [ "mobile.actionsheet", "mobile.pane" ]
	    }, {
	        id: "grid-excel-export",
	        name: "Excel export",
	        description: "Export grid data as Excel spreadsheet",
	        depends: [ "excel" ]
	    }, {
	        id: "grid-pdf-export",
	        name: "PDF export",
	        description: "Export grid data as PDF",
	        depends: [ "pdf", "drawing", "progressbar" ]
	    } ]
	};

	/* jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        DataSource = kendo.data.DataSource,
	        tbodySupportsInnerHtml = kendo.support.tbodyInnerHtml,
	        activeElement = kendo._activeElement,
	        Widget = ui.Widget,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        keys = kendo.keys,
	        isPlainObject = $.isPlainObject,
	        extend = $.extend,
	        map = $.map,
	        grep = $.grep,
	        isArray = $.isArray,
	        inArray = $.inArray,
	        push = Array.prototype.push,
	        proxy = $.proxy,
	        isFunction = kendo.isFunction,
	        isEmptyObject = $.isEmptyObject,
	        math = Math,
	        PROGRESS = "progress",
	        ERROR = "error",
	        DATA_CELL = ":not(.k-group-cell):not(.k-hierarchy-cell):visible",
	        SELECTION_CELL_SELECTOR = "tbody>tr:not(.k-grouping-row):not(.k-detail-row):not(.k-group-footer) > td:not(.k-group-cell):not(.k-hierarchy-cell)",
	        NAVROW = "tr:not(.k-footer-template):visible",
	        NAVCELL = ":not(.k-group-cell):not(.k-hierarchy-cell):visible",
	        FIRSTNAVITEM = NAVROW + ":first>" + NAVCELL + ":first",
	        HEADERCELLS = "th.k-header:not(.k-group-cell):not(.k-hierarchy-cell)",
	        NS = ".kendoGrid",
	        EDIT = "edit",
	        SAVE = "save",
	        REMOVE = "remove",
	        DETAILINIT = "detailInit",
	        FILTERMENUINIT = "filterMenuInit",
	        COLUMNMENUINIT = "columnMenuInit",
	        CHANGE = "change",
	        COLUMNHIDE = "columnHide",
	        COLUMNSHOW = "columnShow",
	        SAVECHANGES = "saveChanges",
	        DATABOUND = "dataBound",
	        DETAILEXPAND = "detailExpand",
	        DETAILCOLLAPSE = "detailCollapse",
	        FOCUSED = "k-state-focused",
	        SELECTED = "k-state-selected",
	        NORECORDSCLASS = "k-grid-norecords",
	        COLUMNRESIZE = "columnResize",
	        COLUMNREORDER = "columnReorder",
	        COLUMNLOCK = "columnLock",
	        COLUMNUNLOCK = "columnUnlock",
	        NAVIGATE = "navigate",
	        CLICK = "click",
	        HEIGHT = "height",
	        TABINDEX = "tabIndex",
	        FUNCTION = "function",
	        STRING = "string",
	        DELETECONFIRM = "Are you sure you want to delete this record?",
	        NORECORDS = "No records available.",
	        CONFIRMDELETE = "Delete",
	        CANCELDELETE = "Cancel",
	        formatRegExp = /(\}|\#)/ig,
	        templateHashRegExp = /#/ig,
	        whitespaceRegExp = "[\\x20\\t\\r\\n\\f]",
	        nonDataCellsRegExp = new RegExp("(^|" + whitespaceRegExp + ")" + "(k-group-cell|k-hierarchy-cell)" + "(" + whitespaceRegExp + "|$)"),
	        filterRowRegExp = new RegExp("(^|" + whitespaceRegExp + ")" + "(k-filter-row)" + "(" + whitespaceRegExp + "|$)"),
	        COMMANDBUTTONTMPL = '<a role="button" class="k-button k-button-icontext #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span>#=text#</a>',
	        isRtl = false,
	        browser = kendo.support.browser,
	        isIE7 = browser.msie && browser.version == 7,
	        isIE8 = browser.msie && browser.version == 8;

	    var VirtualScrollable =  Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);
	            that._refreshHandler = proxy(that.refresh, that);
	            that.setDataSource(options.dataSource);
	            that.wrap();
	        },

	        setDataSource: function(dataSource) {
	            var that = this;
	            if (that.dataSource) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);
	            }
	            that.dataSource = dataSource;
	            that.dataSource.bind(CHANGE, that._refreshHandler);
	        },

	        options: {
	            name: "VirtualScrollable",
	            itemHeight: $.noop,
	            prefetch: true
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.dataSource.unbind(CHANGE, that._refreshHandler);
	            that.wrapper.add(that.verticalScrollbar).off(NS);

	            if (that.drag) {
	                that.drag.destroy();
	                that.drag = null;
	            }
	            that.wrapper = that.element = that.verticalScrollbar = null;
	            that._refreshHandler = null;
	        },

	        wrap: function() {
	            var that = this,
	                // workaround for IE issue where scroll is not raised if container is same width as the scrollbar
	                scrollbar = kendo.support.scrollbar() + 1,
	                element = that.element,
	                wrapper;

	            element.css( {
	                width: "auto",
	                overflow: "hidden"
	            }).css((isRtl ? "padding-left" : "padding-right"), scrollbar);
	            that.content = element.children().first();
	            wrapper = that.wrapper = that.content.wrap('<div class="k-virtual-scrollable-wrap"/>')
	                                .parent()
	                                .bind("DOMMouseScroll" + NS + " mousewheel" + NS, proxy(that._wheelScroll, that));

	            if (kendo.support.kineticScrollNeeded) {
	                that.drag = new kendo.UserEvents(that.wrapper, {
	                    global: true,
	                    start: function(e) {
	                        e.sender.capture();
	                    },
	                    move: function(e) {
	                        that.verticalScrollbar.scrollTop(that.verticalScrollbar.scrollTop() - e.y.delta);
	                        wrapper.scrollLeft(wrapper.scrollLeft() - e.x.delta);
	                        e.preventDefault();
	                    }
	                });
	            }

	            that.verticalScrollbar = $('<div class="k-scrollbar k-scrollbar-vertical" />')
	                                        .css({
	                                            width: scrollbar
	                                        }).appendTo(element)
	                                        .bind("scroll" + NS, proxy(that._scroll, that));
	        },

	        _wheelScroll: function (e) {
	            if (e.ctrlKey) {
	                return;
	            }

	            var scrollbar = this.verticalScrollbar,
	                scrollTop = scrollbar.scrollTop(),
	                delta = kendo.wheelDeltaY(e);

	            if (delta && !(delta > 0 && scrollTop === 0) && !(delta < 0 && scrollTop + scrollbar[0].clientHeight == scrollbar[0].scrollHeight)) {
	                e.preventDefault();
	                this.verticalScrollbar.scrollTop(scrollTop + (-delta));
	            }
	        },

	        _scroll: function(e) {
	            var that = this,
	                delayLoading = !that.options.prefetch,
	                scrollTop = e.currentTarget.scrollTop,
	                dataSource = that.dataSource,
	                rowHeight = that.itemHeight,
	                skip = dataSource.skip() || 0,
	                start = that._rangeStart || skip,
	                height = that.element.innerHeight(),
	                isScrollingUp = !!(that._scrollbarTop && that._scrollbarTop > scrollTop),
	                firstItemIndex = math.max(math.floor(scrollTop / rowHeight), 0),
	                lastItemIndex = math.max(firstItemIndex + math.floor(height / rowHeight), 0);

	            that._scrollTop = scrollTop - (start * rowHeight);
	            that._scrollbarTop = scrollTop;

	            that._scrolling = delayLoading;

	            if (!that._fetch(firstItemIndex, lastItemIndex, isScrollingUp)) {
	                that.wrapper[0].scrollTop = that._scrollTop;
	            }

	            if (delayLoading) {
	                if (that._scrollingTimeout) {
	                    clearTimeout(that._scrollingTimeout);
	                }

	                that._scrollingTimeout = setTimeout(function() {
	                    that._scrolling = false;
	                    that._page(that._rangeStart, that.dataSource.take());
	                }, 100);
	            }
	        },

	        itemIndex: function(rowIndex) {
	            var rangeStart = this._rangeStart || this.dataSource.skip() || 0;

	            return rangeStart + rowIndex;
	        },

	        position: function(index) {
	            var rangeStart = this._rangeStart || this.dataSource.skip() || 0;
	            var pageSize = this.dataSource.pageSize();
	            var result;

	            if (index > rangeStart) {
	                result = index - rangeStart + 1;
	            } else {
	                result = rangeStart - index - 1;
	            }

	            return result > pageSize ? pageSize : result;
	        },

	        scrollIntoView: function(row) {
	            var container = this.wrapper[0];
	            var containerHeight = container.clientHeight;
	            var containerScroll = this._scrollTop || container.scrollTop;
	            var elementOffset = row[0].offsetTop;
	            var elementHeight = row[0].offsetHeight;

	            if (containerScroll > elementOffset) {
	                this.verticalScrollbar[0].scrollTop -= containerHeight / 2;
	            } else if (elementOffset + elementHeight >=  containerScroll + containerHeight) {
	                this.verticalScrollbar[0].scrollTop += containerHeight / 2;
	            }
	        },

	        _fetch: function(firstItemIndex, lastItemIndex, scrollingUp) {
	            var that = this,
	                dataSource = that.dataSource,
	                itemHeight = that.itemHeight,
	                take = dataSource.take(),
	                rangeStart = that._rangeStart || dataSource.skip() || 0,
	                currentSkip = math.floor(firstItemIndex / take) * take,
	                fetching = false,
	                prefetchAt = 0.33;

	            if (firstItemIndex < rangeStart) {

	                fetching = true;
	                rangeStart = math.max(0, lastItemIndex - take);
	                that._scrollTop = (firstItemIndex - rangeStart) * itemHeight;
	                that._page(rangeStart, take);

	            } else if (lastItemIndex >= rangeStart + take && !scrollingUp) {

	                fetching = true;
	                rangeStart = firstItemIndex;
	                that._scrollTop = itemHeight;
	                that._page(rangeStart, take);

	            } else if (!that._fetching && that.options.prefetch) {

	                if (firstItemIndex < (currentSkip + take) - take * prefetchAt && firstItemIndex > take) {
	                    dataSource.prefetch(currentSkip - take, take, $.noop);
	                }
	                if (lastItemIndex > currentSkip + take * prefetchAt) {
	                    dataSource.prefetch(currentSkip + take, take, $.noop);
	                }

	            }
	            return fetching;
	        },

	        fetching: function() {
	            return this._fetching;
	        },

	        _page: function(skip, take) {
	            var that = this,
	                delayLoading = !that.options.prefetch,
	                dataSource = that.dataSource;

	            clearTimeout(that._timeout);
	            that._fetching = true;
	            that._rangeStart = skip;

	            if (dataSource.inRange(skip, take)) {
	                dataSource.range(skip, take);
	            } else {
	                if (!delayLoading) {
	                    kendo.ui.progress(that.wrapper.parent(), true);
	                }

	                that._timeout = setTimeout(function() {
	                    if (!that._scrolling) {
	                        if (delayLoading) {
	                            kendo.ui.progress(that.wrapper.parent(), true);
	                        }
	                        dataSource.range(skip, take);
	                    }
	                }, 100);
	            }
	        },

	        repaintScrollbar: function () {
	            var that = this,
	                html = "",
	                maxHeight = 250000,
	                dataSource = that.dataSource,
	                scrollbar = !kendo.support.kineticScrollNeeded ? kendo.support.scrollbar() : 0,
	                wrapperElement = that.wrapper[0],
	                totalHeight,
	                idx,
	                itemHeight;

	            itemHeight = that.itemHeight = that.options.itemHeight() || 0;

	            var addScrollBarHeight = (wrapperElement.scrollWidth > wrapperElement.offsetWidth) ? scrollbar : 0;

	            totalHeight = dataSource.total() * itemHeight + addScrollBarHeight;

	            for (idx = 0; idx < math.floor(totalHeight / maxHeight) ; idx++) {
	                html += '<div style="width:1px;height:' + maxHeight + 'px"></div>';
	            }

	            if (totalHeight % maxHeight) {
	                html += '<div style="width:1px;height:' + (totalHeight % maxHeight) + 'px"></div>';
	            }

	            that.verticalScrollbar.html(html);
	            wrapperElement.scrollTop = that._scrollTop;
	        },

	        refresh: function() {
	            var that = this,
	                dataSource = that.dataSource,
	                rangeStart = that._rangeStart;

	            kendo.ui.progress(that.wrapper.parent(), false);
	            clearTimeout(that._timeout);

	            that.repaintScrollbar();

	            if (that.drag) {
	                that.drag.cancel();
	            }

	            if (rangeStart && !that._fetching) { // we are rebound from outside local range should be reset
	                that._rangeStart = dataSource.skip();

	                if (dataSource.page() === 1) {// reset the scrollbar position if datasource is filtered
	                    that.verticalScrollbar[0].scrollTop = 0;
	                }
	            }
	            that._fetching = false;
	        }
	    });

	    function groupCells(count) {
	        return new Array(count + 1).join('<td class="k-group-cell">&nbsp;</td>');
	    }

	    function stringifyAttributes(attributes) {
	        var attr,
	            result = " ";

	        if (attributes) {
	            if (typeof attributes === STRING) {
	                return attributes;
	            }

	            for (attr in attributes) {
	                result += attr + '="' + attributes[attr] + '"';
	            }
	        }
	        return result;
	    }

	    var defaultCommands = {
	        create: {
	            text: "Add new record",
	            imageClass: "k-i-plus",
	            className: "k-grid-add",
	            iconClass: "k-icon"
	        },
	        cancel: {
	            text: "Cancel changes",
	            imageClass: "k-i-cancel",
	            className: "k-grid-cancel-changes",
	            iconClass: "k-icon"
	        },
	        save: {
	            text: "Save changes",
	            imageClass: "k-i-check",
	            className: "k-grid-save-changes",
	            iconClass: "k-icon"
	        },
	        destroy: {
	            text: "Delete",
	            imageClass: "k-i-close",
	            className: "k-grid-delete",
	            iconClass: "k-icon"
	        },
	        edit: {
	            text: "Edit",
	            imageClass: "k-i-edit",
	            className: "k-grid-edit",
	            iconClass: "k-icon"
	        },
	        update: {
	            text: "Update",
	            imageClass: "k-i-check",
	            className: "k-primary k-grid-update",
	            iconClass: "k-icon"
	        },
	        canceledit: {
	            text: "Cancel",
	            imageClass: "k-i-cancel",
	            className: "k-grid-cancel",
	            iconClass: "k-icon"
	        },
	        excel: {
	            text: "Export to Excel",
	            imageClass: "k-i-file-excel",
	            className: "k-grid-excel",
	            iconClass: "k-icon"
	        },
	        pdf: {
	            text: "Export to PDF",
	            imageClass: "k-i-file-pdf",
	            className: "k-grid-pdf",
	            iconClass: "k-icon"
	        }
	    };

	    function cursor(context, value) {
	        $('th, th .k-grid-filter, th .k-link', context)
	            .add(document.body)
	            .css('cursor', value);
	    }

	    function reorder(selector, source, dest, before, count) {
	        var sourceIndex = source;
	        source = $();
	        count = count || 1;
	        for (var idx = 0; idx < count; idx++) {
	            source = source.add(selector.eq(sourceIndex + idx));
	        }

	        if (typeof dest == "number") {
	            source[before ? "insertBefore" : "insertAfter"](selector.eq(dest));
	        } else {
	            source.appendTo(dest);
	        }
	    }

	    function elements(lockedContent, content, filter) {
	        return $(lockedContent).add(content).find(filter);
	    }

	    function attachCustomCommandEvent(context, container, commands) {
	        var idx,
	            length,
	            command,
	            commandName;

	        commands = !isArray(commands) ? [commands] : commands;

	        for (idx = 0, length = commands.length; idx < length; idx++) {
	            command = commands[idx];

	            if (isPlainObject(command) && command.click) {
	                commandName = command.name || command.text;
	                container.on(CLICK + NS, "a.k-grid-" + (commandName || "").replace(/\s/g, ""), { commandName: commandName }, proxy(command.click, context));
	            }
	        }
	    }

	    function normalizeColumns(columns, encoded, hide) {
	        return map(columns, function(column) {
	            column = typeof column === STRING ? { field: column } : column;

	            var hidden;

	            if (!isVisible(column) || hide) {
	                column.attributes = addHiddenStyle(column.attributes);
	                column.footerAttributes = addHiddenStyle(column.footerAttributes);
	                column.headerAttributes = addHiddenStyle(column.headerAttributes);
	                hidden = true;
	            }

	            if (column.columns) {
	                column.columns = normalizeColumns(column.columns, encoded, hidden);
	            }
	            var uid = kendo.guid();
	            column.headerAttributes = extend({id: uid}, column.headerAttributes);
	            return extend({ encoded: encoded, hidden: hidden }, column);
	        });
	    }

	    function columnParent(column, columns) {
	        var parents = [];
	        columnParents(column, columns, parents);
	        return parents[parents.length - 1];
	    }

	    function columnParents(column, columns, parents) {
	        parents = parents || [];

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (column === columns[idx]) {
	                return true;
	            } else if (columns[idx].columns) {
	                var inserted = parents.length;
	                parents.push(columns[idx]);
	                if (!columnParents(column, columns[idx].columns, parents)) {
	                    parents.splice(inserted, parents.length - inserted);
	                } else {
	                    return true;
	                }
	            }
	        }
	        return false;
	    }

	    function setColumnVisibility(column, visible) {
	        var method = visible ? removeHiddenStyle : addHiddenStyle;
	        column.hidden = !visible;
	        column.attributes = method(column.attributes);
	        column.footerAttributes = method(column.footerAttributes);
	        column.headerAttributes = method(column.headerAttributes);
	    }

	    function isCellVisible() {
	        return this.style.display !== "none";
	    }

	    function isVisible(column) {
	        return visibleColumns([column]).length > 0;
	    }

	    function visibleColumns(columns) {
	        return grep(columns, function(column) {
	            var result = !column.hidden;
	            if (result && column.columns) {
	                result = visibleColumns(column.columns).length > 0;
	            }
	            return result;
	        });
	    }

	    function toJQuery(elements) {
	        return $(elements).map(function() { return this.toArray(); });
	    }

	    function updateCellRowSpan(cell, columns, sourceLockedColumnsCount) {
	        var lockedColumnDepth = depth(lockedColumns(columns));
	        var nonLockedColumnDepth = depth(nonLockedColumns(columns));

	        var rowSpan = cell.rowSpan;
	        if (sourceLockedColumnsCount) {
	            if (lockedColumnDepth > nonLockedColumnDepth) {
	                cell.rowSpan = (rowSpan - (lockedColumnDepth - nonLockedColumnDepth)) || 1;
	            } else {
	                cell.rowSpan = rowSpan + (nonLockedColumnDepth - lockedColumnDepth);
	            }
	        } else {
	            if (lockedColumnDepth > nonLockedColumnDepth) {
	                cell.rowSpan = rowSpan + (lockedColumnDepth - nonLockedColumnDepth);
	            } else {
	                cell.rowSpan = (rowSpan - (nonLockedColumnDepth - lockedColumnDepth)) || 1;
	            }
	        }
	    }

	    function moveCellsBetweenContainers(sources, target, leafs, columns, container, destination, groups) {
	        var sourcesDepth = depth(sources);
	        var targetDepth = depth([target]);

	        if (sourcesDepth > targetDepth) {
	            var groupCells = new Array(groups + 1).join('<th class="k-group-cell k-header" scope="col">&nbsp;</th>');
	            var rows = destination.children(":not(.k-filter-row)");
	            $(new Array((sourcesDepth - targetDepth) + 1).join("<tr>" + groupCells + "</tr>")).insertAfter(rows.last());
	        }

	        addRowSpanValue(destination, sourcesDepth - targetDepth);

	        moveCells(leafs, columns, container, destination);
	    }

	    function updateCellIndex(thead, columns, offset) {
	        offset = offset || 0;

	        var position;
	        var cell;
	        var allColumns = columns;
	        columns = leafColumns(columns);

	        var cells = {};
	        var rows = thead.find(">tr:not(.k-filter-row)");

	        var filter = function() {
	            var el = $(this);
	            return !el.hasClass("k-group-cell") && !el.hasClass("k-hierarchy-cell");
	        };

	        for (var idx = 0, length = columns.length; idx < length; idx++) {
	            position = columnPosition(columns[idx], allColumns);

	            if (!cells[position.row]) {
	                cells[position.row] = rows.eq(position.row)
	                    .find(".k-header")
	                    .filter(filter);
	            }

	            cell = cells[position.row].eq(position.cell);
	            cell.attr(kendo.attr("index"), offset + idx);
	        }


	        return columns.length;
	    }

	    function depth(columns) {
	        var result = 1;
	        var max = 0;

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (columns[idx].columns) {
	                var temp = depth(columns[idx].columns);
	                if (temp > max) {
	                    max = temp;
	                }
	            }
	        }
	        return result + max;
	    }

	    function moveCells(leafs, columns, container, destination) {
	        var sourcePosition = columnVisiblePosition(leafs[0], columns);

	        var ths = container.find(">tr:not(.k-filter-row):eq(" + sourcePosition.row + ")>th.k-header");

	        var t = $();
	        var sourceIndex = sourcePosition.cell;
	        var idx;

	        for (idx = 0; idx < leafs.length; idx++) {
	            t = t.add(ths.eq(sourceIndex + idx));
	        }

	        destination.find(">tr:not(.k-filter-row)").eq(sourcePosition.row).append(t);

	        var children = [];
	        for (idx = 0; idx < leafs.length; idx++) {
	            if (leafs[idx].columns) {
	                children = children.concat(leafs[idx].columns);
	            }
	        }

	        if (children.length) {
	            moveCells(children, columns, container, destination);
	        }
	    }

	    function columnPosition(column, columns, row, cellCounts) {
	        var result;
	        var idx;

	        row = row || 0;
	        cellCounts = cellCounts || {};
	        cellCounts[row] = cellCounts[row] || 0;

	        for (idx = 0; idx < columns.length; idx++) {
	           if (columns[idx] == column) {
	                result = { cell: cellCounts[row], row: row };
	                break;
	           } else if (columns[idx].columns) {
	               result = columnPosition(column, columns[idx].columns, row + 1, cellCounts);
	               if (result) {
	                    break;
	               }
	           }

	           cellCounts[row]++;
	        }
	        return result;
	    }
	    function findParentColumnWithChildren(columns, index, source, rtl) {
	        var target;
	        var locked = source.locked;

	        do {
	            target = columns[index];
	            index += rtl ? 1 : -1;
	        } while(target && index > -1 && index < columns.length && target != source && !target.columns && target.locked == locked);

	        return target;
	    }

	    function findReorderTarget(columns, target, source, before) {
	        if (target.columns) {
	            target = target.columns;
	            return target[before ? 0 : target.length - 1];
	        } else {
	            var parent = columnParent(target, columns);
	            var parentColumns;

	            if (parent) {
	                parentColumns = parent.columns;
	            } else {
	                parentColumns = columns;
	            }

	            var index = inArray(target, parentColumns);
	            if (index === 0 && before) {
	                index++;
	            } else if (index == parentColumns.length - 1 && !before) {
	                index--;
	            } else if (index > 0 || (index === 0 && !before)) {
	                index += before ? -1 : 1;
	            }

	            var sourceIndex = inArray(source, parentColumns);
	            target = findParentColumnWithChildren(parentColumns, index, source, sourceIndex > index);

	            if (target && target != source && target.columns) {
	                return findReorderTarget(columns, target, source, before);
	            }
	        }
	        return null;
	    }


	    function columnVisiblePosition(column, columns, row, cellCounts) {
	        var result;
	        var idx;

	        row = row || 0;
	        cellCounts = cellCounts || {};
	        cellCounts[row] = cellCounts[row] || 0;

	        for (idx = 0; idx < columns.length; idx++) {
	           if (columns[idx] == column) {
	                result = { cell: cellCounts[row], row: row };
	                break;
	           } else if (columns[idx].columns) {
	               result = columnVisiblePosition(column, columns[idx].columns, row + 1, cellCounts);
	               if (result) {
	                    break;
	               }
	           }

	           if (!columns[idx].hidden) {
	               cellCounts[row]++;
	           }
	        }
	        return result;
	    }

	    function flatColumnsInDomOrder(columns) {
	        var result = flatColumns(lockedColumns(columns));
	        return result.concat(flatColumns(nonLockedColumns(columns)));
	    }

	    function flatColumns(columns) {
	        var result = [];
	        var children = [];
	        for (var idx = 0; idx < columns.length; idx++) {
	            result.push(columns[idx]);
	            if (columns[idx].columns) {
	                children = children.concat(columns[idx].columns);
	            }

	        }
	        if (children.length) {
	            result = result.concat(flatColumns(children));
	        }
	        return result;
	    }

	    function hiddenLeafColumnsCount(columns) {
	        var counter = 0;
	        var column;

	        for (var idx = 0; idx < columns.length; idx++) {
	            column = columns[idx];

	            if (column.columns) {
	                counter += hiddenLeafColumnsCount(column.columns);
	            } else if (column.hidden) {
	                counter++;
	            }
	        }
	        return counter;
	    }

	    function columnsWidth(cols) {
	        var colWidth, width = 0;

	        for (var idx = 0, length = cols.length; idx < length; idx++) {
	            colWidth = cols[idx].style.width;
	            if (colWidth && colWidth.indexOf("%") == -1) {
	                width += parseInt(colWidth, 10);
	            }
	        }

	        return width;
	    }

	    function removeRowSpanValue(container, count) {
	        var cells = container.find("tr:not(.k-filter-row) th:not(.k-group-cell,.k-hierarchy-cell)");

	        var rowSpan;
	        for (var idx = 0; idx < cells.length; idx++) {
	            rowSpan = cells[idx].rowSpan;
	            if (rowSpan > 1) {
	                cells[idx].rowSpan = (rowSpan - count) || 1;
	            }
	        }
	    }

	    function addRowSpanValue(container, count) {
	        var cells = container.find("tr:not(.k-filter-row) th:not(.k-group-cell,.k-hierarchy-cell)");

	        for (var idx = 0; idx < cells.length; idx++) {
	            cells[idx].rowSpan += count;
	        }
	    }

	    function removeEmptyRows(container) {
	        var rows = container.find("tr:not(.k-filter-row)");

	        var emptyRowsCount = rows.filter(function() {
	            return !$(this).children().length;
	        }).remove().length;

	        var cells = rows.find("th:not(.k-group-cell,.k-hierarchy-cell)");

	        for (var idx = 0; idx < cells.length; idx++) {
	            if (cells[idx].rowSpan > 1) {
	                cells[idx].rowSpan -= emptyRowsCount;
	            }
	        }
	        return rows.length - emptyRowsCount;
	    }

	    function mapColumnToCellRows(columns, cells, rows, rowIndex, offset) {
	        var idx, row, length, children = [];

	        for (idx = 0, length = columns.length; idx < length; idx++) {
	            row = rows[rowIndex] || [];
	            row.push(cells.eq(offset + idx));
	            rows[rowIndex] = row;

	            if (columns[idx].columns) {
	                children = children.concat(columns[idx].columns);
	            }
	        }

	        if (children.length) {
	            mapColumnToCellRows(children, cells, rows, rowIndex + 1, offset + columns.length);
	        }
	    }

	    function lockedColumns(columns) {
	        return grep(columns, function(column) {
	            return column.locked;
	        });
	    }

	    function nonLockedColumns(columns) {
	        return grep(columns, function(column) {
	            return !column.locked;
	        });
	    }

	    function visibleNonLockedColumns(columns) {
	        return grep(columns, function(column) {
	            return !column.locked && isVisible(column);
	        });
	    }

	    function visibleLockedColumns(columns) {
	        return grep(columns, function(column) {
	            return column.locked && isVisible(column);
	        });
	    }

	    function visibleLeafColumns(columns) {
	        var result = [];

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (columns[idx].hidden) {
	                continue;
	            }

	            if (columns[idx].columns) {
	                result = result.concat(visibleLeafColumns(columns[idx].columns));
	            } else {
	                result.push(columns[idx]);
	            }
	        }

	        return result;
	    }

	    function leafColumns(columns) {
	        var result = [];

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (!columns[idx].columns) {
	                result.push(columns[idx]);
	                continue;
	            }
	            result = result.concat(leafColumns(columns[idx].columns));
	        }

	        return result;
	    }

	    function leafDataCells(container) {
	        var rows = container.find(">tr:not(.k-filter-row)");

	        var filter = function() {
	            var el = $(this);
	            return !el.hasClass("k-group-cell") && !el.hasClass("k-hierarchy-cell");
	        };

	        var cells = $();
	        if (rows.length > 1) {
	            cells = rows.find("th")
	                .filter(filter)
	                .filter(function() { return this.rowSpan > 1; });
	        }

	        cells = cells.add(rows.last().find("th").filter(filter));

	        var indexAttr = kendo.attr("index");
	        cells.sort(function(a, b) {
	            a = $(a);
	            b = $(b);

	            var indexA = a.attr(indexAttr);
	            var indexB = b.attr(indexAttr);

	            if (indexA === undefined) {
	                indexA = $(a).index();
	            }
	            if (indexB === undefined) {
	                indexB = $(b).index();
	            }

	            indexA = parseInt(indexA, 10);
	            indexB = parseInt(indexB, 10);
	            return indexA > indexB ? 1 : (indexA < indexB ? -1 : 0);
	        });

	        return cells;
	    }

	    function parentColumnsCells(cell) {
	        var container = cell.closest("table");
	        var result = $().add(cell);

	        var row = cell.closest("tr");
	        var headerRows = container.find("tr:not(.k-filter-row)");
	        var level = headerRows.index(row);
	        if (level > 0) {
	            var parent = headerRows.eq(level - 1);
	            var parentCellsWithChildren = parent.find("th:not(.k-group-cell,.k-hierarchy-cell)").filter(function() {
	                return !$(this).attr("rowspan");
	            });

	            var offset = 0;
	            var index = row.find("th:not(.k-group-cell,.k-hierarchy-cell)").index(cell);

	            var prevCells = cell.prevAll(":not(.k-group-cell,.k-hierarchy-cell)").filter(function() {
	                return this.colSpan > 1;
	            });

	            for (var idx = 0; idx < prevCells.length; idx++) {
	                offset += prevCells[idx].colSpan || 1;
	            }

	            index += Math.max(offset - 1, 0);

	            offset = 0;
	            for (idx = 0; idx < parentCellsWithChildren.length; idx++) {
	                var parentCell = parentCellsWithChildren.eq(idx);
	                if (parentCell.attr("colSpan")) {
	                    offset += parentCell[0].colSpan;
	                } else {
	                    offset += 1;
	                }
	                if (index >= idx && index < offset) {
	                    result = parentColumnsCells(parentCell).add(result);
	                    break;
	                }
	            }
	        }
	        return result;
	    }

	    function childColumnsCells(cell) {
	        var container = cell.closest("thead");
	        var result = $().add(cell);

	        var row = cell.closest("tr");
	        var headerRows = container.find("tr:not(.k-filter-row)");
	        var level = headerRows.index(row) + cell[0].rowSpan;
	        var colSpanAttr = kendo.attr("colspan");

	        if (level <= headerRows.length - 1) {
	            var child = row.next();
	            var prevCells = cell.prevAll(":not(.k-group-cell,.k-hierarchy-cell)");

	            var idx;

	            prevCells = prevCells.filter(function() {
	                return !this.rowSpan || this.rowSpan === 1;
	            });

	            var offset = 0;

	            for (idx = 0; idx < prevCells.length; idx++) {
	                offset += parseInt(prevCells.eq(idx).attr(colSpanAttr), 10) || 1;
	            }

	            var cells = child.find("th:not(.k-group-cell,.k-hierarchy-cell)");
	            var colSpan = parseInt(cell.attr(colSpanAttr), 10) || 1;

	            idx = 0;

	            while (idx < colSpan) {
	                child = cells.eq(idx + offset);
	                result = result.add(childColumnsCells(child));
	                var value = parseInt(child.attr(colSpanAttr), 10);
	                if (value > 1) {
	                    colSpan -= value - 1;
	                }
	                idx++;
	            }
	        }

	        return result;
	    }

	    function appendContent(tbody, table, html, empty) {
	        var placeholder,
	            tmp = tbody;

	        // necessary for AngularJS to cleanup its guts.
	        if (empty) {
	            tbody.empty();
	        }

	        if (tbodySupportsInnerHtml) {
	            tbody[0].innerHTML = html;
	        } else {
	            placeholder = document.createElement("div");
	            placeholder.innerHTML = "<table><tbody>" + html + "</tbody></table>";
	            tbody = placeholder.firstChild.firstChild;
	            table[0].replaceChild(tbody, tmp[0]);
	            tbody = $(tbody);
	        }
	        return tbody;
	    }

	    function addHiddenStyle(attr) {
	        attr = attr || {};
	        var style = attr.style;

	        if(!style) {
	            style = "display:none";
	        } else {
	            style = style.replace(/((.*)?display)(.*)?:([^;]*)/i, "$1:none");
	            if(style === attr.style) {
	                style = style.replace(/(.*)?/i, "display:none;$1");
	            }
	        }

	        return extend({}, attr, { style: style });
	    }

	    function removeHiddenStyle(attr) {
	        attr = attr || {};
	        var style = attr.style;

	        if(style) {
	            attr.style = style.replace(/(display\s*:\s*none\s*;?)*/ig, "");
	        }

	        return attr;
	    }

	    function normalizeCols(table, visibleColumns, hasDetails, groups) {
	        var colgroup = table.find(">colgroup"),
	            width,
	            cols = map(visibleColumns, function(column) {
	                    width = column.width;
	                    if (width && parseInt(width, 10) !== 0) {
	                        return kendo.format('<col style="width:{0}"/>', typeof width === STRING? width : width + "px");
	                    }

	                    return "<col />";
	                });

	        if (hasDetails || colgroup.find(".k-hierarchy-col").length) {
	            cols.splice(0, 0, '<col class="k-hierarchy-col" />');
	        }

	        if (colgroup.length) {
	            colgroup.remove();
	        }

	        colgroup = $(new Array(groups + 1).join('<col class="k-group-col">') + cols.join(""));
	        if (!colgroup.is("colgroup")) {
	            colgroup = $("<colgroup/>").append(colgroup);
	        }

	        table.prepend(colgroup);

	        // fill gap after column hiding
	        if (browser.msie && browser.version == 8) {
	            table.css("display", "inline-table");
	            window.setTimeout(function(){table.css("display", "");}, 1);
	        }
	    }

	    function normalizeHeaderCells(container, columns) {
	        var lastIndex = 0;
	        var idx , len;
	        var th = container.find("th:not(.k-group-cell)");

	        for (idx = 0, len = columns.length; idx < len; idx ++) {
	            if (columns[idx].locked) {
	                th.eq(idx).insertBefore(th.eq(lastIndex));
	                th = container.find("th:not(.k-group-cell)");
	                lastIndex ++;
	            }
	        }
	    }

	    function convertToObject(array) {
	        var result = {},
	            item,
	            idx,
	            length;

	        for (idx = 0, length = array.length; idx < length; idx++) {
	            item = array[idx];
	            result[item.value] = item.text;
	        }

	        return result;
	    }

	    function formatGroupValue(value, format, columnValues, encoded) {
	        var isForeignKey = columnValues && columnValues.length && isPlainObject(columnValues[0]) && "value" in columnValues[0],
	            groupValue = isForeignKey ? convertToObject(columnValues)[value] : value;

	        groupValue = groupValue != null ? groupValue : "";

	        return format ? kendo.format(format, groupValue) : (encoded === false ? groupValue : kendo.htmlEncode(groupValue));
	    }

	    function setCellVisibility(cells, index, visible) {
	        var pad = 0,
	            state,
	            cell = cells[pad];

	        while (cell) {
	            state = visible ? true : cell.style.display !== "none";

	            if (state && !nonDataCellsRegExp.test(cell.className) && --index < 0) {
	                cell.style.display = visible ? "" : "none";
	                break;
	            }

	            cell = cells[++pad];
	        }
	    }

	    function hideColumnCells(rows, columnIndex) {
	        var idx = 0,
	            length = rows.length,
	            cell, row;

	        for ( ; idx < length; idx += 1) {
	            row = rows.eq(idx);
	            if (row.is(".k-grouping-row,.k-detail-row")) {
	                cell = row.children(":not(.k-group-cell):first,.k-detail-cell").last();
	                cell.attr("colspan", parseInt(cell.attr("colspan"), 10) - 1);
	            } else {
	                if (row.hasClass("k-grid-edit-row") && (cell = row.children(".k-edit-container")[0])) {
	                    cell = $(cell);
	                    cell.attr("colspan", parseInt(cell.attr("colspan"), 10) - 1);
	                    cell.find("col").eq(columnIndex).remove();
	                    row = cell.find("tr:first");
	                }

	                setCellVisibility(row[0].cells, columnIndex, false);
	            }
	        }
	    }

	    function groupRows(data) {
	        var result = [];
	        var item;

	        for (var idx = 0; idx < data.length; idx++) {
	            item = data[idx];
	            if (!("field" in item && "value" in item && "items" in item)) {
	                break;
	            }

	            result.push(item);

	            if (item.hasSubgroups) {
	                result = result.concat(groupRows(item.items));
	            }
	        }

	        return result;
	    }

	    function groupFooters(data) {
	        var result = [];
	        var item;

	        for (var idx = 0; idx < data.length; idx++) {
	            item = data[idx];
	            if (!("field" in item && "value" in item && "items" in item)) {
	                break;
	            }

	            if (item.hasSubgroups) {
	                result = result.concat(groupFooters(item.items));
	            }

	            result.push(item.aggregates);
	        }

	        return result;
	    }

	    function showColumnCells(rows, columnIndex) {
	        var idx = 0,
	            length = rows.length,
	            cell, row, columns;

	        for ( ; idx < length; idx += 1) {
	            row = rows.eq(idx);
	            if (row.is(".k-grouping-row,.k-detail-row")) {
	                cell = row.children(":not(.k-group-cell):first,.k-detail-cell").last();
	                cell.attr("colspan", parseInt(cell.attr("colspan"), 10) + 1);
	            } else {
	                if (row.hasClass("k-grid-edit-row") && (cell = row.children(".k-edit-container")[0])) {
	                    cell = $(cell);
	                    cell.attr("colspan", parseInt(cell.attr("colspan"), 10) + 1);
	                    normalizeCols(cell.find(">form>table"), visibleColumns(columns), false,  0);
	                    row = cell.find("tr:first");
	                }

	                setCellVisibility(row[0].cells, columnIndex, true);
	            }
	        }
	    }

	    function updateColspan(toAdd, toRemove, num) {
	        num = num || 1;

	        var item, idx, length;
	        for (idx = 0, length = toAdd.length; idx < length; idx++) {
	            item = toAdd.eq(idx).children().last();
	            item.attr("colspan", parseInt(item.attr("colspan"), 10) + num);

	            item = toRemove.eq(idx).children().last();
	            item.attr("colspan", parseInt(item.attr("colspan"), 10) - num);
	        }
	    }

	    function tableWidth(table) {
	        var idx, length, width = 0;
	        var cols = table.find(">colgroup>col");

	        for (idx = 0, length = cols.length; idx < length; idx += 1) {
	            width += parseInt(cols[idx].style.width, 10);
	        }

	        return width;
	    }

	    var Grid = kendo.ui.DataBoundWidget.extend({
	        init: function(element, options, events) {
	            var that = this;

	            options = isArray(options) ? { dataSource: options } : options;

	            Widget.fn.init.call(that, element, options);

	            if (events) {
	                that._events = events;
	            }

	            isRtl = kendo.support.isRtl(element);

	            that._element();

	            that._aria();

	            that._columns(that.options.columns);

	            that._dataSource();

	            that._tbody();

	            that._pageable();

	            that._thead();

	            that._groupable();

	            that._toolbar();

	            that._setContentHeight();

	            that._templates();

	            that._navigatable();

	            that._selectable();

	            that._clipboard();

	            that._details();

	            that._editable();

	            that._attachCustomCommandsEvent();

	            that._minScreenSupport();

	            if (that.options.autoBind) {
	                that.dataSource.fetch();
	            } else {
	                that._group = that._groups() > 0;
	                that._footer();
	            }

	            if (that.lockedContent) {
	                that.wrapper.addClass("k-grid-lockedcolumns");
	                that._resizeHandler = function()  { that.resize(); };
	                $(window).on("resize" + NS, that._resizeHandler);
	            }

	            kendo.notify(that);
	        },

	        events: [
	           CHANGE,
	           "dataBinding",
	           "cancel",
	           DATABOUND,
	           DETAILEXPAND,
	           DETAILCOLLAPSE,
	           DETAILINIT,
	           FILTERMENUINIT,
	           COLUMNMENUINIT,
	           EDIT,
	           SAVE,
	           REMOVE,
	           SAVECHANGES,
	           COLUMNRESIZE,
	           COLUMNREORDER,
	           COLUMNSHOW,
	           COLUMNHIDE,
	           COLUMNLOCK,
	           COLUMNUNLOCK,
	           NAVIGATE,
	           "page",
	           "sort",
	           "filter",
	           "group"
	        ],

	        setDataSource: function(dataSource) {
	            var that = this;
	            var scrollable = that.options.scrollable;

	            that.options.dataSource = dataSource;

	            that._dataSource();

	            that._pageable();

	            that._thead();

	            if (scrollable) {
	                if (scrollable.virtual) {
	                    that.content.find(">.k-virtual-scrollable-wrap").scrollLeft(0);
	                } else {
	                    that.content.scrollLeft(0);
	                }
	            }

	            if (that.options.groupable) {
	                that._groupable();
	            }

	            if (that.virtualScrollable) {
	                that.virtualScrollable.setDataSource(that.options.dataSource);
	            }

	            if (that.options.navigatable) {
	                that._navigatable();
	            }

	            if (that.options.selectable) {
	                that._selectable();
	            }

	            if (that.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        options: {
	            name: "Grid",
	            columns: [],
	            toolbar: null,
	            autoBind: true,
	            filterable: false,
	            scrollable: true,
	            sortable: false,
	            selectable: false,
	            allowCopy: false,
	            navigatable: false,
	            pageable: false,
	            editable: false,
	            groupable: false,
	            rowTemplate: "",
	            altRowTemplate: "",
	            noRecords: false,
	            dataSource: {},
	            height: null,
	            resizable: false,
	            reorderable: false,
	            columnMenu: false,
	            detailTemplate: null,
	            columnResizeHandleWidth: 3,
	            mobile: "",
	            messages: {
	                editable: {
	                    cancelDelete: CANCELDELETE,
	                    confirmation: DELETECONFIRM,
	                    confirmDelete: CONFIRMDELETE
	                },
	                commands: {
	                    create: defaultCommands.create.text,
	                    cancel: defaultCommands.cancel.text,
	                    save: defaultCommands.save.text,
	                    destroy: defaultCommands.destroy.text,
	                    edit: defaultCommands.edit.text,
	                    update: defaultCommands.update.text,
	                    canceledit: defaultCommands.canceledit.text,
	                    excel: defaultCommands.excel.text,
	                    pdf: defaultCommands.pdf.text
	                },
	                noRecords: NORECORDS
	            }
	        },

	        destroy: function() {
	            var that = this,
	                element;

	            that._angularItems("cleanup");
	            that._destroyColumnAttachments();

	            Widget.fn.destroy.call(that);

	            this._navigatableTables = null;

	            if (that._resizeHandler) {
	                $(window).off("resize" + NS, that._resizeHandler);
	            }

	            if (that.pager && that.pager.element) {
	                that.pager.destroy();
	            }

	            that.pager = null;

	            if (that.groupable && that.groupable.element) {
	                that.groupable.element.kendoGroupable("destroy");
	            }

	            that.groupable = null;

	            if (that.options.reorderable) {
	                that.wrapper.data("kendoReorderable").destroy();
	            }

	            if (that.selectable && that.selectable.element) {
	                that.selectable.destroy();

	                that.clearArea();

	                if (that.copyHandler) {
	                    that.wrapper.off("keydown", that.copyHandler);
	                    that.unbind(that.copyHandler);
	                }
	                if (that.updateClipBoardState) {
	                    that.unbind(that.updateClipBoardState);
	                    that.updateClipBoardState = null;
	                }
	                if (that.clearAreaHandler) {
	                    that.wrapper.off("keyup", that.clearAreaHandler);
	                }
	            }

	            that.selectable = null;

	            if (that.resizable) {
	                that.resizable.destroy();

	                if (that._resizeUserEvents) {
	                    if (that._resizeHandleDocumentClickHandler) {
	                        $(document).off("click", that._resizeHandleDocumentClickHandler);
	                    }
	                    that._resizeUserEvents.destroy();
	                    that._resizeUserEvents = null;
	                }
	                that.resizable = null;
	            }

	            if (that.virtualScrollable && that.virtualScrollable.element) {
	                that.virtualScrollable.destroy();
	            }

	            that.virtualScrollable = null;

	            that._destroyEditable();

	            if (that.dataSource) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler)
	                           .unbind(PROGRESS, that._progressHandler)
	                           .unbind(ERROR, that._errorHandler);

	                that._refreshHandler = that._progressHandler = that._errorHandler = null;
	            }

	            element = that.element
	                .add(that.wrapper)
	                .add(that.table)
	                .add(that.thead)
	                .add(that.wrapper.find(">.k-grid-toolbar"));

	            if (that.content) {
	                element = element
	                        .add(that.content)
	                        .add(that.content.find(">.k-virtual-scrollable-wrap"));
	            }

	            if (that.lockedHeader) {
	                that._removeLockedContainers();
	            }

	            if (that.pane) {
	                that.pane.destroy();
	            }

	            if (that.minScreenResizeHandler) {
	                $(window).off("resize", that.minScreenResizeHandler);
	            }

	            if (that._draggableInstance && that._draggableInstance.element) {
	                that._draggableInstance.destroy();
	            }

	            that._draggableInstance = null;

	            element.off(NS);

	            kendo.destroy(that.wrapper);

	            that.rowTemplate =
	            that.altRowTemplate =
	            that.lockedRowTemplate =
	            that.lockedAltRowTemplate =
	            that.detailTemplate =
	            that.footerTemplate =
	            that.groupFooterTemplate =
	            that.lockedGroupFooterTemplate =
	            that.noRecordsTemplate = null;

	            that.scrollables =
	            that.thead =
	            that.tbody =
	            that.element =
	            that.table =
	            that.content =
	            that.footer =
	            that.wrapper =
	            that.lockedTable =
	            that.lockedContent =
	            that.lockedHeader =
	            that.lockedFooter =
	            that._groupableClickHandler =
	            that._setContentWidthHandler = null;
	        },

	        getOptions: function() {
	            var options = this.options;
	            options.dataSource = null;

	            var result = extend(true, {}, this.options);
	            result.columns = kendo.deepExtend([], this.columns);

	            var dataSource = this.dataSource;

	            var initialData = dataSource.options.data && dataSource._data;
	            dataSource.options.data = null;

	            result.dataSource = $.extend(true, {}, dataSource.options);

	            dataSource.options.data = initialData;

	            result.dataSource.data = initialData;
	            result.dataSource.page = dataSource.page();
	            result.dataSource.filter = dataSource.filter();
	            result.dataSource.pageSize = dataSource.pageSize();
	            result.dataSource.sort = dataSource.sort();
	            result.dataSource.group = dataSource.group();
	            result.dataSource.aggregate = dataSource.aggregate();

	            if (result.dataSource.transport) {
	                result.dataSource.transport.dataSource = null;
	            }

	            if (result.pageable && result.pageable.pageSize) {
	                result.pageable.pageSize = dataSource.pageSize();
	            }

	            result.$angular = undefined;

	            return result;
	        },

	        setOptions: function(options) {
	            var currentOptions = this.getOptions();
	            kendo.deepExtend(currentOptions, options);
	            if (!options.dataSource) {
	                currentOptions.dataSource = this.dataSource;
	            }
	            var wrapper = this.wrapper;
	            var events = this._events;
	            var element = this.element;

	            this.destroy();
	            this.options = null;
	            if (this._isMobile) {
	                var mobileWrapper = wrapper.closest(kendo.roleSelector("pane")).parent();
	                mobileWrapper.after(wrapper);
	                mobileWrapper.remove();
	                wrapper.removeClass("k-grid-mobile");
	            }
	            if (wrapper[0] !== element[0]) {
	                wrapper.before(element);
	                wrapper.remove();
	            }
	            element.empty();

	            this.init(element, currentOptions, events);
	            this._setEvents(currentOptions);
	        },

	        items: function() {
	            if (this.lockedContent) {
	                return this._items(this.tbody).add(this._items(this.lockedTable.children("tbody")));
	            } else {
	                return this._items(this.tbody);
	            }
	        },

	        _items: function(container) {
	            return container.children().filter(function() {
	                var tr = $(this);
	                return !tr.hasClass("k-grouping-row") && !tr.hasClass("k-detail-row") && !tr.hasClass("k-group-footer");
	            });
	        },

	        dataItems: function() {
	            var dataItems = kendo.ui.DataBoundWidget.fn.dataItems.call(this);
	            if (this.lockedContent) {
	                var n = dataItems.length, tmp = new Array(2 * n);
	                for (var i = n; --i >= 0;) {
	                    tmp[i] = tmp[i + n] = dataItems[i];
	                }
	                dataItems = tmp;
	            }

	            return dataItems;
	        },

	        _destroyColumnAttachments: function() {
	            var that = this;

	            that.resizeHandle = null;

	            if (!that.thead) {
	                return;
	            }

	            this.angular("cleanup", function(){
	                return { elements: that.thead.get() };
	            });

	            that.thead.add(that.lockedHeader).find("th").each(function(){
	                var th = $(this),
	                    filterMenu = th.data("kendoFilterMenu"),
	                    sortable = th.data("kendoColumnSorter"),
	                    columnMenu = th.data("kendoColumnMenu");

	                if (filterMenu) {
	                    filterMenu.destroy();
	                }

	                if (sortable) {
	                    sortable.destroy();
	                }

	                if (columnMenu) {
	                    columnMenu.destroy();
	                }
	            });
	        },

	        _attachCustomCommandsEvent: function() {
	            var that = this,
	                columns = leafColumns(that.columns || []),
	                command,
	                idx,
	                length;

	            for (idx = 0, length = columns.length; idx < length; idx++) {
	                command = columns[idx].command;

	                if (command) {
	                    attachCustomCommandEvent(that, that.wrapper, command);
	                }
	            }
	        },

	        _aria: function() {
	            var id = this.element.attr("id") || "aria";

	            if (id) {
	                this._cellId = id + "_active_cell";
	            }
	        },

	        _element: function() {
	            var that = this,
	                table = that.element;

	            if (!table.is("table")) {
	                if (that.options.scrollable) {
	                    table = that.element.find("> .k-grid-content > table");
	                } else {
	                    table = that.element.children("table");
	                }

	                if (!table.length) {
	                    table = $("<table />").appendTo(that.element);
	                }
	            }

	            if (isIE7) {
	                table.attr("cellspacing", 0);
	            }

	            that.table = table.attr("role", that._hasDetails() ? "treegrid" : "grid");

	            that._wrapper();
	        },

	        _createResizeHandle: function(container, th) {
	            var that = this;
	            var indicatorWidth = that.options.columnResizeHandleWidth;
	            var scrollable = that.options.scrollable;
	            var resizeHandle = that.resizeHandle;
	            var groups = this._groups();
	            var left;

	            if (resizeHandle && that.lockedContent && resizeHandle.data("th")[0] !== th[0]) {
	                resizeHandle.off(NS).remove();
	                resizeHandle = null;
	            }

	            if (!resizeHandle) {
	                resizeHandle = that.resizeHandle = $('<div class="k-resize-handle"><div class="k-resize-handle-inner"></div></div>');
	                container.append(resizeHandle);
	            }

	            if (!isRtl) {
	                left = th[0].offsetWidth;

	                var cells = leafDataCells(th.closest("thead")).filter(":visible");
	                for (var idx = 0; idx < cells.length; idx++) {
	                    if (cells[idx] == th[0]) {
	                        break;
	                    }
	                    left += cells[idx].offsetWidth;
	                }

	                if (groups > 0) {
	                    left += outerWidth(container.find(".k-group-cell:first")) * groups;
	                }

	                if (that._hasDetails()) {
	                    left += outerWidth(container.find(".k-hierarchy-cell:first"));
	                }

	           } else {
	                left = th.position().left;
	                if (scrollable) {
	                    var headerWrap = th.closest(".k-grid-header-wrap, .k-grid-header-locked"),
	                        ieCorrection = browser.msie ? headerWrap.scrollLeft() : 0,
	                        webkitCorrection = browser.webkit ? (headerWrap[0].scrollWidth - headerWrap[0].offsetWidth - headerWrap.scrollLeft()) : 0,
	                        firefoxCorrection = browser.mozilla ? (headerWrap[0].scrollWidth - headerWrap[0].offsetWidth - (headerWrap[0].scrollWidth - headerWrap[0].offsetWidth - headerWrap.scrollLeft())) : 0;

	                    left -= webkitCorrection - firefoxCorrection + ieCorrection;
	                }
	            }

	            resizeHandle.css({
	                top: th.position().top,//scrollable ? 0 : heightAboveHeader(that.wrapper),
	                left: left - indicatorWidth,
	                height: outerHeight(th),
	                width: indicatorWidth * 3
	            })
	            .data("th", th)
	            .show();

	            resizeHandle.off("dblclick" + NS).on("dblclick" + NS, function () {
	                that._autoFitLeafColumn(th.data("index"));
	            });
	        },

	        _positionColumnResizeHandle: function() {
	            var that = this,
	                indicatorWidth = that.options.columnResizeHandleWidth,
	                lockedHead = that.lockedHeader ? that.lockedHeader.find("thead:first") : $();

	            that.thead.add(lockedHead).on("mousemove" + NS, "th", function(e) {
	                var th = $(this);

	                if (th.hasClass("k-group-cell") || th.hasClass("k-hierarchy-cell")) {
	                    return;
	                }

	                function getPageZoomStyle() {
	                    var docZoom = parseFloat($(document.documentElement).css("zoom"));
	                    if (isNaN(docZoom)) {
	                        docZoom = 1;
	                    }
	                    var bodyZoom = parseFloat($(document.body).css("zoom"));
	                    if (isNaN(bodyZoom)) {
	                        bodyZoom = 1;
	                    }
	                    return docZoom * bodyZoom;
	                }

	                var clientX = e.clientX / getPageZoomStyle(),
	                    winScrollLeft = $(window).scrollLeft(),
	                    position = th.offset().left + (!isRtl ? this.offsetWidth : 0);

	                if (clientX + winScrollLeft > position - indicatorWidth && clientX + winScrollLeft < position + indicatorWidth) {
	                    that._createResizeHandle(th.closest("div"), th);
	                } else if (that.resizeHandle) {
	                    that.resizeHandle.hide();
	                } else {
	                    cursor(that.wrapper, "");
	                }
	            });
	        },

	        _resizeHandleDocumentClick: function(e) {
	            if ($(e.target).closest(".k-column-active").length) {
	                return;
	            }

	            $(document).off(e);

	            this._hideResizeHandle();
	        },

	        _hideResizeHandle: function() {
	            if (this.resizeHandle) {
	                this.resizeHandle.data("th")
	                    .removeClass("k-column-active");

	                if (this.lockedContent && !this._isMobile) {
	                    this.resizeHandle.off(NS).remove();
	                    this.resizeHandle = null;
	                } else {
	                    this.resizeHandle.hide();
	                }
	            }
	        },

	        _positionColumnResizeHandleTouch: function() {
	            var that = this,
	                lockedHead = that.lockedHeader ? that.lockedHeader.find("thead:first") : $();

	            that._resizeUserEvents = new kendo.UserEvents(lockedHead.add(that.thead), {
	                filter: "th:not(.k-group-cell):not(.k-hierarchy-cell)",
	                threshold: 10,
	                hold: function(e) {
	                    var th = $(e.target);

	                    e.preventDefault();

	                    th.addClass("k-column-active");
	                    that._createResizeHandle(th.closest("div"), th);

	                    if (!that._resizeHandleDocumentClickHandler) {
	                        that._resizeHandleDocumentClickHandler = proxy(that._resizeHandleDocumentClick, that);
	                    }

	                    $(document).on("click", that._resizeHandleDocumentClickHandler);
	                }
	            });
	        },

	        _resizable: function() {
	            var that = this,
	                options = that.options,
	                container,
	                columnStart,
	                columnWidth,
	                columnMinWidth,
	                gridWidth,
	                isMobile = this._isMobile,
	                scrollbar = !kendo.support.mobileOS ? kendo.support.scrollbar() : 0,
	                isLocked,
	                col, th;

	            if (options.resizable) {
	                container = options.scrollable ? that.wrapper.find(".k-grid-header-wrap:first") : that.wrapper;

	                if (isMobile) {
	                    that._positionColumnResizeHandleTouch(container);
	                } else {
	                    that._positionColumnResizeHandle(container);
	                }

	                if (that.resizable) {
	                    that.resizable.destroy();
	                }

	                that.resizable = new ui.Resizable(container.add(that.lockedHeader), {
	                    handle: (!!options.scrollable ? "" : ">") + ".k-resize-handle",
	                    hint: function(handle) {
	                        return $('<div class="k-grid-resize-indicator" />').css({
	                            height: outerHeight(handle.data("th")) + that.tbody.attr("clientHeight")
	                        });
	                    },
	                    start: function(e) {
	                        th = $(e.currentTarget).data("th");

	                        if (isMobile) {
	                            that._hideResizeHandle();
	                        }

	                        var header = th.closest("table"),
	                            index = $.inArray(th[0], leafDataCells(th.closest("thead")).filter(":visible"));

	                        isLocked = header.parent().hasClass("k-grid-header-locked");

	                        var contentTable =  isLocked ? that.lockedTable : that.table,
	                            footer = that.footer || $();

	                        if (that.footer && that.lockedContent) {
	                            footer = isLocked ? that.footer.children(".k-grid-footer-locked") : that.footer.children(".k-grid-footer-wrap");
	                        }

	                        cursor(that.wrapper, 'col-resize');

	                        if (options.scrollable) {
	                            col = header.find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")")
	                                .add(contentTable.children("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")"))
	                                .add(footer.find("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")"));
	                        } else {
	                            col = contentTable.children("colgroup").find("col:not(.k-group-col):not(.k-hierarchy-col):eq(" + index + ")");
	                        }

	                        columnStart = e.x.location;
	                        columnWidth = outerWidth(th);
	                        columnMinWidth = that.columns[index].minResizableWidth || 10;
	                        gridWidth = isLocked ? outerWidth(contentTable.children("tbody")) : outerWidth(that.tbody); // IE returns 0 if grid is empty and scrolling is enabled

	                        // fix broken UI in Chrome38+
	                        if (browser.webkit) {
	                            that.wrapper.addClass("k-grid-column-resizing");
	                        }
	                    },
	                    resize: function(e) {
	                        var rtlMultiplier = isRtl ? -1 : 1,
	                            currentWidth = columnWidth + (e.x.location * rtlMultiplier) - (columnStart * rtlMultiplier);

	                        if (options.scrollable) {
	                            var footer;
	                            if (isLocked && that.lockedFooter) {
	                                footer = that.lockedFooter.children("table");
	                            } else if (that.footer) {
	                                footer = that.footer.find(">.k-grid-footer-wrap>table");
	                            }
	                            if (!footer || !footer[0]) {
	                                footer = $();
	                            }
	                            var header = th.closest("table");
	                            var contentTable = isLocked ? that.lockedTable : that.table;
	                            var constrain = false;
	                            var totalWidth = that.wrapper.width() - scrollbar;
	                            var width = currentWidth;

	                            if (isLocked && gridWidth - columnWidth + width > totalWidth) {
	                                width = columnWidth + (totalWidth - gridWidth - scrollbar * 2);
	                                if (width < 0) {
	                                    width = currentWidth;
	                                }
	                                constrain = true;
	                            }

	                            if (width > 10 && width >= columnMinWidth) {
	                                col.css('width', width);

	                                if (gridWidth) {
	                                    if (constrain) {
	                                        width = totalWidth - scrollbar * 2;
	                                    } else {
	                                        width = gridWidth + (e.x.location * rtlMultiplier) - (columnStart * rtlMultiplier);
	                                    }

	                                    contentTable
	                                        .add(header)
	                                        .add(footer)
	                                        .css('width', width);

	                                    if (!isLocked) {
	                                        that._footerWidth = width;
	                                    }
	                                }
	                            }
	                        } else if (currentWidth > 10 && currentWidth >= columnMinWidth) {
	                            col.css('width', currentWidth);
	                        }
	                    },
	                    resizeend: function() {
	                        var newWidth = outerWidth(th),
	                            column,
	                            header;

	                        cursor(that.wrapper, "");

	                        if (browser.webkit) {
	                            that.wrapper.removeClass("k-grid-column-resizing");
	                        }

	                        if (columnWidth != newWidth) {
	                            header = that.lockedHeader ? that.lockedHeader.find("thead:first tr:first").add(that.thead.find("tr:first")) : th.parent();

	                            var index = th.attr(kendo.attr("index"));
	                            if (!index) {
	                                index = header.find("th:not(.k-group-cell):not(.k-hierarchy-cell)").index(th);
	                            }
	                            column = leafColumns(that.columns)[index];

	                            column.width = newWidth;

	                            that.trigger(COLUMNRESIZE, {
	                                column: column,
	                                oldWidth: columnWidth,
	                                newWidth: newWidth
	                            });

	                            that._applyLockedContainersWidth();
	                            that._syncLockedContentHeight();
	                            that._syncLockedHeaderHeight();
	                        }

	                        that._hideResizeHandle();
	                        th = null;
	                    }
	                });

	            }
	        },

	        _draggable: function() {
	            var that = this;
	            if (that.options.reorderable) {

	                if (that._draggableInstance) {
	                    that._draggableInstance.destroy();
	                }

	                var header = that.wrapper.children(".k-grid-header");

	                that._draggableInstance = that.wrapper.kendoDraggable({
	                    group: kendo.guid(),
	                    autoScroll: true,
	                    filter: that.content ? ".k-grid-header:first " + HEADERCELLS : "table:first>.k-grid-header " + HEADERCELLS,
	                    dragstart: function() {
	                        header.children(".k-grid-header-wrap").unbind("scroll" + NS + "scrolling").bind("scroll" + NS + "scrolling", function (e) {
	                            if (that.virtualScrollable) {
	                                that.content.find(">.k-virtual-scrollable-wrap").scrollLeft(this.scrollLeft);
	                            } else {
	                                that.scrollables.not(e.currentTarget).scrollLeft(this.scrollLeft);
	                            }
	                        });
	                    },
	                    dragend: function() {
	                        header.children(".k-grid-header-wrap").unbind("scroll" + NS + "scrolling");
	                    },
	                    drag: function() {
	                        that._hideResizeHandle();
	                    },
	                    hint: function(target) {
	                        var title = target.attr(kendo.attr("title"));
	                        if (title) {
	                            title = kendo.htmlEncode(title);
	                        }
	                        return $('<div class="k-header k-drag-clue" />')
	                            .css({
	                                width: target.width(),
	                                paddingLeft: target.css("paddingLeft"),
	                                paddingRight: target.css("paddingRight"),
	                                lineHeight: target.height() + "px",
	                                paddingTop: target.css("paddingTop"),
	                                paddingBottom: target.css("paddingBottom")
	                            })
	                            .html(title || target.attr(kendo.attr("field")) || target.text())
	                            .prepend('<span class="k-icon k-drag-status k-i-cancel" />');
	                    }
	                }).data("kendoDraggable");
	            }
	        },

	        _reorderable: function() {
	            var that = this;
	            if (that.options.reorderable) {
	                if (that.wrapper.data("kendoReorderable")) {
	                    that.wrapper.data("kendoReorderable").destroy();
	                }

	                var targetParentContainerIndex = function(columns, sourceIndex, targetIndex) {
	                    var column = columns[sourceIndex];
	                    var target = columns[targetIndex];

	                    var parent = columnParent(column, that.columns);
	                    columns = parent ? parent.columns : that.columns;

	                    return inArray(target, columns);
	                };

	                that.wrapper.kendoReorderable({
	                    draggable: that._draggableInstance,
	                    dragOverContainers: function(sourceIndex, targetIndex) {
	                        var columns = flatColumnsInDomOrder(that.columns);
	                        return columns[sourceIndex].lockable !== false && targetParentContainerIndex(columns, sourceIndex, targetIndex) > -1;
	                    },
	                    inSameContainer: function(e) {
	                        return $(e.source).parent()[0] === $(e.target).parent()[0] && targetParentContainerIndex(flatColumnsInDomOrder(that.columns), e.sourceIndex, e.targetIndex) > -1;
	                    },
	                    change: function(e) {
	                        var columns = flatColumnsInDomOrder(that.columns);
	                        var column = columns[e.oldIndex];
	                        var newIndex = targetParentContainerIndex(columns, e.oldIndex, e.newIndex);

	                        that.trigger(COLUMNREORDER, {
	                            newIndex: newIndex,
	                            oldIndex: inArray(column, columns),
	                            column: column
	                        });

	                        that.reorderColumn(newIndex, column, e.position === "before");
	                    }
	                });
	            }
	        },

	        _reorderHeader: function(sources, target, before) {
	            var that = this;
	            var sourcePosition = columnPosition(sources[0], that.columns);
	            var destPosition = columnPosition(target, that.columns);

	            var leafs = [];
	            for (var idx = 0; idx < sources.length; idx++) {
	                if (sources[idx].columns) {
	                    leafs = leafs.concat(sources[idx].columns);
	                }
	            }

	            var ths = elements(that.lockedHeader, that.thead, "tr:eq(" + sourcePosition.row + ")>th.k-header:not(.k-group-cell,.k-hierarchy-cell)");

	            var sourceLockedColumns = lockedColumns(sources).length;
	            var targetLockedColumns = lockedColumns([target]).length;

	            if (leafs.length) {
	                if (sourceLockedColumns > 0 && targetLockedColumns === 0) {
	                    moveCellsBetweenContainers(sources, target, leafs, that.columns, that.lockedHeader.find("thead"), that.thead, this._groups());
	                } else if (sourceLockedColumns === 0 && targetLockedColumns > 0) {
	                    moveCellsBetweenContainers(sources, target, leafs, that.columns, that.thead, that.lockedHeader.find("thead"), this._groups());
	                }

	                if (target.columns || sourcePosition.cell - destPosition.cell > 1 || destPosition.cell - sourcePosition.cell > 1) {
	                    target = findReorderTarget(that.columns, target, sources[0], before);
	                    if (target) {
	                        that._reorderHeader(leafs, target, before);
	                    }
	                }
	            } else if (sourceLockedColumns !== targetLockedColumns) { // move between containers
	                updateCellRowSpan(ths[sourcePosition.cell], that.columns, sourceLockedColumns);
	            }

	            reorder(ths, sourcePosition.cell, destPosition.cell, before, sources.length);
	        },

	        _reorderContent: function(sources, destination, before) {
	            var that = this;
	            var lockedRows = $();
	            var source = sources[0];
	            var visibleSources = visibleColumns(sources);
	            var sourceIndex = inArray(source, leafColumns(that.columns));
	            var destIndex = inArray(destination, leafColumns(that.columns));

	            var colSourceIndex = inArray(source, visibleLeafColumns(that.columns));
	            var colDest = inArray(destination, visibleLeafColumns(that.columns));
	            var lockedCount = lockedColumns(that.columns).length;
	            var isLocked = !!destination.locked;
	            var footer = that.footer || that.wrapper.find(".k-grid-footer");

	            var headerCol, footerCol;
	            headerCol = footerCol = colDest;

	            if (destination.hidden) {
	                if (isLocked) {
	                    colDest = that.lockedTable.find("colgroup");
	                    headerCol = that.lockedHeader.find("colgroup");
	                    footerCol = $(that.lockedFooter).find(">table>colgroup");
	                } else {
	                    colDest = that.tbody.prev();
	                    headerCol = that.thead.prev();
	                    footerCol = footer.find(".k-grid-footer-wrap").find(">table>colgroup");
	                }
	            }

	            if (that._hasFilterRow()) {
	                reorder(that.wrapper.find(".k-filter-row th:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex, before, sources.length);
	            }

	            reorder(elements(that.lockedHeader, that.thead.prev(), "col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, headerCol, before, visibleSources.length);

	            if (that.options.scrollable) {
	                reorder(elements(that.lockedTable, that.tbody.prev(), "col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, colDest, before, visibleSources.length);
	            }

	            if (footer && footer.length) {
	                reorder(elements(that.lockedFooter, footer.find(".k-grid-footer-wrap"), ">table>colgroup>col:not(.k-group-col,.k-hierarchy-col)"), colSourceIndex, footerCol, before, visibleSources.length);
	                reorder(footer.find(".k-footer-template>td:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex, before, sources.length);
	            }

	            var rows = that.tbody.children(":not(.k-grouping-row,.k-detail-row)");
	            if (that.lockedTable) {
	                if (lockedCount > destIndex) {
	                    if (lockedCount <= sourceIndex) {
	                        updateColspan(
	                            that.lockedTable.find(">tbody>tr.k-grouping-row"),
	                            that.table.find(">tbody>tr.k-grouping-row"),
	                            sources.length
	                        );
	                    }
	                } else if (lockedCount > sourceIndex) {
	                    updateColspan(
	                        that.table.find(">tbody>tr.k-grouping-row"),
	                        that.lockedTable.find(">tbody>tr.k-grouping-row"),
	                        sources.length
	                    );
	                }

	                lockedRows = that.lockedTable.find(">tbody>tr:not(.k-grouping-row,.k-detail-row)");
	            }

	            for (var idx = 0, length = rows.length; idx < length; idx += 1) {
	                reorder(elements(lockedRows[idx], rows[idx], ">td:not(.k-group-cell,.k-hierarchy-cell)"), sourceIndex, destIndex, before, sources.length);
	            }
	        },

	        _autoFitLeafColumn: function (leafIndex) {
	            this.autoFitColumn(leafColumns(this.columns)[leafIndex]);
	        },

	        autoFitColumn: function (column) {
	            var that = this,
	                options = that.options,
	                columns = that.columns,
	                index,
	                th,
	                headerTable,
	                isLocked,
	                visibleLocked = that.lockedHeader ? leafDataCells(that.lockedHeader.find(">table>thead")).filter(isCellVisible).length : 0,
	                col,
	                contentDiv, scrollLeft,
	                notGroupOrHierarchyCol = "col:not(.k-group-col):not(.k-hierarchy-col)",
	                notGroupOrHierarchyVisibleCell = "td:visible:not(.k-group-cell):not(.k-hierarchy-cell)";

	            //  retrieve the column object, depending on the method argument
	            if (typeof column == "number") {
	                column = columns[column];
	            } else if (isPlainObject(column)) {
	                column = grep(flatColumns(columns), function (item) {
	                    return item === column;
	                })[0];
	            } else {
	                column = grep(flatColumns(columns), function (item) {
	                    return item.field === column;
	                })[0];
	            }

	            if (!column || !isVisible(column)) {
	                return;
	            }

	            index = inArray(column, leafColumns(columns));
	            isLocked = column.locked;

	            if (isLocked) {
	                headerTable = that.lockedHeader.children("table");
	            } else {
	                headerTable = that.thead.parent();
	            }

	            th = headerTable.find("[data-index='" + index + "']");

	            var contentTable = isLocked ? that.lockedTable : that.table,
	                footer = that.footer || $();

	            if (that.footer && that.lockedContent) {
	                footer = isLocked ? that.footer.children(".k-grid-footer-locked") : that.footer.children(".k-grid-footer-wrap");
	            }

	            var footerTable = footer.find("table").first();

	            if (that.lockedHeader && !isLocked) {
	                index -= visibleLocked;
	            }

	            // adjust column index, depending on previous hidden columns
	            for (var j = 0; j < columns.length; j++) {
	                if (columns[j] === column) {
	                    break;
	                } else {
	                    if (columns[j].hidden) {
	                        index--;
	                    }
	                }
	            }

	            // get col elements
	            if (options.scrollable) {
	                col = headerTable.find(notGroupOrHierarchyCol).eq(index)
	                    .add(contentTable.children("colgroup").find(notGroupOrHierarchyCol).eq(index))
	                    .add(footerTable.find("colgroup").find(notGroupOrHierarchyCol).eq(index));

	                if (!isLocked) {
	                    contentDiv = contentTable.parent();
	                    scrollLeft = contentDiv.scrollLeft();
	                }
	            } else {
	                col = contentTable.children("colgroup").find(notGroupOrHierarchyCol).eq(index);
	            }

	            var tables = headerTable.add(contentTable).add(footerTable);

	            var oldColumnWidth = outerWidth(th);

	            // reset the table and autofitted column widths
	            // if scrolling is disabled, we need some additional repainting of the table
	            col.width("");
	            tables.css("table-layout", "fixed");
	            col.width("auto");
	            tables.addClass("k-autofitting");
	            tables.css("table-layout", "");

	            // +1 is required by IE, regardless of the border widths, otherwise unexpected wrapping may occur with hyphenated text
	            var newColumnWidth = Math.ceil(Math.max(
	                outerWidth(th),
	                outerWidth(contentTable.find("tr:not(.k-grouping-row)").eq(0).children(notGroupOrHierarchyVisibleCell).eq(index)),
	                outerWidth(footerTable.find("tr").eq(0).children(notGroupOrHierarchyVisibleCell).eq(index))
	            )) + 1;

	            col.width(newColumnWidth);
	            column.width = newColumnWidth;

	            // if all visible columns have widths, the table needs a pixel width as well
	            if (options.scrollable) {
	                var cols = headerTable.find("col"),
	                    colWidth,
	                    totalWidth = 0;
	                for (var idx = 0, length = cols.length; idx < length; idx += 1) {
	                    colWidth = cols[idx].style.width;
	                    if (colWidth && colWidth.indexOf("%") == -1) {
	                        totalWidth += parseInt(colWidth, 10);
	                    } else {
	                        totalWidth = 0;
	                        break;
	                    }
	                }

	                if (totalWidth) {
	                    tables.each(function () {
	                        this.style.width = totalWidth + "px";
	                    });
	                }
	            }

	            if (browser.msie && browser.version == 8) {
	                tables.css("display", "inline-table");
	                setTimeout(function () {
	                    tables.css("display", "table");
	                }, 1);
	            }

	            tables.removeClass("k-autofitting");

	            if (scrollLeft) {
	                contentDiv.scrollLeft(scrollLeft);
	            }

	            that.trigger(COLUMNRESIZE, {
	                column: column,
	                oldWidth: oldColumnWidth,
	                newWidth: newColumnWidth
	            });

	            that._applyLockedContainersWidth();
	            that._syncLockedContentHeight();
	            that._syncLockedHeaderHeight();
	        },

	        reorderColumn: function(destIndex, column, before) {
	            var that = this,
	                parent = columnParent(column, that.columns),
	                columns = parent ? parent.columns : that.columns,
	                sourceIndex = inArray(column, columns),
	                destColumn = columns[destIndex],
	                lockChanged,
	                isLocked = !!destColumn.locked,
	                lockedCount = lockedColumns(that.columns).length;

	            if (sourceIndex === destIndex) {
	                return;
	            }

	            if (!column.locked && isLocked && nonLockedColumns(that.columns).length == 1) {
	                return;
	            }

	            if (column.locked && !isLocked && lockedCount == 1) {
	                return;
	            }

	            that._hideResizeHandle();

	            if (before === undefined) {
	                before = destIndex < sourceIndex;
	            }

	            var sourceColumns = [column];

	            that._reorderHeader(sourceColumns, destColumn, before);

	            if (that.lockedHeader) {
	                removeEmptyRows(that.thead);
	                removeEmptyRows(that.lockedHeader);
	            }

	            if (destColumn.columns) {
	                destColumn = leafColumns(destColumn.columns);
	                destColumn = destColumn[before ? 0 : destColumn.length - 1];
	            }

	            if (column.columns) {
	                sourceColumns = leafColumns(column.columns);
	            }

	            that._reorderContent(sourceColumns, destColumn, before);

	            lockChanged = !!column.locked;
	            lockChanged = lockChanged != isLocked;
	            column.locked = isLocked;

	            columns.splice(before ? destIndex : destIndex + 1, 0, column);
	            columns.splice(sourceIndex < destIndex ? sourceIndex : sourceIndex + 1, 1);

	            that._templates();

	            that._updateColumnCellIndex();

	            that._updateTablesWidth();
	            that._applyLockedContainersWidth();
	            that._syncLockedHeaderHeight();
	            that._syncLockedContentHeight();
	            that._updateFirstColumnClass();

	            if(!lockChanged) {
	                return;
	            }

	            if (isLocked) {
	                that.trigger(COLUMNLOCK, {
	                    column: column
	                });
	            } else {
	                that.trigger(COLUMNUNLOCK, {
	                    column: column
	                });
	            }
	        },

	        _updateColumnCellIndex: function() {
	            var header;
	            var offset = 0;

	            if (this.lockedHeader) {
	                header = this.lockedHeader.find("thead");
	                offset = updateCellIndex(header, lockedColumns(this.columns));
	            }
	            updateCellIndex(this.thead, nonLockedColumns(this.columns), offset);
	        },

	        lockColumn: function(column) {
	            var columns = this.columns;

	            if (typeof column == "number") {
	                column = columns[column];
	            } else {
	                column = grep(columns, function(item) {
	                    return item.field === column;
	                })[0];
	            }

	            if (!column || column.locked || column.hidden) {
	                return;
	            }

	            var index = lockedColumns(columns).length - 1;
	            this.reorderColumn(index, column, false);
	        },

	        unlockColumn: function(column) {
	            var columns = this.columns;

	            if (typeof column == "number") {
	                column = columns[column];
	            } else {
	                column = grep(columns, function(item) {
	                    return item.field === column;
	                })[0];
	            }

	            if (!column || !column.locked || column.hidden) {
	                return;
	            }

	            var index = lockedColumns(columns).length;
	            this.reorderColumn(index, column, true);
	        },

	        cellIndex: function(td) {
	            var lockedColumnOffset = 0;

	            if (this.lockedTable && !$.contains(this.lockedTable[0], td[0])) {
	                lockedColumnOffset = leafColumns(lockedColumns(this.columns)).length;
	            }

	            return $(td).parent().children('td:not(.k-group-cell,.k-hierarchy-cell)').index(td) + lockedColumnOffset;
	        },

	        _modelForContainer: function(container) {
	            container = $(container);

	            if (!container.is("tr") && this._editMode() !== "popup") {
	                container = container.closest("tr");
	            }

	            var id = container.attr(kendo.attr("uid"));

	            return this.dataSource.getByUid(id);
	        },

	        _editable: function() {
	            var that = this,
	                selectable = that.selectable && that.selectable.options.multiple,
	                editable = that.options.editable,
	                handler = function () {
	                    var target = activeElement(),
	                        cell = that._editContainer;

	                    if (cell && !$.contains(cell[0], target) && cell[0] !== target && !$(target).closest(".k-animation-container").length) {
	                        if (that.editable.end()) {
	                            that.closeCell();
	                        }
	                    }
	                };

	            if (editable) {
	                this.wrapper.addClass("k-editable");

	                var mode = that._editMode();
	                if (mode === "incell") {
	                    if (editable.update !== false) {
	                        that.wrapper.on(CLICK + NS, "tr:not(.k-grouping-row) > td", function(e) {
	                            var td = $(this),
	                                isLockedCell = that.lockedTable && td.closest("table")[0] === that.lockedTable[0];

	                            if (td.hasClass("k-hierarchy-cell") ||
	                                td.hasClass("k-detail-cell") ||
	                                td.hasClass("k-group-cell") ||
	                                td.hasClass("k-edit-cell") ||
	                                td.has("a.k-grid-delete").length ||
	                                td.has("button.k-grid-delete").length ||
	                                (td.closest("tbody")[0] !== that.tbody[0] && !isLockedCell) ||
	                                $(e.target).is(":input")) {
	                                return;
	                            }

	                            if (that.editable) {
	                                if (that.editable.end()) {
	                                    if (selectable) {
	                                        $(activeElement()).blur();
	                                    }
	                                    that.closeCell();
	                                    that.editCell(td);
	                                }
	                            } else {
	                                that.editCell(td);
	                            }

	                        })
	                        .on("focusin" + NS, function() {
	                            // fix focus issue in IE
	                            if (!$.contains(this,  activeElement())) {
	                                clearTimeout(that.timer);
	                                that.timer = null;
	                            }
	                        })
	                        .on("focusout" + NS, function() {
	                            that.timer = setTimeout(handler, 1);
	                        });
	                    }
	                } else {
	                    if (editable.update !== false) {
	                        that.wrapper.on(CLICK + NS, "tbody>tr:not(.k-detail-row,.k-grouping-row):visible a.k-grid-edit", function(e) {
	                            e.preventDefault();
	                            that.editRow($(this).closest("tr"));
	                        });
	                    }
	                }

	                if (editable.destroy !== false) {
	                    that.wrapper.on(CLICK + NS, "tbody>tr:not(.k-detail-row,.k-grouping-row):visible .k-grid-delete", function(e) {
	                        e.preventDefault();
	                        e.stopPropagation();
	                        that.removeRow($(this).closest("tr"));
	                    });
	                } else {
	                    //Required for the MVC server wrapper delete button
	                    that.wrapper.on(CLICK + NS, "tbody>tr:not(.k-detail-row,.k-grouping-row):visible button.k-grid-delete", function(e) {
	                        e.stopPropagation();

	                        if (!that._confirmation()) {
	                            e.preventDefault();
	                        }
	                    });
	                }
	            }
	        },

	        editCell: function(cell) {
	            cell = $(cell);

	            var that = this,
	            column = leafColumns(that.columns)[that.cellIndex(cell)],
	                model = that._modelForContainer(cell);

	            that.closeCell();

	            if (model && isColumnEditable(column, model) && !column.command) {

	                that._attachModelChange(model);

	                that._editContainer = cell;

	                that.editable = cell.addClass("k-edit-cell")
	                    .kendoEditable({
	                        fields: { field: column.field, format: column.format, editor: column.editor, values: column.values },
	                        model: model,
	                        target: that,
	                        change: function(e) {
	                            if (that.trigger(SAVE, { values: e.values, container: cell, model: model } )) {
	                                e.preventDefault();
	                            }
	                        }
	                    }).data("kendoEditable");

	                var tr = cell.parent().addClass("k-grid-edit-row");

	                if (that.lockedContent) {
	                    adjustRowHeight(tr[0], that._relatedRow(tr).addClass("k-grid-edit-row")[0]);
	                }

	                that.trigger(EDIT, { container: cell, model: model });
	            }
	        },

	        _adjustLockedHorizontalScrollBar: function() {
	            var table = this.table,
	                content = table.parent();

	            var scrollbar = table[0].offsetWidth > content[0].clientWidth ? kendo.support.scrollbar() : 0;
	            this.lockedContent.height(content.height() - scrollbar);
	        },

	        _syncLockedContentHeight: function() {
	            if (this.lockedTable) {
	                if (!this.touchScroller) {
	                    this._adjustLockedHorizontalScrollBar();
	                }
	                this._adjustRowsHeight(this.table, this.lockedTable);
	            }
	        },

	        _syncLockedHeaderHeight: function() {
	            if (this.lockedHeader) {
	                var lockedTable = this.lockedHeader.children("table");
	                var table = this.thead.parent();

	                this._adjustRowsHeight(lockedTable, table);

	                syncTableHeight(lockedTable, table);
	            }
	        },

	        _syncLockedFooterHeight: function() {
	            if (this.lockedFooter && this.footer && this.footer.length) {
	                this._adjustRowsHeight(this.lockedFooter.children("table"), this.footer.find(".k-grid-footer-wrap > table"));
	            }
	        },

	        _destroyEditable: function() {
	            var that = this;

	            var destroy = function() {
	                if (that.editable) {

	                    var container = that.editView ? that.editView.element : that._editContainer;

	                    if (container) {
	                        container.off(CLICK + NS, "a.k-grid-cancel", that._editCancelClickHandler);
	                        container.off(CLICK + NS, "a.k-grid-update", that._editUpdateClickHandler);
	                    }

	                    that._detachModelChange();
	                    that.editable.destroy();
	                    that.editable = null;
	                    that._editContainer = null;
	                    that._destroyEditView();
	                }
	            };

	            if (that.editable) {
	                if (that._editMode() === "popup" && !that._isMobile) {
	                    that._editContainer.data("kendoWindow").bind("deactivate", destroy).close();
	                } else {
	                    destroy();
	                }
	            }
	            if (that._actionSheet) {
	                that._actionSheet.destroy();
	                that._actionSheet = null;
	            }
	        },

	        _destroyEditView: function() {
	            if (this.editView) {
	                this.editView.purge();
	                this.editView = null;
	                this.pane.navigate("");
	            }
	        },

	        _attachModelChange: function(model) {
	            var that = this;

	            that._modelChangeHandler = function(e) {
	                that._modelChange({ field: e.field, model: this });
	            };

	            model.bind("change", that._modelChangeHandler);
	        },

	        _detachModelChange: function() {
	            var that = this,
	                container = that._editContainer,
	                model = that._modelForContainer(container);

	            if (model) {
	                model.unbind(CHANGE, that._modelChangeHandler);
	            }
	        },

	        closeCell: function(isCancel) {
	            var that = this,
	                cell = that._editContainer,
	                id,
	                column,
	                tr,
	                model;

	            if (!cell) {
	                return;
	            }

	            id = cell.closest("tr").attr(kendo.attr("uid"));
	            model = that.dataSource.getByUid(id);

	            if (isCancel && that.trigger("cancel", { container: cell, model: model })) {
	                return;
	            }

	            cell.removeClass("k-edit-cell");
	            column = leafColumns(that.columns)[that.cellIndex(cell)];

	            tr = cell.parent().removeClass("k-grid-edit-row");

	            that._destroyEditable(); // editable should be destroyed before content of the container is changed

	            that._displayCell(cell, column, model);

	            if (cell.hasClass("k-dirty-cell")) {
	                $('<span class="k-dirty"/>').prependTo(cell);
	            }

	            that.trigger("itemChange", { item: tr, data: model, ns: ui });

	            if (that.lockedContent) {
	                adjustRowHeight(tr.css("height", "")[0], that._relatedRow(tr).css("height", "")[0]);
	            }
	        },

	        _displayCell: function(cell, column, dataItem) {
	            var that = this,
	                state = { storage: {}, count: 0 },
	                settings = extend({}, kendo.Template, that.options.templateSettings),
	                tmpl = kendo.template(that._cellTmpl(column, state), settings);

	            if (state.count > 0) {
	                tmpl = proxy(tmpl, state.storage);
	            }

	            cell.empty().html(tmpl(dataItem));

	            that.angular("compile", function(){
	                return {
	                    elements: cell,
	                    data: [ { dataItem: dataItem } ]
	                };
	            });
	        },

	        removeRow: function(row) {
	            if (!this._confirmation(row)) {
	                return;
	            }

	            this._removeRow(row);
	        },

	        _removeRow: function(row) {
	            var that = this,
	                model,
	                mode = that._editMode();

	            if (mode !== "incell") {
	                that.cancelRow();
	            }

	            row = $(row);

	            if (that.lockedContent) {
	                row = row.add(that._relatedRow(row));
	            }

	            row = row.hide();
	            model = that._modelForContainer(row);

	            if (model && !that.trigger(REMOVE, { row: row, model: model })) {

	                that.dataSource.remove(model);

	                if (mode === "inline" || mode === "popup") {
	                    that.dataSource.sync();
	                }
	            } else if (mode === "incell") {
	                that._destroyEditable();
	            }
	        },

	        _editMode: function() {
	            var mode = "incell",
	                editable = this.options.editable;

	            if (editable !== true) {
	                if (typeof editable == "string") {
	                    mode = editable;
	                } else {
	                    mode = editable.mode || mode;
	                }
	            }

	            return mode;
	        },

	        editRow: function(row) {
	            var model;
	            var that = this;

	            if (row instanceof kendo.data.ObservableObject) {
	                model = row;
	            } else {
	                row = $(row);
	                model = that._modelForContainer(row);
	            }

	            var mode = that._editMode();
	            var container;

	            that.cancelRow();

	            if (model) {
	                row = that.tbody.children("[" + kendo.attr("uid") + "=" + model.uid + "]");
	                that._attachModelChange(model);

	                if (mode === "popup") {
	                    that._createPopupEditor(model);
	                } else if (mode === "inline") {
	                    that._createInlineEditor(row, model);
	                } else if (mode === "incell") {
	                    $(row).children(DATA_CELL).each(function() {
	                        var cell = $(this);
	                        var column = leafColumns(that.columns)[that.cellIndex(cell)];

	                        model = that._modelForContainer(cell);

	                        if (model && (!model.editable || model.editable(column.field)) && column.field) {
	                            that.editCell(cell);
	                            return false;
	                        }
	                    });
	                }

	                container = that.editView ? that.editView.element : that._editContainer;

	                if (container) {
	                    if (!this._editCancelClickHandler) {
	                        this._editCancelClickHandler = proxy(this._editCancelClick, this);
	                    }

	                    container.on(CLICK + NS, "a.k-grid-cancel", this._editCancelClickHandler);

	                    if (!this._editUpdateClickHandler) {
	                        this._editUpdateClickHandler = proxy(this._editUpdateClick, this);
	                    }

	                    container.on(CLICK + NS, "a.k-grid-update", this._editUpdateClickHandler);
	                }
	            }
	        },

	        _editUpdateClick: function(e) {
	            e.preventDefault();
	            e.stopPropagation();

	            this.saveRow();
	        },

	        _editCancelClick: function(e) {
	            var that = this;
	            var navigatable = that.options.navigatable;
	            var model = that.editable.options.model;
	            var container = that.editView ? that.editView.element : that._editContainer;

	            e.preventDefault();
	            e.stopPropagation();

	            if (that.trigger("cancel", { container: container, model: model })) {
	                return;
	            }

	            var currentIndex = that.items().index($(that.current()).parent());

	            that.cancelRow();

	            if (navigatable) {
	                that._setCurrent(that.items().eq(currentIndex).children().filter(NAVCELL).first());
	                focusTable(that.table, true);
	            }
	        },

	        _createPopupEditor: function(model) {
	            var that = this,
	                html = '<div ' + kendo.attr("uid") + '="' + model.uid + '" class="k-popup-edit-form' + (that._isMobile ? ' k-mobile-list' : '') + '"><div class="k-edit-form-container">',
	                column,
	                command,
	                fields = [],
	                idx,
	                length,
	                tmpl,
	                updateText,
	                cancelText,
	                tempCommand,
	                columns = leafColumns(that.columns),
	                attr,
	                editable = that.options.editable,
	                template = editable.template,
	                options = isPlainObject(editable) ? editable.window : {},
	                settings = extend({}, kendo.Template, that.options.templateSettings);

	            options = options || {};

	            if (template) {
	                if (typeof template === STRING) {
	                    template = window.unescape(template);
	                }

	                html += (kendo.template(template, settings))(model);

	                for (idx = 0, length = columns.length; idx < length; idx++) {
	                    column = columns[idx];
	                    if (column.command) {
	                        tempCommand = getCommand(column.command, "edit");
	                        if (tempCommand) {
	                            command = tempCommand;
	                        }
	                    }
	                }
	            } else {
	                for (idx = 0, length = columns.length; idx < length; idx++) {
	                    column = columns[idx];

	                    if (!column.command) {
	                        html += '<div class="k-edit-label"><label for="' + column.field + '">' + (column.title || column.field || "") + '</label></div>';

	                        if (isColumnEditable(column, model)) {
	                            fields.push({ field: column.field, format: column.format, editor: column.editor, values: column.values });
	                            html += '<div ' + kendo.attr("container-for") + '="' + column.field + '" class="k-edit-field"></div>';
	                        } else {
	                            var state = { storage: {}, count: 0 };

	                            tmpl = kendo.template(that._cellTmpl(column, state), settings);

	                            if (state.count > 0) {
	                                tmpl = proxy(tmpl, state.storage);
	                            }

	                            html += '<div class="k-edit-field">' + tmpl(model) + '</div>';
	                        }
	                    } else if (column.command) {
	                        tempCommand = getCommand(column.command, "edit");
	                        if (tempCommand) {
	                            command = tempCommand;
	                        }
	                    }
	                }
	            }

	            if (command) {
	                if (isPlainObject(command)) {
	                   if (command.text && isPlainObject(command.text)) {
	                       updateText = command.text.update;
	                       cancelText = command.text.cancel;
	                   }

	                   if (command.attr) {
	                       attr = command.attr;
	                   }
	                }
	            }

	            var container;

	            if (!that._isMobile) {
	                html += '<div class="k-edit-buttons k-state-default">';
	                html += that._createButton({ name: "update", text: updateText, attr: attr }) + that._createButton({ name: "canceledit", text: cancelText, attr: attr });
	                html += '</div></div></div>';

	                container = that._editContainer = $(html)
	                .appendTo(that.wrapper).eq(0)
	                .kendoWindow(extend({
	                    modal: true,
	                    resizable: false,
	                    draggable: true,
	                    title: "Edit",
	                    visible: false,
	                    close: function(e) {
	                        if (e.userTriggered) {
	                            //The bellow line is required due to: draggable window in IE, change event will be triggered while the window is closing
	                            e.sender.element.focus();
	                            if (that.trigger("cancel", { container: container, model: model })) {
	                                e.preventDefault();
	                                return;
	                            }

	                            var currentIndex = that.items().index($(that.current()).parent());

	                            that.cancelRow();
	                            if (that.options.navigatable) {
	                                that._setCurrent(that.items().eq(currentIndex).children().filter(NAVCELL).first());
	                                focusTable(that.table, true);
	                            }
	                        }
	                    }
	                }, options));
	            } else {
	                html += "</div></div>";
	                that.editView = that.pane.append(
	                    '<div data-' + kendo.ns + 'role="view" data-' + kendo.ns + 'use-native-scrolling="true" data-' + kendo.ns + 'init-widgets="false" class="k-grid-edit-form">'+
	                        '<div data-' + kendo.ns + 'role="header" class="k-header">'+
	                            that._createButton({ name: "update", text: updateText, attr: attr }) +
	                            (options.title || "Edit") +
	                            that._createButton({ name: "canceledit", text: cancelText, attr: attr }) +
	                        '</div>'+
	                        html +
	                    '</div>');
	                container = that._editContainer = that.editView.element.find(".k-popup-edit-form");
	            }

	            that.editable = that._editContainer
	                .kendoEditable({
	                    fields: fields,
	                    model: model,
	                    clearContainer: false,
	                    target: that
	                }).data("kendoEditable");

	            // TODO: Replace this code with labels and for="ID"
	            if (that._isMobile) {
	                container.find("input[type=checkbox],input[type=radio]")
	                         .parent(".k-edit-field")
	                         .addClass("k-check")
	                         .prev(".k-edit-label")
	                         .addClass("k-check")
	                         .click(function() {
	                             $(this).next().children("input").click();
	                         });
	            }

	            that._openPopUpEditor();

	            that.trigger(EDIT, { container: container, model: model });
	        },

	        _openPopUpEditor: function() {
	            if (!this._isMobile) {
	                this._editContainer.data("kendoWindow").center().open();
	            } else {
	                this.pane.navigate(this.editView, this._editAnimation);
	            }
	        },

	        _createInlineEditor: function(row, model) {
	            var that = this,
	                column,
	                cell,
	                command,
	                fields = [];


	            if (that.lockedContent) {
	                row = row.add(that._relatedRow(row));
	            }

	            row.children(":not(.k-group-cell,.k-hierarchy-cell)").each(function() {
	                cell = $(this);
	                column = leafColumns(that.columns)[that.cellIndex(cell)];

	                if (!column.command && isColumnEditable(column, model)) {
	                    fields.push({ field: column.field, format: column.format, editor: column.editor, values: column.values });
	                    cell.attr(kendo.attr("container-for"), column.field);
	                    cell.empty();
	                } else if (column.command) {
	                    command = getCommand(column.command, "edit");
	                    if (command) {
	                        cell.empty();

	                        var updateText,
	                            cancelText,
	                            attr;

	                        if (isPlainObject(command)) {
	                            if (command.text && isPlainObject(command.text)) {
	                                updateText = command.text.update;
	                                cancelText = command.text.cancel;
	                            }

	                            if (command.attr) {
	                                attr = command.attr;
	                            }
	                        }

	                        $(that._createButton({ name: "update", text: updateText, attr: attr }) +
	                            that._createButton({ name: "canceledit", text: cancelText, attr: attr})).appendTo(cell);
	                    }
	                }
	            });

	            that._editContainer = row;

	            that.editable = new kendo.ui.Editable(row
	                .addClass("k-grid-edit-row"),{
	                    target: that,
	                    fields: fields,
	                    model: model,
	                    clearContainer: false
	                });

	            if (row.length > 1) {

	                adjustRowHeight(row[0], row[1]);
	                that._applyLockedContainersWidth();
	            }

	            that.trigger(EDIT, { container: row, model: model });
	        },

	        cancelRow: function(notify) {
	            var that = this,
	                container = that._editContainer,
	                model;

	            if (container) {

	                model = that._modelForContainer(container);

	                if (notify && that.trigger("cancel", { container: container, model: model })) {
	                    return;
	                }

	                that._destroyEditable();

	                that.dataSource.cancelChanges(model);

	                if (that._editMode() !== "popup") {
	                    that._displayRow(container);
	                } else {
	                    that._displayRow(that.tbody.find("[" + kendo.attr("uid") + "=" + model.uid + "]"));
	                }
	            }
	        },

	        saveRow: function() {
	            var container = this._editContainer;
	            var model = this._modelForContainer(container);
	            var deferred = $.Deferred();

	            if (!container || !this.editable) {
	                return deferred.resolve().promise();
	            }

	            if (!this.editable.end() || this.trigger(SAVE, { container: container, model: model })) {
	                return deferred.reject().promise();
	            }

	            return this.dataSource.sync();
	        },

	        _displayRow: function(row) {
	            var that = this,
	                model = that._modelForContainer(row),
	                related,
	                newRow,
	                nextRow,
	                isSelected = row.hasClass("k-state-selected"),
	                isAlt = row.hasClass("k-alt");

	            if (model) {

	                if (that.lockedContent) {
	                    related = $((isAlt ? that.lockedAltRowTemplate : that.lockedRowTemplate)(model));
	                    that._relatedRow(row.last()).replaceWith(related);
	                }

	                that.angular("cleanup", function(){ return { elements: row.get() }; });

	                newRow = $((isAlt ? that.altRowTemplate : that.rowTemplate)(model));
	                row.replaceWith(newRow);

	                that.trigger("itemChange", { item: newRow, data: model, ns: ui });

	                if (related && related.length) {
	                    that.trigger("itemChange", { item: related, data: model, ns: ui });
	                }

	                var angularElements = newRow;
	                var angularData = [{ dataItem: model }];

	                if (related && related.length) {
	                    angularElements = newRow.add(related);
	                    angularData.push({ dataItem: model });
	                }

	                that.angular("compile", function(){
	                    return {
	                        elements: angularElements.get(),
	                        data: angularData
	                    };
	                });


	                if (isSelected && that.options.selectable) {
	                    that.select(newRow.add(related));
	                }

	                if (related) {
	                    adjustRowHeight(newRow[0], related[0]);
	                }

	                nextRow = newRow.next();
	                if (nextRow.hasClass("k-detail-row") && nextRow.is(":visible")) {
	                    newRow.find(".k-hierarchy-cell .k-icon")
	                        .removeClass("k-i-expand")
	                        .addClass("k-i-collapse");
	                }
	            }
	        },

	        _showMessage: function(messages, row) {
	            var that = this;

	            if (!that._isMobile) {
	                return window.confirm(messages.title);
	            }

	            var template = kendo.template('<ul>'+
	                '<li class="km-actionsheet-title">#:title#</li>'+
	                '<li><a href="\\#" class="k-button k-grid-delete">#:confirmDelete#</a></li>'+
	            '</ul>');

	            var html = $(template(messages)).appendTo(that.view.element);

	            var actionSheet = that._actionSheet = new kendo.mobile.ui.ActionSheet(html, {
	                cancel: messages.cancelDelete,
	                cancelTemplate: '<li class="km-actionsheet-cancel"><a class="k-button" href="\\#">#:cancel#</a></li>',
	                close: function() {
	                    this.destroy();
	                },
	                command: function(e) {
	                    var item = $(e.currentTarget).parent();
	                    if (!item.hasClass("km-actionsheet-cancel")) {
	                        that._removeRow(row);
	                    }
	                },
	                popup: that._actionSheetPopupOptions
	            });

	            actionSheet.open(row);

	            return false;
	        },

	        _confirmation: function(row) {
	            var that = this,
	                editable = that.options.editable,
	                confirmation = (editable === true || typeof editable === STRING) ? that.options.messages.editable.confirmation : editable.confirmation;

	            if (isPlainObject(editable) && typeof editable.mode === STRING && typeof confirmation !== STRING && confirmation !== false) {
	                confirmation = that.options.messages.editable.confirmation;
	            }

	            if (confirmation !== false && confirmation != null) {

	                if (typeof confirmation === FUNCTION) {
	                    confirmation = confirmation(that._modelForContainer(row));
	                }

	                return that._showMessage({
	                        confirmDelete: editable.confirmDelete || that.options.messages.editable.confirmDelete,
	                        cancelDelete: editable.cancelDelete || that.options.messages.editable.cancelDelete,
	                        title: confirmation === true ? that.options.messages.editable.confirmation : confirmation
	                    }, row);
	            }

	            return true;
	        },

	        cancelChanges: function() {
	            this.dataSource.cancelChanges();
	        },

	        saveChanges: function() {
	            var that = this;

	            if (((that.editable && that.editable.end()) || !that.editable) && !that.trigger(SAVECHANGES)) {
	                that.dataSource.sync();
	            }
	        },

	        addRow: function() {
	            var that = this,
	                index,
	                dataSource = that.dataSource,
	                mode = that._editMode(),
	                createAt = that.options.editable.createAt || "",
	                pageSize = dataSource.pageSize(),
	                view = dataSource.view() || [];

	            if ((that.editable && that.editable.end()) || !that.editable) {
	                if (mode != "incell") {
	                    that.cancelRow();
	                }

	                index = dataSource.indexOf(view[0]);

	                if (createAt.toLowerCase() == "bottom") {
	                    index += view.length;

	                    if (pageSize && !dataSource.options.serverPaging && pageSize <= view.length) {
	                        index -= 1;
	                    }
	                }

	                if (index < 0) {
	                    if (dataSource.page() > dataSource.totalPages()) {
	                        index = (dataSource.page() - 1) * pageSize;
	                    } else {
	                        index = 0;
	                    }
	                }

	                var model = dataSource.insert(index, {}),
	                    id = model.uid,
	                    table = that.lockedContent ? that.lockedTable : that.table,
	                    row = table.find("tr[" + kendo.attr("uid") + "=" + id + "]"),
	                    cell = row.children("td:not(.k-group-cell,.k-hierarchy-cell)").eq(that._firstEditableColumnIndex(row));

	                if (mode === "inline" && row.length) {
	                    that.editRow(row);
	                } else if (mode === "popup") {
	                    that.editRow(model);
	                } else if (cell.length) {
	                    that.editCell(cell);
	                }

	                if (createAt.toLowerCase() == "bottom" && that.lockedContent) {
	                    //scroll the containers to the bottom
	                    that.lockedContent[0].scrollTop = that.content[0].scrollTop = that.table[0].offsetHeight;
	                }
	            }
	        },

	        _firstEditableColumnIndex: function(container) {
	            var that = this,
	                column,
	                columns = leafColumns(that.columns),
	                idx,
	                length,
	                model = that._modelForContainer(container);

	            for (idx = 0, length = columns.length; idx < length; idx++) {
	                column = columns[idx];

	                if (model && (!model.editable || model.editable(column.field)) && !column.command && column.field && column.hidden !== true) {
	                    return idx;
	                }
	            }
	            return -1;
	        },

	        _toolbar: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                toolbar = that.options.toolbar,
	                editable = that.options.editable,
	                container;

	            if (toolbar) {
	                container = that.wrapper.find(".k-grid-toolbar");

	                if (!container.length) {
	                    if (!isFunction(toolbar)) {
	                        toolbar = (typeof toolbar === STRING ? toolbar : that._toolbarTmpl(toolbar).replace(templateHashRegExp, "\\#"));
	                        toolbar = proxy(kendo.template(toolbar), that);
	                    }

	                    container = $('<div class="k-header k-grid-toolbar" />')
	                        .html(toolbar({}))
	                        .prependTo(wrapper);

	                    that.angular("compile", function(){
	                        return { elements: container.get() };
	                    });
	                }

	                if (editable && editable.create !== false) {
	                    container.on(CLICK + NS, ".k-grid-add", function(e) { e.preventDefault(); that.addRow(); })
	                        .on(CLICK + NS, ".k-grid-cancel-changes", function(e) { e.preventDefault(); that.cancelChanges(); })
	                        .on(CLICK + NS, ".k-grid-save-changes", function(e) { e.preventDefault(); that.saveChanges(); });
	                }

	                container.on(CLICK + NS, ".k-grid-excel", function(e) {
	                    e.preventDefault();

	                    that.saveAsExcel();
	                });

	                container.on(CLICK + NS, ".k-grid-pdf", function(e) {
	                    e.preventDefault();

	                    that.saveAsPDF();
	                });
	            }
	        },

	        _toolbarTmpl: function(commands) {
	            var that = this,
	                idx,
	                length,
	                html = "";

	            if (isArray(commands)) {
	                for (idx = 0, length = commands.length; idx < length; idx++) {
	                    html += that._createButton(commands[idx]);
	                }
	            }
	            return html;
	        },

	        _createButton: function(command) {
	            var template = command.template || COMMANDBUTTONTMPL,
	                commandName = typeof command === STRING ? command : command.name || command.text,
	                className = defaultCommands[commandName] ? defaultCommands[commandName].className : "k-grid-" + (commandName || "").replace(/\s/g, ""),
	                options = { className: className, text: commandName, imageClass: "", attr: "", iconClass: "" },
	                messages = this.options.messages.commands,
	                attributeClassMatch;

	            if (!commandName && !(isPlainObject(command) && command.template))  {
	                throw new Error("Custom commands should have name specified");
	            }

	            if (isPlainObject(command)) {
	                command = extend(true, {}, command);

	                if (command.className && inArray(options.className, command.className.split(" ")) < 0) {
	                    command.className += " " + options.className;
	                } else if (command.className === undefined) {
	                    command.className = options.className;
	                }

	                if (commandName === "edit" && isPlainObject(command.text)) {
	                    command = extend(true, {}, command);
	                    command.text = command.text.edit;
	                }

	                if (command.attr) {
	                    if (isPlainObject(command.attr)) {
	                        command.attr = stringifyAttributes(command.attr);
	                    }

	                    if (typeof command.attr === STRING) {
	                        attributeClassMatch = command.attr.match(/class="(.+?)"/);

	                        if (attributeClassMatch && inArray(attributeClassMatch[1], command.className.split(" ")) < 0) {
	                            command.className += " " + attributeClassMatch[1];
	                        }
	                    }
	                }

	                options = extend(true, options, defaultCommands[commandName], { text: messages[commandName] }, command);
	            } else {
	                options = extend(true, options, defaultCommands[commandName], { text: messages[commandName] });
	            }

	            return kendo.template(template)(options);
	        },

	        _hasFooters: function() {
	            return !!this.footerTemplate ||
	                !!this.groupFooterTemplate ||
	                (this.footer && this.footer.length > 0) ||
	                this.wrapper.find(".k-grid-footer").length > 0;
	        },

	        _groupable: function() {
	            var that = this;

	            if (that._groupableClickHandler) {
	                that.table.add(that.lockedTable).off(CLICK + NS, that._groupableClickHandler);
	            } else {
	                that._groupableClickHandler = function(e) {
	                    var element = $(this),
	                    group = element.closest("tr");

	                    if(element.hasClass('k-i-collapse')) {
	                        that.collapseGroup(group);
	                    } else {
	                        that.expandGroup(group);
	                    }
	                    e.preventDefault();
	                    e.stopPropagation();
	                };
	            }

	            if (that._isLocked()) {
	                that.lockedTable.on(CLICK + NS, ".k-grouping-row .k-i-expand, .k-grouping-row .k-i-collapse", that._groupableClickHandler);
	            } else {
	                that.table.on(CLICK + NS, ".k-grouping-row .k-i-expand, .k-grouping-row .k-i-collapse", that._groupableClickHandler);
	            }

	            that._attachGroupable();
	        },

	        _attachGroupable: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                groupable = that.options.groupable,
	                draggables = HEADERCELLS + "[" + kendo.attr("field") + "]",
	                filter = that.content ? ".k-grid-header:first " + draggables  : "table:first>.k-grid-header " + draggables;

	            if (groupable && groupable.enabled !== false) {

	                if(!wrapper.has("div.k-grouping-header")[0]) {
	                    $("<div>&nbsp;</div>").addClass("k-grouping-header").prependTo(wrapper);
	                }

	                if (that.groupable) {
	                    that.groupable.destroy();
	                }

	                that.groupable = new ui.Groupable(wrapper, extend({}, groupable, {
	                    draggable: that._draggableInstance,
	                    groupContainer: ">div.k-grouping-header",
	                    dataSource: that.dataSource,
	                    draggableElements: filter,
	                    filter: filter,
	                    allowDrag: that.options.reorderable,
	                    change: function(e) {
	                        if(that.trigger("group", { groups: e.groups })) {
	                            e.preventDefault();
	                        }
	                    }
	                }));
	            }
	        },

	        _continuousItems: function(filter, cell) {
	            if (!this.lockedContent) {
	                return;
	            }

	            var that = this;

	            var elements = that.table.add(that.lockedTable);

	            var lockedItems = $(filter, elements[0]);
	            var nonLockedItems = $(filter, elements[1]);
	            var columns = cell ? lockedColumns(that.columns).length : 1;
	            var nonLockedColumns = cell ? that.columns.length - columns : 1;
	            var result = [];

	            for (var idx = 0; idx < lockedItems.length; idx += columns) {
	                push.apply(result, lockedItems.slice(idx, idx + columns));
	                push.apply(result, nonLockedItems.splice(0, nonLockedColumns));
	            }

	            return result;
	        },

	        _selectable: function() {
	            var that = this,
	                multi,
	                cell,
	                notString = [],
	                isLocked = that._isLocked(),
	                selectable = that.options.selectable;

	            if (selectable) {

	                if (that.selectable) {
	                    that.selectable.destroy();
	                }

	                selectable = kendo.ui.Selectable.parseOptions(selectable);

	                multi = selectable.multiple;
	                cell = selectable.cell;

	                if (that._hasDetails()) {
	                    notString[notString.length] = ".k-detail-row";
	                }
	                if (that.options.groupable || that._hasFooters()) {
	                    notString[notString.length] = ".k-grouping-row,.k-group-footer";
	                }

	                notString = notString.join(",");

	                if (notString !== "") {
	                    notString = ":not(" + notString + ")";
	                }

	                var elements = that.table;
	                if (isLocked) {
	                    elements = elements.add(that.lockedTable);
	                }

	                var filter = ">" + (cell ? SELECTION_CELL_SELECTOR : "tbody>tr" + notString);
	                that.selectable = new kendo.ui.Selectable(elements, {
	                    filter: filter,
	                    aria: true,
	                    multiple: multi,
	                    change: function() {
	                        that.trigger(CHANGE);
	                    },
	                    useAllItems: isLocked && multi && cell,
	                    relatedTarget: function(items) {
	                        if (cell || !isLocked) {
	                            return;
	                        }

	                        var related;
	                        var result = $();
	                        for (var idx = 0, length = items.length; idx < length; idx ++) {
	                            related = that._relatedRow(items[idx]);

	                            if (inArray(related[0], items) < 0) {
	                                result = result.add(related);
	                            }
	                        }

	                        return result;
	                    },
	                    continuousItems: function() {
	                        return that._continuousItems(filter, cell);
	                    }
	                });

	                if (that.options.navigatable) {
	                    elements.on("keydown" + NS, function(e) {
	                        var current = that.current();
	                        var target = e.target;
	                        if (e.keyCode === keys.SPACEBAR && $.inArray(target, elements) > -1 &&
	                            !current.is(".k-edit-cell,.k-header") &&
	                            current.parent().is(":not(.k-grouping-row,.k-detail-row,.k-group-footer)")) {
	                            e.preventDefault();
	                            e.stopPropagation();
	                            current = cell ? current : current.parent();

	                            if (isLocked && !cell) {
	                                current = current.add(that._relatedRow(current));
	                            }

	                            if(multi) {
	                                if(!e.ctrlKey) {
	                                    that.selectable.clear();
	                                } else {
	                                    if(current.hasClass(SELECTED)) {
	                                        current.removeClass(SELECTED);
	                                        that.trigger(CHANGE);
	                                        return;
	                                    }
	                                }
	                            } else {
	                                that.selectable.clear();
	                            }

	                            that.selectable.value(current);
	                        }
	                    });
	                }
	            }
	        },

	        _clipboard: function() {
	            var options = this.options;
	            var selectable = options.selectable;
	            if (selectable && options.allowCopy) {
	                var grid = this;
	                if (!options.navigatable) {
	                    grid.table.add(grid.lockedTable)
	                        .attr("tabindex", 0)
	                        .on("mousedown" + NS + " keydown" + NS, ".k-detail-cell", function(e) {
	                            if (e.target !== e.currentTarget) {
	                                e.stopImmediatePropagation();
	                            }
	                        })
	                        .on("mousedown" + NS, NAVROW + ">" + NAVCELL, proxy(tableClick, grid));
	                }
	                grid.copyHandler = proxy(grid.copySelection, grid);
	                grid.updateClipBoardState = function () {
	                    if (grid.areaClipBoard) {
	                        grid.areaClipBoard.val(grid.getTSV()).focus().select();
	                    }
	                };
	                grid.bind("change",grid.updateClipBoardState);
	                grid.wrapper.on("keydown", grid.copyHandler);
	                grid.clearAreaHandler = proxy(grid.clearArea, grid);
	                grid.wrapper.on("keyup", grid.clearAreaHandler);
	            }
	        },

	        copySelection: function(e) {
	            if ((e instanceof jQuery.Event && !(e.ctrlKey || e.metaKey)) ||
	                $(e.target).is("input:visible,textarea:visible") ||
	                (window.getSelection && window.getSelection().toString()) ||
	                (document.selection && document.selection.createRange().text) ) {
	                return;
	            }


	            if (!this.areaClipBoard) {
	                this.areaClipBoard =
	                    $("<textarea />")
	                    .css({
	                        position: "fixed",
	                        top: "50%",
	                        left:"50%",
	                        opacity: 0,
	                        width: 0,
	                        height: 0
	                    })
	                    .appendTo(this.wrapper);
	            }

	            this.areaClipBoard.val(this.getTSV()).focus().select();

	        },

	        getTSV: function() {
	            var grid = this;
	            var selected = grid.select();
	            var delimeter = "\t";
	            var allowCopy = grid.options.allowCopy;
	            var onlyVisible = true;

	            if ($.isPlainObject(allowCopy) && allowCopy.delimeter) {
	                delimeter = allowCopy.delimeter;
	            }
	            var text = "";
	            if (selected.length) {
	                if (selected.eq(0).is("tr")) {
	                    selected = selected.find("td:not(.k-group-cell)");
	                }
	                if (onlyVisible) {
	                    selected.filter(":visible");
	                }

	                var result = [];
	                var cellsOffset = this.columns.length;
	                var lockedCols = grid._isLocked() && lockedColumns(grid.columns).length;
	                var inLockedArea = true;

	                $.each(selected, function (idx, cell) {
	                    cell = $(cell);
	                    var tr = cell.closest("tr");
	                    var rowIndex = tr.index();
	                    var cellIndex = cell.index();
	                    if (onlyVisible) {
	                        cellIndex -= cell.prevAll(":hidden").length;
	                    }
	                    if (lockedCols && inLockedArea) {
	                        inLockedArea = $.contains(grid.lockedTable[0], cell[0]);
	                    }
	                    if (grid._groups() && inLockedArea) {
	                        cellIndex -= grid._groups();
	                    }
	                    cellIndex = inLockedArea ? cellIndex : (cellIndex + lockedCols );
	                    if (cellsOffset > cellIndex) {
	                        cellsOffset = cellIndex;
	                    }
	                    var cellText = cell.text();
	                    if (!result[rowIndex]) {
	                        result[rowIndex] = [];
	                    }
	                    result[rowIndex][cellIndex] = cellText;

	                });

	                var rowsOffset = result.length;
	                result = $.each(result, function (idx, val) {
	                    if (val) {
	                        result[idx] = val.slice(cellsOffset);
	                        if (rowsOffset > idx) {
	                            rowsOffset = idx;
	                        }
	                    }
	                });

	                $.each(result.slice(rowsOffset), function (idx, val) {
	                    if (val) {
	                        text += val.join(delimeter) + "\r\n";
	                    } else {
	                        text +=  "\r\n";
	                    }
	                });
	            }
	            return text;
	        },

	        clearArea: function (e) {
	            var table;
	            if (this.areaClipBoard && e && e.target === this.areaClipBoard[0]) {
	                if (this.options.navigatable) {
	                    table = $(this.current()).closest("table");
	                } else {
	                    table = this.table;
	                }
	                focusTable(table, true);
	            }

	            if (this.areaClipBoard) {
	                this.areaClipBoard.remove();
	                this.areaClipBoard = null;
	            }
	        },

	        _minScreenSupport: function() {
	            var any = this.hideMinScreenCols();

	            if (any) {
	                this.minScreenResizeHandler = proxy(this.hideMinScreenCols, this);
	                $(window).on("resize", this.minScreenResizeHandler);
	            }
	        },

	        hideMinScreenCols: function() {
	            var cols = this.columns,
	                screenWidth = (window.innerWidth > 0) ? window.innerWidth : screen.width;

	            return this._iterateMinScreenCols(cols, screenWidth);
	        },

	        _iterateMinScreenCols: function (cols, screenWidth) {
	            var any = false;

	            for (var i = 0; i < cols.length; i++) {
	                var col = cols[i];
	                var minWidth = col.minScreenWidth;
	                if (minWidth !== undefined && minWidth !== null) {
	                    any = true;
	                    if (minWidth > screenWidth) {
	                        this.hideColumn(col);
	                    } else {
	                        this.showColumn(col);
	                    }
	                }
	                if (!col.hidden && col.columns) {
	                    any = this._iterateMinScreenCols(col.columns, screenWidth) || any;
	                }
	            }
	            return any;
	        },

	        _relatedRow: function(row) {
	            var lockedTable = this.lockedTable;
	            row = $(row);

	            if (!lockedTable) {
	                return row;
	            }

	            var table = row.closest(this.table.add(this.lockedTable));
	            var index = table.find(">tbody>tr").index(row);

	            table = table[0] === this.table[0] ? lockedTable : this.table;

	            return table.find(">tbody>tr").eq(index);
	        },

	        clearSelection: function() {
	            var that = this;
	            that.selectable.clear();
	            that.trigger(CHANGE);
	        },

	        select: function(items) {
	            var that = this,
	                selectable = that.selectable;

	            items = that.table.add(that.lockedTable).find(items);
	            if(items.length) {
	                if(!selectable.options.multiple) {
	                    selectable.clear();
	                    items = items.first();
	                }

	                if (that._isLocked()) {
	                    items = items.add(items.map(function() {
	                        return that._relatedRow(this);
	                    }));
	                }

	                selectable.value(items);
	                return;
	            }

	            return selectable.value();
	        },

	        _updateCurrentAttr: function(current, next) {

	            var headerId = $(current).data("headerId");
	            $(current)
	                .removeClass(FOCUSED)
	                .closest("table")
	                .removeAttr("aria-activedescendant");

	            if(headerId){
	                headerId = headerId.replace(this._cellId, "");
	                $(current).attr("id", headerId);
	            }else{
	                $(current).removeAttr("id");
	            }

	            next
	                .data("headerId", next.attr("id"))
	                .attr("id", this._cellId)
	                .addClass(FOCUSED)
	                .closest("table")
	                .attr("aria-activedescendant", this._cellId);

	            this._current = next;
	        },

	        _scrollCurrent: function() {
	            var current = this._current;
	            var scrollable = this.options.scrollable;

	            if (!current || !scrollable) {
	                return;
	            }

	            var row = current.parent();
	            var tableContainer = row.closest("table").parent();

	            var isInLockedContainer = tableContainer.is(".k-grid-content-locked,.k-grid-header-locked");
	            var isInContent = tableContainer.is(".k-grid-content-locked,.k-grid-content,.k-virtual-scrollable-wrap");

	            var scrollableContainer = $(this.content).find(">.k-virtual-scrollable-wrap").addBack().last()[0];

	            //adjust scroll vertically
	            if (isInContent) {
	                if (scrollable.virtual) {
	                    var rowIndex = Math.max(inArray(row[0], this._items(row.parent())), 0);
	                    this._rowVirtualIndex = this.virtualScrollable.itemIndex(rowIndex);
	                    this.virtualScrollable.scrollIntoView(row);
	                } else {
	                    this._scrollTo(this._relatedRow(row)[0], scrollableContainer);
	                }
	            }

	            if (this.lockedContent) {
	                //sync locked and non-locked content scrollTop
	                this.lockedContent[0].scrollTop = scrollableContainer.scrollTop;
	            }

	            //adjust scroll horizontally, if not inside locked tables
	            if (!isInLockedContainer) {
	                this._scrollTo(current[0], scrollableContainer);
	            }
	        },

	        current: function(next) {
	            return this._setCurrent(next, true);
	        },

	        _setCurrent: function(next, preventTrigger) {
	            var current = this._current;
	            next = $(next);

	            if (next.length) {
	                if (!current || current[0] !== next[0]) {
	                    this._updateCurrentAttr(current, next);

	                    this._scrollCurrent();

	                    if (!preventTrigger) {
	                        this.trigger(NAVIGATE, {
	                            element: next
	                        });
	                    }
	                }
	            }

	            return this._current;
	        },

	        _removeCurrent: function() {
	            if (this._current) {
	                this._current.removeClass(FOCUSED);
	                this._current = null;
	            }
	        },

	        _scrollTo: function(element, container) {
	            var elementToLowercase = element.tagName.toLowerCase();
	            var isHorizontal =  elementToLowercase === "td" || elementToLowercase === "th";
	            var elementOffset = element[isHorizontal ? "offsetLeft" : "offsetTop"];
	            var elementOffsetDir = element[isHorizontal ? "offsetWidth" : "offsetHeight"];
	            var containerScroll = container[isHorizontal ? "scrollLeft" : "scrollTop"];
	            var containerOffsetDir = container[isHorizontal ? "clientWidth" : "clientHeight"];
	            var bottomDistance = elementOffset + elementOffsetDir;
	            var result = 0;
	            var ieCorrection = 0;
	            var firefoxCorrection = 0;

	            if (isRtl && isHorizontal) {
	                var table = $(element).closest("table")[0];
	                if (browser.msie) {
	                    ieCorrection = table.offsetLeft;
	                } else if (browser.mozilla) {
	                    firefoxCorrection = table.offsetLeft - kendo.support.scrollbar();
	                }
	            }

	            containerScroll = Math.abs(containerScroll + ieCorrection - firefoxCorrection);

	            if (containerScroll > elementOffset) {
	                result = elementOffset;
	            } else if (bottomDistance > (containerScroll + containerOffsetDir)) {
	                if (elementOffsetDir <= containerOffsetDir) {
	                    result = (bottomDistance - containerOffsetDir);
	                } else {
	                    result = elementOffset;
	                }
	            } else {
	                result = containerScroll;
	            }

	            result = Math.abs(result + ieCorrection) + firefoxCorrection;

	            container[isHorizontal ? "scrollLeft" : "scrollTop"] = result;
	        },

	        _navigatable: function() {
	            var that = this;

	            if (!that.options.navigatable) {
	                return;
	            }

	            //data tables - locked and non-locked
	            var dataTables = that.table.add(that.lockedTable);
	            //header tables - locked and non-locked
	            var headerTables = that.thead.parent().add($(">table", that.lockedHeader));

	            //the over wich keys will be handled
	            var tables = dataTables;

	            if (that.options.scrollable) {
	                //add the header table when the widget is scrollable
	                tables = tables.add(headerTables);
	                //data tables will recive first focus on TAB
	                headerTables.attr(TABINDEX, -1);
	            }

	            this._navigatableTables = tables;

	            //dettach all previous events
	            tables.off("mousedown" + NS + " focus" + NS + " focusout" + NS + " keydown" + NS);

	            headerTables
	                .on("keydown" + NS, proxy(that._openHeaderMenu, that))
	                .find("a.k-link").attr("tabIndex", -1);

	            //prevent propagation when clicked inside detail grid
	            dataTables
	                .attr(TABINDEX, math.max(dataTables.attr(TABINDEX) || 0, 0))
	                .on("mousedown" + NS + " keydown" + NS, ".k-detail-cell", function(e) {
	                    if (e.target !== e.currentTarget) {
	                        e.stopImmediatePropagation();
	                    }
	                });

	            tables
	                //handle click on tables, will attempt to focus the table
	                .on((kendo.support.touch ? "touchstart" + NS : "mousedown" + NS), NAVROW + ">" + NAVCELL, proxy(tableClick, that))
	                .on("focus" + NS, proxy(that._tableFocus, that))
	                .on("focusout" + NS, proxy(that._tableBlur, that))
	                .on("keydown" + NS, proxy(that._tableKeyDown, that));
	        },

	        _openHeaderMenu: function(e) {
	            if (e.altKey && e.keyCode == keys.DOWN) {
	                this.current().find(".k-grid-filter, .k-header-column-menu").click();
	                e.stopImmediatePropagation();
	            }
	        },

	        _setTabIndex: function(table) {
	            this._navigatableTables.attr(TABINDEX, -1);

	            table.attr(TABINDEX, 0);
	        },

	        _tableFocus: function(e) {
	            if (kendo.support.touch) {
	                return;
	            }

	            var current = this.current();
	            var table = $(e.currentTarget);

	            //if there is already current, highlighted it
	            //otherwise highlight the first possible cell
	            if (current && current.is(":visible")) {
	                current.addClass(FOCUSED);
	            } else {
	                this._setCurrent(table.find(FIRSTNAVITEM));
	            }

	            this._setTabIndex(table);
	        },

	        _tableBlur: function() {
	            var current = this.current();

	            if (current) {
	                current.removeClass(FOCUSED);
	            }
	        },

	        _tableKeyDown: function(e) {
	            var current = this.current();
	            var requestInProgress = this.virtualScrollable && this.virtualScrollable.fetching();
	            var target = $(e.target);
	            var canHandle = !e.isDefaultPrevented() && !target.is(":button,a,:input,a>.k-icon");

	            // do not handle key down if request in progress
	            // or there isn't current set
	            if (requestInProgress) {
	                // swallow key events while in progress
	                e.preventDefault();
	                return;
	            }

	            current = current ? current : $(this.lockedTable).add(this.table).find(FIRSTNAVITEM);
	            if (!current.length) {
	                return;
	            }

	            var handled = false;

	            if (canHandle && e.keyCode == keys.UP) {
	                handled = this._moveUp(current);
	            }

	            if (canHandle && e.keyCode == keys.DOWN) {
	                handled = this._moveDown(current);
	            }

	            if (canHandle && e.keyCode == (isRtl ? keys.LEFT : keys.RIGHT)) {
	                handled = this._moveRight(current, e.altKey);
	            }

	            if (canHandle && e.keyCode == (isRtl ? keys.RIGHT : keys.LEFT)) {
	                handled = this._moveLeft(current, e.altKey);
	            }

	            if (canHandle && e.keyCode == keys.PAGEDOWN) {
	                handled = this._handlePageDown();
	            }

	            if (canHandle && e.keyCode == keys.PAGEUP) {
	                handled = this._handlePageUp();
	            }

	            if (e.keyCode == keys.ENTER || e.keyCode == keys.F2) {
	                handled = this._handleEnterKey(current, e.currentTarget, target);
	            }

	            if (e.keyCode == keys.ESC) {
	                handled = this._handleEscKey(current, e.currentTarget);
	            }

	            if (e.keyCode == keys.TAB) {
	                handled = this._handleTabKey(current, e.currentTarget, e.shiftKey);
	            }

	            if (handled) {
	                //prevent scrolling while pressing the keys
	                e.preventDefault();
	                //required in hierarchy
	                e.stopPropagation();
	            }
	        },

	        _moveLeft: function(current, altKey) {
	            var next, index;
	            var row = current.parent();
	            //thead or tbody
	            var container = row.parent();

	            if (altKey) {
	                this.collapseRow(row);
	            } else {
	                index = container.find(NAVROW).index(row);
	                next = this._prevHorizontalCell(container, current, index);

	                if (!next[0]) {
	                    container = this._horizontalContainer(container);

	                    next = this._prevHorizontalCell(container, current, index);

	                    if (next[0] !== current[0]) {
	                        focusTable(container.parent(), true);
	                    }
	                }

	                this._setCurrent(next);
	            }

	            return true;
	        },

	        _moveRight: function(current, altKey) {
	            var next, index;
	            var row = current.parent();
	            //thead or tbody
	            var container = row.parent();

	            if (altKey) {
	                this.expandRow(row);
	            } else {
	                index = container.find(NAVROW).index(row);
	                next = this._nextHorizontalCell(container, current, index);

	                if (!next[0]) {
	                    container = this._horizontalContainer(container, true);

	                    next = this._nextHorizontalCell(container, current, index);

	                    if (next[0] !== current[0]) {
	                        focusTable(container.parent(), true);
	                    }
	                }

	                this._setCurrent(next);
	            }

	            return true;
	        },

	        _moveUp: function(current) {
	            //thead or tbody
	            var container = current.parent().parent();
	            var next = this._prevVerticalCell(container, current);

	            if (!next[0]) {
	                container = this._verticalContainer(container, true);

	                next = this._prevVerticalCell(container, current);

	                if (next[0]) {
	                    focusTable(container.parent(), true);
	                }
	            }

	            this._setCurrent(next);

	            return true;
	        },

	        _moveDown: function(current) {
	            //thead or tbody
	            var container = current.parent().parent();
	            var next = this._nextVerticalCell(container, current);

	            if (!next[0]) {
	                container = this._verticalContainer(container);

	                next = this._nextVerticalCell(container, current);
	                if (next[0]) {
	                    focusTable(container.parent(), true);
	                }
	            }

	            this._setCurrent(next);

	            return true;
	        },

	        _handlePageDown: function() {
	            if (!this.options.pageable) {
	                return false;
	            }

	            this.dataSource.page(this.dataSource.page() + 1);

	            return true;
	        },

	        _handlePageUp: function() {
	            if (!this.options.pageable) {
	                return false;
	            }

	            this.dataSource.page(this.dataSource.page() - 1);

	            return true;
	        },

	        _handleTabKey: function(current, currentTable, shiftKey) {
	            var isInCell = this.options.editable && this._editMode() == "incell";
	            var cell;

	            if (!isInCell || current.is("th")) {
	                return false;
	            }

	            cell = $(activeElement()).closest(".k-edit-cell");

	            if (cell[0] && cell[0] !== current[0]) {
	                current = cell;
	            }

	            cell = this._tabNext(current, currentTable, shiftKey);

	            if (cell.length) {
	                this._handleEditing(current, cell, cell.closest("table"));

	                return true;
	            }

	            return false;
	        },

	        _handleEscKey: function(current, currentTable) {
	            var active = activeElement();
	            var isInCell = this._editMode() == "incell";

	            if (!isInEdit(current)) {
	                if (current.has(active).length) {
	                    // return focus back to the table
	                    focusTable(currentTable, true);

	                    return true;
	                }
	                return false;
	            }

	            if (isInCell) {
	                this.closeCell(true);
	            } else {
	                var currentIndex = $(current).parent().index();
	                if (active) {
	                    active.blur();
	                }
	                this.cancelRow(true);
	                if (currentIndex >= 0) {
	                    this._setCurrent(this.items().eq(currentIndex).children(NAVCELL).first());
	                }
	            }

	            if (browser.msie && browser.version < 9) {
	                document.body.focus();
	            }

	            focusTable(currentTable, true);

	            return true;
	        },

	        _toggleCurrent: function(current, editable) {
	            var row = current.parent();

	            if (row.is(".k-grouping-row")) {
	                row.find(".k-icon:first").click();

	                return true;
	            }

	            if (!editable && row.is(".k-master-row")) {
	                row.find(".k-icon:first").click();

	                return true;
	            }

	            return false;
	        },

	        _handleEnterKey: function(current, currentTable, target) {
	            var editable = this.options.editable && this.options.editable.update !== false;
	            var container = target.closest("[role=gridcell]");

	            if (!target.is("table") && !$.contains(current[0], target[0])) {
	                current = container;
	            }

	            if (current.is("th")) {
	                // sort the column, if possible
	                current.find(".k-link").click();

	                return true;
	            }

	            if (this._toggleCurrent(current, editable)) {
	                return true;
	            }

	            var focusable = current.find(":kendoFocusable:first");
	            if (focusable[0] && !current.hasClass("k-edit-cell") && current.hasClass("k-state-focused")) {
	                focusable.focus();

	                return true;
	            }

	            if (editable && !target.is(":button,.k-button,textarea")) {
	                if (!container[0]) {
	                    container = current;
	                }

	                this._handleEditing(container, false, currentTable);

	                return true;
	            }

	            return false;
	        },

	        _nextHorizontalCell: function(table, current, originalIndex) {
	            var cells = current.nextAll(DATA_CELL);

	            if (!cells.length) {
	                var rows = table.find(NAVROW);
	                var rowIndex = rows.index(current.parent());
	                //no sibling cells are found and we've changed the table
	                if (rowIndex == -1) {
	                    if (current.hasClass("k-header")) {
	                        var headerRows = [];
	                        mapColumnToCellRows([lockedColumns(this.columns)[0]], childColumnsCells(rows.eq(0).children().first()), headerRows, 0, 0);

	                        if (headerRows[originalIndex]) {
	                            return headerRows[originalIndex][0];
	                        }

	                        return current;
	                    }

	                    //current is in filter row
	                    if (current.parent().hasClass("k-filter-row")) {
	                        return rows.last().children(DATA_CELL).first();
	                    }

	                    //get the same row index in the new table
	                    return rows.eq(originalIndex).children(DATA_CELL).first();
	                }
	            }

	            return cells.first();
	        },

	        _prevHorizontalCell: function(table, current, originalIndex) {
	            var cells = current.prevAll(DATA_CELL);

	            if (!cells.length) {
	                var rows = table.find(NAVROW);
	                var rowIndex = rows.index(current.parent());
	                //no sibling cells are found and we've changed the table
	                if (rowIndex == -1) {
	                    if (current.hasClass("k-header")) {
	                        var headerRows = [];
	                        var columns = lockedColumns(this.columns);
	                        mapColumnToCellRows([columns[columns.length - 1]], childColumnsCells(rows.eq(0).children().last()), headerRows, 0, 0);

	                        if (headerRows[originalIndex]) {
	                            return headerRows[originalIndex][0];
	                        }

	                        return current;
	                    }

	                    //current is in filter row
	                    if (current.parent().hasClass("k-filter-row")) {
	                        return rows.last().children(DATA_CELL).last();
	                    }

	                    //get the same row index in the new table
	                    return rows.eq(originalIndex).children(DATA_CELL).last();
	                }
	            }

	            return cells.first();
	        },

	        _currentDataIndex: function(table, current) {
	            var index = current.attr("data-index");

	            if (!index) {
	                return undefined;
	            }

	            var lockedColumnsCount = lockedColumns(this.columns).length;
	            if (lockedColumnsCount && !table.closest("div").hasClass("k-grid-content-locked")[0]) {
	                return index - lockedColumnsCount;
	            }

	            return index;
	        },

	        _prevVerticalCell: function(container, current) {
	            var cells;
	            var row = current.parent();
	            var rows = container.children(NAVROW);
	            var rowIndex = rows.index(row);
	            //get data-index in case of last level of multi-level columns
	            var index = this._currentDataIndex(container, current);

	            //current is in the header, but not at the last level of multi-level columns
	            if (index || current.hasClass("k-header")) {
	                cells = parentColumnsCells(current);
	                return cells.eq(cells.length - 2);
	            }

	            index = row.children(DATA_CELL).index(current);

	            //if current is inside filter row
	            if (row.hasClass("k-filter-row")) {
	                return leafDataCells(container).eq(index);
	            }

	            //move up to header container
	            if (rowIndex == -1) {
	                //is there filter row in the header container
	                row = container.find(".k-filter-row");
	                if (!row[0]) {
	                    return leafDataCells(container).eq(index);
	                }
	            } else {
	                row =  rowIndex === 0 ? $() : rows.eq(rowIndex - 1);
	            }

	            cells = row.children(DATA_CELL);
	            if (cells.length > index) {
	                return cells.eq(index);
	            }

	            return cells.eq(0);
	        },

	        _nextVerticalCell: function(container, current) {
	            var cells;
	            var row = current.parent();
	            var rows = container.children(NAVROW);
	            var rowIndex = rows.index(row);
	            //get data-index in case of last level of multi-level columns
	            var index = this._currentDataIndex(container, current);

	            //current is in the header, but not at the last level of multi-level columns
	            //and we are not changing the table
	            if (rowIndex != -1 && index === undefined && current.hasClass("k-header")) {
	                //offset by one as the result includes the current
	                return childColumnsCells(current).eq(1);
	            }

	            index = index ? parseInt(index, 10) : row.children(DATA_CELL).index(current);

	            //move down to data container
	            if (rowIndex == -1) {
	                row = rows.eq(0);
	            } else {
	                row = rows.eq(rowIndex + current[0].rowSpan);
	            }

	            cells = row.children(DATA_CELL);
	            if (cells.length > index) {
	                return cells.eq(index);
	            }

	            return cells.eq(0);
	        },

	        _verticalContainer: function(container, up) {
	            var table = container.parent();
	            var length = this._navigatableTables.length;
	            var step = Math.floor(length / 2);
	            var index = inArray(table[0], this._navigatableTables);

	            if (up) {
	                step *= -1;
	            }
	            index += step;

	            if (index >= 0 || index < length) {
	                table = this._navigatableTables.eq(index);
	            }

	            return table.find(up ? "thead" : "tbody");
	        },

	        _horizontalContainer: function(container, right) {
	            var length = this._navigatableTables.length;
	            if (length <= 2) {
	                return container;
	            }

	            var table = container.parent();
	            var index = inArray(table[0], this._navigatableTables);

	            index += right ? 1 : -1;

	            if (right && (index == 2 || index == length)) {
	                return container;
	            }

	            if (!right && (index == 1 || index < 0)) {
	                return container;
	            }

	            return this._navigatableTables.eq(index).find("thead, tbody");
	        },

	        _tabNext: function (current, currentTable, back) {
	            var switchRow = true;
	            var next = back ? current.prevAll(DATA_CELL + ":first") : current.nextAll(":visible:first");

	            if (!next.length) {
	                next = current.parent();
	                if (this.lockedTable) {
	                    switchRow = (back && currentTable == this.lockedTable[0]) || (!back && currentTable == this.table[0]);
	                    next = this._relatedRow(next);
	                }

	                if (switchRow) {
	                    next = next[back ? "prevAll" : "nextAll"]("tr:not(.k-grouping-row):not(.k-detail-row):visible:first");
	                }
	                next = next.children(DATA_CELL + (back ? ":last" : ":first"));
	            }

	            return next;
	        },

	        _handleEditing: function(current, next, table) {
	            var that = this,
	                active = $(activeElement()),
	                mode = that._editMode(),
	                isIE = browser.msie,
	                oldIE = isIE && browser.version < 9,
	                editContainer = that._editContainer,
	                focusable,
	                editable = that.options.editable && that.options.editable.update !== false,
	                isEdited;

	            table = $(table);
	            if (mode == "incell") {
	                isEdited = current.hasClass("k-edit-cell");
	            } else {
	                isEdited = current.parent().hasClass("k-grid-edit-row");
	            }

	            if (that.editable) {
	                if ($.contains(editContainer[0], active[0])) {
	                    if (browser.opera || oldIE) {
	                        active.blur().change().triggerHandler("blur");
	                    } else {
	                        active.blur();
	                        if (isIE) {
	                            //IE10 with jQuery 1.9.x does not trigger blur handler
	                            //numeric textbox does trigger change
	                            active.blur();
	                        }
	                    }
	                }

	                if (!that.editable) {
	                    focusTable(table);
	                    return;
	                }

	                if (that.editable.end()) {
	                    if (mode == "incell") {
	                        that.closeCell();
	                    } else {
	                        that.saveRow();
	                        isEdited = true;
	                    }
	                } else {
	                    if (mode == "incell") {
	                        that._setCurrent(editContainer);
	                    } else {
	                        that._setCurrent(editContainer.children().filter(DATA_CELL).first());
	                    }
	                    focusable = editContainer.find(":kendoFocusable:first")[0];
	                    if (focusable) {
	                        focusable.focus();
	                    }
	                    return;
	                }
	            }

	            if (next) {
	                that._setCurrent(next);
	            }

	            if (oldIE) {
	                document.body.focus();
	            }

	            focusTable(table, true);

	            if (!editable) {
	                return;
	            }

	            if ((!isEdited && !next) || next) {
	                if (mode == "incell") {
	                    that.editCell(that.current());
	                } else {
	                    that.editRow(that.current().parent());
	                }
	            }
	        },

	        _wrapper: function() {
	            var that = this,
	                table = that.table,
	                height = that.options.height,
	                wrapper = that.element;

	            if (!wrapper.is("div")) {
	               wrapper = wrapper.wrap("<div/>").parent();
	            }

	            that.wrapper = wrapper.addClass("k-grid k-widget");

	            if (height) {
	                that.wrapper.css(HEIGHT, height);
	                table.css(HEIGHT, "auto");
	            }

	            that._initMobile();
	        },

	        _initMobile: function() {
	            var options = this.options;
	            var that = this;

	            this._isMobile = (options.mobile === true && kendo.support.mobileOS) ||
	                                options.mobile === "phone" ||
	                                options.mobile === "tablet";

	            if (this._isMobile) {
	                var html = this.wrapper.addClass("k-grid-mobile").wrap(
	                        '<div data-' + kendo.ns + 'stretch="true" data-' + kendo.ns + 'role="view" ' +
	                        'data-' + kendo.ns + 'init-widgets="false"></div>'
	                    )
	                    .parent();

	                this.pane = kendo.mobile.ui.Pane.wrap(html);
	                this.view = this.pane.view();
	                this._actionSheetPopupOptions = $(document.documentElement).hasClass("km-root") ? { modal: false } : {
	                    align: "bottom center",
	                    position: "bottom center",
	                    effect: "slideIn:up"
	                };

	                if (options.height) {
	                    this.pane.element.parent().css(HEIGHT, options.height);
	                }

	                this._editAnimation = "slide";

	                this.view.bind("show", function() {
	                    if (that._isLocked()) {
	                        that._updateTablesWidth();
	                        that._applyLockedContainersWidth();
	                        that._syncLockedContentHeight();
	                        that._syncLockedHeaderHeight();
	                        that._syncLockedFooterHeight();
	                    }
	                });
	            }
	        },

	        _tbody: function() {
	            var that = this,
	                table = that.table,
	                tbody;

	            tbody = table.find(">tbody");

	            if (!tbody.length) {
	                tbody = $("<tbody/>").appendTo(table);
	            }

	            that.tbody = tbody.attr("role", "rowgroup");
	        },

	        _scrollable: function() {
	            var that = this,
	                header,
	                table,
	                options = that.options,
	                scrollable = options.scrollable,
	                hasVirtualScroll = scrollable !== true && scrollable.virtual && !that.virtualScrollable,
	                scrollbar = !kendo.support.kineticScrollNeeded || hasVirtualScroll ? kendo.support.scrollbar() : 0;

	            if (scrollable) {
	                header = that.wrapper.children(".k-grid-header");

	                if (!header[0]) {
	                    header = $('<div class="k-grid-header" />').insertBefore(that.table);
	                }

	                // workaround for IE issue where scroll is not raised if container is same width as the scrollbar
	                header.css((isRtl ? "padding-left" : "padding-right"), scrollable.virtual ? scrollbar + 1 : scrollbar);
	                table = $('<table role="grid" />');
	                if (isIE7) {
	                    table.attr("cellspacing", 0);
	                }

	                table.width(that.table[0].style.width);

	                table.append(that.thead);
	                header.empty().append($('<div class="k-grid-header-wrap k-auto-scrollable" />').append(table));


	                that.content = that.table.parent();

	                if (that.content.is(".k-virtual-scrollable-wrap, .km-scroll-container")) {
	                    that.content = that.content.parent();
	                }

	                if (!that.content.is(".k-grid-content, .k-virtual-scrollable-wrap")) {
	                    that.content = that.table.wrap('<div class="k-grid-content k-auto-scrollable" />').parent();
	                }
	                if (hasVirtualScroll) {
	                    that.virtualScrollable = new VirtualScrollable(that.content, {
	                        dataSource: that.dataSource,
	                        itemHeight: function() { return that._averageRowHeight(); }
	                    });
	                }

	                that.scrollables = header.children(".k-grid-header-wrap").add(that.content);

	                // the footer may exists if rendered from the server
	                var footer = that.wrapper.find(".k-grid-footer");

	                if (footer.length) {
	                    that.scrollables = that.scrollables.add(footer.children(".k-grid-footer-wrap"));
	                }

	                if (scrollable.virtual) {

	                    that.content.find(">.k-virtual-scrollable-wrap").unbind("scroll" + NS).bind("scroll" + NS, function () {
	                        that.scrollables.scrollLeft(this.scrollLeft);
	                        if (that.lockedContent) {
	                            that.lockedContent[0].scrollTop = this.scrollTop;
	                        }
	                    });
	                } else {
	                    that.content.unbind("scroll" + NS).bind("scroll" + NS, function (e) {
	                        that.scrollables.not(e.currentTarget).scrollLeft(this.scrollLeft);
	                        if (that.lockedContent && e.currentTarget == that.content[0]) {
	                            that.lockedContent[0].scrollTop = this.scrollTop;
	                        }
	                    });

	                    var touchScroller = that.content.data("kendoTouchScroller");
	                    if (touchScroller) {
	                        touchScroller.destroy();
	                    }

	                    touchScroller = kendo.touchScroller(that.content);
	                    if (touchScroller && touchScroller.movable) {
	                        that.touchScroller = touchScroller;
	                        touchScroller.movable.bind("change", function(e) {
	                            that.scrollables.scrollLeft(-e.sender.x);
	                            if (that.lockedContent) {
	                                that.lockedContent.scrollTop(-e.sender.y);
	                            }
	                        });

	                        that.one(DATABOUND, function (e) {
	                            e.sender.wrapper.addClass("k-grid-backface");
	                        });
	                    }
	                }
	            }
	        },

	        _renderNoRecordsContent: function() {
	            var that = this;

	            if (that.options.noRecords) {
	                var noRecordsElement = that.table.parent().children('.' + NORECORDSCLASS);

	                if (noRecordsElement.length) {
	                    that.angular("cleanup", function(){
	                        return { elements: noRecordsElement.get() };
	                    });

	                    noRecordsElement.remove();
	                }

	                if (!that.dataSource || !that.dataSource.view().length) {
	                    noRecordsElement = $(that.noRecordsTemplate({})).insertAfter(that.table);

	                    that.angular("compile", function(){
	                        return {
	                            elements: noRecordsElement.get(),
	                            data: [{}]
	                        };
	                    });
	                }
	            }
	        },

	        _setContentWidth: function(scrollLeft) {
	            var that = this,
	                hiddenDivClass = 'k-grid-content-expander',
	                hiddenDiv = '<div class="' + hiddenDivClass + '"></div>',
	                resizable = that.resizable,
	                expander;

	            if (that.options.scrollable && that.wrapper.is(":visible")) {
	                expander = that.table.parent().children('.' + hiddenDivClass);
	                that._setContentWidthHandler = proxy(that._setContentWidth, that);
	                if (!that.dataSource || !that.dataSource.view().length) {
	                    if (!expander[0]) {
	                        expander = $(hiddenDiv).appendTo(that.table.parent());
	                        if (resizable) {
	                            resizable.bind("resize", that._setContentWidthHandler);
	                        }
	                    }
	                    if (that.thead) {
	                        expander.width(that.thead.width());
	                        if (!isNaN(parseFloat(scrollLeft, 10))) {
	                            that.content.scrollLeft(scrollLeft);
	                        }
	                    }
	                } else if (expander[0]) {
	                    expander.remove();
	                    if (resizable) {
	                        resizable.unbind("resize", that._setContentWidthHandler);
	                    }
	                }

	                that._applyLockedContainersWidth();

	                // workaround IE does not show vertical scrollbar for elements without width
	                if (that.lockedHeader && that.table[0].clientWidth === 0) {
	                    that.table[0].style.width = "1px";
	                }
	            }
	        },

	        _applyLockedContainersWidth: function() {
	            if (this.options.scrollable && this.lockedHeader) {
	                var headerTable = this.thead.parent(),
	                    headerWrap = headerTable.parent(),
	                    contentWidth = this.wrapper[0].clientWidth,
	                    groups = this._groups(),
	                    scrollbar = kendo.support.scrollbar(),
	                    cols = this.lockedHeader.find(">table>colgroup>col:not(.k-group-col, .k-hierarchy-col)"),
	                    nonLockedCols = headerTable.find(">colgroup>col:not(.k-group-col, .k-hierarchy-col)"),
	                    width = columnsWidth(cols),
	                    nonLockedColsWidth = columnsWidth(nonLockedCols),
	                    footerWrap;

	                if (groups > 0) {
	                    width += outerWidth(this.lockedHeader.find(".k-group-cell:first")) * groups;
	                }

	                if (width >= contentWidth) {
	                    width = contentWidth - 3 * scrollbar;
	                }

	                this.lockedHeader
	                    .add(this.lockedContent)
	                    .width(width);

	                headerWrap[0].style.width = headerWrap.parent().width() - width - 2 + "px";

	                headerTable.add(this.table).width(nonLockedColsWidth);

	                if (this.virtualScrollable) {
	                    contentWidth -= scrollbar;
	                }

	                this.content[0].style.width = contentWidth - width - 2 + "px";

	                if (this.lockedFooter && this.lockedFooter.length) {
	                    this.lockedFooter.width(width);
	                    footerWrap = this.footer.find(".k-grid-footer-wrap");
	                    footerWrap[0].style.width = headerWrap[0].clientWidth + "px";
	                    footerWrap.children().first().width(nonLockedColsWidth);
	                }
	            }
	        },

	        _setContentHeight: function() {
	            var that = this,
	                options = that.options,
	                height = that.wrapper.innerHeight(),
	                header = that.wrapper.children(".k-grid-header"),
	                scrollbar = kendo.support.scrollbar();

	            if (options.scrollable && that.wrapper.is(":visible")) {

	                height -= outerHeight(header);

	                if (that.pager) {
	                    height -= outerHeight(that.pager.element);
	                }

	                if(options.groupable) {
	                    height -= outerHeight(that.wrapper.children(".k-grouping-header"));
	                }

	                if(options.toolbar) {
	                    height -= outerHeight(that.wrapper.children(".k-grid-toolbar"));
	                }

	                if (that.footerTemplate) {
	                    height -= outerHeight(that.wrapper.children(".k-grid-footer"));
	                }

	                var isGridHeightSet = function(el) {
	                    var initialHeight, newHeight;
	                    if (el[0].style.height) {
	                        return true;
	                    } else {
	                        initialHeight = el.height();
	                    }

	                    el.height("auto");
	                    newHeight = el.height();

	                    if (initialHeight != newHeight) {
	                        el.height("");
	                        return true;
	                    }
	                    el.height("");
	                    return false;
	                };

	                if (isGridHeightSet(that.wrapper)) { // set content height only if needed
	                    if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed
	                        if (that.lockedContent) {
	                            scrollbar = that.table[0].offsetWidth > that.table.parent()[0].clientWidth ? scrollbar : 0;
	                            that.lockedContent.height(height - scrollbar);
	                        }

	                        that.content.height(height);
	                    } else {
	                        that.content.height(scrollbar * 2 + 1);
	                    }
	                }
	            }
	        },

	        _averageRowHeight: function() {
	            var that = this,
	                itemsCount = that._items(that.tbody).length,
	                rowHeight = that._rowHeight;

	            if (itemsCount === 0) {
	                return rowHeight;
	            }

	            if (!that._rowHeight) {
	                that._rowHeight = rowHeight = outerHeight(that.table) / itemsCount;
	                that._sum = rowHeight;
	                that._measures = 1;
	            }

	            var currentRowHeight = outerHeight(that.table) / itemsCount;

	            if (rowHeight !== currentRowHeight) {
	                that._measures ++;
	                that._sum += currentRowHeight;
	                that._rowHeight = that._sum / that._measures;
	            }
	            return rowHeight;
	        },

	        _dataSource: function() {
	            var that = this,
	                options = that.options,
	                pageable,
	                dataSource = options.dataSource;

	            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

	            if (isPlainObject(dataSource)) {
	                extend(dataSource, { table: that.table, fields: that.columns });

	                pageable = options.pageable;

	                if (isPlainObject(pageable) && pageable.pageSize !== undefined) {
	                    dataSource.pageSize = pageable.pageSize;
	                }
	            }

	            if (that.dataSource && that._refreshHandler) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler)
	                                .unbind(PROGRESS, that._progressHandler)
	                                .unbind(ERROR, that._errorHandler);
	            } else {
	                that._refreshHandler = proxy(that.refresh, that);
	                that._progressHandler = proxy(that._requestStart, that);
	                that._errorHandler = proxy(that._error, that);
	            }

	            that.dataSource = DataSource.create(dataSource)
	                                .bind(CHANGE, that._refreshHandler)
	                                .bind(PROGRESS, that._progressHandler)
	                                .bind(ERROR, that._errorHandler);
	        },

	        _error: function() {
	            this._progress(false);
	        },

	        _requestStart: function() {
	            this._progress(true);
	        },

	        _modelChange: function(e) {
	            var that = this,
	                tbody = that.tbody,
	                model = e.model,
	                row = that.tbody.find("tr[" + kendo.attr("uid") + "=" + model.uid +"]"),
	                relatedRow,
	                cell,
	                column,
	                isAlt = row.hasClass("k-alt"),
	                tmp,
	                idx = that._items(tbody).index(row),
	                isLocked = that.lockedContent,
	                selectable,
	                selectableRow,
	                childCells,
	                originalCells,
	                length;

	            if (isLocked) {
	                relatedRow = that._relatedRow(row);
	            }

	            if (row.add(relatedRow).children(".k-edit-cell").length && !that.options.rowTemplate) {
	                row.add(relatedRow).children(":not(.k-group-cell,.k-hierarchy-cell)").each(function() {
	                    cell = $(this);
	                    column = leafColumns(that.columns)[that.cellIndex(cell)];

	                    if (column.field === e.field) {
	                        if (!cell.hasClass("k-edit-cell")) {
	                            that._displayCell(cell, column, model);
	                            $('<span class="k-dirty"/>').prependTo(cell);
	                        } else {
	                            cell.addClass("k-dirty-cell");
	                        }
	                    }
	                });

	            } else if (!row.hasClass("k-grid-edit-row")) {

	                selectableRow = $().add(row);

	                if (isLocked) {
	                    tmp = (isAlt ? that.lockedAltRowTemplate : that.lockedRowTemplate)(model);

	                    selectableRow = selectableRow.add(relatedRow);

	                    relatedRow.replaceWith(tmp);
	                }

	                that.angular("cleanup", function(){ return { elements: selectableRow.get() }; });

	                tmp = (isAlt ? that.altRowTemplate : that.rowTemplate)(model);

	                row.replaceWith(tmp);

	                tmp = that._items(tbody).eq(idx);

	                var angularData = [ { dataItem: model } ];

	                if (isLocked) {
	                    row = row.add(relatedRow);

	                    relatedRow = that._relatedRow(tmp)[0];
	                    adjustRowHeight(tmp[0], relatedRow);

	                    tmp = tmp.add(relatedRow);
	                    angularData.push({ dataItem: model });
	                }

	                that.angular("compile", function(){
	                    return {
	                        elements: tmp.get(),
	                        data: angularData
	                     };
	                });

	                selectable = that.options.selectable;
	                if (selectable && row.hasClass("k-state-selected")) {
	                   that.select(tmp);
	                }

	                originalCells = selectableRow.children(":not(.k-group-cell,.k-hierarchy-cell)");
	                childCells = tmp.children(":not(.k-group-cell,.k-hierarchy-cell)");

	                for (idx = 0, length = that.columns.length; idx < length; idx++) {
	                    column = that.columns[idx];

	                    cell = childCells.eq(idx);
	                    if (selectable && originalCells.eq(idx).hasClass("k-state-selected")) {
	                        cell.addClass("k-state-selected");
	                    }

	                    if (column.field === e.field) {
	                       $('<span class="k-dirty"/>').prependTo(cell);
	                    }
	                }

	                that.trigger("itemChange", { item: tmp, data: model, ns: ui });
	            }
	        },

	        _pageable: function() {
	            var that = this,
	                wrapper,
	                pageable = that.options.pageable;

	            if (pageable) {
	                wrapper = that.wrapper.children("div.k-grid-pager");

	                if (!wrapper.length) {
	                    wrapper = $('<div class="k-pager-wrap k-grid-pager"/>').appendTo(that.wrapper);
	                }

	                if (that.pager) {
	                    that.pager.destroy();
	                }

	                if (typeof pageable === "object" && pageable instanceof kendo.ui.Pager) {
	                    that.pager = pageable;
	                } else {
	                    that.pager = new kendo.ui.Pager(wrapper, extend({}, pageable, { dataSource: that.dataSource }));
	                }

	                that.pager.bind("pageChange", function(e) {
	                    if (that.trigger("page", { page: e.index })) {
	                        e.preventDefault();
	                    }
	                });
	            }
	        },

	        _footer: function() {
	            var that = this,
	                aggregates = that.dataSource.aggregates(),
	                html = "",
	                footerTemplate = that.footerTemplate,
	                options = that.options,
	                footerWrap,
	                footer = that.footer || that.wrapper.find(".k-grid-footer");

	            if (footerTemplate) {
	                html = $(that._wrapFooter(footerTemplate(aggregates)));

	                if (footer.length) {
	                    var tmp = html;

	                    that.angular("cleanup", function(){
	                        return { elements: footer.get() };
	                    });

	                    footer.replaceWith(tmp);
	                    footer = that.footer = tmp;
	                } else {
	                    if (options.scrollable) {
	                        footer = that.footer = options.pageable ? html.insertBefore(that.wrapper.children("div.k-grid-pager")) : html.appendTo(that.wrapper);
	                    } else {
	                        footer = that.footer = html.insertBefore(that.tbody);
	                    }
	                }

	                that.angular("compile", function(){
	                    return {
	                        elements: footer.find("td:not(.k-group-cell, .k-hierarchy-cell)").get(),
	                        data: map(that.columns, function(col){
	                            return {
	                                column: col,
	                                aggregate: aggregates[col.field]
	                            };
	                        })
	                    };
	                });

	            } else if (footer && !that.footer) {
	                that.footer = footer;
	            }

	            if (footer.length) {
	                if (options.scrollable) {
	                    footerWrap = footer.attr("tabindex", -1).children(".k-grid-footer-wrap");

	                    that.scrollables = $(
	                        that.scrollables
	                            .filter(function() { return !$(this).is(".k-grid-footer-wrap"); })
	                            .toArray()
	                    ).add(footerWrap);
	                }

	                if (that._footerWidth) {
	                    footer.find("table").css('width', that._footerWidth);
	                }

	                if (footerWrap) {
	                    var offset = that.content.scrollLeft();

	                    if (options.scrollable !== true && options.scrollable.virtual) {
	                        offset = that.wrapper.find('.k-virtual-scrollable-wrap').scrollLeft();
	                    }
	                    footerWrap.scrollLeft(offset);
	                }
	            }

	            if (that.lockedContent) {
	                that._appendLockedColumnFooter();
	                that._applyLockedContainersWidth();
	                that._syncLockedFooterHeight();
	            }
	        },

	        _wrapFooter: function(footerRow) {
	            var that = this,
	                html = "",
	                scrollbar = !kendo.support.mobileOS ? kendo.support.scrollbar() : 0;

	            if (that.options.scrollable) {
	                html = $('<div class="k-grid-footer"><div class="k-grid-footer-wrap"><table' + (isIE7 ? ' cellspacing="0"' : '') + '><tbody>' + footerRow + '</tbody></table></div></div>');
	                that._appendCols(html.find("table"));
	                html.css((isRtl ? "padding-left" : "padding-right"), scrollbar); // Update inner fix.

	                return html;
	            }

	            return '<tfoot class="k-grid-footer">' + footerRow + '</tfoot>';
	        },

	        _columnMenu: function() {
	            var that = this,
	                menu,
	                columns = leafColumns(that.columns),
	                column,
	                options = that.options,
	                columnMenu = options.columnMenu,
	                menuOptions,
	                sortable,
	                filterable,
	                cells,
	                hasMultiColumnHeaders = grep(that.columns, function(item) {
	                    return item.columns !== undefined;
	                }).length > 0,
	                isMobile = this._isMobile,
	                initCallback = function(e) {
	                    that.trigger(COLUMNMENUINIT, { field: e.field, container: e.container });
	                },
	                closeCallback = function(element) {
	                    focusTable(element.closest("table"), true);
	                },
	                sortHandler = function(e) {
	                    if (that.trigger("sort", { sort: e.sort })) {
	                        e.preventDefault();
	                    }
	                },
	                filterHandler = function(e) {
	                    if (that.trigger("filter", { filter: e.filter, field: e.field })) {
	                        e.preventDefault();
	                    }
	                },
	                $angular = options.$angular;

	            if (columnMenu) {
	                if (typeof columnMenu == "boolean") {
	                    columnMenu = {};
	                }

	                cells = leafDataCells(that.thead);

	                for (var idx = 0, length = cells.length; idx < length; idx++) {
	                    column = columns[idx];
	                    var cell = cells.eq(idx);

	                    if (!column.command && (column.field || cell.attr("data-" + kendo.ns + "field"))) {
	                        menu = cell.data("kendoColumnMenu");
	                        if (menu) {
	                            menu.destroy();
	                        }

	                        sortable = column.sortable !== false && columnMenu.sortable !== false && options.sortable !== false ? extend({}, options.sortable, {
	                            compare: (column.sortable || {}).compare
	                        }) : false;

	                        filterable = options.filterable && column.filterable !== false && columnMenu.filterable !== false ? extend({ pane: that.pane }, options.filterable, column.filterable) : false;

	                        if (column.filterable && column.filterable.dataSource) {
	                            filterable.forceUnique = false;
	                            filterable.checkSource = column.filterable.dataSource;
	                        }

	                        if (filterable) {
	                            filterable.format = column.format;
	                        }

	                        menuOptions = {
	                            dataSource: that.dataSource,
	                            values: column.values,
	                            columns: columnMenu.columns,
	                            sortable: sortable,
	                            filterable: filterable,
	                            messages: columnMenu.messages,
	                            owner: that,
	                            closeCallback: closeCallback,
	                            init: initCallback,
	                            pane: that.pane,
	                            sort: sortHandler,
	                            filtering: filterHandler,
	                            filter: isMobile ? ":not(.k-column-active)" : "",
	                            lockedColumns: !hasMultiColumnHeaders && column.lockable !== false && lockedColumns(columns).length > 0
	                        };

	                        if ($angular) {
	                            menuOptions.$angular = $angular;
	                        }

	                        cell.kendoColumnMenu(menuOptions);
	                    }
	                }
	            }
	        },

	        _headerCells: function() {
	            return this.thead.find("th").filter(function() {
	                var th = $(this);
	                return !th.hasClass("k-group-cell") && !th.hasClass("k-hierarchy-cell");
	            });
	        },

	        _filterable: function() {
	            var that = this,
	                columns = leafColumns(that.columns),
	                filterMenu,
	                cells,
	                cell,
	                filterInit = function(e) {
	                    that.trigger(FILTERMENUINIT, { field: e.field, container: e.container });
	                },
	                closeCallback = function(element) {
	                    focusTable(element.closest("table"), true);
	                },
	                filterHandler = function(e) {
	                    if (that.trigger("filter", { filter: e.filter, field: e.field })) {
	                        e.preventDefault();
	                    }
	                },
	                filterable = that.options.filterable;
	                if (filterable && typeof filterable.mode == STRING && filterable.mode.indexOf("menu") == -1) {
	                    filterable = false;
	                }

	            if (filterable && !that.options.columnMenu) {
	                cells = leafDataCells(that.thead);//that._headerCells();

	                for (var idx = 0, length = cells.length; idx < length; idx++) {
	                    cell = cells.eq(idx);

	                    if (columns[idx].filterable !== false && !columns[idx].command && (columns[idx].field || cell.attr("data-" + kendo.ns + "field"))) {
	                        filterMenu = cell.data("kendoFilterMenu");

	                        if (filterMenu) {
	                            filterMenu.destroy();
	                        }

	                        filterMenu = cell.data("kendoFilterMultiCheck");
	                        if (filterMenu) {
	                           filterMenu.destroy();
	                        }

	                        var columnFilterable = columns[idx].filterable;

	                        var options = extend({},
	                            filterable,
	                            columnFilterable,
	                            {
	                                dataSource: that.dataSource,
	                                values: columns[idx].values,
	                                format: columns[idx].format,
	                                closeCallback: closeCallback,
	                                title: columns[idx].title || columns[idx].field,
	                                init: filterInit,
	                                pane: that.pane,
	                                change: filterHandler
	                            }
	                        );

	                        if (columnFilterable && columnFilterable.messages) {
	                            options.messages = extend(true, {}, filterable.messages, columnFilterable.messages);
	                        }
	                        if (columnFilterable && columnFilterable.dataSource) {
	                            options.forceUnique = false;
	                            options.checkSource = columnFilterable.dataSource;
	                        }

	                        if (columnFilterable && columnFilterable.multi) {
	                            cell.kendoFilterMultiCheck(options);
	                        } else {
	                            cell.kendoFilterMenu(options);
	                        }
	                    }
	                }
	            }
	        },

	        _filterRow: function() {
	            var that = this;
	            if (!that._hasFilterRow()) {
	               return;
	            }

	            var settings;
	            var $angular = that.options.$angular;
	            var columns = leafColumns(that.columns),
	                filterable = that.options.filterable,
	                rowheader = that.thead.find(".k-filter-row"),
	                filterHandler = function(e) {
	                    if (that.trigger("filter", { filter: e.filter, field: e.field })) {
	                        e.preventDefault();
	                    }
	                };


	            this._updateHeader(this.dataSource.group().length);

	            for (var i = 0; i < columns.length; i++) {
	                var suggestDataSource,
	                    col = columns[i],
	                    operators = that.options.filterable.operators,
	                    customDataSource = false,
	                    th = $("<th/>"),
	                    field = col.field;

	                if (col.hidden) {
	                    th.hide();
	                }
	                rowheader.append(th);
	                if (field && col.filterable !== false) {
	                    var cellOptions = col.filterable && col.filterable.cell || {};

	                    suggestDataSource = that.options.dataSource;
	                    if (suggestDataSource instanceof DataSource) {
	                        suggestDataSource = that.options.dataSource.options;
	                    }

	                    var messages = extend(true, {}, filterable.messages);
	                    if (col.filterable) {
	                        extend(true, messages, col.filterable.messages);
	                    }

	                    if (cellOptions.enabled === false) {
	                        th.html("&nbsp;");
	                        continue;
	                    }
	                    if (cellOptions.dataSource) {
	                        suggestDataSource = cellOptions.dataSource;
	                        customDataSource = true;
	                    }
	                    if (col.filterable && col.filterable.operators) {
	                        operators =  col.filterable.operators;
	                    }

	                    settings = {
	                        column: col,
	                        dataSource: that.dataSource,
	                        suggestDataSource: suggestDataSource,
	                        customDataSource: customDataSource,
	                        field: field,
	                        messages: messages,
	                        values: col.values,
	                        template: cellOptions.template,
	                        delay: cellOptions.delay,
	                        inputWidth: cellOptions.inputWidth,
	                        suggestionOperator: cellOptions.suggestionOperator,
	                        minLength: cellOptions.minLength,
	                        dataTextField: cellOptions.dataTextField,
	                        operator: cellOptions.operator,
	                        operators: operators,
	                        showOperators: cellOptions.showOperators,
	                        change: filterHandler
	                    };

	                    if ($angular) {
	                        settings.$angular = $angular;
	                    }

	                    $("<span/>").attr(kendo.attr("field"), field)
	                        .appendTo(th)
	                        .kendoFilterCell(settings);
	                } else {
	                    th.html("&nbsp;");
	                }
	            }
	        },

	        _sortable: function() {
	            var that = this,
	                columns = leafColumns(that.columns),
	                column,
	                sorterInstance,
	                cell,
	                sortable = that.options.sortable,
	                sortHandler = function(e) {
	                    if (that.trigger("sort", { sort: e.sort })) {
	                        e.preventDefault();
	                    }
	                };


	            if (sortable) {
	                var cells = leafDataCells(that.thead);

	                for (var idx = 0, length = cells.length; idx < length; idx++) {
	                    column = columns[idx];

	                    if (column.sortable !== false && !column.command && column.field) {
	                        cell = cells.eq(idx);

	                        sorterInstance = cell.data("kendoColumnSorter");

	                        if (sorterInstance) {
	                            sorterInstance.destroy();
	                        }

	                        cell.attr("data-" + kendo.ns +"field", column.field)
	                            .kendoColumnSorter(
	                                extend({}, sortable, column.sortable, {
	                                    dataSource: that.dataSource,
	                                    aria: true,
	                                    filter: ":not(.k-column-active)",
	                                    change: sortHandler
	                                })
	                            );
	                    }
	                }
	                cells = null;
	            }
	        },

	        _columns: function(columns) {
	            var that = this,
	                table = that.table,
	                encoded,
	                cols = table.find("col"),
	                lockedCols,
	                dataSource = that.options.dataSource;

	            // using HTML5 data attributes as a configuration option e.g. <th data-field="foo">Foo</foo>
	            columns = columns.length ? columns : map(table.find("th"), function(th, idx) {
	                th = $(th);
	                var sortable = th.attr(kendo.attr("sortable")),
	                    filterable = th.attr(kendo.attr("filterable")),
	                    type = th.attr(kendo.attr("type")),
	                    groupable = th.attr(kendo.attr("groupable")),
	                    field = th.attr(kendo.attr("field")),
	                    title = th.attr(kendo.attr("title")),
	                    menu = th.attr(kendo.attr("menu"));

	                if (!field) {
	                   field = th.text().replace(/\s|[^A-z0-9]/g, "");
	                }

	                return {
	                    field: field,
	                    type: type,
	                    title: title,
	                    sortable: sortable !== "false",
	                    filterable: filterable !== "false",
	                    groupable: groupable !== "false",
	                    menu: menu,
	                    template: th.attr(kendo.attr("template")),
	                    width: cols.eq(idx).css("width")
	                };
	            });

	            encoded = !(that.table.find("tbody tr").length > 0 && (!dataSource || !dataSource.transport));

	            if (that.options.scrollable) {
	                var initialColumns = columns;
	                lockedCols = lockedColumns(columns);
	                columns = nonLockedColumns(columns);

	                if (lockedCols.length > 0 && columns.length === 0) {
	                    throw new Error("There should be at least one non locked column");
	                }

	                normalizeHeaderCells(that.element.find("tr:has(th):first"), initialColumns);
	                columns = lockedCols.concat(columns);
	            }

	            that.columns = normalizeColumns(columns, encoded);
	        },

	        _groups: function() {
	            var group = this.dataSource.group();

	            return group ? group.length : 0;
	        },

	        _tmpl: function(rowTemplate, columns, alt, skipGroupCells) {
	            var that = this,
	                settings = extend({}, kendo.Template, that.options.templateSettings),
	                idx,
	                length = columns.length,
	                template,
	                state = { storage: {}, count: 0 },
	                column,
	                type,
	                hasDetails = that._hasDetails(),
	                className = [],
	                groups = that._groups(),
	                navigatable = that.options.navigatable;

	            if (!rowTemplate) {
	                rowTemplate = "<tr";

	                if (alt) {
	                    className.push("k-alt");
	                }

	                if (hasDetails) {
	                    className.push("k-master-row");
	                }

	                if (className.length) {
	                    rowTemplate += ' class="' + className.join(" ") + '"';
	                }

	                if (length) { // data item is an object
	                    rowTemplate += ' ' + kendo.attr("uid") + '="#=' + kendo.expr("uid", settings.paramName) + '#"';
	                }

	                rowTemplate += " role='row'>";

	                if (groups > 0 && !skipGroupCells) {
	                    rowTemplate += groupCells(groups);
	                }

	                if (hasDetails) {
	                    rowTemplate += '<td class="k-hierarchy-cell"><a class="k-icon k-i-expand" href="\\#" tabindex="-1"></a></td>';
	                }

	                for (idx = 0; idx < length; idx++) {
	                    column = columns[idx];
	                    template = column.template;
	                    type = typeof template;
	                    rowTemplate += "<td" + stringifyAttributes(column.attributes);

	                    if (navigatable) {
	                        rowTemplate += " aria-describedby='" + column.headerAttributes.id + "'";
	                    }

	                    rowTemplate += " role='gridcell'>";
	                    rowTemplate += that._cellTmpl(column, state);

	                    rowTemplate += "</td>";
	                }

	                rowTemplate += "</tr>";
	            }

	            rowTemplate = kendo.template(rowTemplate, settings);

	            if (state.count > 0) {
	                return proxy(rowTemplate, state.storage);
	            }

	            return rowTemplate;
	        },

	        _headerCellText: function(column) {
	            var that = this,
	                settings = extend({}, kendo.Template, that.options.templateSettings),
	                template = column.headerTemplate,
	                type = typeof(template),
	                text = column.title || column.field || "";

	            if (type === FUNCTION) {
	                text = kendo.template(template, settings)({});
	            } else if (type === STRING) {
	                text = template;
	            }
	            return text;
	        },

	        _cellTmpl: function(column, state) {
	            var that = this,
	                settings = extend({}, kendo.Template, that.options.templateSettings),
	                template = column.template,
	                paramName = settings.paramName,
	                field = column.field,
	                html = "",
	                idx,
	                length,
	                format = column.format,
	                type = typeof template,
	                columnValues = column.values;

	            if (column.command) {
	                if (isArray(column.command)) {
	                    for (idx = 0, length = column.command.length; idx < length; idx++) {
	                        if(column.command[idx].visible) {
	                            html += kendo.format("#= {0}(data)? '{1}':'' #",column.command[idx].visible, that._createButton(column.command[idx]).replace(templateHashRegExp, "\\#"));
	                        } else {
	                            html += that._createButton(column.command[idx]).replace(templateHashRegExp, "\\#");
	                        }
	                    }
	                    return html;
	                }
	                return that._createButton(column.command).replace(templateHashRegExp, "\\#");
	            }
	            if (type === FUNCTION) {
	                state.storage["tmpl" + state.count] = template;
	                html += "#=this.tmpl" + state.count + "(" + paramName + ")#";
	                state.count ++;
	            } else if (type === STRING) {
	                html += template;
	            } else if (columnValues && columnValues.length && isPlainObject(columnValues[0]) && "value" in columnValues[0] && field) {
	                html += "#var v =" + kendo.stringify(convertToObject(columnValues)).replace(templateHashRegExp, "\\#") + "#";
	                html += "#var f = v[";

	                if (!settings.useWithBlock) {
	                    html += paramName + ".";
	                }

	                html += field + "]#";
	                html += "${f != null ? f : ''}";
	            } else {
	                html += column.encoded ? "#:" : "#=";

	                if (format) {
	                    html += 'kendo.format(\"' + format.replace(formatRegExp,"\\$1") + '\",';
	                }

	                if (field) {
	                    field = kendo.expr(field, paramName);
	                    html += field + "==null?'':" + field;
	                } else {
	                    html += "''";
	                }

	                if (format) {
	                    html += ")";
	                }

	                html += "#";
	            }
	            return html;
	        },

	        _templates: function() {
	            var that = this,
	                options = that.options,
	                dataSource = that.dataSource,
	                groups = dataSource.group(),
	                footer = that.footer || that.wrapper.find(".k-grid-footer"),
	                aggregates = dataSource.aggregate(),
	                columnLeafs = leafColumns(that.columns),
	                columnsLocked = leafColumns(lockedColumns(that.columns)),
	                columns = options.scrollable ? leafColumns(nonLockedColumns(that.columns)) : columnLeafs;

	            if (options.scrollable && columnsLocked.length) {
	                if (options.rowTemplate || options.altRowTemplate) {
	                    throw new Error("Having both row template and locked columns is not supported");
	                }

	                that.rowTemplate = that._tmpl(options.rowTemplate, columns, false, true);
	                that.altRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, columns, true, true);

	                that.lockedRowTemplate = that._tmpl(options.rowTemplate, columnsLocked);
	                that.lockedAltRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, columnsLocked, true);
	            } else {
	                that.rowTemplate = that._tmpl(options.rowTemplate, columns);
	                that.altRowTemplate = that._tmpl(options.altRowTemplate || options.rowTemplate, columns, true);
	            }

	            if (that._hasDetails()) {
	                that.detailTemplate = that._detailTmpl(options.detailTemplate || "");
	            }

	            if ((that._group && !isEmptyObject(aggregates)) || (!isEmptyObject(aggregates) && !footer.length) ||
	                grep(columnLeafs, function(column) { return column.footerTemplate; }).length) {

	                that.footerTemplate = that._footerTmpl(columnLeafs, aggregates, "footerTemplate", "k-footer-template");
	            }

	            if (groups && grep(columnLeafs, function(column) { return column.groupFooterTemplate; }).length) {
	                aggregates = $.map(groups, function(g) { return g.aggregates; });

	                that.groupFooterTemplate = that._footerTmpl(columns, aggregates, "groupFooterTemplate", "k-group-footer", columnsLocked.length);

	                if (options.scrollable && columnsLocked.length) {
	                    that.lockedGroupFooterTemplate = that._footerTmpl(columnsLocked, aggregates, "groupFooterTemplate", "k-group-footer");
	                }
	            }

	            if (that.options.noRecords) {
	                that.noRecordsTemplate = that._noRecordsTmpl();
	            }
	        },

	        _noRecordsTmpl: function () {
	            var wrapper = '<div class="{0}">{1}</div>';
	            var defaultTemplate = '<div class="k-grid-norecords-template"{1}>{0}</div>';
	            var scrollableNoGridHeightStyles = (this.options.scrollable && !this.wrapper[0].style.height) ? ' style="margin:0 auto;position:static;"' : '';
	            var state = { storage: {}, count: 0 };
	            var settings = $.extend({}, kendo.Template, this.options.templateSettings);
	            var paramName = settings.paramName;
	            var template;
	            var html = "";
	            var type;
	            var tmpl;

	            if (this.options.noRecords.template) {
	                template = this.options.noRecords.template;
	            } else {
	                template = kendo.format(defaultTemplate, this.options.messages.noRecords, scrollableNoGridHeightStyles);
	            }

	            type = typeof template;
	            if (type === "function") {
	                state.storage["tmpl" + state.count] = template;
	                html += "#=this.tmpl" + state.count + "(" + paramName + ")#";
	                state.count ++;
	            } else if (type === "string") {
	                html += template;
	            }

	            tmpl = kendo.template(kendo.format(wrapper, NORECORDSCLASS, html), settings);

	            if (state.count > 0) {
	                tmpl = $.proxy(tmpl, state.storage);
	            }

	            return tmpl;
	        },

	        _footerTmpl: function(columns, aggregates, templateName, rowClass, skipGroupCells) {
	            var that = this,
	                settings = extend({}, kendo.Template, that.options.templateSettings),
	                paramName = settings.paramName,
	                html = "",
	                idx,
	                length,
	                template,
	                type,
	                storage = {},
	                count = 0,
	                scope = {},
	                groups = that._groups(),
	                fieldsMap = that.dataSource._emptyAggregates(aggregates),
	                column;

	            html += '<tr class="' + rowClass + '">';

	            if (groups > 0 && !skipGroupCells) {
	                html += groupCells(groups);
	            }

	            if (that._hasDetails()) {
	                html += '<td class="k-hierarchy-cell">&nbsp;</td>';
	            }

	            for (idx = 0, length = columns.length; idx < length; idx++) {
	                column = columns[idx];
	                template = column[templateName];
	                type = typeof template;

	                html += "<td" + stringifyAttributes(column.footerAttributes) + ">";

	                if (template) {
	                    if (type !== FUNCTION) {
	                        scope = fieldsMap[column.field] ? extend({}, settings, { paramName: paramName + "['" + column.field + "']" }) : {};
	                        template = kendo.template(template, scope);
	                    }

	                    storage["tmpl" + count] = template;
	                    html += "#=this.tmpl" + count + "(" + paramName + ")#";
	                    count ++;
	                } else {
	                    html += "&nbsp;";
	                }

	                html += "</td>";
	            }

	            html += '</tr>';

	            html = kendo.template(html, settings);

	            if (count > 0) {
	                return proxy(html, storage);
	            }

	            return html;
	        },

	        _detailTmpl: function(template) {
	            var that = this,
	                html = "",
	                settings = extend({}, kendo.Template, that.options.templateSettings),
	                paramName = settings.paramName,
	                templateFunctionStorage = {},
	                templateFunctionCount = 0,
	                groups = that._groups(),
	                colspan = visibleColumns(leafColumns(that.columns)).length,
	                type = typeof template;

	            html += '<tr class="k-detail-row">';
	            if (groups > 0) {
	                html += groupCells(groups);
	            }
	            html += '<td class="k-hierarchy-cell"></td><td class="k-detail-cell"' + (colspan? ' colspan="' + colspan + '"' : '') + ">";

	            if (type === FUNCTION) {
	                templateFunctionStorage["tmpl" + templateFunctionCount] = template;
	                html += "#=this.tmpl" + templateFunctionCount + "(" + paramName + ")#";
	                templateFunctionCount ++;
	            } else {
	                html += template;
	            }

	            html += "</td></tr>";

	            html = kendo.template(html, settings);

	            if (templateFunctionCount > 0) {
	                return proxy(html, templateFunctionStorage);
	            }

	            return html;
	        },

	        _hasDetails: function() {
	            var that = this;

	            return that.options.detailTemplate !== null  || (that._events[DETAILINIT] || []).length;
	        },
	        _hasFilterRow: function() {
	            var filterable = this.options.filterable;
	            var hasFiltering = filterable &&
	                    typeof filterable.mode == STRING &&
	                    filterable.mode.indexOf("row") != -1;
	            var columns = this.columns;
	            var columnsWithoutFiltering = $.grep(columns, function(col) {
	                return col.filterable === false;
	            });

	            if (columns.length && columnsWithoutFiltering.length == columns.length) {
	                hasFiltering = false;
	            }

	            return hasFiltering;
	        },

	        _details: function() {
	            var that = this;

	            if (that.options.scrollable && that._hasDetails() && lockedColumns(that.columns).length) {
	                throw new Error("Having both detail template and locked columns is not supported");
	            }

	            that.table.on(CLICK + NS, ".k-hierarchy-cell .k-i-expand, .k-hierarchy-cell .k-i-collapse", function(e) {
	                var button = $(this),
	                    expanding = button.hasClass("k-i-expand"),
	                    masterRow = button.closest("tr.k-master-row"),
	                    detailRow,
	                    detailTemplate = that.detailTemplate,
	                    data,
	                    hasDetails = that._hasDetails();

	                button.toggleClass("k-i-expand", !expanding)
	                    .toggleClass("k-i-collapse", expanding);

	                detailRow = masterRow.next();

	                if (hasDetails && !detailRow.hasClass("k-detail-row")) {
	                    data = that.dataItem(masterRow);

	                    detailRow = $(detailTemplate(data))
	                        .addClass(masterRow.hasClass("k-alt") ? "k-alt" : "")
	                        .insertAfter(masterRow);

	                    that.angular("compile", function(){
	                        return {
	                            elements: detailRow.get(),
	                            data: [ { dataItem: data } ]
	                        };
	                    });

	                    that.trigger(DETAILINIT, { masterRow: masterRow, detailRow: detailRow, data: data, detailCell: detailRow.find(".k-detail-cell") });
	                }

	                that.trigger(expanding ? DETAILEXPAND : DETAILCOLLAPSE, { masterRow: masterRow, detailRow: detailRow});
	                detailRow.toggle(expanding);

	                if (that._current) {
	                    that._current.attr("aria-expanded", expanding);
	                }

	                e.preventDefault();
	                return false;
	            });
	        },

	        dataItem: function(tr) {
	            tr = $(tr)[0];
	            if (!tr) {
	                return null;
	            }

	            var rows = this.tbody.children(),
	                classesRegEx = /k-grouping-row|k-detail-row|k-group-footer/,
	                idx = tr.sectionRowIndex,
	                j, correctIdx;

	            correctIdx = idx;

	            for (j = 0; j < idx; j++) {
	                if (classesRegEx.test(rows[j].className)) {
	                    correctIdx--;
	                }
	            }

	            return this._data[correctIdx];
	        },

	        expandRow: function(tr) {
	            $(tr).find('> td .k-i-expand').click();
	        },

	        collapseRow: function(tr) {
	            $(tr).find('> td .k-i-collapse').click();
	        },

	        _createHeaderCells: function(columns, rowSpan) {
	            var that = this,
	                idx,
	                th,
	                text,
	                html = "",
	                length,
	                leafs = leafColumns(that.columns),
	                field;

	            for (idx = 0, length = columns.length; idx < length; idx++) {
	                th = columns[idx].column || columns[idx];
	                text = that._headerCellText(th);
	                field = "";

	                var index = inArray(th, leafs);

	                if (!th.command) {
	                    if (th.field) {
	                        field = kendo.attr("field") + "='" + th.field + "' ";
	                    }

	                    html += "<th scope='col' role='columnheader' " + field;
	                    html += " aria-haspopup='true'";

	                    if (rowSpan && !columns[idx].colSpan) {
	                        html += " rowspan='" + rowSpan + "'";
	                    }

	                    if (columns[idx].colSpan > 1) {
	                        html += 'colspan="' + (columns[idx].colSpan - hiddenLeafColumnsCount(th.columns)) + '" ';
	                        html += kendo.attr("colspan") + "='" + columns[idx].colSpan + "'";
	                    }

	                    if (th.title) {
	                        html += kendo.attr("title") + '="' + th.title.replace('"', '&quot;').replace(/'/g, "\'") + '" ';
	                    }

	                    if (th.groupable !== undefined) {
	                        html += kendo.attr("groupable") + "='" + th.groupable + "' ";
	                    }

	                    if (th.aggregates && th.aggregates.length) {
	                        html += kendo.attr("aggregates") + "='" + th.aggregates + "'";
	                    }

	                    if (index > -1) {
	                        html += kendo.attr("index") + "='" + index + "'";
	                    }

	                    html += stringifyAttributes(th.headerAttributes);

	                    html += ">" + text + "</th>";
	                } else {
	                    html += "<th scope='col'" + stringifyAttributes(th.headerAttributes);

	                    if (rowSpan && !columns[idx].colSpan) {
	                        html += " rowspan='" + rowSpan + "'";
	                    }

	                    if (index > -1) {
	                        html += kendo.attr("index") + "='" + index + "'";
	                    }

	                    html += ">" + text + "</th>";
	                }
	            }
	            return html;
	        },

	        _appendLockedColumnContent: function() {
	            var columns = this.columns,
	                idx,
	                colgroup = this.table.find("colgroup"),
	                cols = colgroup.find("col:not(.k-group-col,.k-hierarchy-col)"),
	                length,
	                lockedCols = $(),
	                skipHiddenCount = 0,
	                container,
	                colSpan,
	                spanIdx,
	                colOffset = 0;

	            for (idx = 0, length = columns.length; idx < length; idx++) {
	                if (columns[idx].locked) {

	                    if (isVisible(columns[idx])) {
	                        colSpan = 1;

	                        if (columns[idx].columns) {
	                            colSpan = leafColumns(columns[idx].columns).length - hiddenLeafColumnsCount(columns[idx].columns);
	                        }

	                        colSpan = colSpan || 1;
	                        for (spanIdx = 0; spanIdx < colSpan; spanIdx++) {
	                            lockedCols = lockedCols.add(cols.eq(idx + colOffset + spanIdx - skipHiddenCount));
	                        }
	                        colOffset += colSpan - 1;
	                    } else {
	                        skipHiddenCount ++;
	                    }
	                }
	            }

	            container = $('<div class="k-grid-content-locked"><table' + (isIE7 ? ' cellspacing="0"' : '') + '><colgroup/><tbody></tbody></table></div>');
	            // detach is required for IE8, otherwise it switches to compatibility mode
	            colgroup.detach();
	            container.find("colgroup").append(lockedCols);
	            colgroup.insertBefore(this.table.find("tbody"));

	            this.lockedContent = container.insertBefore(this.content);
	            this.lockedTable = container.children("table");
	        },

	        _appendLockedColumnFooter: function() {
	            var that = this;
	            var footer = that.footer;
	            var cells = footer.find(".k-footer-template>td");
	            var cols = footer.find(".k-grid-footer-wrap>table>colgroup>col");
	            var html = $('<div class="k-grid-footer-locked"><table><colgroup /><tbody><tr class="k-footer-template"></tr></tbody></table></div>');
	            var idx, length;
	            var groups = that._groups();
	            var lockedCells = $(), lockedCols = $();

	            lockedCells = lockedCells.add(cells.filter(".k-group-cell"));
	            for (idx = 0, length = leafColumns(lockedColumns(that.columns)).length; idx < length; idx++) {
	                lockedCells = lockedCells.add(cells.eq(idx + groups));
	            }

	            lockedCols = lockedCols.add(cols.filter(".k-group-col"));
	            for (idx = 0, length = visibleColumns(leafColumns(visibleLockedColumns(that.columns))).length; idx < length; idx++) {
	                lockedCols = lockedCols.add(cols.eq(idx + groups));
	            }

	            lockedCells.appendTo(html.find("tr"));
	            lockedCols.appendTo(html.find("colgroup"));
	            that.lockedFooter = html.prependTo(footer);
	        },

	        _appendLockedColumnHeader: function(container) {
	            var that = this,
	                columns = this.columns,
	                idx,
	                html,
	                length,
	                colgroup,
	                tr,
	                trFilter,
	                table,
	                header,
	                filtercellCells,
	                rows = [],
	                skipHiddenCount = 0,
	                cols = $(),
	                hasFilterRow = that._hasFilterRow(),
	                filterCellOffset = 0,
	                filterCells = $(),
	                cell,
	                leafColumnsCount = 0,
	                cells = $();

	            colgroup = that.thead.prev().find("col:not(.k-group-col,.k-hierarchy-col)");
	            header = that.thead.find("tr:first .k-header:not(.k-group-cell,.k-hierarchy-cell)");
	            filtercellCells = that.thead.find(".k-filter-row").find("th:not(.k-group-cell,.k-hierarchy-cell)");

	            var colOffset = 0;
	            for (idx = 0, length = columns.length; idx < length; idx++) {
	                if (columns[idx].locked) {
	                    cell = header.eq(idx);
	                    leafColumnsCount = leafColumns(columns[idx].columns || []).length;

	                    if (isVisible(columns[idx])) {
	                        var colSpan = null;

	                        if (columns[idx].columns) {
	                            colSpan = leafColumnsCount - hiddenLeafColumnsCount(columns[idx].columns);
	                        }

	                        colSpan = colSpan || 1;
	                        for (var spanIdx = 0; spanIdx < colSpan; spanIdx++) {
	                            cols = cols.add(colgroup.eq(idx + colOffset + spanIdx - skipHiddenCount));
	                        }
	                        colOffset += colSpan - 1;
	                    }

	                    mapColumnToCellRows([columns[idx]], childColumnsCells(cell), rows, 0, 0);

	                    leafColumnsCount = leafColumnsCount || 1;
	                    for (var j = 0; j < leafColumnsCount; j++) {
	                        filterCells = filterCells.add(filtercellCells.eq(filterCellOffset + j));
	                    }
	                    filterCellOffset += leafColumnsCount;
	                }

	                if (columns[idx].columns) {
	                    skipHiddenCount += hiddenLeafColumnsCount(columns[idx].columns);
	                }

	                if (!isVisible(columns[idx])) {
	                    skipHiddenCount++;
	                }
	            }

	            if (rows.length) {
	                html = '<div class="k-grid-header-locked" style="width:1px"><table' + (isIE7 ? ' cellspacing="0"' : '') + '><colgroup/><thead>';
	                html += new Array(rows.length + 1).join("<tr></tr>");
	                html += (hasFilterRow ? '<tr class="k-filter-row" />' : '') + '</thead></table></div>';

	                table = $(html);

	                colgroup = table.find("colgroup");
	                colgroup.append(that.thead.prev().find("col.k-group-col").add(cols));

	                tr = table.find("thead tr:not(.k-filter-row)");
	                for (idx = 0, length = rows.length; idx < length; idx++) {
	                    cells = toJQuery(rows[idx]);
	                    tr.eq(idx).append(that.thead.find("tr:eq(" + idx + ") .k-group-cell").add(cells));
	                }

	                var count = removeEmptyRows(this.thead);
	                if (rows.length < count) {
	                    removeRowSpanValue(table, count - rows.length);
	                }

	                trFilter = table.find(".k-filter-row");
	                trFilter.append(that.thead.find(".k-filter-row .k-group-cell").add(filterCells));

	                this.lockedHeader = table.prependTo(container);
	                this.thead.find(".k-group-cell").remove();

	                return true;
	            }
	            return false;
	        },

	        _removeLockedContainers: function() {
	            var elements = this.lockedHeader
	                .add(this.lockedContent)
	                .add(this.lockedFooter);

	            kendo.destroy(elements);
	            elements.off(NS).remove();

	            this.lockedHeader = this.lockedContent = this.lockedFooter = null;
	            this.selectable = null;
	        },

	        _thead: function() {
	            var that = this,
	                columns = that.columns,
	                hasDetails = that._hasDetails() && columns.length,
	                hasFilterRow = that._hasFilterRow(),
	                idx,
	                html = "",
	                thead = that.table.find(">thead"),
	                hasTHead = that.element.find("thead:first").length > 0,
	                tr;

	            if (!thead.length) {
	                thead = $("<thead/>").insertBefore(that.tbody);
	            }

	            if (that.lockedHeader && that.thead) {
	                tr = that.thead.find("tr:has(th):not(.k-filter-row)").html("");
	                tr.remove();
	                tr = $();

	                that._removeLockedContainers();
	            } else if (hasTHead) {
	                tr = that.element.find("thead:first tr:has(th):not(.k-filter-row)");
	            } else {
	                tr = that.element.find("tr:has(th):first");
	            }

	            if (!tr.length) {
	                tr = thead.children().first();
	                if (!tr.length) {
	                   var rows = [{ rowSpan: 1, cells: [], index: 0 }];
	                   that._prepareColumns(rows, columns);

	                   for (idx = 0; idx < rows.length; idx++) {
	                       html += "<tr>";
	                       if (hasDetails) {
	                           html += '<th class="k-hierarchy-cell" scope="col">&nbsp;</th>';
	                       }
	                       html += that._createHeaderCells(rows[idx].cells, rows[idx].rowSpan);
	                       html += "</tr>";
	                   }

	                   tr = $(html);
	               }
	            }

	            if (hasFilterRow) {
	                var filterRow = $("<tr/>");
	                filterRow.addClass("k-filter-row");
	                if (hasDetails || tr.find(".k-hierarchy-cell").length) { // handles server side detail template
	                    filterRow.prepend('<th class="k-hierarchy-cell" scope="col">&nbsp;</th>');
	                }

	                var existingFilterRow = (that.thead || thead).find(".k-filter-row");
	                if (existingFilterRow.length) {
	                    kendo.destroy(existingFilterRow);
	                    existingFilterRow.remove();
	                }

	                thead.append(filterRow);
	            }

	            if (!tr.children().length) {
	                html = "";
	                if (hasDetails) {
	                    html += '<th class="k-hierarchy-cell" scope="col">&nbsp;</th>';
	                }

	                html += that._createHeaderCells(columns);

	                tr.html(html);
	            } else if (hasDetails && !tr.find(".k-hierarchy-cell")[0]) {
	                tr.prepend('<th class="k-hierarchy-cell" scope="col">&nbsp;</th>');
	            }

	            tr.attr("role", "row").find("th").addClass("k-header");

	            if(!that.options.scrollable) {
	                thead.addClass("k-grid-header");
	            }

	            tr.find("script").remove().end().prependTo(thead);

	            if (that.thead) {
	                that._destroyColumnAttachments();
	            }

	            this.angular("cleanup", function(){
	                return {
	                    elements: thead.find("th").get()
	                };
	            });

	            this.angular("compile", function(){
	                return {
	                    elements: thead.find("th").get(),
	                    data: map(columns, function(col) { return { column: col }; })
	                };
	            });

	            that.thead = thead.attr("role", "rowgroup");

	            that._sortable();

	            that._filterable();

	            that._filterRow();

	            that._scrollable();

	            that._updateCols();

	            that._columnMenu();

	            var syncHeight;
	            var hasLockedColumns = this.options.scrollable && lockedColumns(this.columns).length;

	            if (hasLockedColumns) {

	                syncHeight = that._appendLockedColumnHeader(that.thead.closest(".k-grid-header"));

	                that._appendLockedColumnContent();

	                that.lockedContent.bind("DOMMouseScroll" + NS + " mousewheel" + NS, proxy(that._wheelScroll, that));
	            }

	            that._updateColumnCellIndex();

	            that._updateFirstColumnClass();

	            that._resizable();

	            that._draggable();

	            that._reorderable();

	            that._updateHeader(that._groups());

	            if (hasLockedColumns) {
	                if (syncHeight) {
	                    that._syncLockedHeaderHeight();
	                }

	                that._applyLockedContainersWidth();
	            }

	            if (that.groupable) {
	                that._attachGroupable();
	            }
	        },

	        _retrieveFirstColumn: function(columns, rows) {
	            var result = $();

	            if (rows.length && columns[0]) {
	                var column = columns[0];

	                while(column.columns && column.columns.length) {
	                    column = column.columns[0];
	                    rows = rows.filter(":not(:first())");
	                }

	                result = result.add(rows);
	            }

	            return result;
	        },

	        _updateFirstColumnClass: function() {
	            var that = this,
	                columns = that.columns || [],
	                hasDetails = that._hasDetails() && columns.length;

	            if (!hasDetails && !that._groups()) {
	                var tr = that.thead.find(">tr:not(.k-filter-row):not(:first)");
	                columns = nonLockedColumns(columns);

	                var rows = that._retrieveFirstColumn(columns, tr);

	                if (that._isLocked()) {
	                    tr = that.lockedHeader.find("thead>tr:not(.k-filter-row):not(:first)");
	                    columns = lockedColumns(that.columns);

	                    rows = rows.add(that._retrieveFirstColumn(columns, tr));
	                }

	                rows.each(function() {
	                    var ths = $(this).find("th");
	                    ths.removeClass("k-first");
	                    ths.eq(0).addClass("k-first");
	                });
	            }
	        },

	        _prepareColumns: function(rows, columns, parentCell, parentRow) {
	            var row = parentRow || rows[rows.length - 1];

	            var childRow = rows[row.index + 1];
	            var totalColSpan = 0;

	            for (var idx = 0; idx < columns.length; idx++) {
	                var cell = { column: columns[idx], colSpan: 0 };
	                row.cells.push(cell);

	                if (columns[idx].columns && columns[idx].columns.length) {
	                    if (!childRow) {
	                        childRow = { rowSpan: 0, cells: [], index: rows.length };
	                        rows.push(childRow);
	                    }
	                    cell.colSpan = columns[idx].columns.length;
	                    this._prepareColumns(rows, columns[idx].columns, cell, childRow);
	                    totalColSpan += cell.colSpan - 1;
	                    row.rowSpan = rows.length - row.index;
	                }
	            }
	            if (parentCell) {
	                parentCell.colSpan += totalColSpan;
	            }
	        },

	        _wheelScroll: function (e) {
	            if (e.ctrlKey) {
	                return;
	            }

	            var content = this.content;

	            if (this.options.scrollable.virtual) {
	                content = this.virtualScrollable.verticalScrollbar;
	            }

	            var scrollTop = content.scrollTop(),
	                delta = kendo.wheelDeltaY(e);

	            if (delta) {
	                e.preventDefault();
	                content.scrollTop(scrollTop + (-delta));
	            }
	        },

	        _isLocked: function() {
	            return this.lockedHeader != null;
	        },

	        _updateHeaderCols: function() {
	            var table = this.thead.parent().add(this.table);

	            if (this._isLocked()) {
	                normalizeCols(table, visibleLeafColumns(visibleNonLockedColumns(this.columns)), this._hasDetails(), 0);
	            } else {
	                normalizeCols(table, visibleLeafColumns(visibleColumns(this.columns)), this._hasDetails(), 0);
	            }
	        },

	        _updateCols: function(table) {
	            table = table || this.thead.parent().add(this.table);

	            this._appendCols(table, this._isLocked());
	        },

	        _updateLockedCols: function(table) {
	            if (this._isLocked()) {
	                table = table || this.lockedHeader.find("table").add(this.lockedTable);

	                normalizeCols(table, visibleLeafColumns(visibleLockedColumns(this.columns)), this._hasDetails(), this._groups());
	            }
	        },

	        _appendCols: function(table, locked) {
	            if (locked) {
	                normalizeCols(table, visibleLeafColumns(visibleNonLockedColumns(this.columns)), this._hasDetails(), 0);
	            } else {
	                normalizeCols(table, visibleLeafColumns(visibleColumns(this.columns)), this._hasDetails(), this._groups());
	            }
	        },

	        _autoColumns: function(schema) {
	            if (schema && schema.toJSON) {
	                var that = this,
	                    field,
	                    encoded;

	                schema = schema.toJSON();

	                encoded = !(that.table.find("tbody tr").length > 0 && (!that.dataSource || !that.dataSource.transport));

	                for (field in schema) {
	                    that.columns.push({ field: field, encoded: encoded, headerAttributes: {id: kendo.guid()} });
	                }

	                that._thead();

	                that._templates();
	            }
	        },

	        _rowsHtml: function(data, templates) {
	            var that = this,
	                html = "",
	                idx,
	                rowTemplate = templates.rowTemplate,
	                altRowTemplate = templates.altRowTemplate,
	                length;

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (idx % 2) {
	                    html += altRowTemplate(data[idx]);
	                } else {
	                    html += rowTemplate(data[idx]);
	                }

	                that._data.push(data[idx]);
	            }

	            return html;
	        },

	        _groupRowHtml: function(group, colspan, level, groupHeaderBuilder, templates, skipColspan) {
	            var that = this,
	                html = "",
	                idx,
	                length,
	                field = group.field,
	                column = grep(leafColumns(that.columns), function(column) { return column.field == field; })[0] || { },
	                template = column.groupHeaderTemplate,
	                text = (column.title || field) + ': ' + formatGroupValue(group.value, column.format, column.values, column.encoded),
	                footerDefaults = that._groupAggregatesDefaultObject || {},
	                aggregates = extend({}, footerDefaults, group.aggregates),
	                headerData = extend({}, { field: group.field, value: group.value, aggregates: aggregates }, group.aggregates[group.field]),
	                groupFooterTemplate = templates.groupFooterTemplate,
	                groupItems = group.items;

	            if (template) {
	                text  = typeof template === FUNCTION ? template(headerData) : kendo.template(template)(headerData);
	            }

	            html += groupHeaderBuilder(colspan, level, text);

	            if(group.hasSubgroups) {
	                for(idx = 0, length = groupItems.length; idx < length; idx++) {
	                    html += that._groupRowHtml(groupItems[idx], skipColspan ? colspan : colspan - 1, level + 1, groupHeaderBuilder, templates, skipColspan);
	                }
	            } else {
	                html += that._rowsHtml(groupItems, templates);
	            }

	            if (groupFooterTemplate) {
	                var footerData = {};
	                for (var aggregate in aggregates) {
	                    footerData[aggregate] = extend({}, aggregates[aggregate],
	                        { group: { field: group.field, value: group.value } }
	                    );
	                }

	                html += groupFooterTemplate(footerData);
	            }
	            return html;
	        },

	        collapseGroup: function(group) {
	            group = $(group);

	            var level,
	                groupable = this.options.groupable,
	                showFooter =  groupable.showFooter,
	                footerCount = showFooter ? 0 : 1,
	                offset,
	                relatedGroup = $(),
	                idx,
	                length,
	                tr;

	            if (this._isLocked()) {
	                if (!group.closest("div").hasClass("k-grid-content-locked")) {
	                    relatedGroup = group.nextAll("tr");
	                    group = this.lockedTable.find(">tbody>tr:eq(" + group.index() + ")");
	                } else {
	                    relatedGroup = this.tbody.children("tr:eq(" + group.index() + ")").nextAll("tr");
	                }
	            }

	            level = group.find(".k-group-cell").length;
	            group.find(".k-i-collapse").addClass("k-i-expand").removeClass("k-i-collapse");
	            group.find("td[aria-expanded='true']:first").attr("aria-expanded", false);
	            group = group.nextAll("tr");

	            var toHide = [];

	            for (idx = 0, length = group.length; idx < length; idx ++ ) {
	                tr = group.eq(idx);
	                offset = tr.find(".k-group-cell").length;

	                if (tr.hasClass("k-grouping-row")) {
	                    footerCount++;
	                } else if (tr.hasClass("k-group-footer")) {
	                    footerCount--;
	                }

	                if (offset <= level || (tr.hasClass("k-group-footer") && footerCount < 0)) {
	                    break;
	                }

	                if (relatedGroup.length) {
	                    toHide.push(relatedGroup[idx]);
	                }
	                toHide.push(tr[0]);
	            }

	            $(toHide).hide();
	        },

	        expandGroup: function(group) {
	            group = $(group);

	            var that = this,
	                showFooter = that.options.groupable.showFooter,
	                level,
	                tr,
	                offset,
	                relatedGroup = $(),
	                idx,
	                length,
	                footersVisibility = [],
	                groupsCount = 1;

	            if (this._isLocked()) {
	                if (!group.closest("div").hasClass("k-grid-content-locked")) {
	                    relatedGroup = group.nextAll("tr");
	                    group = this.lockedTable.find(">tbody>tr:eq(" + group.index() + ")");
	                } else {
	                    relatedGroup = this.tbody.children("tr:eq(" + group.index() + ")").nextAll("tr");
	                }
	            }

	            level = group.find(".k-group-cell").length;
	            group.find(".k-i-expand").addClass("k-i-collapse").removeClass("k-i-expand");
	            group.find("td[aria-expanded='false']:first").attr("aria-expanded", true);
	            group = group.nextAll("tr");

	            for (idx = 0, length = group.length; idx < length; idx ++ ) {
	                tr = group.eq(idx);
	                offset = tr.find(".k-group-cell").length;
	                if (offset <= level) {
	                    break;
	                }

	                if (offset == level + 1 && !tr.hasClass("k-detail-row")) {
	                    tr.show();
	                    relatedGroup.eq(idx).show();

	                    if (tr.hasClass("k-grouping-row") && tr.find(".k-icon").hasClass("k-i-collapse")) {
	                        that.expandGroup(tr);
	                    }

	                    if (tr.hasClass("k-master-row") && tr.find(".k-icon").hasClass("k-i-collapse")) {
	                        tr.next().show();
	                        relatedGroup.eq(idx + 1).show();
	                    }
	                }

	                if (tr.hasClass("k-grouping-row")) {
	                    if (showFooter) {
	                        footersVisibility.push(tr.is(":visible"));
	                    }
	                    groupsCount ++;
	                }

	                if (tr.hasClass("k-group-footer")) {
	                    if (showFooter) {
	                        tr.toggle(footersVisibility.pop());
	                    }
	                    if (groupsCount == 1) {
	                        tr.show();
	                        relatedGroup.eq(idx).show();
	                    } else {
	                        groupsCount --;
	                    }
	                }
	            }
	        },

	        _updateHeader: function(groups) {
	            var that = this,
	                container = that._isLocked() ? that.lockedHeader.find("thead") : that.thead,
	                filterCells = container.find("tr.k-filter-row").find("th.k-group-cell").length,
	                length = container.find("tr:first").find("th.k-group-cell").length,
	                rows = container.children("tr:not(:first)").filter(function() {
	                    return !$(this).children(":visible").length;
	                });

	            if(groups > length) {
	                $(new Array(groups - length + 1).join('<th class="k-group-cell k-header" scope="col">&nbsp;</th>')).prependTo(container.children("tr:not(.k-filter-row)"));
	                if (that.element.is(":visible")) {
	                    rows.find("th.k-group-cell").hide();
	                }
	            } else if(groups < length) {
	                container.find("tr").each(function() {
	                    $(this).find("th.k-group-cell")
	                        .filter(":eq(" + groups + ")," + ":gt(" + groups + ")").remove();
	                });
	            }
	            if(groups > filterCells) {
	                $(new Array(groups - filterCells + 1).join('<th class="k-group-cell k-header" scope="col">&nbsp;</th>')).prependTo(container.find(".k-filter-row"));
	            }
	        },

	        _firstDataItem: function(data, grouped) {
	            if(data && grouped) {
	                if(data.hasSubgroups) {
	                    data = this._firstDataItem(data.items[0], grouped);
	                } else {
	                    data = data.items[0];
	                }
	            }
	            return data;
	        },

	        _updateTablesWidth: function() {
	            var that = this,
	                tables;

	            if (!that._isLocked()) {
	                return;
	            }

	            tables =
	                $(">.k-grid-footer>.k-grid-footer-wrap>table", that.wrapper)
	                .add(that.thead.parent())
	                .add(that.table);

	            that._footerWidth = tableWidth(tables.eq(0));
	            tables.width(that._footerWidth);

	            tables =
	                $(">.k-grid-footer>.k-grid-footer-locked>table", that.wrapper)
	                .add(that.lockedHeader.find(">table"))
	                .add(that.lockedTable);

	            tables.width(tableWidth(tables.eq(0)));
	        },

	        hideColumn: function(column) {
	            var that = this,
	                cell,
	                tables,
	                idx,
	                cols,
	                colWidth,
	                position,
	                width = 0,
	                headerCellIndex,
	                length,
	                footer = that.footer || that.wrapper.find(".k-grid-footer"),
	                columns = that.columns,
	                visibleLocked = that.lockedHeader ? leafDataCells(that.lockedHeader.find(">table>thead")).filter(isCellVisible).length : 0,
	                columnIndex;

	            if (typeof column == "number") {
	                column = columns[column];
	            } else if (isPlainObject(column)) {
	                column = grep(flatColumns(columns), function(item) {
	                    return item === column;
	                })[0];
	            } else {
	                column = grep(flatColumns(columns), function(item) {
	                    return item.field === column;
	                })[0];
	            }

	            if (!column || !isVisible(column)) {
	                return;
	            }


	            if (column.columns && column.columns.length) {
	                position = columnVisiblePosition(column, columns);

	                setColumnVisibility(column, false);

	                setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr:eq(" + position.row + ")>th"), position.cell, false);

	                for (idx = 0; idx < column.columns.length; idx++) {
	                   this.hideColumn(column.columns[idx]);
	                }

	                that.trigger(COLUMNHIDE, { column: column });

	                return;
	            }

	            columnIndex = inArray(column, visibleColumns(leafColumns(columns)));
	            setColumnVisibility(column, false);

	            that._setParentsVisibility(column, false);

	            that._templates();

	            that._updateCols();
	            that._updateLockedCols();

	            var container = that.thead;

	            headerCellIndex = columnIndex;
	            if (that.lockedHeader && visibleLocked > columnIndex) {
	                container = that.lockedHeader.find(">table>thead");
	            } else {
	                headerCellIndex -= visibleLocked;
	            }

	            cell = leafDataCells(container).filter(isCellVisible).eq(headerCellIndex);
	            cell[0].style.display = "none";

	            setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr.k-filter-row>th"), columnIndex, false);
	            if (footer[0]) {
	                that._updateCols(footer.find(">.k-grid-footer-wrap>table"));
	                that._updateLockedCols(footer.find(">.k-grid-footer-locked>table"));
	                setCellVisibility(footer.find(".k-footer-template>td"), columnIndex, false);
	            }

	            if (that.lockedTable && visibleLocked > columnIndex) {
	                hideColumnCells(that.lockedTable.find(">tbody>tr"), columnIndex);
	            } else {
	                hideColumnCells(that.tbody.children(), columnIndex - visibleLocked);
	            }

	            if (that.lockedTable) {
	                that._updateTablesWidth();
	                that._applyLockedContainersWidth();
	                that._syncLockedContentHeight();
	                that._syncLockedHeaderHeight();
	                that._syncLockedFooterHeight();
	            } else {
	                cols = that.thead.prev().find("col");
	                for (idx = 0, length = cols.length; idx < length; idx += 1) {
	                    colWidth = cols[idx].style.width;
	                    if (colWidth && colWidth.indexOf("%") == -1) {
	                        width += parseInt(colWidth, 10);
	                    } else {
	                        width = 0;
	                        break;
	                    }
	                }

	                tables = $(">.k-grid-header table:first,>.k-grid-footer table:first",that.wrapper).add(that.table);
	                that._footerWidth = null;

	                if (width) {
	                    tables.each(function() {
	                        this.style.width = width + "px";
	                    });

	                    that._footerWidth = width;
	                }
	                if(browser.msie && browser.version == 8) {
	                    tables.css("display", "inline-table");
	                    setTimeout(function() {
	                        tables.css("display", "table");
	                    }, 1);
	                }
	            }

	            that._updateFirstColumnClass();
	            that.trigger(COLUMNHIDE, { column: column });
	        },

	        _setParentsVisibility: function(column, visible) {
	            var columns = this.columns;
	            var idx;
	            var parents = [];
	            var parent;
	            var position;
	            var cell;
	            var colSpan;

	            var predicate = visible ?
	                function(p) { return visibleColumns(p.columns).length && p.hidden; } :
	                function(p) { return !visibleColumns(p.columns).length && !p.hidden; };


	            if (columnParents(column, columns, parents) && parents.length) {
	                for (idx = parents.length - 1; idx >= 0; idx--) {
	                    parent = parents[idx];
	                    position = columnPosition(parent, columns);
	                    cell = elements($(">table>thead", this.lockedHeader), this.thead, ">tr:eq(" + position.row + ")>th:not(.k-group-cell):not(.k-hierarchy-cell)").eq(position.cell);

	                    if (predicate(parent)) {
	                        setColumnVisibility(parent, visible);
	                        cell[0].style.display = visible ? "" : "none";
	                    }

	                    if (cell.filter("[" + kendo.attr("colspan") + "]").length) {
	                        colSpan = parseInt(cell.attr(kendo.attr("colspan")), 10);
	                        cell[0].colSpan = (colSpan - hiddenLeafColumnsCount(parent.columns)) || 1;
	                    }
	                }
	            }
	        },

	        showColumn: function(column) {
	            var that = this,
	                idx,
	                length,
	                cell,
	                tables,
	                width,
	                headerCellIndex,
	                position,
	                colWidth,
	                cols,
	                columns = that.columns,
	                footer = that.footer || that.wrapper.find(".k-grid-footer"),
	                lockedColumnsCount = that.lockedHeader ? leafDataCells(that.lockedHeader.find(">table>thead")).length : 0,
	                columnIndex;

	            if (typeof column == "number") {
	                column = columns[column];
	            } else if (isPlainObject(column)) {
	                column = grep(flatColumns(columns), function(item) {
	                    return item === column;
	                })[0];
	            } else {
	                column = grep(flatColumns(columns), function(item) {
	                    return item.field === column;
	                })[0];
	            }

	            if (!column || isVisible(column)) {
	                return;
	            }

	            if (column.columns && column.columns.length) {
	                position =  columnPosition(column, columns);

	                setColumnVisibility(column, true);

	                setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr:eq(" + position.row + ")>th"), position.cell, true);

	                for (idx = 0; idx < column.columns.length; idx++) {
	                   this.showColumn(column.columns[idx]);
	                }

	                that.trigger(COLUMNSHOW, { column: column });

	                return;
	            }

	            columnIndex = inArray(column, leafColumns(columns));

	            setColumnVisibility(column, true);

	            that._setParentsVisibility(column, true);

	            that._templates();
	            that._updateCols();
	            that._updateLockedCols();

	            var container = that.thead;

	            headerCellIndex = columnIndex;
	            if (that.lockedHeader && lockedColumnsCount > columnIndex) {
	                container = that.lockedHeader.find(">table>thead");
	            } else {
	                headerCellIndex -= lockedColumnsCount;
	            }

	            cell = leafDataCells(container).eq(headerCellIndex);
	            cell[0].style.display = "";

	            setCellVisibility(elements($(">table>thead", that.lockedHeader), that.thead, ">tr.k-filter-row>th"), columnIndex, true);
	            if (footer[0]) {
	                that._updateCols(footer.find(">.k-grid-footer-wrap>table"));
	                that._updateLockedCols(footer.find(">.k-grid-footer-locked>table"));
	                setCellVisibility(footer.find(".k-footer-template>td"), columnIndex, true);
	            }

	            if (that.lockedTable && lockedColumnsCount > columnIndex) {
	                showColumnCells(that.lockedTable.find(">tbody>tr"), columnIndex);
	            } else {
	                showColumnCells(that.tbody.children(), columnIndex - lockedColumnsCount);
	            }

	            if (that.lockedTable) {
	                that._updateTablesWidth();
	                that._applyLockedContainersWidth();
	                that._syncLockedContentHeight();
	                that._syncLockedHeaderHeight();
	            } else {
	                tables = $(">.k-grid-header table:first,>.k-grid-footer table:first",that.wrapper).add(that.table);
	                if (!column.width) {
	                    tables.width("");
	                } else {
	                    width = 0;
	                    cols = that.thead.prev().find("col");
	                    for (idx = 0, length = cols.length; idx < length; idx += 1) {
	                        colWidth = cols[idx].style.width;
	                        if (colWidth.indexOf("%") > -1) {
	                            width = 0;
	                            break;
	                        }
	                        width += parseInt(colWidth, 10);
	                    }

	                    that._footerWidth = null;
	                    if (width) {
	                        tables.each(function() {
	                            this.style.width = width + "px";
	                        });
	                        that._footerWidth = width;
	                    }
	                }
	            }

	            that._updateFirstColumnClass();

	            that.trigger(COLUMNSHOW, { column: column });
	        },

	        _progress: function(toggle) {
	            var element = this.element;

	            if (this.lockedContent) {
	                element = this.wrapper;
	            } else if (this.element.is("table")) {
	                element = this.element.parent();
	            } else if (this.content && this.content.length) {
	                element = this.content;
	            }

	            kendo.ui.progress(element, toggle);
	        },

	        _resize: function(size, force) {

	            this._syncLockedContentHeight();
	            this._syncLockedHeaderHeight();

	            if (this.content) {
	                this._setContentWidth();
	                this._setContentHeight();
	            }
	            if (this.virtualScrollable && (force || this._rowHeight)) {
	                if (force) {
	                    this._rowHeight = null;
	                }
	                this.virtualScrollable.repaintScrollbar();
	            }
	        },

	        _isActiveInTable: function() {
	            var active = activeElement();

	            if (!active) { return false; }

	            return this.table[0] === active ||
	                $.contains(this.table[0], active) ||
	                (this._isLocked() &&
	                    (this.lockedTable[0] === active || $.contains(this.lockedTable[0], active))
	                );
	        },

	        refresh: function(e) {
	            var that = this,
	                data = that.dataSource.view(),
	                navigatable = that.options.navigatable,
	                currentIndex,
	                current = $(that.current()),
	                isCurrentInHeader = false,
	                groups = (that.dataSource.group() || []).length,
	                colspan = groups + visibleLeafColumns(visibleColumns(that.columns)).length;

	            if (e && e.action === "itemchange" && that.editable) { // skip rebinding if editing is in progress
	                return;
	            }

	            //someone remove the edited item
	            if (e && e.action === "remove" && that.editable &&
	                that.editable.options.model && inArray(that.editable.options.model, e.items) > -1) {
	                that.editable.options.model.unbind(CHANGE, that._modelChangeHandler);
	            }

	            e = e || {};

	            if (that.trigger("dataBinding", { action: e.action || "rebind", index: e.index, items: e.items })) {
	                return;
	            }

	            that._angularItems("cleanup");

	            if (navigatable && (that._isActiveInTable() || (that._editContainer && that._editContainer.data("kendoWindow")))) {
	                isCurrentInHeader = current.is("th");
	                currentIndex = Math.max(that.cellIndex(current), 0);
	            }

	            that._destroyEditable();

	            that._progress(false);

	            that._hideResizeHandle();

	            that._data = [];

	            if (!that.columns.length) {
	                that._autoColumns(that._firstDataItem(data[0], groups));
	                colspan = groups + that.columns.length;
	            }

	            that._group = groups > 0 || that._group;

	            if(that._group) {
	                that._templates();
	                that._updateCols();
	                that._updateLockedCols();
	                that._updateHeader(groups);
	                that._group = groups > 0;
	            }

	            that._renderContent(data, colspan, groups);

	            that._renderLockedContent(data, colspan, groups);

	            that._footer();

	            that._renderNoRecordsContent();

	            that._setContentHeight();

	            that._setContentWidth(that.content && that.content.scrollLeft());

	            if (that.lockedTable) {
	                //requires manual trigger of scroll to sync both tables
	                if (that.options.scrollable.virtual) {
	                    that.content.find(">.k-virtual-scrollable-wrap").trigger("scroll");
	                } else if (that.touchScroller) {
	                    that.touchScroller.movable.trigger("change");
	                } else {
	                    that.wrapper.one("scroll", function(e) { e.stopPropagation(); });
	                    that.content.trigger("scroll");
	                }
	            }

	            that._restoreCurrent(currentIndex, isCurrentInHeader);

	            if (that.touchScroller) {
	                that.touchScroller.contentResized();
	            }

	            if (that.selectable) {
	                that.selectable.resetTouchEvents();
	            }

	            that._muteAngularRebind(function() {
	                that._angularItems("compile");
	            });

	            that.trigger(DATABOUND);
	       },

	        _restoreCurrent: function(currentIndex, isCurrentInHeader) {
	            if (currentIndex === undefined || currentIndex < 0) {
	                return;
	            }

	            this._removeCurrent();

	            if (isCurrentInHeader) {
	                this._setCurrent(this.thead.find("th:not(.k-group-cell)").eq(currentIndex));
	            } else {
	                var rowIndex = 0;
	                if (this._rowVirtualIndex) {
	                    rowIndex = this.virtualScrollable.position(this._rowVirtualIndex);
	                } else {
	                    currentIndex = 0;
	                }

	                var row = $();

	                if (this.lockedTable) {
	                    row = this.lockedTable.find(">tbody>tr").eq(rowIndex);
	                }
	                row = row.add(this.tbody.children().eq(rowIndex));

	                var td = row.find(">td:not(.k-group-cell):not(.k-hierarchy-cell)")
	                    .eq(currentIndex);

	                this._setCurrent(td);
	            }

	            if (this._current) {
	                focusTable(this._current.closest("table")[0], true);
	            }
	        },

	       _angularItems: function(cmd) {
	           kendo.ui.DataBoundWidget.fn._angularItems.call(this, cmd);

	           if (cmd === "cleanup") {
	               this._cleanupDetailItems();
	           }

	           this._angularGroupItems(cmd);

	           this._angularGroupFooterItems(cmd);
	       },

	       _cleanupDetailItems: function() {
	           var that = this;

	           if (that._hasDetails()) {
	              that.angular("cleanup", function() {
	                   return { elements: that.tbody.children(".k-detail-row") };
	               });

	               that.tbody.find(".k-detail-cell").empty();
	           }
	       },

	       _angularGroupItems: function(cmd) {
	           var that = this,
	               container = that.tbody;

	           if (that.lockedContent) {
	               container = that.lockedTable.find("tbody");
	           }

	           if (that._group) {
	              that.angular(cmd, function(){
	                   return {
	                       elements: container.children(".k-grouping-row"),
	                       data: $.map(groupRows(that.dataSource.view()), function(dataItem){
	                           return { dataItem: dataItem };
	                       })
	                   };
	               });
	           }
	       },

	       _angularGroupFooterItems: function(cmd) {
	           var that = this,
	               container = that.tbody;

	           if (that.lockedContent) {
	                container = that.element;
	           }

	           if (that._group && that.groupFooterTemplate) {

	               that.angular(cmd, function() {
	                   return {
	                       elements: container.find(".k-group-footer"),
	                       data: $.map(groupFooters(that.dataSource.view()), function(dataItem){
	                           return { dataItem: dataItem };
	                       })
	                   };
	               });
	           }
	       },

	       _renderContent: function(data, colspan, groups) {
	            var that = this,
	                idx,
	                length,
	                html = "",
	                isLocked = that.lockedContent != null,
	                templates = {
	                        rowTemplate: that.rowTemplate,
	                        altRowTemplate: that.altRowTemplate,
	                        groupFooterTemplate: that.groupFooterTemplate
	                    };

	            colspan = isLocked ? colspan - visibleLeafColumns(visibleLockedColumns(that.columns)).length : colspan;

	            if(groups > 0) {

	                colspan = isLocked ? colspan - groups : colspan;

	                if (that.detailTemplate) {
	                    colspan++;
	                }

	                if (that.groupFooterTemplate) {
	                    that._groupAggregatesDefaultObject = that.dataSource.aggregates();
	                }

	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    html += that._groupRowHtml(data[idx], colspan, 0, isLocked ? groupRowLockedContentBuilder : groupRowBuilder, templates, isLocked);
	                }
	            } else {
	                html += that._rowsHtml(data, templates);
	            }

	            that.tbody = appendContent(that.tbody, that.table, html, this.options.$angular);
	       },

	       _renderLockedContent: function(data, colspan, groups) {
	           var html = "",
	               idx,
	               length,
	               templates = {
	                   rowTemplate: this.lockedRowTemplate,
	                   altRowTemplate: this.lockedAltRowTemplate,
	                   groupFooterTemplate: this.lockedGroupFooterTemplate
	               };

	           if (this.lockedContent) {

	               var table = this.lockedTable;

	               if (groups > 0) {
	                   colspan = colspan - visibleColumns(leafColumns(nonLockedColumns(this.columns))).length;
	                   for (idx = 0, length = data.length; idx < length; idx++) {
	                       html += this._groupRowHtml(data[idx], colspan, 0, groupRowBuilder, templates);
	                   }
	               } else {
	                   html = this._rowsHtml(data, templates);
	               }

	               appendContent(table.children("tbody"), table, html, this.options.$angular);

	               this._syncLockedContentHeight();
	           }
	       },

	       _adjustRowsHeight: function(table1, table2) {
	           var rows = table1[0].rows,
	               length = rows.length,
	               idx,
	               rows2 = table2[0].rows,
	               containers = table1.add(table2),
	               containersLength = containers.length,
	               heights = [];

	           for (idx = 0; idx < length; idx++) {
	               if (!rows2[idx]) {
	                   break;
	               }

	               if (rows[idx].style.height) {
	                   rows[idx].style.height = rows2[idx].style.height = "";
	               }
	           }

	           for (idx = 0; idx < length; idx++) {
	               if (!rows2[idx]) {
	                   break;
	               }

	               var offsetHeight1 = rows[idx].offsetHeight;
	               var offsetHeight2 = rows2[idx].offsetHeight;
	               var height = 0;

	               if (offsetHeight1 > offsetHeight2) {
	                   height = offsetHeight1;
	               } else if (offsetHeight1 < offsetHeight2) {
	                   height = offsetHeight2;
	               }

	               heights.push(height);
	           }

	           for (idx = 0; idx < containersLength; idx++) {
	               containers[idx].style.display = "none";
	           }

	           for (idx = 0; idx < length; idx++) {
	               if (heights[idx]) {
	                   //add one to resolve row misalignment in IE
	                   rows[idx].style.height = rows2[idx].style.height = (heights[idx] + 1) + "px";
	               }
	           }

	           for (idx = 0; idx < containersLength; idx++) {
	               containers[idx].style.display = "";
	           }
	       }
	   });

	   if (kendo.ExcelMixin) {
	       kendo.ExcelMixin.extend(Grid.prototype);
	   }

	   if (kendo.PDFMixin) {
	       kendo.PDFMixin.extend(Grid.prototype);

	       Grid.prototype._drawPDF_autoPageBreak = function(progress) {
	           var grid = this;
	           var result = new $.Deferred();
	           var dataSource = grid.dataSource;
	           var allPages = grid.options.pdf.allPages;
	           var origBody = grid.wrapper.find(".k-grid-content tbody");
	           var cont = $("<div>")
	               .css({ position: "absolute", left: -10000, top: -10000 });
	           var clone = grid.wrapper.clone().css({
	               height: "auto", width: "auto"
	           }).appendTo(cont);
	           clone.find(".k-grid-content").css({ height: "auto", width: "auto", overflow: "visible" });
	           clone.find(".k-grid-pager, .k-grid-toolbar, .k-grouping-header").remove();
	           clone.find(".k-grid-header").css({ paddingRight: 0 });

	           this._initPDFProgress(progress);

	           var body = clone.find(".k-grid-content tbody").empty();
	           var startingPage = dataSource.page();

	           function resolve() {
	               if (allPages && startingPage !== undefined) {
	                   dataSource.one("change", draw);
	                   dataSource.page(startingPage);
	               } else {
	                   grid.refresh();
	                   draw();
	               }
	           }

	           function draw() {
	               cont.appendTo(document.body);
	               var options = $.extend({}, grid.options.pdf, {
	                   _destructive: true,
	                   progress: function(p) {
	                       progress.notify({
	                           page: p.page,
	                           pageNumber: p.pageNum,
	                           progress: 0.5 + p.pageNum / p.totalPages / 2,
	                           totalPages: p.totalPages
	                       });
	                   }
	               });
	               kendo.drawing.drawDOM(clone, options)
	                   .always(function(){
	                       cont.remove();
	                   })
	                   .then(function(group){
	                       result.resolve(group);
	                   })
	                   .fail(function(err){
	                       result.reject(err);
	                   });
	           }

	           function renderPage() {
	               var pageNum = dataSource.page();
	               var totalPages = allPages ? dataSource.totalPages() : 1;
	               body.append(origBody.find("tr"));
	               if (pageNum < totalPages) {
	                   dataSource.page(pageNum + 1);
	               } else {
	                   dataSource.unbind("change", renderPage);
	                   resolve();
	               }
	           }

	           if (allPages) {
	               dataSource.bind("change", renderPage);
	               dataSource.page(1);
	           } else {
	               renderPage();
	           }

	           return result.promise();
	       };

	       Grid.prototype._drawPDF = function(progress) {
	           var grid = this;

	           if (grid.options.pdf.paperSize && grid.options.pdf.paperSize != "auto") {
	               return grid._drawPDF_autoPageBreak(progress);
	           }

	           var result = new $.Deferred();
	           var dataSource = grid.dataSource;
	           var allPages = grid.options.pdf.allPages;

	           this._initPDFProgress(progress);

	           // This group will be our document containing all pages
	           var doc = new kendo.drawing.Group();
	           var startingPage = dataSource.page();

	           function resolve() {
	               if (allPages && startingPage !== undefined) {
	                   dataSource.unbind("change", exportPage);
	                   dataSource.one("change", function() {
	                       result.resolve(doc);
	                   });

	                   dataSource.page(startingPage);
	               } else {
	                   result.resolve(doc);
	               }
	           }

	           function exportPage() {
	                grid._drawPDFShadow({
	                    width: grid.wrapper.width()
	                }, {
	                    avoidLinks: grid.options.pdf.avoidLinks
	                })
	                .done(function(group) {
	                    var pageNum = dataSource.page();
	                    var totalPages = allPages ? dataSource.totalPages() : 1;

	                    var args = {
	                        page: group,
	                        pageNumber: pageNum,
	                        progress: pageNum / totalPages,
	                        totalPages: totalPages
	                    };

	                    progress.notify(args);
	                    doc.append(args.page);

	                    if (pageNum < totalPages) {
	                        dataSource.page(pageNum + 1);
	                    } else {
	                        resolve();
	                    }
	                })
	                .fail(function(err) {
	                    result.reject(err);
	                });
	            }

	            if (allPages) {
	                dataSource.bind("change", exportPage);
	                dataSource.page(1);
	            } else {
	                exportPage();
	            }

	            return result.promise();
	        };

	        Grid.prototype._initPDFProgress = function(deferred) {
	           var loading = $("<div class='k-loading-pdf-mask'><div class='k-loading-color'/></div>");
	           loading.prepend(this.wrapper.clone().css({
	               position: "absolute", top: 0, left: 0
	           }));

	           this.wrapper.append(loading);

	           var pb = $("<div class='k-loading-pdf-progress'>")
	           .appendTo(loading)
	           .kendoProgressBar({
	               type: "chunk",
	               chunkCount: 10,
	               min: 0,
	               max: 1,
	               value: 0
	           }).data("kendoProgressBar");

	           deferred.progress(function(e) {
	               pb.value(e.progress);
	           })
	           .always(function() {
	               kendo.destroy(loading);
	               loading.remove();
	           });
	        };
	   }

	   function syncTableHeight(table1, table2) {
	       table1 = table1[0];
	       table2 = table2[0];

	       if (table1.rows.length !== table2.rows.length) {
	           var lockedHeigth = table1.offsetHeight;
	           var tableHeigth = table2.offsetHeight;

	           var row;
	           var diff;
	           if (lockedHeigth > tableHeigth) {
	               row = table2.rows[table2.rows.length - 1];

	               if (filterRowRegExp.test(row.className)) {
	                   row = table2.rows[table2.rows.length - 2];
	               }

	               diff = lockedHeigth - tableHeigth;
	           } else {
	               row = table1.rows[table1.rows.length - 1];

	               if (filterRowRegExp.test(row.className)) {
	                   row = table1.rows[table1.rows.length - 2];
	               }

	               diff = tableHeigth - lockedHeigth;
	           }
	           row.style.height = row.offsetHeight + diff + "px";
	       }
	   }

	   function adjustRowHeight(row1, row2) {
	       var height;
	       var offsetHeight1 = row1.offsetHeight;
	       var offsetHeight2 = row2.offsetHeight;

	       if (offsetHeight1 > offsetHeight2) {
	           height = offsetHeight1 + "px";
	       } else if (offsetHeight1 < offsetHeight2) {
	           height = offsetHeight2 + "px";
	       }

	       if (height) {
	           row1.style.height = row2.style.height = height;
	       }
	   }


	   function getCommand(commands, name) {
	       var idx, length, command;

	       if (typeof commands === STRING && commands === name) {
	          return commands;
	       }

	       if (isPlainObject(commands) && commands.name === name) {
	           return commands;
	       }

	       if (isArray(commands)) {
	           for (idx = 0, length = commands.length; idx < length; idx++) {
	               command = commands[idx];

	               if ((typeof command === STRING && command === name) || (command.name === name)) {
	                   return command;
	               }
	           }
	       }
	       return null;
	   }

	   function focusTable(table, direct) {
	      var msie = browser.msie || browser.edge;
	      if (direct === true) {
	         table = $(table);
	         var scrollTop, scrollLeft;
	         scrollTop = table.parent().scrollTop();
	         scrollLeft = table.parent().scrollLeft();

	         if (msie) {
	            try {
	               //The setActive method does not cause the document to scroll to the active object in the current page
	               table[0].setActive();
	            } catch(e) {
	               table[0].focus();
	            }
	         } else {
	            table[0].focus(); //because preventDefault bellow, IE cannot focus the table alternative is unselectable=on
	         }

	         table.parent().scrollTop(scrollTop).scrollLeft(scrollLeft);

	      } else {
	         $(table).one("focusin", function(e) { e.preventDefault(); }).focus();
	      }
	   }

	   function isColumnEditable(column, model) {
	       if(!column.field) {
	           return false;
	       }
	       if(model.editable && !model.editable(column.field)) {
	           return false;
	       }
	       if(column.editable && !column.editable(model)) {
	           return false;
	       }
	       return true;
	   }

	   function isInputElement(element) {
	       return $(element).is(":button,a,:input,a>.k-icon,textarea,span.k-select,span.k-icon,span.k-link,.k-input,.k-multiselect-wrap,.k-tool-icon");
	   }

	   function tableClick(e) {
	       var currentTarget = $(e.currentTarget),
	           isHeader = currentTarget.is("th"),
	           table = this.table.add(this.lockedTable),
	           headerTable = this.thead.parent().add($(">table", this.lockedHeader)),
	           isInput = isInputElement(e.target),
	           currentTable = currentTarget.closest("table")[0];

	       if (kendo.support.touch) {
	           return;
	       }

	       if (isInput && currentTarget.find(kendo.roleSelector("filtercell")).length) {
	           this._setCurrent(currentTarget);
	           return;
	       }

	       if (currentTable !== table[0] && currentTable !== table[1] && currentTable !== headerTable[0] && currentTable !== headerTable[1]) {
	           return;
	       }

	       if ($(e.target).is("a.k-i-expand, a.k-i-collapse")) {
	           return;
	       }

	       if (this.options.navigatable) {
	           this._setCurrent(currentTarget);
	       }

	       if (isHeader || !isInput) {
	           setTimeout(function() {
	               //Do not focus if widget, because in IE8 a DDL will be closed
	               if (!(isIE8 && $(kendo._activeElement()).hasClass("k-widget"))) {
	                   //Only if input element is not selected yet
	                   if (!isInputElement(kendo._activeElement())) {
	                       //DOMElement.focus() only for header, because IE doesn't really focus the table
	                       focusTable(currentTable, true);
	                   }
	                }
	           });
	       }

	       if (isHeader) {
	           e.preventDefault(); //if any problem occurs, call preventDefault only for the clicked header links
	       }
	   }

	   function isInEdit(cell) {
	       return cell &&
	           (cell.hasClass("k-edit-cell") ||
	            cell.parent().hasClass("k-grid-edit-row"));
	   }

	   function groupRowBuilder(colspan, level, text) {
	       return '<tr role="row" class="k-grouping-row">' + groupCells(level) +
	           '<td colspan="' + colspan + '" aria-expanded="true">' +
	           '<p class="k-reset">' +
	           '<a class="k-icon k-i-collapse" href="#" tabindex="-1"></a>' + text +
	       '</p></td></tr>';
	   }

	   function groupRowLockedContentBuilder(colspan) {
	       return '<tr role="row" class="k-grouping-row">' +
	           '<td colspan="' + colspan + '" aria-expanded="true">' +
	           '<p class="k-reset">&nbsp;</p></td></tr>';
	   }

	   ui.plugin(Grid);
	   ui.plugin(VirtualScrollable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(573)))

/***/ },

/***/ 744:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.sortable */ 140);

/***/ },

/***/ 745:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.columnmenu */ 116);

/***/ },

/***/ 746:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.groupable */ 123);

/***/ },

/***/ 747:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.pager */ 129);

/***/ },

/***/ 748:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.selectable */ 139);

/***/ },

/***/ 749:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.reorderable */ 131);

/***/ },

/***/ 750:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.actionsheet */ 60);

/***/ },

/***/ 751:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.pane */ 31);

/***/ },

/***/ 752:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.excel */ 122);

/***/ },

/***/ 753:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.progressbar */ 130);

/***/ }

/******/ });

/***/ }),
/* 60 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.actionsheet.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(780);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 764:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.shim */ 127);

/***/ },

/***/ 765:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.popover */ 126);

/***/ },

/***/ 780:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(765), __webpack_require__(764) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.actionsheet",
	    name: "ActionSheet",
	    category: "mobile",
	    description: "The mobile ActionSheet widget displays a set of choices related to a task the user initiates.",
	    depends: [ "mobile.popover", "mobile.shim" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        ui = kendo.mobile.ui,
	        Shim = ui.Shim,
	        Popup = ui.Popup,
	        Widget = ui.Widget,
	        OPEN = "open",
	        CLOSE = "close",
	        COMMAND = "command",
	        BUTTONS = "li>a",
	        CONTEXT_DATA = "actionsheetContext",
	        WRAP = '<div class="km-actionsheet-wrapper" />',
	        cancelTemplate = kendo.template('<li class="km-actionsheet-cancel"><a href="\\#">#:cancel#</a></li>');

	    var ActionSheet = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                ShimClass,
	                tablet,
	                type,
	                os = support.mobileOS;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            type = options.type;
	            element = that.element;

	            if (type === "auto") {
	                tablet = os && os.tablet;
	            } else {
	                tablet = type === "tablet";
	            }

	            ShimClass = tablet ? Popup : Shim;

	            if (options.cancelTemplate) {
	                cancelTemplate = kendo.template(options.cancelTemplate);
	            }

	            element
	                .addClass("km-actionsheet")
	                .append(cancelTemplate({cancel: that.options.cancel}))
	                .wrap(WRAP)
	                .on("up", BUTTONS, "_click")
	                .on("click", BUTTONS, kendo.preventDefault);

	            that.view().bind("destroy", function() {
	                that.destroy();
	            });

	            that.wrapper = element.parent().addClass(type ? " km-actionsheet-" + type : "");

	            that.shim = new ShimClass(that.wrapper, $.extend({modal: os.ios && os.majorVersion < 7, className: "km-actionsheet-root"}, that.options.popup) );

	            that._closeProxy = $.proxy(that, "_close");
	            that._shimHideProxy = $.proxy(that, "_shimHide");
	            that.shim.bind("hide", that._shimHideProxy);

	            if (tablet) {
	                kendo.onResize(that._closeProxy);
	            }

	            kendo.notify(that, ui);
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            COMMAND
	        ],

	        options: {
	            name: "ActionSheet",
	            cancel: "Cancel",
	            type: "auto",
	            popup: { height: "auto" }
	        },

	        open: function(target, context) {
	            var that = this;
	            that.target = $(target);
	            that.context = context;
	            that.shim.show(target);
	        },

	        close: function() {
	            this.context = this.target = null;
	            this.shim.hide();
	        },

	        openFor: function(target) {
	            var that = this,
	                context = target.data(CONTEXT_DATA);

	            that.open(target, context);
	            that.trigger(OPEN, { target: target, context: context });
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            kendo.unbindResize(this._closeProxy);
	            this.shim.destroy();
	        },

	        _click: function(e) {
	            if (e.isDefaultPrevented()) {
	                return;
	            }

	            var currentTarget = $(e.currentTarget);
	            var action = currentTarget.data("action");

	            if (action) {
	                var actionData = {
	                    target: this.target,
	                    context: this.context
	                },
	                $angular = this.options.$angular;

	                if ($angular) {
	                    this.element.injector().get("$parse")(action)($angular[0])(actionData);
	                } else {
	                    kendo.getter(action)(window)(actionData);
	                }
	            }

	            this.trigger(COMMAND, { target: this.target, context: this.context, currentTarget: currentTarget });

	            e.preventDefault();
	            this._close();
	        },

	        _shimHide: function(e) {
	            if (!this.trigger(CLOSE)) {
	                this.context = this.target = null;
	            } else {
	                e.preventDefault();
	            }
	        },

	        _close: function(e) {
	            if (!this.trigger(CLOSE)) {
	                this.close();
	            } else {
	                e.preventDefault();
	            }
	        }
	    });

	    ui.plugin(ActionSheet);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 61 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.multiselect.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(799);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 588:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.list */ 23);

/***/ },

/***/ 589:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ 9);

/***/ },

/***/ 799:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(588), __webpack_require__(589) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "multiselect",
	    name: "MultiSelect",
	    category: "web",
	    description: "The MultiSelect widget allows the selection from pre-defined values.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        List = ui.List,
	        keys = kendo.keys,
	        activeElement = kendo._activeElement,
	        ObservableArray = kendo.data.ObservableArray,
	        proxy = $.proxy,
	        ID = "id",
	        LI = "li",
	        ACCEPT = "accept",
	        FILTER = "filter",
	        REBIND = "rebind",
	        OPEN = "open",
	        CLOSE = "close",
	        CHANGE = "change",
	        PROGRESS = "progress",
	        SELECT = "select",
	        DESELECT = "deselect",
	        ARIA_DISABLED = "aria-disabled",
	        FOCUSEDCLASS = "k-state-focused",
	        HIDDENCLASS = "k-loading-hidden",
	        HOVERCLASS = "k-state-hover",
	        STATEDISABLED = "k-state-disabled",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        ns = ".kendoMultiSelect",
	        CLICK = "click" + ns,
	        KEYDOWN = "keydown" + ns,
	        MOUSEENTER = "mouseenter" + ns,
	        MOUSELEAVE = "mouseleave" + ns,
	        HOVEREVENTS = MOUSEENTER + " " + MOUSELEAVE,
	        quotRegExp = /"/g,
	        isArray = $.isArray,
	        styles = ["font-family",
	                  "font-size",
	                  "font-stretch",
	                  "font-style",
	                  "font-weight",
	                  "letter-spacing",
	                  "text-transform",
	                  "line-height"];

	    var MultiSelect = List.extend({
	        init: function(element, options) {
	            var that = this, id, disabled;

	            that.ns = ns;
	            List.fn.init.call(that, element, options);

	            that._optionsMap = {};
	            that._customOptions = {};

	            that._wrapper();
	            that._tagList();
	            that._input();
	            that._textContainer();
	            that._loader();
	            that._clearButton();

	            that._tabindex(that.input);

	            element = that.element.attr("multiple", "multiple").hide();
	            options = that.options;

	            if (!options.placeholder) {
	                options.placeholder = element.data("placeholder");
	            }

	            id = element.attr(ID);

	            if (id) {
	                that._tagID = id + "_tag_active";

	                id = id + "_taglist";
	                that.tagList.attr(ID, id);
	            }

	            that._aria(id);
	            that._dataSource();
	            that._ignoreCase();
	            that._popup();

	            that._tagTemplate();
	            that.requireValueMapper(that.options);
	            that._initList();

	            that._reset();
	            that._enable();
	            that._placeholder();

	            if (options.autoBind) {
	                that.dataSource.fetch();
	            } else if (options.value) {
	                that._preselect(options.value);
	            }

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            kendo.notify(that);
	        },

	        options: {
	            name: "MultiSelect",
	            tagMode: "multiple",
	            enabled: true,
	            autoBind: true,
	            autoClose: true,
	            highlightFirst: true,
	            dataTextField: "",
	            dataValueField: "",
	            filter: "startswith",
	            ignoreCase: true,
	            minLength: 1,
	            enforceMinLength: false,
	            delay: 100,
	            value: null,
	            maxSelectedItems: null,
	            placeholder: "",
	            height: 200,
	            animation: {},
	            virtual: false,
	            itemTemplate: "",
	            tagTemplate: "",
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#",
	            clearButton: true
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            CHANGE,
	            SELECT,
	            DESELECT,
	            "filtering",
	            "dataBinding",
	            "dataBound"
	        ],

	        setDataSource: function(dataSource) {
	            this.options.dataSource = dataSource;

	            this._state = "";
	            this._dataSource();

	            this.listView.setDataSource(this.dataSource);

	            if (this.options.autoBind) {
	                this.dataSource.fetch();
	            }
	        },

	        setOptions: function(options) {
	            var listOptions = this._listOptions(options);

	            List.fn.setOptions.call(this, options);

	            this.listView.setOptions(listOptions);

	            this._accessors();
	            this._aria(this.tagList.attr(ID));
	            this._tagTemplate();
	        },

	        currentTag: function(candidate) {
	            var that = this;

	            if (candidate !== undefined) {
	                if (that._currentTag) {
	                    that._currentTag
	                        .removeClass(FOCUSEDCLASS)
	                        .removeAttr(ID);

	                    that.input.removeAttr("aria-activedescendant");
	                }

	                if (candidate) {
	                    candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);

	                    that.input
	                        .attr("aria-activedescendant", that._tagID);
	                }

	                that._currentTag = candidate;
	            } else {
	                return that._currentTag;
	            }
	        },

	        dataItems: function() {
	            return this.listView.selectedDataItems();
	        },

	        destroy: function() {
	            var that = this,
	                ns = that.ns;

	            clearTimeout(that._busy);
	            clearTimeout(that._typingTimeout);

	            that.wrapper.off(ns);
	            that.tagList.off(ns);
	            that.input.off(ns);
	            that._clear.off(ns);

	            List.fn.destroy.call(that);
	        },

	        _activateItem: function() {
	            List.fn._activateItem.call(this);
	            this.currentTag(null);
	        },

	        _listOptions: function(options) {
	            var that = this;
	            var listOptions = List.fn._listOptions.call(that, $.extend(options, {
	                selectedItemChange: proxy(that._selectedItemChange, that),
	                selectable: "multiple"
	            }));

	            var itemTemplate = this.options.itemTemplate || this.options.template;
	            var template = listOptions.itemTemplate || itemTemplate || listOptions.template;

	            if (!template) {
	                template = "#:" + kendo.expr(listOptions.dataTextField, "data") + "#";
	            }

	            listOptions.template = template;

	            return listOptions;
	        },

	        _setListValue: function() {
	            List.fn._setListValue.call(this, this._initialValues.slice(0));
	        },

	        _listChange: function(e) {
	            var data = this.dataSource.flatView();
	            var optionsMap = this._optionsMap;
	            var valueGetter = this._value;

	            if (this._state === REBIND) {
	                this._state = "";
	            }

	            for (var i = 0; i < e.added.length; i++) {
	                if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined) {
	                    this._render(data); //render select element <option> tags if the item does not persist in the current data view
	                    break;
	                }
	            }

	            this._selectValue(e.added, e.removed);
	        },

	        _selectedItemChange: function(e) {
	            var items = e.items;
	            var context;
	            var idx;

	            for (idx = 0; idx < items.length; idx++) {
	                context = items[idx];
	                this.tagList.children().eq(context.index).children("span:first").html(this.tagTextTemplate(context.item));
	            }
	        },

	        _wrapperMousedown: function(e) {
	            var that = this;
	            var notInput = e.target.nodeName.toLowerCase() !== "input";
	            var target = $(e.target);
	            var closeButton = target.hasClass("k-select") || target.hasClass("k-icon");

	            if (closeButton) {
	                closeButton = !target.closest(".k-select").children(".k-i-arrow-60-down").length;
	            }

	            if (notInput && !(closeButton && kendo.support.mobileOS)) {
	                e.preventDefault();
	            }

	            if (!closeButton) {
	                if (that.input[0] !== activeElement() && notInput) {
	                    that.input.focus();
	                }

	                if (that.options.minLength === 1) {
	                    that.open();
	                }
	            }

	        },

	        _inputFocus: function() {
	            this._placeholder(false);
	            this.wrapper.addClass(FOCUSEDCLASS);
	        },

	        _inputFocusout: function() {
	            var that = this;

	            clearTimeout(that._typingTimeout);

	            that.wrapper.removeClass(FOCUSEDCLASS);

	            that._placeholder(!that.listView.selectedDataItems()[0], true);
	            that.close();

	            if (that._state === FILTER) {
	                that._state = ACCEPT;
	                that.listView.skipUpdate(true);
	            }

	            that.element.blur();
	        },

	        _removeTag: function(tag) {
	            var that = this;
	            var state = that._state;
	            var position = tag.index();
	            var listView = that.listView;
	            var value = listView.value()[position];
	            var dataItem = that.listView.selectedDataItems()[position];
	            var customIndex = that._customOptions[value];
	            var option;

	            if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {
	                that._close();
	                return;
	            }

	            if (customIndex === undefined && (state === ACCEPT || state === FILTER)) {
	                customIndex = that._optionsMap[value];
	            }

	            var done = function() {
	                that.currentTag(null);
	                that._change();
	                that._close();
	            };

	            if (customIndex === undefined) {
	                listView.select(listView.select()[position]).done(done);
	            } else {
	                option = that.element[0].children[customIndex];
	                option.selected = false;

	                listView.removeAt(position);
	                tag.remove();
	                done();
	            }
	        },

	        _tagListClick: function(e) {
	            var target = $(e.currentTarget);

	            if (!target.children(".k-i-arrow-60-down").length) {
	                this._removeTag(target.closest(LI));
	            }
	        },

	        _clearClick: function() {
	            this.value(null);
	            this.trigger("change");
	        },

	        _editable: function(options) {
	            var that = this,
	                disable = options.disable,
	                readonly = options.readonly,
	                wrapper = that.wrapper.off(ns),
	                tagList = that.tagList.off(ns),
	                input = that.element.add(that.input.off(ns));

	            if (!readonly && !disable) {
	                wrapper
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover)
	                    .on("mousedown" + ns + " touchend" + ns, proxy(that._wrapperMousedown, that));

	                that.input.on(KEYDOWN, proxy(that._keydown, that))
	                    .on("paste" + ns, proxy(that._search, that))
	                    .on("focus" + ns, proxy(that._inputFocus, that))
	                    .on("focusout" + ns, proxy(that._inputFocusout, that));

	                that._clear.on("click" + ns, proxy(that._clearClick, that));
	                input.removeAttr(DISABLED)
	                     .removeAttr(READONLY)
	                     .attr(ARIA_DISABLED, false);

	                tagList
	                    .on(MOUSEENTER, LI, function() { $(this).addClass(HOVERCLASS); })
	                    .on(MOUSELEAVE, LI, function() { $(this).removeClass(HOVERCLASS); })
	                    .on(CLICK, "li.k-button .k-select", proxy(that._tagListClick, that));
	            } else {
	                if (disable) {
	                    wrapper.addClass(STATEDISABLED);
	                } else {
	                    wrapper.removeClass(STATEDISABLED);
	                }

	                input.attr(DISABLED, disable)
	                     .attr(READONLY, readonly)
	                     .attr(ARIA_DISABLED, disable);
	            }
	        },

	        _close: function() {
	            var that = this;
	            if (that.options.autoClose) {
	                that.close();
	            } else {
	                that.popup.position();
	            }
	        },

	        _filterSource: function(filter, force) {
	            if(!force) {
	                force = this._retrieveData;
	            }
	            this._retrieveData = false;
	            List.fn._filterSource.call(this, filter, force);
	        },

	        close: function() {
	            this.popup.close();
	        },

	        open: function() {
	            var that = this;

	            if (that._request) {
	                that._retrieveData = false;
	            }

	            if (that._retrieveData || !that.listView.bound() || that._state === ACCEPT) {
	                that._open = true;
	                that._state = REBIND;

	                that.listView.skipUpdate(true);

	                that._filterSource();
	            } else if (that._allowOpening()) {
	                that.popup.open();
	                that._focusItem();
	            }
	        },

	        toggle: function(toggle) {
	            toggle = toggle !== undefined ? toggle : !this.popup.visible();

	            this[toggle ? OPEN : CLOSE]();
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        _listBound: function() {
	            var that = this;
	            var data = that.dataSource.flatView();
	            var skip = that.listView.skip();

	            that._render(data);

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!data.length);

	            that._resizePopup();

	            if (that._open) {
	                that._open = false;
	                that.toggle(that._allowOpening());
	            }

	            that.popup.position();

	            if (that.options.highlightFirst && (skip === undefined || skip === 0)) {
	                that.listView.focusFirst();
	            }

	            if (that._touchScroller) {
	                that._touchScroller.reset();
	            }

	            that._hideBusy();
	            that._makeUnselectable();

	            that.trigger("dataBound");
	        },

	        _inputValue: function() {
	            var that = this;
	            var inputValue = that.input.val();

	            if (that.options.placeholder === inputValue) {
	                inputValue = "";
	            }
	            return inputValue;
	        },

	        value: function(value) {
	            var that = this;
	            var listView = that.listView;
	            var oldValue = listView.value().slice();
	            var maxSelectedItems = that.options.maxSelectedItems;
	            var clearFilters = listView.bound() && listView.isFiltered();

	            if (value === undefined) {
	                return oldValue;
	            }

	            that.requireValueMapper(that.options, value);

	            value = that._normalizeValues(value);

	            if (maxSelectedItems !== null && value.length > maxSelectedItems) {
	                value = value.slice(0, maxSelectedItems);
	            }

	            if (clearFilters) {
	                that._clearFilter();
	            }

	            listView.value(value);
	            that._old = listView.value(); //get a new array reference

	            if (!clearFilters) {
	                that._fetchData();
	            }
	        },

	        _preselect: function(data, value) {
	            var that = this;

	            if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {
	                data = [data];
	            }

	            if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {
	                that.dataSource.data(data);
	                that.value(value || that._initialValues);
	                that._retrieveData = true;
	            }
	        },

	        _setOption: function(value, selected) {
	            var option = this.element[0].children[this._optionsMap[value]];

	            if (option) {
	                option.selected = selected;
	            }
	        },

	        _fetchData: function() {
	            var that = this;
	            var hasItems = !!that.dataSource.view().length;
	            var isEmptyArray = that.listView.value().length === 0;

	            if (isEmptyArray || that._request) {
	                return;
	            }

	            if (that._retrieveData || (!that._fetch && !hasItems)) {
	                that._fetch = true;
	                that._retrieveData = false;
	                that.dataSource.read().done(function() {
	                    that._fetch = false;
	                });
	            }
	        },

	        _isBound: function() {
	            return this.listView.bound() && !this._retrieveData;
	        },

	        _dataSource: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                dataSource = options.dataSource || {};

	            dataSource = isArray(dataSource) ? {data: dataSource} : dataSource;

	            dataSource.select = element;
	            dataSource.fields = [{ field: options.dataTextField },
	                                 { field: options.dataValueField }];

	            if (that.dataSource && that._refreshHandler) {
	                that._unbindDataSource();
	            } else {
	                that._progressHandler = proxy(that._showBusy, that);
	                that._errorHandler = proxy(that._hideBusy, that);
	            }

	            that.dataSource = kendo.data.DataSource.create(dataSource)
	                                   .bind(PROGRESS, that._progressHandler)
	                                   .bind("error", that._errorHandler);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(that._initialValues);
	                        that._placeholder();
	                    });
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _initValue: function() {
	            var value = this.options.value || this.element.val();

	            this._old = this._initialValues = this._normalizeValues(value);
	        },

	        _normalizeValues: function(value) {
	            var that = this;

	            if (value === null) {
	                value = [];
	            } else if (value && $.isPlainObject(value)) {
	                value = [that._value(value)];
	            } else if (value && $.isPlainObject(value[0])) {
	                value = $.map(value, function(dataItem) { return that._value(dataItem); });
	            } else if (!isArray(value) && !(value instanceof ObservableArray)) {
	                value = [value];
	            } else if (isArray(value)) {
	                value = value.slice();
	            }

	            return value;
	        },

	        _change: function() {
	            var that = this,
	                value = that.value();

	            if (!compare(value, that._old)) {
	                that._old = value.slice();

	                that.trigger(CHANGE);

	                // trigger the DOM change event so any subscriber gets notified
	                that.element.trigger(CHANGE);
	            }
	        },

	        _click: function(e) {
	            var that = this;
	            var item = e.item;

	            e.preventDefault();

	            that._select(item).done(function() {
	                that._change();
	                that._close();
	            });
	        },

	        _keydown: function(e) {
	            var that = this;
	            var key = e.keyCode;
	            var tag = that._currentTag;
	            var listView = that.listView;
	            var current = listView.focus();
	            var hasValue = that.input.val();
	            var isRtl = kendo.support.isRtl(that.wrapper);
	            var visible = that.popup.visible();

	            if (key === keys.DOWN) {
	                e.preventDefault();

	                if (!visible) {
	                    that.open();

	                    if (!current) {
	                        listView.focusFirst();
	                    }
	                    return;
	                }

	                if (current) {
	                    listView.focusNext();
	                    if (!listView.focus()) {
	                        listView.focusLast();
	                    }
	                } else {
	                    listView.focusFirst();
	                }
	            } else if (key === keys.UP) {
	                if (visible) {
	                    if (current) {
	                        listView.focusPrev();
	                    }

	                    if (!listView.focus()) {
	                        that.close();
	                    }
	                }
	                e.preventDefault();
	            } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {
	                if (!hasValue) {
	                    tag = tag ? tag.prev() : $(that.tagList[0].lastChild);
	                    if (tag[0]) {
	                        that.currentTag(tag);
	                    }
	                }
	            } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {
	                if (!hasValue && tag) {
	                    tag = tag.next();
	                    that.currentTag(tag[0] ? tag : null);
	                }
	            } else if (key === keys.ENTER && visible) {
	                that._select(current).done(function() {
	                    that._change();
	                    that._close();
	                });
	                e.preventDefault();
	            } else if (key === keys.ESC) {
	                if (visible) {
	                    e.preventDefault();
	                } else {
	                    that.currentTag(null);
	                }

	                that.close();
	            } else if (key === keys.HOME) {
	                if (visible) {
	                    listView.focusFirst();
	                } else if (!hasValue) {
	                    tag = that.tagList[0].firstChild;

	                    if (tag) {
	                        that.currentTag($(tag));
	                    }
	                }
	            } else if (key === keys.END) {
	                if (visible) {
	                    listView.focusLast();
	                } else if (!hasValue) {
	                    tag = that.tagList[0].lastChild;

	                    if (tag) {
	                        that.currentTag($(tag));
	                    }
	                }
	            } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {
	                if (that.options.tagMode === "single") {
	                    listView.value([]);
	                    that._change();
	                    that._close();
	                    return;
	                }

	                if (key === keys.BACKSPACE && !tag) {
	                    tag = $(that.tagList[0].lastChild);
	                }

	                if (tag && tag[0]) {
	                    that._removeTag(tag);
	                }
	            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
	                e.preventDefault();

	                var direction = key === keys.PAGEDOWN ? 1 : -1;
	                listView.scrollWith(direction * listView.screenHeight());
	            } else {
	                clearTimeout(that._typingTimeout);
	                setTimeout(function() { that._scale(); });
	                that._search();
	            }
	        },

	        _hideBusy: function () {
	            var that = this;
	            clearTimeout(that._busy);
	            that.input.attr("aria-busy", false);
	            that._loading.addClass(HIDDENCLASS);
	            that._request = false;
	            that._busy = null;
	            that._showClear();
	        },

	        _showBusyHandler: function() {
	            this.input.attr("aria-busy", true);
	            this._loading.removeClass(HIDDENCLASS);
	            this._hideClear();
	        },

	        _showBusy: function () {
	            var that = this;

	            that._request = true;

	            if (that._busy) {
	                return;
	            }

	            that._busy = setTimeout(proxy(that._showBusyHandler, that), 100);
	        },

	        _placeholder: function(show, skipCaret) {
	            var that = this;
	            var input = that.input;
	            var active = activeElement();
	            var placeholder = that.options.placeholder;
	            var inputValue = input.val();
	            var isActive = input[0] === active;
	            var caretPos = inputValue.length;

	            if (!isActive || that.options.autoClose || inputValue === placeholder) {
	                caretPos = 0;
	                inputValue = "";
	            }

	            if (show === undefined) {
	                show = false;
	                if (input[0] !== active) {
	                    show = !that.listView.selectedDataItems()[0];
	                }
	            }

	            that._prev = inputValue;
	            input.toggleClass("k-readonly", show).val(show ? placeholder : inputValue);

	            if (isActive && !skipCaret) {
	                kendo.caret(input[0], caretPos, caretPos);
	            }

	            that._scale();
	        },

	        _scale: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                wrapperWidth = wrapper.width(),
	                span = that._span.text(that.input.val()),
	                textWidth;

	            if (!wrapper.is(":visible")) {
	                span.appendTo(document.documentElement);
	                wrapperWidth = textWidth = span.width() + 25;
	                span.appendTo(wrapper);
	            } else {
	                textWidth = span.width() + 25;
	            }

	            that.input.width(textWidth > wrapperWidth ? wrapperWidth : textWidth);
	        },

	        _option: function(dataValue, dataText, selected) {
	            var option = "<option";

	            if (dataValue !== undefined) {
	                dataValue += "";

	                if (dataValue.indexOf('"') !== -1) {
	                    dataValue = dataValue.replace(quotRegExp, "&quot;");
	                }

	                option += ' value="' + dataValue + '"';
	            }

	            if (selected) {
	                option += ' selected';
	            }

	            option += ">";

	            if (dataText !== undefined) {
	                option += kendo.htmlEncode(dataText);
	            }

	            return option += "</option>";
	        },

	        _render: function(data) {
	            var selectedItems = this.listView.selectedDataItems();
	            var values = this.listView.value();
	            var length = data.length;
	            var selectedIndex;
	            var options = "";
	            var dataItem;
	            var value;
	            var idx;

	            if (values.length !== selectedItems.length) {
	                selectedItems = this._buildSelectedItems(values);
	            }

	            var custom = {};
	            var optionsMap = {};

	            for (idx = 0; idx < length; idx++) {
	                dataItem = data[idx];
	                value = this._value(dataItem);

	                selectedIndex = this._selectedItemIndex(value, selectedItems);
	                if (selectedIndex !== -1) {
	                    selectedItems.splice(selectedIndex, 1);
	                }

	                optionsMap[value] = idx;
	                options += this._option(value, this._text(dataItem), selectedIndex !== -1);
	            }

	            if (selectedItems.length) {
	                for (idx = 0; idx < selectedItems.length; idx++) {
	                    dataItem = selectedItems[idx];

	                    value = this._value(dataItem);
	                    custom[value] = length;
	                    optionsMap[value] = length;

	                    length += 1;
	                    options += this._option(value, this._text(dataItem), true);
	                }
	            }

	            this._customOptions = custom;
	            this._optionsMap = optionsMap;

	            this.element.html(options);
	        },

	        _buildSelectedItems: function(values) {
	            var valueField = this.options.dataValueField;
	            var textField = this.options.dataTextField;
	            var result = [];
	            var item;

	            for (var idx = 0; idx < values.length; idx++) {
	                item = {};
	                item[valueField] = values[idx];
	                item[textField] = values[idx];

	                result.push(item);
	            }

	            return result;
	        },

	        _selectedItemIndex: function(value, selectedItems) {
	            var valueGetter = this._value;
	            var idx = 0;

	            for (; idx < selectedItems.length; idx++) {
	                if (value === valueGetter(selectedItems[idx])) {
	                    return idx;
	                }
	            }

	            return -1;
	        },

	        _search: function() {
	            var that = this;

	            that._typingTimeout = setTimeout(function() {
	                var value = that.input.val();
	                if (that._prev !== value) {
	                    that._prev = value;
	                    that.search(value);
	                }
	            }, that.options.delay);
	        },

	        _allowOpening: function() {
	            return this._allowSelection() && List.fn._allowOpening.call(this);
	        },

	        _allowSelection: function() {
	            var max = this.options.maxSelectedItems;
	            return max === null || max > this.listView.value().length;
	        },

	        _angularTagItems: function(cmd) {
	            var that = this;

	            that.angular(cmd, function() {
	                return {
	                    elements: that.tagList[0].children,
	                    data: $.map(that.dataItems(), function(dataItem) {
	                        return { dataItem: dataItem };
	                    })
	                };
	            });
	        },

	        _selectValue: function(added, removed) {
	            var that = this;
	            var values = that.value();
	            var total = that.dataSource.total();
	            var tagList = that.tagList;
	            var getter = that._value;
	            var removedItem;
	            var addedItem;
	            var idx;

	            that._angularTagItems("cleanup");

	            if (that.options.tagMode === "multiple") {
	                for (idx = removed.length - 1; idx > -1; idx--) {
	                    removedItem = removed[idx];

	                    tagList[0].removeChild(tagList[0].children[removedItem.position]);

	                    that._setOption(getter(removedItem.dataItem), false);
	                }

	                for (idx = 0; idx < added.length; idx++) {
	                    addedItem = added[idx];

	                    tagList.append(that.tagTemplate(addedItem.dataItem));

	                    that._setOption(getter(addedItem.dataItem), true);
	                }
	            } else {
	                if (!that._maxTotal || that._maxTotal < total) {
	                    that._maxTotal = total;
	                }

	                tagList.html("");

	                if (values.length) {
	                    tagList.append(that.tagTemplate({
	                        values: values,
	                        dataItems: that.dataItems(),
	                        maxTotal: that._maxTotal,
	                        currentTotal: total
	                    }));
	                }

	                for (idx = removed.length - 1; idx > -1; idx--) {
	                    that._setOption(getter(removed[idx].dataItem), false);
	                }

	                for (idx = 0; idx < added.length; idx++) {
	                    that._setOption(getter(added[idx].dataItem), true);
	                }
	            }

	            that._angularTagItems("compile");
	            that._placeholder();
	        },

	        _select: function(candidate) {
	            var resolved = $.Deferred().resolve();

	            if (!candidate) {
	                return resolved;
	            }

	            var that = this;
	            var listView = that.listView;
	            var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));
	            var isSelected = candidate.hasClass("k-state-selected");

	            if (that._state === REBIND) {
	                that._state = "";
	            }

	            if (!that._allowSelection()) {
	                return resolved;
	            }

	            if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {
	                that._close();
	                return resolved;
	            }

	            return listView.select(candidate).done(function() {
	                that._placeholder();

	                if (that._state === FILTER) {
	                    that._state = ACCEPT;
	                    listView.skipUpdate(true);
	                }
	            });
	        },

	        _input: function() {
	            var that = this;
	            var element = that.element;
	            var accessKey = element[0].accessKey;
	            var input = that._innerWrapper.children("input.k-input");

	            if (!input[0]) {
	                input = $('<input class="k-input" style="width: 25px" />').appendTo(that._innerWrapper);
	            }

	            element.removeAttr("accesskey");

	            that._focused = that.input = input.attr({
	                "accesskey": accessKey,
	                "autocomplete": "off",
	                "role": "listbox",
	                "title": element[0].title,
	                "aria-expanded": false
	            });
	        },

	        _tagList: function() {
	            var that = this,
	                tagList = that._innerWrapper.children("ul");

	            if (!tagList[0]) {
	                tagList = $('<ul role="listbox" deselectable="on" class="k-reset"/>').appendTo(that._innerWrapper);
	            }

	            that.tagList = tagList;
	        },

	        _tagTemplate: function() {
	            var that = this;
	            var options = that.options;
	            var tagTemplate = options.tagTemplate;
	            var hasDataSource = options.dataSource;
	            var isMultiple = options.tagMode === "multiple";
	            var defaultTemplate;

	            if (that.element[0].length && !hasDataSource) {
	                options.dataTextField = options.dataTextField || "text";
	                options.dataValueField = options.dataValueField || "value";
	            }

	            defaultTemplate = isMultiple ? kendo.template("#:" + kendo.expr(options.dataTextField, "data") + "#", { useWithBlock: false }) : kendo.template("#:values.length# item(s) selected");

	            that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;

	            that.tagTemplate = function(data) {
	                return '<li class="k-button" deselectable="on"><span deselectable="on">' +
	                        tagTemplate(data) +
	                        '</span><span unselectable="on" aria-label="' +
	                        (isMultiple ? "delete" : "open") +
	                        '" class="k-select"><span class="k-icon ' +
	                        (isMultiple ? "k-i-close" : "k-i-arrow-60-down") + '">' +
	                        '</span></span></li>';
	            };
	        },

	        _loader: function() {
	            this._loading = $('<span class="k-icon k-i-loading ' + HIDDENCLASS + '"></span>').insertAfter(this.input);
	        },

	        _clearButton: function() {
	            this._clear = $('<span deselectable="on" class="k-icon k-clear-value k-i-close" title="clear"></span>').attr({
	                "role": "button",
	                "tabIndex": -1
	            });
	            if (this.options.clearButton) {
	                this._clear.insertAfter(this.input);
	            }
	        },

	        _textContainer: function() {
	            var computedStyles = kendo.getComputedStyles(this.input[0], styles);

	            computedStyles.position = "absolute";
	            computedStyles.visibility = "hidden";
	            computedStyles.top = -3333;
	            computedStyles.left = -3333;

	            this._span = $("<span/>").css(computedStyles).appendTo(this.wrapper);
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper = element.parent("span.k-multiselect");

	            if (!wrapper[0]) {
	                wrapper = element.wrap('<div class="k-widget k-multiselect k-header" deselectable="on" />').parent();
	                wrapper[0].style.cssText = element[0].style.cssText;
	                wrapper[0].title = element[0].title;

	                $('<div class="k-multiselect-wrap k-floatwrap" deselectable="on" />').insertBefore(element);
	            }

	            that.wrapper = wrapper.addClass(element[0].className).css("display", "");
	            that._innerWrapper = $(wrapper[0].firstChild);
	        }
	    });

	    function compare(a, b) {
	        var length;

	        if ((a === null && b !== null) || (a !== null && b === null)) {
	            return false;
	        }

	        length = a.length;
	        if (length !== b.length) {
	            return false;
	        }

	        while (length--) {
	            if (a[length] !== b[length]) {
	                return false;
	            }
	        }

	        return true;
	    }

	    ui.plugin(MultiSelect);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 62 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.ooxml.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(802);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 802:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	/* global JSZip */

	var __meta__ = { // jshint ignore:line
	    id: "ooxml",
	    name: "XLSX generation",
	    category: "framework",
	    advanced: true,
	    depends: [ "core" ]
	};

	(function($, kendo){

	var RELS = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	           '<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' +
	               '<Relationship Id="rId3" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml"/>' +
	               '<Relationship Id="rId2" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml"/>' +
	               '<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/>' +
	            '</Relationships>';

	var CORE = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<cp:coreProperties xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties" '+
	  'xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" ' +
	  'xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">' +
	   '<dc:creator>${creator}</dc:creator>' +
	   '<cp:lastModifiedBy>${lastModifiedBy}</cp:lastModifiedBy>' +
	   '<dcterms:created xsi:type="dcterms:W3CDTF">${created}</dcterms:created>' +
	   '<dcterms:modified xsi:type="dcterms:W3CDTF">${modified}</dcterms:modified>' +
	'</cp:coreProperties>');

	var APP = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties" xmlns:vt="http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes">' +
	  '<Application>Microsoft Excel</Application>' +
	  '<DocSecurity>0</DocSecurity>' +
	  '<ScaleCrop>false</ScaleCrop>' +
	  '<HeadingPairs>' +
	      '<vt:vector size="2" baseType="variant">' +
	          '<vt:variant>' +
	              '<vt:lpstr>Worksheets</vt:lpstr>' +
	          '</vt:variant>' +
	          '<vt:variant>' +
	              '<vt:i4>${sheets.length}</vt:i4>' +
	          '</vt:variant>' +
	      '</vt:vector>' +
	  '</HeadingPairs>' +
	  '<TitlesOfParts>' +
	      '<vt:vector size="${sheets.length}" baseType="lpstr">' +
	      '# for (var idx = 0; idx < sheets.length; idx++) { #' +
	          '# if (sheets[idx].options.title) { #' +
	          '<vt:lpstr>${sheets[idx].options.title}</vt:lpstr>' +
	          '# } else { #' +
	          '<vt:lpstr>Sheet${idx+1}</vt:lpstr>' +
	          '# } #' +
	      '# } #' +
	      '</vt:vector>' +
	  '</TitlesOfParts>' +
	  '<LinksUpToDate>false</LinksUpToDate>' +
	  '<SharedDoc>false</SharedDoc>' +
	  '<HyperlinksChanged>false</HyperlinksChanged>' +
	  '<AppVersion>14.0300</AppVersion>' +
	'</Properties>');

	var CONTENT_TYPES = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">' +
	   '<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />' +
	   '<Default Extension="xml" ContentType="application/xml" />' +
	   '<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" />' +
	   '<Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml"/>' +
	   '<Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml"/>' +
	   '# for (var idx = 1; idx <= count; idx++) { #' +
	   '<Override PartName="/xl/worksheets/sheet${idx}.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />' +
	   '# } #' +
	   '<Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml" />' +
	   '<Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml" />' +
	'</Types>');

	var WORKBOOK = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">' +
	  '<fileVersion appName="xl" lastEdited="5" lowestEdited="5" rupBuild="9303" />' +
	  '<workbookPr defaultThemeVersion="124226" />' +
	  '<bookViews>' +
	      '<workbookView xWindow="240" yWindow="45" windowWidth="18195" windowHeight="7995" />' +
	  '</bookViews>' +
	  '<sheets>' +
	  '# for (var idx = 0; idx < sheets.length; idx++) { #' +
	      '# var options = sheets[idx].options; #' +
	      '# var name = options.name || options.title #' +
	      '# if (name) { #' +
	      '<sheet name="${name}" sheetId="${idx+1}" r:id="rId${idx+1}" />' +
	      '# } else { #' +
	      '<sheet name="Sheet${idx+1}" sheetId="${idx+1}" r:id="rId${idx+1}" />' +
	      '# } #' +
	  '# } #' +
	  '</sheets>' +
	  '# if (filterNames.length || userNames.length) { #' +
	  '<definedNames>' +

	  ' # for (var di = 0; di < filterNames.length; di++) { #' +
	  '<definedName name="_xlnm._FilterDatabase" hidden="1" localSheetId="${filterNames[di].localSheetId}">' +
	  '${filterNames[di].name}!$${filterNames[di].from}:$${filterNames[di].to}' +
	  '</definedName>' +
	  ' # } #' +

	  ' # for (var i = 0; i < userNames.length; ++i) { #' +
	  '<definedName name="${userNames[i].name}" hidden="${userNames[i].hidden ? 1 : 0}"' +
	    ' # if (userNames[i].localSheetId != null) { # localSheetId="${userNames[i].localSheetId}" # } #' +
	  '>${userNames[i].value}</definedName>' +
	  ' # } #' +

	  '</definedNames>' +
	  '# } #' +
	  '<calcPr fullCalcOnLoad="1" calcId="145621" />' +
	'</workbook>');

	var WORKSHEET = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" mc:Ignorable="x14ac">' +
	   '<dimension ref="A1" />' +
	   '<sheetViews>' +
	       '<sheetView #if(index==0) {# tabSelected="1" #}# workbookViewId="0" #if (showGridLines === false) {# showGridLines="0" #}#>' +
	       '# if (frozenRows || frozenColumns) { #' +
	       '<pane state="frozen"' +
	       '# if (frozenColumns) { #' +
	       ' xSplit="${frozenColumns}"' +
	       '# } #' +
	       '# if (frozenRows) { #' +
	       ' ySplit="${frozenRows}"' +
	       '# } #' +
	       ' topLeftCell="${String.fromCharCode(65 + (frozenColumns || 0))}${(frozenRows || 0)+1}"'+
	       '/>' +
	       '# } #' +
	       '</sheetView>' +
	   '</sheetViews>' +
	   '<sheetFormatPr x14ac:dyDescent="0.25" defaultRowHeight="#= defaults.rowHeight ? defaults.rowHeight * 0.75 : 15 #" ' +
	       '# if (defaults.columnWidth) { # defaultColWidth="#= kendo.ooxml.toWidth(defaults.columnWidth) #" # } #' +
	   ' />' +
	   '# if (defaultCellStyleId != null || (columns && columns.length > 0)) { #' +
	   '<cols>' +
	   '# if (!columns || !columns.length) { #' +
	       '<col min="1" max="16384" style="${defaultCellStyleId}" ' +
	       '# if (defaults.columnWidth) { # width="#= kendo.ooxml.toWidth(defaults.columnWidth) #" # } #' +
	       ' />' +
	   '# } #' +
	   '# for (var ci = 0; ci < columns.length; ci++) { #' +
	       '# var column = columns[ci]; #' +
	       '# var columnIndex = typeof column.index === "number" ? column.index + 1 : (ci + 1); #' +
	       '# if (column.width === 0) { #' +
	           '<col #if(defaultCellStyleId!=null){# style="${defaultCellStyleId}" #}#' +
	           'min="${columnIndex}" max="${columnIndex}" hidden="1" customWidth="1" />' +
	       '# } else if (column.width) { #' +
	           '<col #if(defaultCellStyleId!=null){# style="${defaultCellStyleId}" #}#' +
	           'min="${columnIndex}" max="${columnIndex}" customWidth="1"' +
	           '# if (column.autoWidth) { #' +
	               ' width="${((column.width*7+5)/7*256)/256}" bestFit="1"' +
	           '# } else { #' +
	               ' width="#= kendo.ooxml.toWidth(column.width) #" ' +
	           '# } #' +
	           '/>' +
	       '# } #' +
	   '# } #' +
	   '</cols>' +
	   '# } #' +
	   '<sheetData>' +
	   '# for (var ri = 0; ri < data.length; ri++) { #' +
	       '# var row = data[ri]; #' +
	       '# var rowIndex = typeof row.index === "number" ? row.index + 1 : (ri + 1); #' +
	       '<row r="${rowIndex}" x14ac:dyDescent="0.25" ' +
	           '# if (row.height === 0) { # hidden="1" # } ' +
	           '  else if (row.height) { # ht="#= kendo.ooxml.toHeight(row.height) #" customHeight="1" # } #' +
	       ' >' +
	       '# for (var ci = 0; ci < row.data.length; ci++) { #' +
	           '# var cell = row.data[ci];#' +
	           '<c r="#=cell.ref#"# if (cell.style) { # s="#=cell.style#" # } ## if (cell.type) { # t="#=cell.type#"# } #>' +
	           '# if (cell.formula != null) { #' +
	               '<f>${cell.formula}</f>' +
	           '# } #' +
	           '# if (cell.value != null) { #' +
	               '<v>${cell.value}</v>' +
	           '# } #' +
	           '</c>' +
	       '# } #' +
	       '</row>' +
	   '# } #' +
	   '</sheetData>' +
	   '# if (filter) { #' +
	   '<autoFilter ref="${filter.from}:${filter.to}"/>' +
	   '# } #' +
	   '# if (mergeCells.length) { #' +
	   '<mergeCells count="${mergeCells.length}">' +
	       '# for (var ci = 0; ci < mergeCells.length; ci++) { #' +
	       '<mergeCell ref="${mergeCells[ci]}"/>' +
	       '# } #' +
	   '</mergeCells>' +
	   '# } #' +
	   '# if (validations.length) { #' +
	   '<dataValidations>' +
	       '# for (var vi = 0; vi < validations.length; vi++) { #' +
	       '# var val = validations[vi]; #' +
	       '<dataValidation sqref="#= val.sqref.join(" ") #"' +
	                      ' showErrorMessage="#= val.showErrorMessage #"' +
	                      ' type="#= val.type #"' +
	                      '# if (val.type != "list") {# operator="#= val.operator #" # } #' +
	                      ' allowBlank="#= val.allowBlank #"' +
	                      ' showDropDown="#= val.showDropDown #"' +
	                      '# if (val.error) {# error="#= val.error #" # } #' +
	                      '# if (val.errorTitle) {# errorTitle="#= val.errorTitle #" # } #' +
	                      '>' +
	           '# if (val.formula1) { #' +
	           '<formula1>#= val.formula1 #</formula1>' +
	           '# } #' +
	           '# if (val.formula2) { #' +
	           '<formula2>#= val.formula2 #</formula2>' +
	           '# } #' +
	       '</dataValidation>' +
	       '# } #' +
	   '</dataValidations>' +
	   '# } #' +
	   '# if (hyperlinks.length) { #' +
	   '<hyperlinks>' +
	       '# for (var hi = 0; hi < hyperlinks.length; hi++) { #' +
	       '<hyperlink ref="${hyperlinks[hi].ref}" r:id="rId${hi}"/>' +
	       '# } #' +
	   '</hyperlinks>' +
	   '# } #' +
	   '<pageMargins left="0.7" right="0.7" top="0.75" bottom="0.75" header="0.3" footer="0.3" />' +
	'</worksheet>');

	var WORKBOOK_RELS = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' +
	'# for (var idx = 1; idx <= count; idx++) { #' +
	   '<Relationship Id="rId${idx}" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet${idx}.xml" />' +
	'# } #' +
	   '<Relationship Id="rId${count+1}" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml" />' +
	   '<Relationship Id="rId${count+2}" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml" />' +
	'</Relationships>');

	var WORKSHEET_RELS = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">' +
	'# for (var i = 0; i < hyperlinks.length; i++) { #' +
	   '<Relationship Id="rId${i}" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" Target="${hyperlinks[i].target}" TargetMode="External" />' +
	'# } #' +
	'</Relationships>');

	var SHARED_STRINGS = kendo.template(
	'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n' +
	'<sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="${count}" uniqueCount="${uniqueCount}">' +
	'# for (var index in indexes) { #' +
	    '<si><t>${index.substring(1)}</t></si>' +
	'# } #' +
	'</sst>');

	var STYLES = kendo.template(
	'<?xml version="1.0" encoding="UTF-8"?>' +
	'<styleSheet' +
	   ' xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main"' +
	   ' xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"'+
	   ' mc:Ignorable="x14ac"'+
	   ' xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">' +
	   '<numFmts count="${formats.length}">' +
	   '# for (var fi = 0; fi < formats.length; fi++) { #' +
	       '# var format = formats[fi]; #' +
	       '<numFmt formatCode="${format.format}" numFmtId="${165+fi}" />' +
	   '# } #' +
	   '</numFmts>' +
	   '<fonts count="${fonts.length+1}" x14ac:knownFonts="1">' +
	      '<font>' +
	         '<sz val="11" />' +
	         '<color theme="1" />' +
	         '<name val="Calibri" />' +
	         '<family val="2" />' +
	         '<scheme val="minor" />' +
	      '</font>' +
	   '# for (var fi = 0; fi < fonts.length; fi++) { #' +
	       '# var font = fonts[fi]; #' +
	      '<font>' +
	         '# if (font.fontSize) { #' +
	         '<sz val="${font.fontSize}" />' +
	         '# } else { #' +
	         '<sz val="11" />' +
	         '# } #' +
	         '# if (font.bold) { #' +
	            '<b/>' +
	         '# } #' +
	         '# if (font.italic) { #' +
	            '<i/>' +
	         '# } #' +
	         '# if (font.underline) { #' +
	            '<u/>' +
	         '# } #' +
	         '# if (font.color) { #' +
	         '<color rgb="${font.color}" />' +
	         '# } else { #' +
	         '<color theme="1" />' +
	         '# } #' +
	         '# if (font.fontFamily) { #' +
	         '<name val="${font.fontFamily}" />' +
	         '<family val="2" />' +
	         '# } else { #' +
	         '<name val="Calibri" />' +
	         '<family val="2" />' +
	         '<scheme val="minor" />' +
	         '# } #' +
	      '</font>' +
	   '# } #' +
	   '</fonts>' +
	    '<fills count="${fills.length+2}">' +
	        '<fill><patternFill patternType="none"/></fill>' +
	        '<fill><patternFill patternType="gray125"/></fill>' +
	    '# for (var fi = 0; fi < fills.length; fi++) { #' +
	       '# var fill = fills[fi]; #' +
	       '# if (fill.background) { #' +
	        '<fill>' +
	            '<patternFill patternType="solid">' +
	                '<fgColor rgb="${fill.background}"/>' +
	            '</patternFill>' +
	        '</fill>' +
	       '# } #' +
	    '# } #' +
	    '</fills>' +
	    '<borders count="${borders.length+1}">' +
	        '<border><left/><right/><top/><bottom/><diagonal/></border>' +
	        '# for (var bi = 0; bi < borders.length; bi++) { #' +
	            '#= kendo.ooxml.borderTemplate(borders[bi]) #' +
	        '# } #' +
	    '</borders>' +
	    '<cellStyleXfs count="1">' +
	        '<xf borderId="0" fillId="0" fontId="0" />' +
	    '</cellStyleXfs>' +
	   '<cellXfs count="${styles.length+1}">' +
	       '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0"/>' +
	   '# for (var si = 0; si < styles.length; si++) { #' +
	       '# var style = styles[si]; #' +
	       '<xf xfId="0"' +
	       '# if (style.fontId) { #' +
	          ' fontId="${style.fontId}" applyFont="1"' +
	       '# } #' +
	       '# if (style.fillId) { #' +
	          ' fillId="${style.fillId}" applyFill="1"' +
	       '# } #' +
	       '# if (style.numFmtId) { #' +
	          ' numFmtId="${style.numFmtId}" applyNumberFormat="1"' +
	       '# } #' +
	       '# if (style.textAlign || style.verticalAlign || style.wrap) { #' +
	       ' applyAlignment="1"' +
	       '# } #' +
	       '# if (style.borderId) { #' +
	          ' borderId="${style.borderId}" applyBorder="1"' +
	       '# } #' +
	       '>' +
	       '# if (style.textAlign || style.verticalAlign || style.wrap) { #' +
	       '<alignment' +
	       '# if (style.textAlign) { #' +
	       ' horizontal="${style.textAlign}"' +
	       '# } #' +
	       '# if (style.verticalAlign) { #' +
	       ' vertical="${style.verticalAlign}"' +
	       '# } #' +
	       '# if (style.wrap) { #' +
	       ' wrapText="1"' +
	       '# } #' +
	       '/>' +
	       '# } #' +
	       '</xf>' +
	   '# } #' +
	   '</cellXfs>' +
	   '<cellStyles count="1">' +
	       '<cellStyle name="Normal" xfId="0" builtinId="0"/>' +
	   '</cellStyles>' +
	   '<dxfs count="0" />' +
	   '<tableStyles count="0" defaultTableStyle="TableStyleMedium2" defaultPivotStyle="PivotStyleMedium9" />' +
	'</styleSheet>');

	function numChar(colIndex) {
	   var letter = Math.floor(colIndex / 26) - 1;

	   return (letter >= 0 ? numChar(letter) : "") + String.fromCharCode(65 + (colIndex % 26));
	}

	function ref(rowIndex, colIndex) {
	    return numChar(colIndex) + (rowIndex + 1);
	}

	function $ref(rowIndex, colIndex) {
	    return numChar(colIndex) + "$" + (rowIndex + 1);
	}

	function filterRowIndex(options) {
	    var frozenRows = options.frozenRows || (options.freezePane || {}).rowSplit || 1;
	    return frozenRows - 1;
	}

	function toWidth(px) {
	    return ((px / 7) * 100 + 0.5) / 100;
	}

	function toHeight(px) {
	    return px * 0.75;
	}

	function stripFunnyChars(value) {
	    return (value+"")
	        .replace(/[\x00-\x08]/g, "")
	        .replace(/\n/g, "\r\n");
	}

	var DATE_EPOCH = new Date(1900, 0, 0);

	var Worksheet = kendo.Class.extend({
	    init: function(options, sharedStrings, styles, borders) {
	        this.options = options;
	        this._strings = sharedStrings;
	        this._styles = styles;
	        this._borders = borders;
	        this._validations = {};
	    },
	    relsToXML: function() {
	        var hyperlinks = this.options.hyperlinks || [];
	        if (!hyperlinks.length) {
	            return "";
	        }

	        return WORKSHEET_RELS({ hyperlinks: hyperlinks });
	    },
	    toXML: function(index) {
	        var mergeCells = this.options.mergedCells || [];
	        var rows = this.options.rows || [];
	        var data = inflate(rows, mergeCells);

	        this._readCells(data);

	        var filter = this.options.filter;
	        if (filter && (typeof filter.from === "number") && (typeof filter.to === "number")) {
	            filter = {
	                from: ref(filterRowIndex(this.options), filter.from),
	                to: ref(filterRowIndex(this.options), filter.to)
	            };
	        }

	        var validations = [];
	        for (var i in this._validations) {
	            if (Object.prototype.hasOwnProperty.call(this._validations, i)) {
	                validations.push(this._validations[i]);
	            }
	        }

	        var defaultCellStyleId = null;
	        if (this.options.defaultCellStyle) {
	            defaultCellStyleId = this._lookupStyle(this.options.defaultCellStyle);
	        }

	        var freezePane = this.options.freezePane || {};
	        return WORKSHEET({
	            frozenColumns: this.options.frozenColumns || freezePane.colSplit,
	            frozenRows: this.options.frozenRows || freezePane.rowSplit,
	            columns: this.options.columns,
	            defaults: this.options.defaults || {},
	            data: data,
	            index: index,
	            mergeCells: mergeCells,
	            filter: filter,
	            showGridLines: this.options.showGridLines,
	            hyperlinks: this.options.hyperlinks || [],
	            validations: validations,
	            defaultCellStyleId: defaultCellStyleId
	        });
	    },
	    _lookupString: function(value) {
	        var key = "$" + value;
	        var index = this._strings.indexes[key];

	        if (index !== undefined) {
	            value = index;
	        } else {
	            value = this._strings.indexes[key] = this._strings.uniqueCount;
	            this._strings.uniqueCount ++;
	        }

	        this._strings.count ++;

	        return value;
	    },
	    _lookupStyle: function(style) {
	        var json = kendo.stringify(style);

	        if (json == "{}") {
	            return 0;
	        }

	        var index = $.inArray(json, this._styles);

	        if (index < 0) {
	            index = this._styles.push(json) - 1;
	        }

	        // There is one default style
	        return index + 1;
	    },
	    _lookupBorder: function(border) {
	        var json = kendo.stringify(border);
	        if (json == "{}") {
	            return;
	        }

	        var index = $.inArray(json, this._borders);
	        if (index < 0) {
	            index = this._borders.push(json) - 1;
	        }

	        // There is one default border
	        return index + 1;
	    },
	    _readCells: function(rowData) {
	        for (var i = 0; i < rowData.length; i++) {
	            var row = rowData[i];
	            var cells = row.cells;

	            row.data = [];

	            for (var j = 0; j < cells.length; j++) {
	                var cellData = this._cell(cells[j], row.index, j);
	                if (cellData) {
	                    row.data.push(cellData);
	                }
	            }
	        }
	    },
	    _cell: function(data, rowIndex, cellIndex) {
	        if (!data || data === EMPTY_CELL) {
	            return null;
	        }

	        var value = data.value;

	        var border = {};

	        if (data.borderLeft) {
	            border.left = data.borderLeft;
	        }

	        if (data.borderRight) {
	            border.right = data.borderRight;
	        }

	        if (data.borderTop) {
	            border.top = data.borderTop;
	        }

	        if (data.borderBottom) {
	            border.bottom = data.borderBottom;
	        }

	        border = this._lookupBorder(border);

	        var defStyle = this.options.defaultCellStyle || {};
	        var style = { borderId: border };

	        (function(add){
	            add("color");
	            add("background");
	            add("bold");
	            add("italic");
	            add("underline");
	            if (!add("fontFamily")) { add("fontName", "fontFamily"); }
	            add("fontSize");
	            add("format");
	            if (!add("textAlign")) { add("hAlign", "textAlign"); }
	            if (!add("verticalAlign")) { add("vAlign", "verticalAlign"); }
	            add("wrap");
	        })(
	            function(prop, target){
	                var val = data[prop];
	                if (val === undefined) {
	                    val = defStyle[prop];
	                }
	                if (val !== undefined) {
	                    style[target || prop] = val;
	                    return true;
	                }
	            }
	        );

	        var columns = this.options.columns || [];

	        var column = columns[cellIndex];
	        var type = typeof value;

	        if (column && column.autoWidth) {
	            var displayValue = value;

	            if (type === "number") {
	                // kendo.toString will not behave exactly like the Excel format
	                // Still, it's the best we have available for estimating the character count.
	                displayValue = kendo.toString(value, data.format);
	            }

	            column.width = Math.max(column.width || 0, (displayValue + "").length);
	        }

	        if (type === "string") {
	            value = stripFunnyChars(value);
	            value = this._lookupString(value);
	            type = "s";
	        } else if (type === "number") {
	            type = "n";
	        } else if (type === "boolean") {
	            type = "b";
	            value = +value;
	        } else if (value && value.getTime) {
	            type = null;

	            var offset = (value.getTimezoneOffset() - DATE_EPOCH.getTimezoneOffset()) * kendo.date.MS_PER_MINUTE;
	            value = (value - DATE_EPOCH - offset) / kendo.date.MS_PER_DAY + 1;

	            if (!style.format) {
	                style.format = "mm-dd-yy";
	            }
	        } else {
	            type = null;
	            value = null;
	        }

	        style = this._lookupStyle(style);

	        var cellName = ref(rowIndex, cellIndex);

	        if (data.validation) {
	            this._addValidation(data.validation, cellName);
	        }

	        return {
	            value: value,
	            formula: data.formula,
	            type: type,
	            style: style,
	            ref: cellName
	        };
	    },
	    _addValidation: function(v, ref) {
	        var tmp = {
	            showErrorMessage : v.type == "reject" ? 1 : 0,
	            formula1         : v.from,
	            formula2         : v.to,
	            type             : MAP_EXCEL_TYPE[v.dataType] || v.dataType,
	            operator         : MAP_EXCEL_OPERATOR[v.comparerType] || v.comparerType,
	            allowBlank       : v.allowNulls ? 1 : 0,
	            showDropDown     : v.showButton ? 0 : 1, // LOL, Excel!
	            error            : v.messageTemplate,
	            errorTitle       : v.titleTemplate
	        };
	        var json = JSON.stringify(tmp);
	        if (!this._validations[json]) {
	            this._validations[json] = tmp;
	            tmp.sqref = [];
	        }
	        this._validations[json].sqref.push(ref);
	    }
	});

	var MAP_EXCEL_OPERATOR = {
	    // includes only what differs; key is our operator, value is Excel
	    // operator.
	    greaterThanOrEqualTo : "greaterThanOrEqual",
	    lessThanOrEqualTo    : "lessThanOrEqual"
	};

	var MAP_EXCEL_TYPE = {
	    number: "decimal"
	};

	var defaultFormats = {
	    "General": 0,
	    "0": 1,
	    "0.00": 2,
	    "#,##0": 3,
	    "#,##0.00": 4,
	    "0%": 9,
	    "0.00%": 10,
	    "0.00E+00": 11,
	    "# ?/?": 12,
	    "# ??/??": 13,
	    "mm-dd-yy": 14,
	    "d-mmm-yy": 15,
	    "d-mmm": 16,
	    "mmm-yy": 17,
	    "h:mm AM/PM": 18,
	    "h:mm:ss AM/PM": 19,
	    "h:mm": 20,
	    "h:mm:ss": 21,
	    "m/d/yy h:mm": 22,
	    "#,##0 ;(#,##0)": 37,
	    "#,##0 ;[Red](#,##0)": 38,
	    "#,##0.00;(#,##0.00)": 39,
	    "#,##0.00;[Red](#,##0.00)": 40,
	    "mm:ss": 45,
	    "[h]:mm:ss": 46,
	    "mmss.0": 47,
	    "##0.0E+0": 48,
	    "@": 49,
	    "[$-404]e/m/d": 27,
	    "m/d/yy": 30,
	    "t0": 59,
	    "t0.00": 60,
	    "t#,##0": 61,
	    "t#,##0.00": 62,
	    "t0%": 67,
	    "t0.00%": 68,
	    "t# ?/?": 69,
	    "t# ??/??": 70
	};

	function convertColor(color) {
	    if (color.length < 6) {
	        color = color.replace(/(\w)/g, function($0, $1) {
	            return $1 + $1;
	        });
	    }

	    color = color.substring(1).toUpperCase();

	    if (color.length < 8) {
	        color = "FF" + color;
	    }

	    return color;
	}

	var Workbook = kendo.Class.extend({
	    init: function(options) {
	        this.options = options || {};
	        this._strings = {
	            indexes: {},
	            count: 0,
	            uniqueCount: 0
	        };
	        this._styles = [];
	        this._borders = [];

	        this._sheets = $.map(this.options.sheets || [], $.proxy(function(options) {
	            options.defaults = this.options;

	            return new Worksheet(options, this._strings, this._styles, this._borders);
	        }, this));
	    },
	    toDataURL: function() {
	        if (typeof JSZip === "undefined") {
	           throw new Error("JSZip not found. Check http://docs.telerik.com/kendo-ui/framework/excel/introduction#requirements for more details.");
	        }

	        var zip = new JSZip();

	        var docProps = zip.folder("docProps");

	        docProps.file("core.xml", CORE({
	            creator: this.options.creator || "Kendo UI",
	            lastModifiedBy: this.options.creator || "Kendo UI",
	            created: this.options.date || new Date().toJSON(),
	            modified: this.options.date || new Date().toJSON()
	        }));

	        var sheetCount = this._sheets.length;

	        docProps.file("app.xml", APP({ sheets: this._sheets }));

	        var rels = zip.folder("_rels");
	        rels.file(".rels", RELS);

	        var xl = zip.folder("xl");

	        var xlRels = xl.folder("_rels");
	        xlRels.file("workbook.xml.rels", WORKBOOK_RELS({ count: sheetCount }));

	        var sheetIds = {};

	        xl.file("workbook.xml", WORKBOOK({
	            sheets: this._sheets,
	            filterNames: $.map(this._sheets, function(sheet, index) {
	                var options = sheet.options;
	                var sheetName = (options.name || options.title || "Sheet" + (index + 1));
	                sheetIds[sheetName.toLowerCase()] = index;
	                var filter = options.filter;
	                if (filter && typeof filter.from !== "undefined" && typeof filter.to !== "undefined") {
	                    return {
	                        localSheetId: index,
	                        name: sheetName,
	                        from: $ref(filterRowIndex(options), filter.from),
	                        to: $ref(filterRowIndex(options), filter.to)
	                    };
	                }
	            }),
	            userNames: $.map(this.options.names || [], function(def){
	                return {
	                    name: def.localName,
	                    localSheetId: def.sheet ? sheetIds[def.sheet.toLowerCase()] : null,
	                    value: def.value,
	                    hidden: def.hidden
	                };
	            })
	        }));

	        var worksheets = xl.folder("worksheets");

	        var sheetRels = worksheets.folder("_rels");

	        for (var idx = 0; idx < sheetCount; idx++) {
	            var sheet = this._sheets[idx];
	            var sheetName = kendo.format("sheet{0}.xml", idx+1);
	            var relsXml = sheet.relsToXML();

	            if (relsXml) {
	                sheetRels.file(sheetName + ".rels", relsXml);
	            }

	            worksheets.file(sheetName, sheet.toXML(idx));
	        }

	        var borders = $.map(this._borders, $.parseJSON);

	        var styles = $.map(this._styles, $.parseJSON);

	        var hasFont = function(style) {
	            return style.underline || style.bold || style.italic || style.color || style.fontFamily || style.fontSize;
	        };

	        var fonts = $.map(styles, function(style) {
	            if (style.color) {
	                style.color = convertColor(style.color);
	            }

	            if (hasFont(style)) {
	                return style;
	            }
	        });

	        var formats = $.map(styles, function(style) {
	            if (style.format && defaultFormats[style.format] === undefined) {
	                return style;
	            }
	        });

	       var fills = $.map(styles, function(style) {
	            if (style.background) {
	                style.background = convertColor(style.background);
	                return style;
	            }
	        });

	        xl.file("styles.xml", STYLES({
	           fonts: fonts,
	           fills: fills,
	           formats: formats,
	           borders: borders,
	           styles: $.map(styles, function(style) {
	              var result = {};

	              if (hasFont(style)) {
	                  result.fontId = $.inArray(style, fonts) + 1;
	              }

	              if (style.background) {
	                  result.fillId = $.inArray(style, fills) + 2;
	              }

	              result.textAlign = style.textAlign;
	              result.verticalAlign = style.verticalAlign;
	              result.wrap = style.wrap;
	              result.borderId = style.borderId;

	              if (style.format) {
	                  if (defaultFormats[style.format] !== undefined) {
	                      result.numFmtId = defaultFormats[style.format];
	                  } else {
	                      result.numFmtId = 165 + $.inArray(style, formats);
	                  }
	              }

	              return result;
	           })
	        }));

	        xl.file("sharedStrings.xml", SHARED_STRINGS(this._strings));

	        zip.file("[Content_Types].xml", CONTENT_TYPES( { count: sheetCount }));

	        return "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + zip.generate({ compression: "DEFLATE" });
	    }
	});

	function borderStyle(width) {
	    var alias = "thin";

	    if (width === 2) {
	        alias = "medium";
	    } else if (width === 3) {
	        alias = "thick";
	    }

	    return alias;
	}

	function borderSideTemplate(name, style) {
	    var result = "";

	    if (style) {
	        result += "<" + name + " style=\"" + borderStyle(style.size) + "\">";
	        if (style.color) {
	            result += "<color rgb=\"" + convertColor(style.color) + "\"/>";
	        }
	        result += "</" + name + ">";
	    }

	    return result;
	}

	function borderTemplate(border) {
	    return "<border>" +
	       borderSideTemplate("left", border.left) +
	       borderSideTemplate("right", border.right) +
	       borderSideTemplate("top", border.top) +
	       borderSideTemplate("bottom", border.bottom) +
	   "</border>";
	}

	var EMPTY_CELL = {};
	function inflate(rows, mergedCells) {
	    var rowData = [];
	    var rowsByIndex = [];

	    indexRows(rows, function(row, index) {
	        var data = {
	            _source: row,
	            index: index,
	            height: row.height,
	            cells: []
	        };

	        rowData.push(data);
	        rowsByIndex[index] = data;
	    });

	    var sorted = sortByIndex(rowData).slice(0);
	    var ctx = {
	        rowData: rowData,
	        rowsByIndex: rowsByIndex,
	        mergedCells: mergedCells
	    };

	    for (var i = 0; i < sorted.length; i++) {
	        fillCells(sorted[i], ctx);
	        delete sorted[i]._source;
	    }

	    return sortByIndex(rowData);
	}

	function indexRows(rows, callback) {
	    for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        if (!row) {
	            continue;
	        }

	        var index = row.index;
	        if (typeof index !== "number") {
	            index = i;
	        }

	        callback(row, index);
	    }
	}

	function sortByIndex(items) {
	    return items.sort(function(a, b) {
	        return a.index - b.index;
	    });
	}

	function fillCells(data, ctx) {
	    var row = data._source;
	    var rowIndex = data.index;
	    var cells = row.cells;
	    var cellData = data.cells;

	    if (!cells) {
	        return;
	    }

	    for (var i = 0; i < cells.length; i++) {
	        var cell = cells[i] || EMPTY_CELL;

	        var rowSpan = cell.rowSpan || 1;
	        var colSpan = cell.colSpan || 1;

	        var cellIndex = insertCell(cellData, cell);
	        spanCell(cell, cellData, cellIndex, colSpan);

	        if (rowSpan > 1 || colSpan > 1) {
	            ctx.mergedCells.push(
	                ref(rowIndex, cellIndex) + ":" +
	                ref(rowIndex + rowSpan - 1, cellIndex + colSpan - 1)
	            );
	        }

	        if (rowSpan > 1) {
	            for (var ri = rowIndex + 1; ri < rowIndex + rowSpan; ri++) {
	                var nextRow = ctx.rowsByIndex[ri];
	                if (!nextRow) {
	                    nextRow = ctx.rowsByIndex[ri] = { index: ri, cells: [] };
	                    ctx.rowData.push(nextRow);
	                }

	                spanCell(cell, nextRow.cells, cellIndex - 1, colSpan + 1);
	            }
	        }
	    }
	}

	function insertCell(data, cell) {
	    var index;

	    if (typeof cell.index === "number") {
	        index = cell.index;
	        insertCellAt(data, cell, cell.index);
	    } else {
	        index = appendCell(data, cell);
	    }

	    return index;
	}

	function insertCellAt(data, cell, index) {
	    data[index] = cell;
	}

	function appendCell(data, cell) {
	    var index = data.length;

	    for (var i = 0; i < data.length + 1; i++) {
	        if (!data[i]) {
	            data[i] = cell;
	            index = i;
	            break;
	        }
	    }

	    return index;
	}

	function spanCell(cell, row, startIndex, colSpan) {
	    for (var i = 1; i < colSpan; i++) {
	        var tmp = {
	            borderTop    : cell.borderTop,
	            borderRight  : cell.borderRight,
	            borderBottom : cell.borderBottom,
	            borderLeft   : cell.borderLeft
	        };
	        insertCellAt(row, tmp, startIndex + i);
	    }
	}

	kendo.ooxml = {
	    Workbook: Workbook,
	    Worksheet: Worksheet,
	    toWidth: toWidth,
	    toHeight: toHeight,
	    borderTemplate: borderTemplate
	};

	})(kendo.jQuery, kendo);

	return kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 63 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.pdf.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(805);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 570:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.drawing */ 56);

/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 805:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(570), __webpack_require__(806), __webpack_require__(807) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	}) (function(){

	var __meta__ = { // jshint ignore:line
	    id: "pdf",
	    name: "PDF export",
	    description: "PDF Generation framework",
	    mixin: true,
	    category: "framework",
	    depends: [ "core", "drawing" ]
	};

	}, __webpack_require__(3));


/***/ },

/***/ 806:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./pdf/core */ 66);

/***/ },

/***/ 807:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./pdf/mixins */ 144);

/***/ }

/******/ });

/***/ }),
/* 64 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.validator.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(895);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 895:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "validator",
	    name: "Validator",
	    category: "web",
	    description: "The Validator offers an easy way to do a client-side form validation.",
	    depends: [ "core" ]
	};

	/* jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        NS = ".kendoValidator",
	        INVALIDMSG = "k-invalid-msg",
	        invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),
	        INVALIDINPUT = "k-invalid",
	        VALIDINPUT = "k-valid",
	        emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,
	        urlRegExp = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
	        INPUTSELECTOR = ":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])",
	        CHECKBOXSELECTOR = ":checkbox:not([disabled],[readonly])",
	        NUMBERINPUTSELECTOR = "[type=number],[type=range]",
	        BLUR = "blur",
	        NAME = "name",
	        FORM = "form",
	        NOVALIDATE = "novalidate",
	        //events
	        VALIDATE = "validate",
	        CHANGE = "change",
	        VALIDATE_INPUT = "validateInput",        
	        proxy = $.proxy,
	        patternMatcher = function(value, pattern) {
	            if (typeof pattern === "string") {
	                pattern = new RegExp('^(?:' + pattern + ')$');
	            }
	            return pattern.test(value);
	        },
	        matcher = function(input, selector, pattern) {
	            var value = input.val();

	            if (input.filter(selector).length && value !== "") {
	                return patternMatcher(value, pattern);
	            }
	            return true;
	        },
	        hasAttribute = function(input, name) {
	            if (input.length)  {
	                return input[0].attributes[name] != null;
	            }
	            return false;
	        };

	    if (!kendo.ui.validator) {
	        kendo.ui.validator = { rules: {}, messages: {} };
	    }

	    function resolveRules(element) {
	        var resolvers = kendo.ui.validator.ruleResolvers || {},
	            rules = {},
	            name;

	        for (name in resolvers) {
	            $.extend(true, rules, resolvers[name].resolve(element));
	        }
	        return rules;
	    }

	    function decode(value) {
	        return value.replace(/&amp/g, '&amp;')
	            .replace(/&quot;/g, '"')
	            .replace(/&#39;/g, "'")
	            .replace(/&lt;/g, '<')
	            .replace(/&gt;/g, '>');
	    }

	    function numberOfDecimalDigits(value) {
	        value = (value + "").split('.');
	        if (value.length > 1) {
	            return value[1].length;
	        }
	        return 0;
	    }

	    function parseHtml(text) {
	        if ($.parseHTML) {
	            return $($.parseHTML(text));
	        }
	        return $(text);
	    }

	    function searchForMessageContainer(elements, fieldName) {
	        var containers = $(),
	            element,
	            attr;

	        for (var idx = 0, length = elements.length; idx < length; idx++) {
	            element = elements[idx];
	            if (invalidMsgRegExp.test(element.className)) {
	                attr = element.getAttribute(kendo.attr("for"));
	                if (attr === fieldName) {
	                    containers = containers.add(element);
	                }
	            }
	        }
	        return containers;
	    }

	    var Validator = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                resolved = resolveRules(element),
	                validateAttributeSelector = "[" + kendo.attr("validate") + "!=false]";

	            options = options || {};

	            options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);
	            options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);

	            Widget.fn.init.call(that, element, options);

	            that._errorTemplate = kendo.template(that.options.errorTemplate);

	            if (that.element.is(FORM)) {
	                that.element.attr(NOVALIDATE, NOVALIDATE);
	            }

	            that._inputSelector = INPUTSELECTOR + validateAttributeSelector;
	            that._checkboxSelector = CHECKBOXSELECTOR + validateAttributeSelector;

	            that._errors = {};
	            that._attachEvents();
	            that._isValidated = false;
	        },

	        events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],

	        options: {
	            name: "Validator",
	            errorTemplate: '<span class="k-widget k-tooltip k-tooltip-validation">' +
	                '<span class="k-icon k-i-warning"> </span> #=message#</span>',
	            messages: {
	                required: "{0} is required",
	                pattern: "{0} is not valid",
	                min: "{0} should be greater than or equal to {1}",
	                max: "{0} should be smaller than or equal to {1}",
	                step: "{0} is not valid",
	                email: "{0} is not valid email",
	                url: "{0} is not valid URL",
	                date: "{0} is not valid date",
	                dateCompare: "End date should be greater than or equal to the start date"
	            },
	            rules: {
	                required: function(input) {
	                    var checkbox = input.filter("[type=checkbox]").length && !input.is(":checked"),
	                        value = input.val();

	                    return !(hasAttribute(input, "required") && (!value || value === "" || value.length === 0 || checkbox));
	                },
	                pattern: function(input) {
	                    if (input.filter("[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]").filter("[pattern]").length && input.val() !== "") {
	                        return patternMatcher(input.val(), input.attr("pattern"));
	                    }
	                    return true;
	                },
	                min: function(input) {
	                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[min]").length && input.val() !== "") {
	                        var min = parseFloat(input.attr("min")) || 0,
	                            val = kendo.parseFloat(input.val());

	                        return min <= val;
	                    }
	                    return true;
	                },
	                max: function(input) {
	                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[max]").length && input.val() !== "") {
	                        var max = parseFloat(input.attr("max")) || 0,
	                            val = kendo.parseFloat(input.val());

	                        return max >= val;
	                    }
	                    return true;
	                },
	                step: function(input) {
	                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[step]").length && input.val() !== "") {
	                        var min = parseFloat(input.attr("min")) || 0,
	                            step = parseFloat(input.attr("step")) || 1,
	                            val = parseFloat(input.val()),
	                            decimals = numberOfDecimalDigits(step),
	                            raise;

	                        if (decimals) {
	                            raise = Math.pow(10, decimals);
	                            return ((Math.floor((val-min)*raise))%(step*raise)) / Math.pow(100, decimals) === 0;
	                        }
	                        return ((val-min)%step) === 0;
	                    }
	                    return true;
	                },
	                email: function(input) {
	                    return matcher(input, "[type=email],[" + kendo.attr("type") + "=email]", emailRegExp);
	                },
	                url: function(input) {
	                    return matcher(input, "[type=url],[" + kendo.attr("type") + "=url]", urlRegExp);
	                },
	                date: function(input) {
	                    if (input.filter("[type^=date],[" + kendo.attr("type") + "=date]").length && input.val() !== "") {
	                        return kendo.parseDate(input.val(), input.attr(kendo.attr("format"))) !== null;
	                    }
	                    return true;
	                }
	            },
	            validateOnBlur: true
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            this.element.off(NS);
	        },

	        value: function() {
	            if (!this._isValidated) {
	                return false;
	            }

	            return this.errors().length === 0;
	        },

	        _submit: function(e) {
	            if (!this.validate()) {
	                e.stopPropagation();
	                e.stopImmediatePropagation();
	                e.preventDefault();
	                return false;
	            }
	            return true;
	        },

	        _checkElement: function(element) {
	            var state = this.value();

	            this.validateInput(element);

	            if (this.value() !== state) {
	                this.trigger(CHANGE);
	            }
	        },

	        _attachEvents: function() {
	            var that = this;

	            if (that.element.is(FORM)) {
	                that.element.on("submit" + NS, proxy(that._submit, that));
	            }

	            if (that.options.validateOnBlur) {
	                if (!that.element.is(INPUTSELECTOR)) {
	                    that.element.on(BLUR + NS, that._inputSelector, function() {
	                        that._checkElement($(this));
	                    });

	                    that.element.on("click" + NS, that._checkboxSelector, function() {
	                        that._checkElement($(this));
	                    });
	                } else {
	                    that.element.on(BLUR + NS, function() {
	                        that._checkElement(that.element);
	                    });

	                    if (that.element.is(CHECKBOXSELECTOR)) {
	                        that.element.on("click" + NS, function() {
	                            that._checkElement(that.element);
	                        });
	                    }
	                }
	            }
	        },

	        validate: function() {
	            var inputs;
	            var idx;
	            var result = false;
	            var length;

	            var isValid = this.value();

	            this._errors = {};

	            if (!this.element.is(INPUTSELECTOR)) {
	                var invalid = false;

	                inputs = this.element.find(this._inputSelector);

	                for (idx = 0, length = inputs.length; idx < length; idx++) {
	                    if (!this.validateInput(inputs.eq(idx))) {
	                        invalid = true;
	                    }
	                }

	                result = !invalid;
	            } else {
	                result = this.validateInput(this.element);
	            }

	            this.trigger(VALIDATE, { valid: result });

	            if (isValid !== result) {
	                this.trigger(CHANGE);
	            }

	            return result;
	        },

	        validateInput: function(input) {
	            input = $(input);

	            this._isValidated = true;

	            var that = this,
	                template = that._errorTemplate,
	                result = that._checkValidity(input),
	                valid = result.valid,
	                className = "." + INVALIDMSG,
	                fieldName = (input.attr(NAME) || ""),
	                lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {
	                    var element = $(this);
	                    if (element.filter("[" + kendo.attr("for") + "]").length) {
	                        return element.attr(kendo.attr("for")) === fieldName;
	                    }

	                    return true;

	                })).hide(),
	                messageText,
	                wasValid = !input.attr("aria-invalid");
	            input.removeAttr("aria-invalid");

	            if (!valid) {
	                messageText = that._extractMessage(input, result.key);
	                that._errors[fieldName] = messageText;
	                var messageLabel = parseHtml(template({ message: decode(messageText) }));
	                var lblId = lbl.attr('id');

	                that._decorateMessageContainer(messageLabel, fieldName);

	                if (lblId) {
	                    messageLabel.attr('id', lblId);
	                }

	                if (!lbl.replaceWith(messageLabel).length) {
	                    messageLabel.insertAfter(input);
	                }
	                messageLabel.show();

	                input.attr("aria-invalid", true);
	            } else {
	                delete that._errors[fieldName];
	            }

	            if (wasValid !== valid) {
	                this.trigger(VALIDATE_INPUT, { valid: valid, input: input });
	            }

	            input.toggleClass(INVALIDINPUT, !valid);
	            input.toggleClass(VALIDINPUT, valid);

	            return valid;
	        },

	        hideMessages: function() {
	            var that = this,
	                className = "." + INVALIDMSG,
	                element = that.element;

	            if (!element.is(INPUTSELECTOR)) {
	                element.find(className).hide();
	            } else {
	                element.next(className).hide();
	            }
	        },

	        _findMessageContainer: function(fieldName) {
	            var locators = kendo.ui.validator.messageLocators,
	                name,
	                containers = $();

	            for (var idx = 0, length = this.element.length; idx < length; idx++) {
	                containers = containers.add(searchForMessageContainer(this.element[idx].getElementsByTagName("*"), fieldName));
	            }

	            for (name in locators) {
	                containers = containers.add(locators[name].locate(this.element, fieldName));
	            }

	            return containers;
	        },

	        _decorateMessageContainer: function(container, fieldName) {
	            var locators = kendo.ui.validator.messageLocators,
	                name;

	            container.addClass(INVALIDMSG)
	                .attr(kendo.attr("for"), fieldName || "");

	            for (name in locators) {
	                locators[name].decorate(container, fieldName);
	            }

	            container.attr("role", "alert");
	        },

	        _extractMessage: function(input, ruleKey) {
	            var that = this,
	                customMessage = that.options.messages[ruleKey],
	                fieldName = input.attr(NAME);

	            customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;

	            return kendo.format(input.attr(kendo.attr(ruleKey + "-msg")) || input.attr("validationMessage") || input.attr("title") || customMessage || "",
	                fieldName,
	                input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));
	        },

	        _checkValidity: function(input) {
	            var rules = this.options.rules,
	                rule;

	            for (rule in rules) {
	                if (!rules[rule].call(this, input)) {
	                    return { valid: false, key: rule };
	                }
	            }

	            return { valid: true };
	        },

	        errors: function() {
	            var results = [],
	                errors = this._errors,
	                error;

	            for (error in errors) {
	                results.push(errors[error]);
	            }
	            return results;
	        }
	    });

	    kendo.ui.plugin(Validator);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 65 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.window.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(909);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 619:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.draganddrop */ 7);

/***/ },

/***/ 909:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(619) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "window",
	        name: "Window",
	        category: "web",
	        description: "The Window widget displays content in a modal or non-modal HTML window.",
	        depends: [ "draganddrop" ],
	        features: [ {
	            id: "window-fx",
	            name: "Animation",
	            description: "Support for animation",
	            depends: [ "fx" ]
	        } ]
	    };

	    (function($, undefined) {
	        var kendo = window.kendo,
	            Widget = kendo.ui.Widget,
	            Draggable = kendo.ui.Draggable,
	            isPlainObject = $.isPlainObject,
	            activeElement = kendo._activeElement,
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight,
	            proxy = $.proxy,
	            extend = $.extend,
	            each = $.each,
	            template = kendo.template,
	            BODY = "body",
	            templates,
	            NS = ".kendoWindow",
	            // classNames
	            KWINDOW = ".k-window",
	            KWINDOWTITLE = ".k-window-title",
	            KWINDOWTITLEBAR = KWINDOWTITLE + "bar",
	            KWINDOWCONTENT = ".k-window-content",
	            KWINDOWRESIZEHANDLES = ".k-resize-handle",
	            KOVERLAY = ".k-overlay",
	            KCONTENTFRAME = "k-content-frame",
	            LOADING = "k-i-loading",
	            KHOVERSTATE = "k-state-hover",
	            KFOCUSEDSTATE = "k-state-focused",
	            MAXIMIZEDSTATE = "k-window-maximized",
	            // constants
	            VISIBLE = ":visible",
	            HIDDEN = "hidden",
	            CURSOR = "cursor",
	            // events
	            OPEN = "open",
	            ACTIVATE = "activate",
	            DEACTIVATE = "deactivate",
	            CLOSE = "close",
	            REFRESH = "refresh",
	            MINIMIZE = "minimize",
	            MAXIMIZE = "maximize",
	            RESIZESTART = "resizeStart",
	            RESIZE = "resize",
	            RESIZEEND = "resizeEnd",
	            DRAGSTART = "dragstart",
	            DRAGEND = "dragend",
	            ERROR = "error",
	            OVERFLOW = "overflow",
	            ZINDEX = "zIndex",
	            MINIMIZE_MAXIMIZE = ".k-window-actions .k-i-window-minimize,.k-window-actions .k-i-window-maximize",
	            KPIN = ".k-i-pin",
	            KUNPIN = ".k-i-unpin",
	            PIN_UNPIN = KPIN + "," + KUNPIN,
	            TITLEBAR_BUTTONS = ".k-window-titlebar .k-window-action",
	            REFRESHICON = ".k-window-titlebar .k-i-refresh",
	            isLocalUrl = kendo.isLocalUrl;

	        function defined(x) {
	            return (typeof x != "undefined");
	        }

	        function constrain(value, low, high) {
	            return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));
	        }

	        function executableScript() {
	            return !this.type || this.type.toLowerCase().indexOf("script") >= 0;
	        }

	        var Window = Widget.extend({
	            init: function(element, options) {
	                var that = this,
	                    wrapper,
	                    offset = {},
	                    visibility, display, position,
	                    isVisible = false,
	                    content,
	                    windowContent,
	                    suppressActions = options && options.actions && !options.actions.length,
	                    id;

	                Widget.fn.init.call(that, element, options);
	                options = that.options;
	                position = options.position;
	                element = that.element;
	                content = options.content;

	                if (suppressActions) {
	                    options.actions = [];
	                }

	                that.appendTo = $(options.appendTo);

	                if (content && !isPlainObject(content)) {
	                    content = options.content = { url: content };
	                }

	                // remove script blocks to prevent double-execution
	                element.find("script").filter(executableScript).remove();

	                if (!element.parent().is(that.appendTo) && (position.top === undefined || position.left === undefined)) {
	                    if (element.is(VISIBLE)) {
	                        offset = element.offset();
	                        isVisible = true;
	                    } else {
	                        visibility = element.css("visibility");
	                        display = element.css("display");

	                        element.css({ visibility: HIDDEN, display: "" });
	                        offset = element.offset();
	                        element.css({ visibility: visibility, display: display });
	                    }

	                    if (position.top === undefined) {
	                        position.top = offset.top;
	                    }
	                    if (position.left === undefined) {
	                        position.left = offset.left;
	                    }
	                }

	                if (!defined(options.visible) || options.visible === null) {
	                    options.visible = element.is(VISIBLE);
	                }

	                wrapper = that.wrapper = element.closest(KWINDOW);

	                if (!element.is(".k-content") || !wrapper[0]) {
	                    element.addClass("k-window-content k-content");
	                    that._createWindow(element, options);
	                    wrapper = that.wrapper = element.closest(KWINDOW);

	                    that._dimensions();
	                }

	                that._position();

	                if (options.pinned) {
	                    that.pin(true);
	                }

	                if (content) {
	                    that.refresh(content);
	                }

	                if (options.visible) {
	                    that.toFront();
	                }

	                windowContent = wrapper.children(KWINDOWCONTENT);
	                that._tabindex(windowContent);

	                if (options.visible && options.modal) {
	                    that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
	                }

	                wrapper
	                    .on("mouseenter" + NS, TITLEBAR_BUTTONS, proxy(that._buttonEnter, that))
	                    .on("mouseleave" + NS, TITLEBAR_BUTTONS, proxy(that._buttonLeave, that))
	                    .on("click" + NS, "> " + TITLEBAR_BUTTONS, proxy(that._windowActionHandler, that));

	                windowContent
	                    .on("keydown" + NS, proxy(that._keydown, that))
	                    .on("focus" + NS, proxy(that._focus, that))
	                    .on("blur" + NS, proxy(that._blur, that));

	                this._resizable();

	                this._draggable();

	                id = element.attr("id");
	                if (id) {
	                    id = id + "_wnd_title";
	                    wrapper.children(KWINDOWTITLEBAR)
	                        .children(KWINDOWTITLE)
	                        .attr("id", id);

	                    windowContent
	                        .attr({
	                            "role": "dialog",
	                            "aria-labelledby": id
	                        });
	                }

	                wrapper.add(wrapper.children(".k-resize-handle," + KWINDOWTITLEBAR))
	                    .on("mousedown" + NS, proxy(that.toFront, that));

	                that.touchScroller = kendo.touchScroller(element);

	                that._resizeHandler = proxy(that._onDocumentResize, that);

	                that._marker = kendo.guid().substring(0, 8);

	                $(window).on("resize" + NS + that._marker, that._resizeHandler);

	                if (options.visible) {
	                    that.trigger(OPEN);
	                    that.trigger(ACTIVATE);
	                }

	                kendo.notify(that);
	            },

	            _buttonEnter: function(e) {
	                $(e.currentTarget).addClass(KHOVERSTATE);
	            },

	            _buttonLeave: function(e) {
	                $(e.currentTarget).removeClass(KHOVERSTATE);
	            },

	            _focus: function() {
	                this.wrapper.addClass(KFOCUSEDSTATE);
	            },

	            _blur: function() {
	                this.wrapper.removeClass(KFOCUSEDSTATE);
	            },

	            _dimensions: function() {
	                var wrapper = this.wrapper;
	                var options = this.options;
	                var width = options.width;
	                var height = options.height;
	                var maxHeight = options.maxHeight;
	                var dimensions = ["minWidth","minHeight","maxWidth","maxHeight"];

	                this.title(options.title);

	                for (var i = 0; i < dimensions.length; i++) {
	                    var value = options[dimensions[i]] || "";
	                    if (value != Infinity) {
	                        wrapper.css(dimensions[i], value);
	                    }
	                }

	                if (maxHeight != Infinity) {
	                    this.element.css("maxHeight", maxHeight);
	                }

	                if (width) {
	                    if (width.toString().indexOf("%") > 0) {
	                        wrapper.width(width);
	                    } else {
	                        wrapper.width(constrain(width, options.minWidth, options.maxWidth));
	                    }
	                }
	                else {
	                    wrapper.width("");
	                }

	                if (height) {
	                    if (height.toString().indexOf("%") > 0) {
	                        wrapper.height(height);
	                    } else {
	                        wrapper.height(constrain(height, options.minHeight, options.maxHeight));
	                    }
	                }
	                else {
	                    wrapper.height("");
	                }

	                if (!options.visible) {
	                    wrapper.hide();
	                }
	            },

	            _position: function() {
	                var wrapper = this.wrapper,
	                    position = this.options.position;

	                if (position.top === 0) {
	                    position.top = position.top.toString();
	                }

	                if (position.left === 0) {
	                    position.left = position.left.toString();
	                }

	                wrapper.css({
	                    top: position.top || "",
	                    left: position.left || ""
	                });
	            },

	            _animationOptions: function(id) {
	                var animation = this.options.animation;
	                var basicAnimation = {
	                    open: { effects: {} },
	                    close: { hide: true, effects: {} }
	                };

	                return animation && animation[id] || basicAnimation[id];
	            },

	            _resize: function() {
	                kendo.resize(this.element.children());
	            },

	            _resizable: function() {
	                var resizable = this.options.resizable;
	                var wrapper = this.wrapper;

	                if (this.resizing) {
	                    wrapper
	                        .off("dblclick" + NS)
	                        .children(KWINDOWRESIZEHANDLES).remove();

	                    this.resizing.destroy();
	                    this.resizing = null;
	                }

	                if (resizable) {
	                    wrapper.on("dblclick" + NS, KWINDOWTITLEBAR, proxy(function(e) {
	                        if (!$(e.target).closest(".k-window-action").length) {
	                            this.toggleMaximization();
	                        }
	                    }, this));

	                    each("n e s w se sw ne nw".split(" "), function(index, handler) {
	                        wrapper.append(templates.resizeHandle(handler));
	                    });

	                    this.resizing = new WindowResizing(this);
	                }

	                wrapper = null;
	            },

	            _draggable: function() {
	                var draggable = this.options.draggable;

	                if (this.dragging) {
	                    this.dragging.destroy();
	                    this.dragging = null;
	                }
	                if (draggable) {
	                    this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR);
	                }
	            },

	            _actions: function() {
	                var actions = this.options.actions;
	                var titlebar = this.wrapper.children(KWINDOWTITLEBAR);
	                var container = titlebar.find(".k-window-actions");
	                var windowSpecificCommands = [ "maximize", "minimize" ];

	                actions = $.map(actions, function(action) {
	                    return { name: (windowSpecificCommands.indexOf(action.toLowerCase()) > - 1) ? "window-" + action : action };
	                });

	                container.html(kendo.render(templates.action, actions));
	            },

	            setOptions: function(options) {
	                Widget.fn.setOptions.call(this, options);
	                var scrollable = this.options.scrollable !== false;

	                this.restore();
	                this._dimensions();
	                this._position();
	                this._resizable();
	                this._draggable();
	                this._actions();
	                if (typeof options.modal !== "undefined") {
	                    var visible = this.options.visible !== false;

	                    this._overlay(options.modal && visible);
	                }

	                this.element.css(OVERFLOW, scrollable ? "" : "hidden");
	            },

	            events:[
	                OPEN,
	                ACTIVATE,
	                DEACTIVATE,
	                CLOSE,
	                MINIMIZE,
	                MAXIMIZE,
	                REFRESH,
	                RESIZESTART,
	                RESIZE,
	                RESIZEEND,
	                DRAGSTART,
	                DRAGEND,
	                ERROR
	            ],

	            options: {
	                name: "Window",
	                animation: {
	                    open: {
	                        effects: { zoom: { direction: "in" }, fade: { direction: "in" } },
	                        duration: 350
	                    },
	                    close: {
	                        effects: { zoom: { direction: "out", properties: { scale: 0.7 } }, fade: { direction: "out" } },
	                        duration: 350,
	                        hide: true
	                    }
	                },
	                title: "",
	                actions: ["Close"],
	                autoFocus: true,
	                modal: false,
	                resizable: true,
	                draggable: true,
	                minWidth: 90,
	                minHeight: 50,
	                maxWidth: Infinity,
	                maxHeight: Infinity,
	                pinned: false,
	                scrollable: true,
	                position: {},
	                content: null,
	                visible: null,
	                height: null,
	                width: null,
	                appendTo: "body",
	                isMaximized: false,
	                isMinimized: false
	            },

	            _closable: function() {
	                return $.inArray("close", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;
	            },

	            _keydown: function(e) {
	                var that = this,
	                    options = that.options,
	                    keys = kendo.keys,
	                    keyCode = e.keyCode,
	                    wrapper = that.wrapper,
	                    offset, handled,
	                    distance = 10,
	                    isMaximized = that.options.isMaximized,
	                    newWidth, newHeight, w, h;

	                if (e.target != e.currentTarget || that._closing) {
	                    return;
	                }

	                if (keyCode == keys.ESC && that._closable()) {
	                    that._close(false);
	                }

	                if (options.draggable && !e.ctrlKey && !isMaximized) {
	                    offset = kendo.getOffset(wrapper);

	                    if (keyCode == keys.UP) {
	                        handled = wrapper.css("top", offset.top - distance);
	                    } else if (keyCode == keys.DOWN) {
	                        handled = wrapper.css("top", offset.top + distance);
	                    } else if (keyCode == keys.LEFT) {
	                        handled = wrapper.css("left", offset.left - distance);
	                    } else if (keyCode == keys.RIGHT) {
	                        handled = wrapper.css("left", offset.left + distance);
	                    }
	                }

	                if (options.resizable && e.ctrlKey && !isMaximized) {
	                    if (keyCode == keys.UP) {
	                        handled = true;
	                        newHeight = wrapper.height() - distance;
	                    } else if (keyCode == keys.DOWN) {
	                        handled = true;
	                        newHeight = wrapper.height() + distance;
	                    } if (keyCode == keys.LEFT) {
	                        handled = true;
	                        newWidth = wrapper.width() - distance;
	                    } else if (keyCode == keys.RIGHT) {
	                        handled = true;
	                        newWidth = wrapper.width() + distance;
	                    }

	                    if (handled) {
	                        w = constrain(newWidth, options.minWidth, options.maxWidth);
	                        h = constrain(newHeight, options.minHeight, options.maxHeight);

	                        if (!isNaN(w)) {
	                            wrapper.width(w);
	                            that.options.width = w + "px";
	                        }
	                        if (!isNaN(h)) {
	                            wrapper.height(h);
	                            that.options.height = h + "px";
	                        }

	                        that.resize();
	                    }
	                }

	                if (handled) {
	                    e.preventDefault();
	                }
	            },

	            _overlay: function (visible) {
	                var overlay = this.appendTo.children(KOVERLAY),
	                    wrapper = this.wrapper;

	                if (!overlay.length) {
	                    overlay = $("<div class='k-overlay' />");
	                }

	                overlay
	                    .insertBefore(wrapper[0])
	                    .toggle(visible)
	                    .css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);

	                return overlay;
	            },

	            _actionForIcon: function(icon) {
	                var iconClass = /\bk-i(-\w+)+\b/.exec(icon[0].className)[0];
	                return {
	                    "k-i-close": "_close",
	                    "k-i-window-maximize": "maximize",
	                    "k-i-window-minimize": "minimize",
	                    "k-i-window-restore": "restore",
	                    "k-i-refresh": "refresh",
	                    "k-i-pin": "pin",
	                    "k-i-unpin": "unpin"
	                }[iconClass];
	            },

	            _windowActionHandler: function (e) {
	                if (this._closing) {
	                    return;
	                }
	                var icon = $(e.target).closest(".k-window-action").find(".k-icon");
	                var action = this._actionForIcon(icon);

	                if (action) {
	                    e.preventDefault();
	                    this[action]();
	                    return false;
	                }
	            },

	            _modals: function() {
	                var that = this;

	                var zStack = $(KWINDOW).filter(function() {
	                    var dom = $(this);
	                    var object = that._object(dom);
	                    var options = object && object.options;

	                    return options && options.modal && options.visible && options.appendTo === that.options.appendTo && dom.is(VISIBLE);
	                }).sort(function(a, b){
	                    return +$(a).css("zIndex") - +$(b).css("zIndex");
	                });

	                that = null;

	                return zStack;
	            },

	            _object: function(element) {
	                var content = element.children(KWINDOWCONTENT);
	                var widget = kendo.widgetInstance(content);

	                if (widget instanceof Window) {
	                    return widget;
	                }

	                return undefined;
	            },

	            center: function () {
	                var that = this,
	                    position = that.options.position,
	                    wrapper = that.wrapper,
	                    documentWindow = $(window),
	                    scrollTop = 0,
	                    scrollLeft = 0,
	                    newTop, newLeft;

	                if (that.options.isMaximized) {
	                    return that;
	                }

	                if (!that.options.pinned) {
	                    scrollTop = documentWindow.scrollTop();
	                    scrollLeft = documentWindow.scrollLeft();
	                }

	                newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2);
	                newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css("paddingTop"), 10)) / 2);

	                wrapper.css({
	                    left: newLeft,
	                    top: newTop
	                });

	                position.top = newTop;
	                position.left = newLeft;

	                return that;
	            },

	            title: function (text) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    titleBar = wrapper.children(KWINDOWTITLEBAR),
	                    title = titleBar.children(KWINDOWTITLE),
	                    titleBarHeight;

	                if (!arguments.length) {
	                    return title.html();
	                }

	                if (text === false) {
	                    wrapper.addClass("k-window-titleless");
	                    titleBar.remove();
	                } else {
	                    if (!titleBar.length) {
	                        wrapper.prepend(templates.titlebar(options));
	                        that._actions();
	                        titleBar = wrapper.children(KWINDOWTITLEBAR);
	                    } else {
	                        title.html(text);
	                    }

	                    titleBarHeight = parseInt(outerHeight(titleBar), 10);

	                    wrapper.css("padding-top", titleBarHeight);
	                    titleBar.css("margin-top", -titleBarHeight);
	                }

	                that.options.title = text;

	                return that;
	            },

	            content: function (html, data) {
	                var content = this.wrapper.children(KWINDOWCONTENT),
	                    scrollContainer = content.children(".km-scroll-container");

	                content = scrollContainer[0] ? scrollContainer : content;

	                if (!defined(html)) {
	                    return content.html();
	                }

	                this.angular("cleanup", function(){
	                    return { elements: content.children() };
	                });

	                kendo.destroy(this.element.children());

	                content.empty().html(html);

	                this.angular("compile", function(){
	                    var a = [];
	                    for (var i = content.length; --i >= 0;) {
	                        a.push({ dataItem: data });
	                    }
	                    return {
	                        elements: content.children(),
	                        data: a
	                    };
	                });

	                return this;
	            },

	            open: function () {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    showOptions = this._animationOptions("open"),
	                    contentElement = wrapper.children(KWINDOWCONTENT),
	                    overlay, otherModalsVisible,
	                    doc = $(document);

	                if (!that.trigger(OPEN)) {
	                    if (that._closing) {
	                        wrapper.kendoStop(true, true);
	                    }

	                    that._closing = false;

	                    that.toFront();

	                    if (options.autoFocus) {
	                        that.element.focus();
	                    }

	                    options.visible = true;

	                    if (options.modal) {
	                        otherModalsVisible = !!that._modals().length;
	                        overlay = that._overlay(otherModalsVisible);

	                        overlay.kendoStop(true, true);

	                        if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {
	                            var overlayFx = kendo.fx(overlay).fadeIn();
	                            overlayFx.duration(showOptions.duration || 0);
	                            overlayFx.endValue(0.5);
	                            overlayFx.play();
	                        } else {
	                            overlay.css("opacity", 0.5);
	                        }

	                        overlay.show();
	                    }

	                    if (!wrapper.is(VISIBLE)) {
	                        contentElement.css(OVERFLOW, HIDDEN);
	                        wrapper.show().kendoStop().kendoAnimate({
	                            effects: showOptions.effects,
	                            duration: showOptions.duration,
	                            complete: proxy(this._activate, this)
	                        });
	                    }
	                }

	                if (options.isMaximized) {
	                    that._documentScrollTop = doc.scrollTop();
	                    that._documentScrollLeft = doc.scrollLeft();
	                    $("html, body").css(OVERFLOW, HIDDEN);
	                }

	                return that;
	            },

	            _activate: function() {
	                var scrollable = this.options.scrollable !== false;

	                if (this.options.autoFocus) {
	                    this.element.focus();
	                }

	                this.element.css(OVERFLOW, scrollable ? "" : "hidden");
	                kendo.resize(this.element.children());
	                this.trigger(ACTIVATE);
	            },

	            _removeOverlay: function(suppressAnimation) {
	                var modals = this._modals();
	                var options = this.options;
	                var hideOverlay = options.modal && !modals.length;
	                var overlay = options.modal ? this._overlay(true) : $(undefined);
	                var hideOptions  = this._animationOptions("close");

	                if (hideOverlay) {
	                    if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {
	                        var overlayFx = kendo.fx(overlay).fadeOut();
	                        overlayFx.duration(hideOptions.duration || 0);
	                        overlayFx.startValue(0.5);
	                        overlayFx.play();
	                    } else {
	                        this._overlay(false).remove();
	                    }
	                } else if (modals.length) {
	                    this._object(modals.last())._overlay(true);
	                }
	            },

	            _close: function(systemTriggered) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    showOptions = this._animationOptions("open"),
	                    hideOptions  = this._animationOptions("close"),
	                    doc = $(document);

	                if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {
	                    if (that._closing) {
	                        return;
	                    }

	                    that._closing = true;
	                    options.visible = false;

	                    $(KWINDOW).each(function(i, element) {
	                        var contentElement = $(element).children(KWINDOWCONTENT);

	                        // Remove overlay set by toFront
	                        if (element != wrapper && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
	                            contentElement.children(KOVERLAY).remove();
	                        }
	                    });

	                    this._removeOverlay();

	                    wrapper.kendoStop().kendoAnimate({
	                        effects: hideOptions.effects || showOptions.effects,
	                        reverse: hideOptions.reverse === true,
	                        duration: hideOptions.duration,
	                        complete: proxy(this._deactivate, this)
	                    });
	                }

	                if (that.options.isMaximized) {
	                    $("html, body").css(OVERFLOW, "");
	                    if (that._documentScrollTop && that._documentScrollTop > 0) {
	                        doc.scrollTop(that._documentScrollTop);
	                    }
	                    if (that._documentScrollLeft && that._documentScrollLeft > 0) {
	                        doc.scrollLeft(that._documentScrollLeft);
	                    }
	                }
	            },

	            _deactivate: function () {
	                var that = this;
	                that.wrapper.hide().css("opacity", "");
	                that.trigger(DEACTIVATE);
	                if (that.options.modal) {
	                    var lastModal = that._object(that._modals().last());
	                    if (lastModal) {
	                        lastModal.toFront();
	                    }
	                }
	            },

	            close: function () {
	                this._close(true);
	                return this;
	            },

	            _actionable: function(element) {
	                return $(element).is(TITLEBAR_BUTTONS + "," + TITLEBAR_BUTTONS + " .k-icon,:input,a");
	            },

	            _shouldFocus: function(target) {
	                var active = activeElement(),
	                    element = this.element;

	                return this.options.autoFocus &&
	                    !$(active).is(element) &&
	                    !this._actionable(target) &&
	                    (!element.find(active).length || !element.find(target).length);
	            },

	            toFront: function (e) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    currentWindow = wrapper[0],
	                    zIndex = +wrapper.css(ZINDEX),
	                    originalZIndex = zIndex,
	                    target = (e && e.target) || null;

	                $(KWINDOW).each(function(i, element) {
	                    var windowObject = $(element),
	                        zIndexNew = windowObject.css(ZINDEX),
	                        contentElement = windowObject.children(KWINDOWCONTENT);

	                    if (!isNaN(zIndexNew)) {
	                        zIndex = Math.max(+zIndexNew, zIndex);
	                    }

	                    // Add overlay to windows with iframes and lower z-index to prevent
	                    // trapping of events when resizing / dragging
	                    if (element != currentWindow && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
	                        contentElement.append(templates.overlay);
	                    }
	                });

	                if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
	                    wrapper.css(ZINDEX, zIndex + 2);
	                }
	                that.element.find("> .k-overlay").remove();

	                if (that._shouldFocus(target)) {
	                    that.element.focus();

	                    var scrollTop = $(window).scrollTop(),
	                        windowTop = parseInt(wrapper.position().top, 10);

	                    if (!that.options.pinned && windowTop > 0 && windowTop < scrollTop) {
	                        if (scrollTop > 0) {
	                            $(window).scrollTop(windowTop);
	                        } else {
	                            wrapper.css("top", scrollTop);
	                        }
	                    }
	                }

	                wrapper = null;

	                return that;
	            },

	            toggleMaximization: function () {
	                if (this._closing) {
	                    return this;
	                }

	                return this[this.options.isMaximized ? "restore" : "maximize"]();
	            },

	            restore: function () {
	                var that = this;
	                var options = that.options;
	                var minHeight = options.minHeight;
	                var restoreOptions = that.restoreOptions;
	                var doc = $(document);

	                if (!options.isMaximized && !options.isMinimized) {
	                    return that;
	                }

	                if (minHeight && minHeight != Infinity) {
	                    that.wrapper.css("min-height", minHeight);
	                }

	                that.wrapper
	                    .css({
	                        position: options.pinned ? "fixed" : "absolute",
	                        left: restoreOptions.left,
	                        top: restoreOptions.top,
	                        width: restoreOptions.width,
	                        height: restoreOptions.height
	                    })
	                    .removeClass(MAXIMIZEDSTATE)
	                    .find(".k-window-content,.k-resize-handle").show().end()
	                    .find(".k-window-titlebar .k-i-window-restore").parent().remove().end().end()
	                    .find(MINIMIZE_MAXIMIZE).parent().show().end().end()
	                    .find(PIN_UNPIN).parent().show();

	                that.options.width = restoreOptions.width;
	                that.options.height = restoreOptions.height;

	                $("html, body").css(OVERFLOW, "");
	                if (this._documentScrollTop && this._documentScrollTop > 0) {
	                    doc.scrollTop(this._documentScrollTop);
	                }
	                if (this._documentScrollLeft && this._documentScrollLeft > 0) {
	                    doc.scrollLeft(this._documentScrollLeft);
	                }

	                options.isMaximized = options.isMinimized = false;

	                that.resize();

	                return that;
	            },

	            _sizingAction: function(actionId, callback) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    style = wrapper[0].style,
	                    options = that.options;

	                if (options.isMaximized || options.isMinimized) {
	                    return that;
	                }

	                that.restoreOptions = {
	                    width: style.width,
	                    height: style.height
	                };

	                wrapper
	                    .children(KWINDOWRESIZEHANDLES).hide().end()
	                    .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZE).parent().hide()
	                    .eq(0).before(templates.action({ name: "window-restore" }));

	                callback.call(that);

	                that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPIN).parent().toggle(actionId !== "maximize");

	                that.trigger(actionId);

	                return that;
	            },

	            maximize: function() {
	                this._sizingAction("maximize", function() {
	                    var that = this,
	                        wrapper = that.wrapper,
	                        position = wrapper.position(),
	                        doc = $(document);

	                    extend(that.restoreOptions, {
	                        left: position.left,
	                        top: position.top
	                    });

	                    wrapper.css({
	                        left: 0,
	                        top: 0,
	                        position: "fixed"
	                    })
	                        .addClass(MAXIMIZEDSTATE);

	                    this._documentScrollTop = doc.scrollTop();
	                    this._documentScrollLeft = doc.scrollLeft();
	                    $("html, body").css(OVERFLOW, HIDDEN);

	                    that.options.isMaximized = true;

	                    that._onDocumentResize();
	                });

	                return this;
	            },

	            isMaximized: function() {
	                return this.options.isMaximized;
	            },

	            minimize: function() {
	                this._sizingAction("minimize", function() {
	                    var that = this;

	                    that.wrapper.css({
	                        height: "",
	                        minHeight: ""
	                    });

	                    that.element.hide();

	                    that.options.isMinimized = true;
	                });

	                return this;
	            },

	            isMinimized: function() {
	                return this.options.isMinimized;
	            },

	            pin: function(force) {
	                var that = this,
	                    win = $(window),
	                    wrapper = that.wrapper,
	                    top = parseInt(wrapper.css("top"), 10),
	                    left = parseInt(wrapper.css("left"), 10);

	                if (force || !that.options.pinned && !that.options.isMaximized) {
	                    wrapper.css({position: "fixed", top: top - win.scrollTop(), left: left - win.scrollLeft()});
	                    wrapper.children(KWINDOWTITLEBAR).find(KPIN).addClass("k-i-unpin").removeClass("k-i-pin");

	                    that.options.pinned = true;
	                }
	            },

	            unpin: function() {
	                var that = this,
	                    win = $(window),
	                    wrapper = that.wrapper,
	                    top = parseInt(wrapper.css("top"), 10),
	                    left = parseInt(wrapper.css("left"), 10);

	                if (that.options.pinned && !that.options.isMaximized) {
	                    wrapper.css({position: "", top: top + win.scrollTop(), left: left + win.scrollLeft()});
	                    wrapper.children(KWINDOWTITLEBAR).find(KUNPIN).addClass("k-i-pin").removeClass("k-i-unpin");

	                    that.options.pinned = false;
	                }
	            },

	            _onDocumentResize: function () {
	                var that = this,
	                    wrapper = that.wrapper,
	                    wnd = $(window),
	                    zoomLevel = kendo.support.zoomLevel(),
	                    w, h;

	                if (!that.options.isMaximized) {
	                    return;
	                }

	                w = wnd.width() / zoomLevel;
	                h = wnd.height() / zoomLevel - parseInt(wrapper.css("padding-top"), 10);

	                wrapper.css({
	                    width: w,
	                    height: h
	                });
	                that.options.width = w;
	                that.options.height = h;

	                that.resize();
	            },

	            refresh: function (options) {
	                var that = this,
	                    initOptions = that.options,
	                    element = $(that.element),
	                    iframe,
	                    showIframe,
	                    url;

	                if (!isPlainObject(options)) {
	                    options = { url: options };
	                }

	                options = extend({}, initOptions.content, options);

	                showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;

	                url = options.url;

	                if (url) {
	                    if (!defined(showIframe)) {
	                        showIframe = !isLocalUrl(url);
	                    }

	                    if (!showIframe) {
	                        // perform AJAX request
	                        that._ajaxRequest(options);
	                    } else {
	                        iframe = element.find("." + KCONTENTFRAME)[0];

	                        if (iframe) {
	                            // refresh existing iframe
	                            iframe.src = url || iframe.src;
	                        } else {
	                            // render new iframe
	                            element.html(templates.contentFrame(extend({}, initOptions, { content: options })));
	                        }

	                        element.find("." + KCONTENTFRAME)
	                            .unbind("load" + NS)
	                            .on("load" + NS, proxy(this._triggerRefresh, this));
	                    }
	                } else {
	                    if (options.template) {
	                        // refresh template
	                        that.content(template(options.template)({}));
	                    }

	                    that.trigger(REFRESH);
	                }

	                element.toggleClass("k-window-iframecontent", !!showIframe);

	                return that;
	            },

	            _triggerRefresh: function() {
	                this.trigger(REFRESH);
	            },

	            _ajaxComplete: function() {
	                clearTimeout(this._loadingIconTimeout);
	                this.wrapper.find(REFRESHICON).removeClass(LOADING);
	            },

	            _ajaxError: function (xhr, status) {
	                this.trigger(ERROR, { status: status, xhr: xhr });
	            },

	            _ajaxSuccess: function (contentTemplate) {
	                return function (data) {
	                    var html = data;
	                    if (contentTemplate) {
	                        html = template(contentTemplate)(data || {});
	                    }

	                    this.content(html, data);
	                    this.element.prop("scrollTop", 0);

	                    this.trigger(REFRESH);
	                };
	            },

	            _showLoading: function() {
	                this.wrapper.find(REFRESHICON).addClass(LOADING);
	            },

	            _ajaxRequest: function (options) {
	                this._loadingIconTimeout = setTimeout(proxy(this._showLoading, this), 100);

	                $.ajax(extend({
	                    type: "GET",
	                    dataType: "html",
	                    cache: false,
	                    error: proxy(this._ajaxError, this),
	                    complete: proxy(this._ajaxComplete, this),
	                    success: proxy(this._ajaxSuccess(options.template), this)
	                }, options));
	            },

	            _destroy: function() {
	                if (this.resizing) {
	                    this.resizing.destroy();
	                }

	                if (this.dragging) {
	                    this.dragging.destroy();
	                }

	                this.wrapper.off(NS)
	                    .children(KWINDOWCONTENT).off(NS).end()
	                    .find(".k-resize-handle,.k-window-titlebar").off(NS);

	                $(window).off("resize" + NS + this._marker);

	                clearTimeout(this._loadingIconTimeout);

	                Widget.fn.destroy.call(this);

	                this.unbind(undefined);

	                kendo.destroy(this.wrapper);

	                this._removeOverlay(true);
	            },

	            destroy: function() {
	                this._destroy();

	                this.wrapper.empty().remove();

	                this.wrapper = this.appendTo = this.element = $();
	            },

	            _createWindow: function() {
	                var contentHtml = this.element,
	                    options = this.options,
	                    iframeSrcAttributes,
	                    wrapper,
	                    isRtl = kendo.support.isRtl(contentHtml);

	                if (options.scrollable === false) {
	                    contentHtml.css("overflow", "hidden");
	                }

	                wrapper = $(templates.wrapper(options));

	                // Collect the src attributes of all iframes and then set them to empty string.
	                // This seems to fix this IE9 "feature": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4
	                iframeSrcAttributes = contentHtml.find("iframe:not(.k-content)").map(function() {
	                    var src = this.getAttribute("src");
	                    this.src = "";
	                    return src;
	                });

	                // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM
	                wrapper
	                    .toggleClass("k-rtl", isRtl)
	                    .appendTo(this.appendTo)
	                    .append(contentHtml)
	                    .find("iframe:not(.k-content)").each(function(index) {
	                    // Restore the src attribute of the iframes when they are part of the live DOM tree
	                    this.src = iframeSrcAttributes[index];
	                });

	                wrapper.find(".k-window-title")
	                    .css(isRtl ? "left" : "right", outerWidth(wrapper.find(".k-window-actions")) + 10);

	                contentHtml.css("visibility", "").show();

	                contentHtml.find("[data-role=editor]").each(function() {
	                    var editor = $(this).data("kendoEditor");

	                    if (editor) {
	                        editor.refresh();
	                    }
	                });

	                wrapper = contentHtml = null;
	            }
	        });

	        templates = {
	            wrapper: template("<div class='k-widget k-window' />"),
	            action: template(
	                "<a role='button' href='\\#' class='k-window-action k-link' aria-label='#= name #'>" +
	                "<span class='k-icon k-i-#= name.toLowerCase() #'></span>" +
	                "</a>"
	            ),
	            titlebar: template(
	                "<div class='k-window-titlebar k-header'>&nbsp;" +
	                "<span class='k-window-title'>#= title #</span>" +
	                "<div class='k-window-actions' />" +
	                "</div>"
	            ),
	            overlay: "<div class='k-overlay' />",
	            contentFrame: template(
	                "<iframe frameborder='0' title='#= title #' class='" + KCONTENTFRAME + "' " +
	                "src='#= content.url #'>" +
	                "This page requires frames in order to show content" +
	                "</iframe>"
	            ),
	            resizeHandle: template("<div class='k-resize-handle k-resize-#= data #'></div>")
	        };


	        function WindowResizing(wnd) {
	            var that = this;
	            that.owner = wnd;
	            that._preventDragging = false;
	            that._draggable = new Draggable(wnd.wrapper, {
	                filter: ">" + KWINDOWRESIZEHANDLES,
	                group: wnd.wrapper.id + "-resizing",
	                dragstart: proxy(that.dragstart, that),
	                drag: proxy(that.drag, that),
	                dragend: proxy(that.dragend, that)
	            });

	            that._draggable.userEvents.bind("press", proxy(that.addOverlay, that));
	            that._draggable.userEvents.bind("release", proxy(that.removeOverlay, that));
	        }

	        WindowResizing.prototype = {
	            addOverlay: function () {
	                this.owner.wrapper.append(templates.overlay);
	            },
	            removeOverlay: function () {
	                this.owner.wrapper.find(KOVERLAY).remove();
	            },
	            dragstart: function (e) {
	                var that = this;
	                var wnd = that.owner;
	                var wrapper = wnd.wrapper;

	                that._preventDragging = wnd.trigger(RESIZESTART);
	                if (that._preventDragging) {
	                    return;
	                }

	                that.elementPadding = parseInt(wrapper.css("padding-top"), 10);
	                that.initialPosition = kendo.getOffset(wrapper, "position");

	                that.resizeDirection = e.currentTarget.prop("className").replace("k-resize-handle k-resize-", "");

	                that.initialSize = {
	                    width: wrapper.width(),
	                    height: wrapper.height()
	                };

	                that.containerOffset = kendo.getOffset(wnd.appendTo, "position");

	                wrapper
	                    .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();

	                $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
	            },
	            drag: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                var that = this,
	                    wnd = that.owner,
	                    wrapper = wnd.wrapper,
	                    options = wnd.options,
	                    direction = that.resizeDirection,
	                    containerOffset = that.containerOffset,
	                    initialPosition = that.initialPosition,
	                    initialSize = that.initialSize,
	                    newWidth, newHeight,
	                    windowBottom, windowRight,
	                    x = Math.max(e.x.location, 0),
	                    y = Math.max(e.y.location, 0);

	                if (direction.indexOf("e") >= 0) {
	                    newWidth = x - initialPosition.left - containerOffset.left;

	                    wrapper.width(constrain(newWidth, options.minWidth, options.maxWidth));
	                } else if (direction.indexOf("w") >= 0) {
	                    windowRight = initialPosition.left + initialSize.width + containerOffset.left;
	                    newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);

	                    wrapper.css({
	                        left: windowRight - newWidth - containerOffset.left,
	                        width: newWidth
	                    });
	                }

	                var newWindowTop = y;
	                if (wnd.options.pinned) {
	                    newWindowTop -= $(window).scrollTop();
	                }
	                if (direction.indexOf("s") >= 0) {
	                    newHeight = newWindowTop - initialPosition.top - that.elementPadding - containerOffset.top;

	                    wrapper.height(constrain(newHeight, options.minHeight, options.maxHeight));
	                } else if (direction.indexOf("n") >= 0) {
	                    windowBottom = initialPosition.top + initialSize.height + containerOffset.top;
	                    newHeight = constrain(windowBottom - newWindowTop, options.minHeight, options.maxHeight);

	                    wrapper.css({
	                        top: windowBottom - newHeight - containerOffset.top,
	                        height: newHeight
	                    });
	                }

	                if (newWidth) {
	                    wnd.options.width = newWidth + "px";
	                }
	                if (newHeight) {
	                    wnd.options.height = newHeight + "px";
	                }

	                wnd.resize();
	            },
	            dragend: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                var that = this,
	                    wnd = that.owner,
	                    wrapper = wnd.wrapper;

	                wrapper
	                    .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();

	                $(BODY).css(CURSOR, "");

	                if (wnd.touchScroller) {
	                    wnd.touchScroller.reset();
	                }

	                if (e.keyCode == 27) {
	                    wrapper.css(that.initialPosition)
	                        .css(that.initialSize);
	                }

	                wnd.trigger(RESIZEEND);

	                return false;
	            },
	            destroy: function() {
	                if (this._draggable) {
	                    this._draggable.destroy();
	                }

	                this._draggable = this.owner = null;
	            }
	        };

	        function WindowDragging(wnd, dragHandle) {
	            var that = this;
	            that.owner = wnd;
	            that._preventDragging = false;
	            that._draggable = new Draggable(wnd.wrapper, {
	                filter: dragHandle,
	                group: wnd.wrapper.id + "-moving",
	                dragstart: proxy(that.dragstart, that),
	                drag: proxy(that.drag, that),
	                dragend: proxy(that.dragend, that),
	                dragcancel: proxy(that.dragcancel, that)
	            });

	            that._draggable.userEvents.stopPropagation = false;
	        }

	        WindowDragging.prototype = {
	            dragstart: function (e) {
	                var wnd = this.owner,
	                    element = wnd.element,
	                    actions = element.find(".k-window-actions"),
	                    containerOffset = kendo.getOffset(wnd.appendTo);

	                this._preventDragging = wnd.trigger(DRAGSTART);
	                if (this._preventDragging) {
	                    return;
	                }

	                wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, "position");

	                wnd.initialPointerPosition = {
	                    left: e.x.client,
	                    top: e.y.client
	                };

	                wnd.startPosition = {
	                    left: e.x.client - wnd.initialWindowPosition.left,
	                    top: e.y.client - wnd.initialWindowPosition.top
	                };

	                if (actions.length > 0) {
	                    wnd.minLeftPosition = outerWidth(actions) + parseInt(actions.css("right"), 10) - outerWidth(element);
	                } else {
	                    wnd.minLeftPosition =  20 - outerWidth(element); // at least 20px remain visible
	                }

	                wnd.minLeftPosition -= containerOffset.left;
	                wnd.minTopPosition = -containerOffset.top;

	                wnd.wrapper
	                    .append(templates.overlay)
	                    .children(KWINDOWRESIZEHANDLES).hide();

	                $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
	            },

	            drag: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                var wnd = this.owner;
	                var position = wnd.options.position;

	                position.top = Math.max(e.y.client - wnd.startPosition.top, wnd.minTopPosition);
	                position.left = Math.max(e.x.client - wnd.startPosition.left, wnd.minLeftPosition);

	                if (kendo.support.transforms) {
	                    $(wnd.wrapper).css(
	                        "transform", "translate(" +
	                        (e.x.client - wnd.initialPointerPosition.left) + "px, " +
	                        (e.y.client - wnd.initialPointerPosition.top) + "px)"
	                    );
	                } else {
	                    $(wnd.wrapper).css(position);
	                }

	            },

	            _finishDrag: function() {
	                var wnd = this.owner;

	                wnd.wrapper
	                    .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()
	                    .find(KOVERLAY).remove();

	                $(BODY).css(CURSOR, "");
	            },

	            dragcancel: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                this._finishDrag();

	                e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);
	            },

	            dragend: function () {
	                if (this._preventDragging) {
	                    return;
	                }
	                $(this.owner.wrapper)
	                    .css(this.owner.options.position)
	                    .css("transform", "");

	                this._finishDrag();

	                this.owner.trigger(DRAGEND);

	                return false;
	            },
	            destroy: function() {
	                if (this._draggable) {
	                    this._draggable.destroy();
	                }

	                this._draggable = this.owner = null;
	            }
	        };

	        kendo.ui.plugin(Window);

	    })(window.kendo.jQuery);

	    return window.kendo;

	}, __webpack_require__(3));

/***/ }

/******/ });

/***/ }),
/* 66 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./~/@progress/kendo-ui/js/pdf/core.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(974);
	module.exports = __webpack_require__(974);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 499:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.color */ 55);

/***/ },

/***/ 506:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.core */ 0);

/***/ },

/***/ 974:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(506),
	        __webpack_require__(499),
	        __webpack_require__(975)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}) (function(){

	(function(kendo){

	// WARNING: removing the following jshint declaration and turning
	// == into === to make JSHint happy will break functionality.
	/* jshint eqnull:true */
	/* jshint -W069 */
	/* jshint loopfunc:true */
	/* jshint newcap:false */
	/* jshint latedef: nofunc */

	window.kendo.pdf = window.kendo.pdf || {};
	var support = kendo.support;
	var supportBrowser = support.browser;
	var drawing = kendo.drawing;
	var util = drawing.util;
	var kendoGeometry = kendo.geometry;

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	// XXX: remove this junk (assume `true`) when we no longer have to support IE < 10
	var HAS_TYPED_ARRAYS$1 = typeof Uint8Array !== 'undefined';

	var BASE64 = (function(){
	    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	    return {
	        decode: function(str) {
	            var input = str.replace(/[^A-Za-z0-9\+\/\=]/g, ""), i = 0, n = input.length, output = [];

	            while (i < n) {
	                var enc1 = keyStr.indexOf(input.charAt(i++));
	                var enc2 = keyStr.indexOf(input.charAt(i++));
	                var enc3 = keyStr.indexOf(input.charAt(i++));
	                var enc4 = keyStr.indexOf(input.charAt(i++));

	                var chr1 = (enc1 << 2) | (enc2 >>> 4);
	                var chr2 = ((enc2 & 15) << 4) | (enc3 >>> 2);
	                var chr3 = ((enc3 & 3) << 6) | enc4;

	                output.push(chr1);
	                if (enc3 != 64) {
	                    output.push(chr2);
	                }
	                if (enc4 != 64) {
	                    output.push(chr3);
	                }
	            }

	            return output;
	        },
	        encode: function(bytes) {
	            var i = 0, n = bytes.length;
	            var output = "";

	            while (i < n) {
	                var chr1 = bytes[i++];
	                var chr2 = bytes[i++];
	                var chr3 = bytes[i++];

	                var enc1 = chr1 >>> 2;
	                var enc2 = ((chr1 & 3) << 4) | (chr2 >>> 4);
	                var enc3 = ((chr2 & 15) << 2) | (chr3 >>> 6);
	                var enc4 = chr3 & 63;

	                if (i - n == 2) {
	                    enc3 = enc4 = 64;
	                } else if (i - n == 1) {
	                    enc4 = 64;
	                }

	                output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
	            }
	            return output;
	        }
	    };
	}());

	function BinaryStream(data) {
	    var offset = 0, length = 0;
	    if (data == null) {
	        data = HAS_TYPED_ARRAYS$1 ? new Uint8Array(256) : [];
	    } else {
	        length = data.length;
	    }

	    var ensure = HAS_TYPED_ARRAYS$1 ? function(len) {
	        if (len >= data.length) {
	            var tmp = new Uint8Array(Math.max(len + 256, data.length * 2));
	            tmp.set(data, 0);
	            data = tmp;
	        }
	    } : function() {};

	    var get = HAS_TYPED_ARRAYS$1 ? function() {
	        return new Uint8Array(data.buffer, 0, length);
	    } : function() {
	        return data;
	    };

	    var write = HAS_TYPED_ARRAYS$1 ? function(bytes) {
	        if (typeof bytes == "string") {
	            return writeString(bytes);
	        }
	        var len = bytes.length;
	        ensure(offset + len);
	        data.set(bytes, offset);
	        offset += len;
	        if (offset > length) {
	            length = offset;
	        }
	    } : function(bytes) {
	        if (typeof bytes == "string") {
	            return writeString(bytes);
	        }
	        for (var i = 0; i < bytes.length; ++i) {
	            writeByte(bytes[i]);
	        }
	    };

	    var slice = HAS_TYPED_ARRAYS$1 ? function(start, length) {
	        if (data.buffer.slice) {
	            return new Uint8Array(data.buffer.slice(start, start + length));
	        } else {
	            // IE10
	            var x = new Uint8Array(length);
	            x.set(new Uint8Array(data.buffer, start, length));
	            return x;
	        }
	    } : function(start, length) {
	        return data.slice(start, start + length);
	    };

	    function eof() {
	        return offset >= length;
	    }
	    function readByte() {
	        return offset < length ? data[offset++] : 0;
	    }
	    function writeByte(b) {
	        ensure(offset);
	        data[offset++] = b & 0xFF;
	        if (offset > length) {
	            length = offset;
	        }
	    }
	    function readShort() {
	        return (readByte() << 8) | readByte();
	    }
	    function writeShort(w) {
	        writeByte(w >> 8);
	        writeByte(w);
	    }
	    function readShort_() {
	        var w = readShort();
	        return w >= 0x8000 ? w - 0x10000 : w;
	    }
	    function writeShort_(w) {
	        writeShort(w < 0 ? w + 0x10000 : w);
	    }
	    function readLong() {
	        return (readShort() * 0x10000) + readShort();
	    }
	    function writeLong(w) {
	        writeShort((w >>> 16) & 0xFFFF);
	        writeShort(w & 0xFFFF);
	    }
	    function readLong_() {
	        var w = readLong();
	        return w >= 0x80000000 ? w - 0x100000000 : w;
	    }
	    function writeLong_(w) {
	        writeLong(w < 0 ? w + 0x100000000 : w);
	    }
	    function readFixed() {
	        return readLong() / 0x10000;
	    }
	    function writeFixed(f) {
	        writeLong(Math.round(f * 0x10000));
	    }
	    function readFixed_() {
	        return readLong_() / 0x10000;
	    }
	    function writeFixed_(f) {
	        writeLong_(Math.round(f * 0x10000));
	    }
	    function read(len) {
	        return times(len, readByte);
	    }
	    function readString(len) {
	        return String.fromCharCode.apply(String, read(len));
	    }
	    function writeString(str) {
	        for (var i = 0; i < str.length; ++i) {
	            writeByte(str.charCodeAt(i));
	        }
	    }
	    function times(n, reader) {
	        for (var ret = new Array(n), i = 0; i < n; ++i) {
	            ret[i] = reader();
	        }
	        return ret;
	    }

	    var stream = {
	        eof         : eof,
	        readByte    : readByte,
	        writeByte   : writeByte,
	        readShort   : readShort,
	        writeShort  : writeShort,
	        readLong    : readLong,
	        writeLong   : writeLong,
	        readFixed   : readFixed,
	        writeFixed  : writeFixed,

	        // signed numbers.
	        readShort_  : readShort_,
	        writeShort_ : writeShort_,
	        readLong_   : readLong_,
	        writeLong_  : writeLong_,
	        readFixed_  : readFixed_,
	        writeFixed_ : writeFixed_,

	        read        : read,
	        write       : write,
	        readString  : readString,
	        writeString : writeString,

	        times       : times,
	        get         : get,
	        slice       : slice,

	        offset: function(pos) {
	            if (pos != null) {
	                offset = pos;
	                return stream;
	            }
	            return offset;
	        },

	        skip: function(nbytes) {
	            offset += nbytes;
	        },

	        toString: function() {
	            throw new Error("FIX CALLER.  BinaryStream is no longer convertible to string!");
	        },

	        length: function() { return length; },

	        saveExcursion: function(f) {
	            var pos = offset;
	            try {
	                return f();
	            } finally {
	                offset = pos;
	            }
	        },

	        writeBase64: function(base64) {
	            if (window.atob) {
	                writeString(window.atob(base64));
	            } else {
	                write(BASE64.decode(base64));
	            }
	        },
	        base64: function() {
	            return BASE64.encode(get());
	        }
	    };

	    return stream;
	}

	function ucs2decode(string) {
	    var output = [],
	        counter = 0,
	        length = string.length,
	        value,
	        extra;
	    while (counter < length) {
	        value = string.charCodeAt(counter++);
	        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	            // high surrogate, and there is a next character
	            extra = string.charCodeAt(counter++);
	            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
	                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	            } else {
	                // unmatched surrogate; only append this code unit, in case the next
	                // code unit is the high surrogate of a surrogate pair
	                output.push(value);
	                counter--;
	            }
	        } else {
	            output.push(value);
	        }
	    }
	    return output;
	}

	function ucs2encode(array) {
	    return array.map(function(value){
	        var output = "";
	        if (value > 0xFFFF) {
	            value -= 0x10000;
	            output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
	            value = 0xDC00 | value & 0x3FF;
	        }
	        output += String.fromCharCode(value);
	        return output;
	    }).join("");
	}

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	/*****************************************************************************\
	 *
	 * The code in this file, although written from scratch, is influenced by the
	 * TrueType parser/encoder in PDFKit -- http://pdfkit.org/ (a CoffeeScript
	 * library for producing PDF files).
	 *
	 * PDFKit is (c) Devon Govett 2014 and released under the MIT License.
	 *
	\*****************************************************************************/

	function hasOwnProperty$1(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}

	function sortedKeys(obj) {
	    return Object.keys(obj).sort(function(a, b){ return a - b; }).map(parseFloat);
	}

	///

	function Directory(data) {
	    this.raw = data;
	    this.scalerType = data.readLong();
	    this.tableCount = data.readShort();
	    this.searchRange = data.readShort();
	    this.entrySelector = data.readShort();
	    this.rangeShift = data.readShort();

	    var tables = this.tables = {};
	    for (var i = 0; i < this.tableCount; ++i) {
	        var entry = {
	            tag      : data.readString(4),
	            checksum : data.readLong(),
	            offset   : data.readLong(),
	            length   : data.readLong()
	        };
	        tables[entry.tag] = entry;
	    }
	}

	Directory.prototype = {

	    readTable: function(name, Ctor) {
	        var def = this.tables[name];
	        if (!def) {
	            throw new Error("Table " + name + " not found in directory");
	        }
	        return (this[name] = def.table = new Ctor(this, def));
	    },

	    render: function(tables) {
	        var this$1 = this;

	        var tableCount = Object.keys(tables).length;

	        var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));
	        var searchRange = maxpow2 * 16;
	        var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);
	        var rangeShift = tableCount * 16 - searchRange;

	        var out = BinaryStream();
	        out.writeLong(this.scalerType);
	        out.writeShort(tableCount);
	        out.writeShort(searchRange);
	        out.writeShort(entrySelector);
	        out.writeShort(rangeShift);

	        var directoryLength = tableCount * 16;
	        var offset = out.offset() + directoryLength;
	        var headOffset = null;
	        var tableData = BinaryStream();

	        for (var tag in tables) {
	            if (hasOwnProperty$1(tables, tag)) {
	                var table = tables[tag];

	                out.writeString(tag);
	                out.writeLong(this$1.checksum(table));
	                out.writeLong(offset);
	                out.writeLong(table.length);

	                tableData.write(table);
	                if (tag == "head") {
	                    headOffset = offset;
	                }
	                offset += table.length;

	                while (offset % 4) {
	                    tableData.writeByte(0);
	                    offset++;
	                }
	            }
	        }

	        out.write(tableData.get());
	        var sum = this.checksum(out.get());
	        var adjustment = 0xB1B0AFBA - sum;

	        out.offset(headOffset + 8);
	        out.writeLong(adjustment);
	        return out.get();
	    },

	    checksum: function(data) {
	        data = BinaryStream(data);
	        var sum = 0;
	        while (!data.eof()) {
	            sum += data.readLong();
	        }
	        return sum & 0xFFFFFFFF;
	    }
	};

	function deftable(methods) {
	    function Ctor(file, def) {
	        this.definition = def;
	        this.length = def.length;
	        this.offset = def.offset;
	        this.file = file;
	        this.rawData = file.raw;
	        this.parse(file.raw);
	    }
	    Ctor.prototype.raw = function() {
	        return this.rawData.slice(this.offset, this.length);
	    };
	    for (var i in methods) {
	        if (hasOwnProperty$1(methods, i)) {
	            Ctor[i] = Ctor.prototype[i] = methods[i];
	        }
	    }
	    return Ctor;
	}

	var HeadTable = deftable({
	    parse: function(data) {
	        data.offset(this.offset);
	        this.version             = data.readLong();
	        this.revision            = data.readLong();
	        this.checkSumAdjustment  = data.readLong();
	        this.magicNumber         = data.readLong();
	        this.flags               = data.readShort();
	        this.unitsPerEm          = data.readShort();
	        this.created             = data.read(8);
	        this.modified            = data.read(8);

	        this.xMin = data.readShort_();
	        this.yMin = data.readShort_();
	        this.xMax = data.readShort_();
	        this.yMax = data.readShort_();

	        this.macStyle           = data.readShort();
	        this.lowestRecPPEM      = data.readShort();
	        this.fontDirectionHint  = data.readShort_();
	        this.indexToLocFormat   = data.readShort_();
	        this.glyphDataFormat    = data.readShort_();
	    },
	    render: function(indexToLocFormat) {
	        var out = BinaryStream();
	        out.writeLong(this.version);
	        out.writeLong(this.revision);
	        out.writeLong(0);       // checksum adjustment; shall be computed later
	        out.writeLong(this.magicNumber);
	        out.writeShort(this.flags);
	        out.writeShort(this.unitsPerEm);
	        out.write(this.created);
	        out.write(this.modified);
	        out.writeShort_(this.xMin);
	        out.writeShort_(this.yMin);
	        out.writeShort_(this.xMax);
	        out.writeShort_(this.yMax);
	        out.writeShort(this.macStyle);
	        out.writeShort(this.lowestRecPPEM);
	        out.writeShort_(this.fontDirectionHint);
	        out.writeShort_(indexToLocFormat); // this will depend on the `loca` table
	        out.writeShort_(this.glyphDataFormat);
	        return out.get();
	    }
	});

	var LocaTable = deftable({
	    parse: function(data) {
	        data.offset(this.offset);
	        var format = this.file.head.indexToLocFormat;
	        if (format === 0) {
	            this.offsets = data.times(this.length / 2, function(){
	                return 2 * data.readShort();
	            });
	        } else {
	            this.offsets = data.times(this.length / 4, data.readLong);
	        }
	    },
	    offsetOf: function(id) {
	        return this.offsets[id];
	    },
	    lengthOf: function(id) {
	        return this.offsets[id + 1] - this.offsets[id];
	    },
	    render: function(offsets) {
	        var out = BinaryStream();
	        var needsLongFormat = offsets[offsets.length - 1] > 0xFFFF;
	        for (var i = 0; i < offsets.length; ++i) {
	            if (needsLongFormat) {
	                out.writeLong(offsets[i]);
	            } else {
	                out.writeShort(offsets[i] / 2);
	            }
	        }
	        return {
	            format: needsLongFormat ? 1 : 0,
	            table: out.get()
	        };
	    }
	});

	var HheaTable = deftable({
	    parse: function(data) {
	        data.offset(this.offset);

	        this.version              = data.readLong();
	        this.ascent               = data.readShort_();
	        this.descent              = data.readShort_();
	        this.lineGap              = data.readShort_();
	        this.advanceWidthMax      = data.readShort();
	        this.minLeftSideBearing   = data.readShort_();
	        this.minRightSideBearing  = data.readShort_();
	        this.xMaxExtent           = data.readShort_();
	        this.caretSlopeRise       = data.readShort_();
	        this.caretSlopeRun        = data.readShort_();
	        this.caretOffset          = data.readShort_();

	        data.skip(4 * 2);       // reserved

	        this.metricDataFormat     = data.readShort_();
	        this.numOfLongHorMetrics  = data.readShort();
	    },
	    render: function(ids) {
	        var out = BinaryStream();
	        out.writeLong(this.version);
	        out.writeShort_(this.ascent);
	        out.writeShort_(this.descent);
	        out.writeShort_(this.lineGap);
	        out.writeShort(this.advanceWidthMax);
	        out.writeShort_(this.minLeftSideBearing);
	        out.writeShort_(this.minRightSideBearing);
	        out.writeShort_(this.xMaxExtent);
	        out.writeShort_(this.caretSlopeRise);
	        out.writeShort_(this.caretSlopeRun);
	        out.writeShort_(this.caretOffset);

	        out.write([ 0, 0, 0, 0, 0, 0, 0, 0 ]); // reserved bytes

	        out.writeShort_(this.metricDataFormat);
	        out.writeShort(ids.length);
	        return out.get();
	    }
	});

	var MaxpTable = deftable({
	    parse: function(data) {
	        data.offset(this.offset);
	        this.version = data.readLong();
	        this.numGlyphs = data.readShort();
	        this.maxPoints = data.readShort();
	        this.maxContours = data.readShort();
	        this.maxComponentPoints = data.readShort();
	        this.maxComponentContours = data.readShort();
	        this.maxZones = data.readShort();
	        this.maxTwilightPoints = data.readShort();
	        this.maxStorage = data.readShort();
	        this.maxFunctionDefs = data.readShort();
	        this.maxInstructionDefs = data.readShort();
	        this.maxStackElements = data.readShort();
	        this.maxSizeOfInstructions = data.readShort();
	        this.maxComponentElements = data.readShort();
	        this.maxComponentDepth = data.readShort();
	    },
	    render: function(glyphIds) {
	        var out = BinaryStream();
	        out.writeLong(this.version);
	        out.writeShort(glyphIds.length);
	        out.writeShort(this.maxPoints);
	        out.writeShort(this.maxContours);
	        out.writeShort(this.maxComponentPoints);
	        out.writeShort(this.maxComponentContours);
	        out.writeShort(this.maxZones);
	        out.writeShort(this.maxTwilightPoints);
	        out.writeShort(this.maxStorage);
	        out.writeShort(this.maxFunctionDefs);
	        out.writeShort(this.maxInstructionDefs);
	        out.writeShort(this.maxStackElements);
	        out.writeShort(this.maxSizeOfInstructions);
	        out.writeShort(this.maxComponentElements);
	        out.writeShort(this.maxComponentDepth);
	        return out.get();
	    }
	});

	var HmtxTable = deftable({
	    parse: function(data) {
	        data.offset(this.offset);
	        var dir = this.file, hhea = dir.hhea;
	        this.metrics = data.times(hhea.numOfLongHorMetrics, function(){
	            return {
	                advance: data.readShort(),
	                lsb: data.readShort_()
	            };
	        });
	        var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;
	        this.leftSideBearings = data.times(lsbCount, data.readShort_);
	    },
	    forGlyph: function(id) {
	        var metrics = this.metrics;
	        var n = metrics.length;
	        if (id < n) {
	            return metrics[id];
	        }
	        return {
	            advance: metrics[n - 1].advance,
	            lsb: this.leftSideBearings[id - n]
	        };
	    },
	    render: function(glyphIds) {
	        var this$1 = this;

	        var out = BinaryStream();
	        for (var i = 0; i < glyphIds.length; ++i) {
	            var m = this$1.forGlyph(glyphIds[i]);
	            out.writeShort(m.advance);
	            out.writeShort_(m.lsb);
	        }
	        return out.get();
	    }
	});

	var GlyfTable = (function(){

	    function SimpleGlyph(raw) {
	        this.raw = raw;
	    }
	    SimpleGlyph.prototype = {
	        compound: false,
	        render: function() {
	            return this.raw.get();
	        }
	    };

	    var ARG_1_AND_2_ARE_WORDS     = 0x0001;
	    var WE_HAVE_A_SCALE           = 0x0008;
	    var MORE_COMPONENTS           = 0x0020;
	    var WE_HAVE_AN_X_AND_Y_SCALE  = 0x0040;
	    var WE_HAVE_A_TWO_BY_TWO      = 0x0080;
	    //var WE_HAVE_INSTRUCTIONS      = 0x0100;

	    function CompoundGlyph(data) {
	        this.raw = data;
	        var ids = this.glyphIds = [];
	        var offsets = this.idOffsets = [];
	        while (true) {          // eslint-disable-line no-constant-condition
	            var flags = data.readShort();
	            offsets.push(data.offset());
	            ids.push(data.readShort());

	            if (!(flags & MORE_COMPONENTS)) {
	                break;
	            }

	            data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);

	            if (flags & WE_HAVE_A_TWO_BY_TWO) {
	                data.skip(8);
	            } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
	                data.skip(4);
	            } else if (flags & WE_HAVE_A_SCALE) {
	                data.skip(2);
	            }
	        }
	    }

	    CompoundGlyph.prototype = {
	        compound: true,
	        render: function(old2new) {
	            var this$1 = this;

	            var out = BinaryStream(this.raw.get());
	            for (var i = 0; i < this.glyphIds.length; ++i) {
	                var id = this$1.glyphIds[i];
	                out.offset(this$1.idOffsets[i]);
	                out.writeShort(old2new[id]);
	            }
	            return out.get();
	        }
	    };

	    return deftable({
	        parse: function() {
	            this.cache = {};
	        },
	        glyphFor: function(id) {
	            var cache = this.cache;
	            if (hasOwnProperty$1(cache, id)) {
	                return cache[id];
	            }

	            var loca = this.file.loca;
	            var length = loca.lengthOf(id);

	            if (length === 0) {
	                return (cache[id] = null);
	            }

	            var data = this.rawData;
	            var offset = this.offset + loca.offsetOf(id);
	            var raw = BinaryStream(data.slice(offset, length));

	            var numberOfContours = raw.readShort_();
	            var xMin = raw.readShort_();
	            var yMin = raw.readShort_();
	            var xMax = raw.readShort_();
	            var yMax = raw.readShort_();

	            var glyph = cache[id] = numberOfContours == -1 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);

	            glyph.numberOfContours = numberOfContours;
	            glyph.xMin = xMin;
	            glyph.yMin = yMin;
	            glyph.xMax = xMax;
	            glyph.yMax = yMax;

	            return glyph;
	        },
	        render: function(glyphs, oldIds, old2new) {
	            var out = BinaryStream(), offsets = [];
	            for (var i = 0; i < oldIds.length; ++i) {
	                var id = oldIds[i];
	                var glyph = glyphs[id];
	                offsets.push(out.offset());
	                if (glyph) {
	                    out.write(glyph.render(old2new));
	                }
	            }
	            offsets.push(out.offset());
	            return {
	                table: out.get(),
	                offsets: offsets
	            };
	        }
	    });

	}());

	var NameTable = (function(){

	    function NameEntry(text, entry) {
	        this.text = text;
	        this.length = text.length;
	        this.platformID = entry.platformID;
	        this.platformSpecificID = entry.platformSpecificID;
	        this.languageID = entry.languageID;
	        this.nameID = entry.nameID;
	    }

	    return deftable({
	        parse: function(data) {
	            data.offset(this.offset);
	            data.readShort();   // format
	            var count = data.readShort();
	            var stringOffset = this.offset + data.readShort();
	            var nameRecords = data.times(count, function(){
	                return {
	                    platformID         : data.readShort(),
	                    platformSpecificID : data.readShort(),
	                    languageID         : data.readShort(),
	                    nameID             : data.readShort(),
	                    length             : data.readShort(),
	                    offset             : data.readShort() + stringOffset
	                };
	            });
	            var strings = this.strings = {};
	            for (var i = 0; i < nameRecords.length; ++i) {
	                var rec = nameRecords[i];
	                data.offset(rec.offset);
	                var text = data.readString(rec.length);
	                if (!strings[rec.nameID]) {
	                    strings[rec.nameID] = [];
	                }
	                strings[rec.nameID].push(new NameEntry(text, rec));
	            }
	            this.postscriptEntry = strings[6][0];
	            this.postscriptName = this.postscriptEntry.text.replace(/[^\x20-\x7F]/g, "");
	        },

	        render: function(psName) {
	            var this$1 = this;

	            var strings = this.strings;
	            var strCount = 0;
	            for (var i in strings) {
	                if (hasOwnProperty$1(strings, i)) {
	                    strCount += strings[i].length;
	                }
	            }
	            var out = BinaryStream();
	            var strTable = BinaryStream();

	            out.writeShort(0);  // format
	            out.writeShort(strCount);
	            out.writeShort(6 + 12 * strCount); // stringOffset

	            for (i in strings) {
	                if (hasOwnProperty$1(strings, i)) {
	                    var list = i == 6 ? [
	                        new NameEntry(psName, this$1.postscriptEntry)
	                    ] : strings[i];
	                    for (var j = 0; j < list.length; ++j) {
	                        var str = list[j];
	                        out.writeShort(str.platformID);
	                        out.writeShort(str.platformSpecificID);
	                        out.writeShort(str.languageID);
	                        out.writeShort(str.nameID);
	                        out.writeShort(str.length);
	                        out.writeShort(strTable.offset());

	                        strTable.writeString(str.text);
	                    }
	                }
	            }

	            out.write(strTable.get());

	            return out.get();
	        }
	    });

	})();

	var PostTable = (function(){

	    var POSTSCRIPT_GLYPHS = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(/\s+/g);

	    return deftable({
	        parse: function(data) {
	            var this$1 = this;

	            data.offset(this.offset);

	            this.format = data.readLong();
	            this.italicAngle = data.readFixed_();
	            this.underlinePosition = data.readShort_();
	            this.underlineThickness = data.readShort_();
	            this.isFixedPitch = data.readLong();
	            this.minMemType42 = data.readLong();
	            this.maxMemType42 = data.readLong();
	            this.minMemType1 = data.readLong();
	            this.maxMemType1 = data.readLong();

	            var numberOfGlyphs;

	            switch (this.format) {
	              case 0x00010000:
	              case 0x00030000:
	                break;

	              case 0x00020000:
	                numberOfGlyphs = data.readShort();
	                this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);
	                this.names = [];
	                var limit = this.offset + this.length;
	                while (data.offset() < limit) {
	                    this$1.names.push(data.readString(data.readByte()));
	                }
	                break;

	              case 0x00025000:
	                numberOfGlyphs = data.readShort();
	                this.offsets = data.read(numberOfGlyphs);
	                break;

	              case 0x00040000:
	                this.map = data.times(this.file.maxp.numGlyphs, data.readShort);
	                break;
	            }
	        },
	        glyphFor: function(code) {
	            switch (this.format) {
	              case 0x00010000:
	                return POSTSCRIPT_GLYPHS[code] || ".notdef";

	              case 0x00020000:
	                var index = this.glyphNameIndex[code];
	                if (index < POSTSCRIPT_GLYPHS.length) {
	                    return POSTSCRIPT_GLYPHS[index];
	                }
	                return this.names[index - POSTSCRIPT_GLYPHS.length] || ".notdef";

	              case 0x00025000:

	              case 0x00030000:
	                return ".notdef";

	              case 0x00040000:
	                return this.map[code] || 0xFFFF;
	            }
	        },
	        render: function(mapping) {
	            var this$1 = this;

	            if (this.format == 0x00030000) {
	                return this.raw();
	            }

	            // keep original header, but set format to 2.0
	            var out = BinaryStream(this.rawData.slice(this.offset, 32));
	            out.writeLong(0x00020000);
	            out.offset(32);

	            var indexes = [];
	            var strings = [];

	            for (var i = 0; i < mapping.length; ++i) {
	                var id = mapping[i];
	                var post = this$1.glyphFor(id);
	                var index = POSTSCRIPT_GLYPHS.indexOf(post);
	                if (index >= 0) {
	                    indexes.push(index);
	                } else {
	                    indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);
	                    strings.push(post);
	                }
	            }

	            out.writeShort(mapping.length);

	            for (i = 0; i < indexes.length; ++i) {
	                out.writeShort(indexes[i]);
	            }

	            for (i = 0; i < strings.length; ++i) {
	                out.writeByte(strings[i].length);
	                out.writeString(strings[i]);
	            }

	            return out.get();
	        }
	    });
	})();

	var CmapTable = (function(){

	    function CmapEntry(data, offset, codeMap) {
	        var self = this;
	        self.platformID = data.readShort();
	        self.platformSpecificID = data.readShort();
	        self.offset = offset + data.readLong();

	        data.saveExcursion(function(){
	            var code;
	            data.offset(self.offset);
	            self.format = data.readShort();

	            switch (self.format) {
	              case 0:
	                self.length = data.readShort();
	                self.language = data.readShort();
	                for (var i = 0; i < 256; ++i) {
	                    codeMap[i] = data.readByte();
	                }
	                break;

	              case 4:
	                self.length = data.readShort();
	                self.language = data.readShort();
	                var segCount = data.readShort() / 2;

	                data.skip(6);       // searchRange, entrySelector, rangeShift
	                var endCode = data.times(segCount, data.readShort);
	                data.skip(2);       // reserved pad
	                var startCode = data.times(segCount, data.readShort);
	                var idDelta = data.times(segCount, data.readShort_);
	                var idRangeOffset = data.times(segCount, data.readShort);

	                var count = (self.length + self.offset - data.offset()) / 2;
	                var glyphIds = data.times(count, data.readShort);

	                for (i = 0; i < segCount; ++i) {
	                    var start = startCode[i], end = endCode[i];
	                    for (code = start; code <= end; ++code) {
	                        var glyphId;
	                        if (idRangeOffset[i] === 0) {
	                            glyphId = code + idDelta[i];
	                        } else {
	                            ///
	                            // When non-zero, idRangeOffset contains for each segment the byte offset of the Glyph ID
	                            // into the glyphIds table, from the *current* `i` cell of idRangeOffset.  In other words,
	                            // this offset spans from the first into the second array.  This works, because the arrays
	                            // are consecutive in the TTF file:
	                            //
	                            //     [ ...idRangeOffset... ][ ...glyphIds... ]
	                            //       ...... 48 ......       .... ID ....
	                            //              ^----- 48 bytes -----^
	                            //
	                            // (but I can't stop wondering why is it not just a plain index, possibly incremented by 1
	                            // so that we can have that special `zero` value.)
	                            //
	                            // The elements of idRangeOffset are even numbers, because both arrays contain 16-bit words,
	                            // yet the offset is in bytes.  That is why we divide it by 2.  Then we subtract the
	                            // remaining segments (segCount-i), and add the code-start offset, to which we need to add
	                            // the corresponding delta to get the actual glyph ID.
	                            ///
	                            var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);
	                            glyphId = glyphIds[index] || 0;
	                            if (glyphId !== 0) {
	                                glyphId += idDelta[i];
	                            }
	                        }
	                        codeMap[code] = glyphId & 0xFFFF;
	                    }
	                }
	                break;

	              case 6:
	                self.length = data.readShort();
	                self.language = data.readShort();
	                code = data.readShort();
	                var length = data.readShort();
	                while (length-- > 0) {
	                    codeMap[code++] = data.readShort();
	                }
	                break;

	              case 12:
	                data.readShort(); // reserved
	                self.length = data.readLong();
	                self.language = data.readLong();
	                var ngroups = data.readLong();
	                while (ngroups-- > 0) {
	                    code = data.readLong();
	                    var endCharCode = data.readLong();
	                    var glyphCode = data.readLong();
	                    while (code <= endCharCode) {
	                        codeMap[code++] = glyphCode++;
	                    }
	                }
	                break;

	              default:
	                if (window.console) {
	                    window.console.error("Unhandled CMAP format: " + self.format);
	                }
	            }
	        });
	    }

	    function renderCharmap(ncid2ogid, ogid2ngid) {
	        var codes = sortedKeys(ncid2ogid);
	        var startCodes = [];
	        var endCodes = [];
	        var last = null;
	        var diff = null;

	        function new_gid(charcode) {
	            return ogid2ngid[ncid2ogid[charcode]];
	        }

	        for (var i = 0; i < codes.length; ++i) {
	            var code = codes[i];
	            var gid = new_gid(code);
	            var delta = gid - code;
	            if (last == null || delta !== diff) {
	                if (last) {
	                    endCodes.push(last);
	                }
	                startCodes.push(code);
	                diff = delta;
	            }
	            last = code;
	        }

	        if (last) {
	            endCodes.push(last);
	        }
	        endCodes.push(0xFFFF);
	        startCodes.push(0xFFFF);

	        var segCount = startCodes.length;
	        var segCountX2 = segCount * 2;
	        var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));
	        var entrySelector = Math.log(searchRange / 2) / Math.LN2;
	        var rangeShift = segCountX2 - searchRange;

	        var deltas = [];
	        var rangeOffsets = [];
	        var glyphIds = [];

	        for (i = 0; i < segCount; ++i) {
	            var startCode = startCodes[i];
	            var endCode = endCodes[i];
	            if (startCode == 0xFFFF) {
	                deltas.push(0);
	                rangeOffsets.push(0);
	                break;
	            }
	            var startGlyph = new_gid(startCode);
	            if (startCode - startGlyph >= 0x8000) {
	                deltas.push(0);
	                rangeOffsets.push(2 * (glyphIds.length + segCount - i));
	                for (var j = startCode; j <= endCode; ++j) {
	                    glyphIds.push(new_gid(j));
	                }
	            } else {
	                deltas.push(startGlyph - startCode);
	                rangeOffsets.push(0);
	            }
	        }

	        var out = BinaryStream();

	        out.writeShort(3);      // platformID
	        out.writeShort(1);      // platformSpecificID
	        out.writeLong(12);      // offset
	        out.writeShort(4);      // format
	        out.writeShort(16 + segCount * 8 + glyphIds.length * 2); // length
	        out.writeShort(0);      // language
	        out.writeShort(segCountX2);
	        out.writeShort(searchRange);
	        out.writeShort(entrySelector);
	        out.writeShort(rangeShift);

	        endCodes.forEach(out.writeShort);
	        out.writeShort(0);      // reserved pad
	        startCodes.forEach(out.writeShort);
	        deltas.forEach(out.writeShort_);
	        rangeOffsets.forEach(out.writeShort);
	        glyphIds.forEach(out.writeShort);

	        return out.get();
	    }

	    return deftable({
	        parse: function(data) {
	            var self = this;
	            var offset = self.offset;
	            data.offset(offset);
	            self.codeMap = {};
	            self.version = data.readShort();
	            var tableCount = data.readShort();
	            self.tables = data.times(tableCount, function(){
	                return new CmapEntry(data, offset, self.codeMap);
	            });
	        },
	        render: function(ncid2ogid, ogid2ngid) {
	            var out = BinaryStream();
	            out.writeShort(0);  // version
	            out.writeShort(1);  // tableCount
	            out.write(renderCharmap(ncid2ogid, ogid2ngid));
	            return out.get();
	        }
	    });

	})();

	var OS2Table = deftable({
	    parse: function(data) {
	        data.offset(this.offset);
	        this.version = data.readShort();
	        this.averageCharWidth = data.readShort_();
	        this.weightClass = data.readShort();
	        this.widthClass = data.readShort();
	        this.type = data.readShort();
	        this.ySubscriptXSize = data.readShort_();
	        this.ySubscriptYSize = data.readShort_();
	        this.ySubscriptXOffset = data.readShort_();
	        this.ySubscriptYOffset = data.readShort_();
	        this.ySuperscriptXSize = data.readShort_();
	        this.ySuperscriptYSize = data.readShort_();
	        this.ySuperscriptXOffset = data.readShort_();
	        this.ySuperscriptYOffset = data.readShort_();
	        this.yStrikeoutSize = data.readShort_();
	        this.yStrikeoutPosition = data.readShort_();
	        this.familyClass = data.readShort_();

	        this.panose = data.times(10, data.readByte);
	        this.charRange = data.times(4, data.readLong);

	        this.vendorID = data.readString(4);
	        this.selection = data.readShort();
	        this.firstCharIndex = data.readShort();
	        this.lastCharIndex = data.readShort();

	        if (this.version > 0) {
	            this.ascent = data.readShort_();
	            this.descent = data.readShort_();
	            this.lineGap = data.readShort_();
	            this.winAscent = data.readShort();
	            this.winDescent = data.readShort();
	            this.codePageRange = data.times(2, data.readLong);

	            if (this.version > 1) {
	                this.xHeight = data.readShort();
	                this.capHeight = data.readShort();
	                this.defaultChar = data.readShort();
	                this.breakChar = data.readShort();
	                this.maxContext = data.readShort();
	            }
	        }
	    },
	    render: function() {
	        return this.raw();
	    }
	});

	var subsetTag = 100000;

	function nextSubsetTag() {
	    var ret = "", n = String(subsetTag);
	    for (var i = 0; i < n.length; ++i) {
	        ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);
	    }
	    ++subsetTag;
	    return ret;
	}

	function Subfont(font) {
	    this.font = font;
	    this.subset = {};
	    this.unicodes = {};
	    this.ogid2ngid = { 0: 0 };
	    this.ngid2ogid = { 0: 0 };
	    this.ncid2ogid = {};
	    this.next = this.firstChar = 1;
	    this.nextGid = 1;
	    this.psName = nextSubsetTag() + "+" + this.font.psName;
	}

	Subfont.prototype = {
	    use: function(ch) {
	        var self = this;
	        if (typeof ch == "string") {
	            return ucs2decode(ch).reduce(function(ret, code){
	                return ret + String.fromCharCode(self.use(code));
	            }, "");
	        }
	        var code = self.unicodes[ch];
	        if (!code) {
	            code = self.next++;
	            self.subset[code] = ch;
	            self.unicodes[ch] = code;

	            // generate new GID (glyph ID) and maintain newGID ->
	            // oldGID and back mappings
	            var old_gid = self.font.cmap.codeMap[ch];
	            if (old_gid) {
	                self.ncid2ogid[code] = old_gid;
	                if (self.ogid2ngid[old_gid] == null) {
	                    var new_gid = self.nextGid++;
	                    self.ogid2ngid[old_gid] = new_gid;
	                    self.ngid2ogid[new_gid] = old_gid;
	                }
	            }
	        }
	        return code;
	    },
	    encodeText: function(text) {
	        return this.use(text);
	    },
	    glyphIds: function() {
	        return sortedKeys(this.ogid2ngid);
	    },
	    glyphsFor: function(glyphIds, result) {
	        var this$1 = this;

	        if (!result) {
	            result = {};
	        }
	        for (var i = 0; i < glyphIds.length; ++i) {
	            var id = glyphIds[i];
	            if (!result[id]) {
	                var glyph = result[id] = this$1.font.glyf.glyphFor(id);
	                if (glyph && glyph.compound) {
	                    this$1.glyphsFor(glyph.glyphIds, result);
	                }
	            }
	        }
	        return result;
	    },
	    render: function() {
	        var this$1 = this;

	        var glyphs = this.glyphsFor(this.glyphIds());

	        // add missing sub-glyphs
	        for (var old_gid in glyphs) {
	            if (hasOwnProperty$1(glyphs, old_gid)) {
	                old_gid = parseInt(old_gid, 10);
	                if (this$1.ogid2ngid[old_gid] == null) {
	                    var new_gid = this$1.nextGid++;
	                    this$1.ogid2ngid[old_gid] = new_gid;
	                    this$1.ngid2ogid[new_gid] = old_gid;
	                }
	            }
	        }

	        // must obtain old_gid_ids in an order matching sorted
	        // new_gid_ids
	        var new_gid_ids = sortedKeys(this.ngid2ogid);
	        var old_gid_ids = new_gid_ids.map(function(id){
	            return this.ngid2ogid[id];
	        }, this);

	        var font = this.font;
	        var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);
	        var loca = font.loca.render(glyf.offsets);

	        this.lastChar = this.next - 1;

	        var tables = {
	            "cmap" : CmapTable.render(this.ncid2ogid, this.ogid2ngid),
	            "glyf" : glyf.table,
	            "loca" : loca.table,
	            "hmtx" : font.hmtx.render(old_gid_ids),
	            "hhea" : font.hhea.render(old_gid_ids),
	            "maxp" : font.maxp.render(old_gid_ids),
	            "post" : font.post.render(old_gid_ids),
	            "name" : font.name.render(this.psName),
	            "head" : font.head.render(loca.format),
	            "OS/2" : font.os2.render()
	        };

	        return this.font.directory.render(tables);
	    },
	    cidToGidMap: function() {
	        var this$1 = this;

	        var out = BinaryStream(), len = 0;
	        for (var cid = this.firstChar; cid < this.next; ++cid) {
	            while (len < cid) {
	                out.writeShort(0);
	                len++;
	            }
	            var old_gid = this$1.ncid2ogid[cid];
	            if (old_gid) {
	                var new_gid = this$1.ogid2ngid[old_gid];
	                out.writeShort(new_gid);
	            } else {
	                out.writeShort(0);
	            }
	            len++;
	        }
	        return out.get();
	    }
	};

	function TTFFont(rawData, name) {
	    var self = this;
	    var data = self.contents = BinaryStream(rawData);
	    if (data.readString(4) == "ttcf") {
	        var offset;
	        var parse = function() {
	            data.offset(offset);
	            self.parse();
	        };
	        if (!name) {
	            throw new Error("Must specify a name for TTC files");
	        }
	        data.readLong();        // version
	        var numFonts = data.readLong();
	        for (var i = 0; i < numFonts; ++i) {
	            offset = data.readLong();
	            data.saveExcursion(parse);
	            if (self.psName == name) {
	                return;
	            }
	        }
	        throw new Error("Font " + name + " not found in collection");
	    } else {
	        data.offset(0);
	        self.parse();
	    }
	}

	TTFFont.prototype = {
	    parse: function() {
	        var dir = this.directory = new Directory(this.contents);

	        this.head = dir.readTable("head", HeadTable);
	        this.loca = dir.readTable("loca", LocaTable);
	        this.hhea = dir.readTable("hhea", HheaTable);
	        this.maxp = dir.readTable("maxp", MaxpTable);
	        this.hmtx = dir.readTable("hmtx", HmtxTable);
	        this.glyf = dir.readTable("glyf", GlyfTable);
	        this.name = dir.readTable("name", NameTable);
	        this.post = dir.readTable("post", PostTable);
	        this.cmap = dir.readTable("cmap", CmapTable);
	        this.os2  = dir.readTable("OS/2", OS2Table);

	        this.psName = this.name.postscriptName;
	        this.ascent = this.os2.ascent || this.hhea.ascent;
	        this.descent = this.os2.descent || this.hhea.descent;
	        this.lineGap = this.os2.lineGap || this.hhea.lineGap;
	        this.scale = 1000 / this.head.unitsPerEm;
	    },
	    widthOfGlyph: function(glyph) {
	        return this.hmtx.forGlyph(glyph).advance * this.scale;
	    },
	    makeSubset: function() {
	        return new Subfont(this);
	    }
	};

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	var browser = kendo.support.browser;
	// XXX: remove this junk (assume `true`) when we no longer have to support IE < 10
	var HAS_TYPED_ARRAYS = typeof Uint8Array !== 'undefined';

	var NL = "\n";

	var RESOURCE_COUNTER = 0;

	var PAPER_SIZE = {
	    a0        : [ 2383.94 , 3370.39 ],
	    a1        : [ 1683.78 , 2383.94 ],
	    a2        : [ 1190.55 , 1683.78 ],
	    a3        : [ 841.89  , 1190.55 ],
	    a4        : [ 595.28  , 841.89  ],
	    a5        : [ 419.53  , 595.28  ],
	    a6        : [ 297.64  , 419.53  ],
	    a7        : [ 209.76  , 297.64  ],
	    a8        : [ 147.40  , 209.76  ],
	    a9        : [ 104.88  , 147.40  ],
	    a10       : [ 73.70   , 104.88  ],
	    b0        : [ 2834.65 , 4008.19 ],
	    b1        : [ 2004.09 , 2834.65 ],
	    b2        : [ 1417.32 , 2004.09 ],
	    b3        : [ 1000.63 , 1417.32 ],
	    b4        : [ 708.66  , 1000.63 ],
	    b5        : [ 498.90  , 708.66  ],
	    b6        : [ 354.33  , 498.90  ],
	    b7        : [ 249.45  , 354.33  ],
	    b8        : [ 175.75  , 249.45  ],
	    b9        : [ 124.72  , 175.75  ],
	    b10       : [ 87.87   , 124.72  ],
	    c0        : [ 2599.37 , 3676.54 ],
	    c1        : [ 1836.85 , 2599.37 ],
	    c2        : [ 1298.27 , 1836.85 ],
	    c3        : [ 918.43  , 1298.27 ],
	    c4        : [ 649.13  , 918.43  ],
	    c5        : [ 459.21  , 649.13  ],
	    c6        : [ 323.15  , 459.21  ],
	    c7        : [ 229.61  , 323.15  ],
	    c8        : [ 161.57  , 229.61  ],
	    c9        : [ 113.39  , 161.57  ],
	    c10       : [ 79.37   , 113.39  ],
	    executive : [ 521.86  , 756.00  ],
	    folio     : [ 612.00  , 936.00  ],
	    legal     : [ 612.00  , 1008.00 ],
	    letter    : [ 612.00  , 792.00  ],
	    tabloid   : [ 792.00  , 1224.00 ]
	};

	function makeOutput() {
	    var indentLevel = 0, output = BinaryStream();
	    function out() {
	        var arguments$1 = arguments;

	        for (var i = 0; i < arguments.length; ++i) {
	            var x = arguments$1[i];
	            if (x === undefined) {
	                throw new Error("Cannot output undefined to PDF");
	            }
	            else if (x instanceof PDFValue) {
	                x.beforeRender(out);
	                x.render(out);
	            }
	            else if (isArray(x)) {
	                renderArray(x, out);
	            }
	            else if (isDate(x)) {
	                renderDate(x, out);
	            }
	            else if (typeof x == "number") {
	                if (isNaN(x)) {
	                    throw new Error("Cannot output NaN to PDF");
	                }
	                // make sure it doesn't end up in exponent notation
	                var num = x.toFixed(7);
	                if (num.indexOf(".") >= 0) {
	                    num = num.replace(/\.?0+$/, "");
	                }
	                if (num == "-0") {
	                    num = "0";
	                }
	                output.writeString(num);
	            }
	            else if (/string|boolean/.test(typeof x)) {
	                output.writeString(String(x));
	            }
	            else if (typeof x.get == "function") {
	                output.write(x.get());
	            }
	            else if (typeof x == "object") {
	                if (!x) {
	                    output.writeString("null");
	                } else {
	                    out(new PDFDictionary(x));
	                }
	            }
	        }
	    }
	    out.writeData = function(data) {
	        output.write(data);
	    };
	    out.withIndent = function(f) {
	        ++indentLevel;
	        f(out);
	        --indentLevel;
	    };
	    out.indent = function() {
	        out(NL, pad("", indentLevel * 2, "  "));
	        out.apply(null, arguments);
	    };
	    out.offset = function() {
	        return output.offset();
	    };
	    out.toString = function() {
	        throw new Error("FIX CALLER");
	    };
	    out.get = function() {
	        return output.get();
	    };
	    out.stream = function() {
	        return output;
	    };
	    return out;
	}

	function wrapObject(value, id) {
	    var beforeRender = value.beforeRender;
	    var renderValue = value.render;

	    value.beforeRender = function(){};

	    value.render = function(out) {
	        out(id, " 0 R");
	    };

	    value.renderFull = function(out) {
	        value._offset = out.offset();
	        out(id, " 0 obj ");
	        beforeRender.call(value, out);
	        renderValue.call(value, out);
	        out(" endobj");
	    };
	}

	function getPaperOptions(getOption) {
	    if (typeof getOption != "function") {
	        var options = getOption;
	        getOption = function(key, def) {
	            return key in options ? options[key] : def;
	        };
	    }
	    var paperSize = getOption("paperSize", PAPER_SIZE.a4);
	    if (!paperSize) {
	        return {};
	    }
	    if (typeof paperSize == "string") {
	        paperSize = PAPER_SIZE[paperSize.toLowerCase()];
	        if (paperSize == null) {
	            throw new Error("Unknown paper size");
	        }
	    }

	    paperSize[0] = unitsToPoints(paperSize[0]);
	    paperSize[1] = unitsToPoints(paperSize[1]);

	    if (getOption("landscape", false)) {
	        paperSize = [
	            Math.max(paperSize[0], paperSize[1]),
	            Math.min(paperSize[0], paperSize[1])
	        ];
	    }

	    var margin = getOption("margin");
	    if (margin) {
	        if (typeof margin == "string" || typeof margin == "number") {
	            margin = unitsToPoints(margin, 0);
	            margin = { left: margin, top: margin, right: margin, bottom: margin };
	        } else {
	            margin = {
	                left   : unitsToPoints(margin.left, 0),
	                top    : unitsToPoints(margin.top, 0),
	                right  : unitsToPoints(margin.right, 0),
	                bottom : unitsToPoints(margin.bottom, 0)
	            };
	        }
	        if (getOption("addMargin")) {
	            paperSize[0] += margin.left + margin.right;
	            paperSize[1] += margin.top + margin.bottom;
	        }
	    }
	    return { paperSize: paperSize, margin: margin };
	}

	function PDFDocument(options) {
	    var self = this;
	    var out = makeOutput();
	    var objcount = 0;
	    var objects = [];

	    function getOption(name, defval) {
	        return (options && options[name] != null) ? options[name] : defval;
	    }

	    self.getOption = getOption;

	    self.attach = function(value) {
	        if (objects.indexOf(value) < 0) {
	            wrapObject(value, ++objcount);
	            objects.push(value);
	        }
	        return value;
	    };

	    self.pages = [];

	    self.FONTS = {};
	    self.IMAGES = {};
	    self.GRAD_COL_FUNCTIONS = {}; // cache for color gradient functions
	    self.GRAD_OPC_FUNCTIONS = {}; // cache for opacity gradient functions
	    self.GRAD_COL = {};     // cache for whole color gradient objects
	    self.GRAD_OPC = {};     // cache for whole opacity gradient objects

	    var catalog = self.attach(new PDFCatalog());
	    var pageTree = self.attach(new PDFPageTree());
	    catalog.setPages(pageTree);

	    self.addPage = function(options) {
	        var paperOptions  = getPaperOptions(function(name, defval){
	            return (options && options[name] != null) ? options[name] : defval;
	        });
	        var paperSize     = paperOptions.paperSize;
	        var margin        = paperOptions.margin;
	        var contentWidth  = paperSize[0];
	        var contentHeight = paperSize[1];
	        if (margin) {
	            contentWidth -= margin.left + margin.right;
	            contentHeight -= margin.top + margin.bottom;
	        }
	        var content = new PDFStream(makeOutput(), null, true);
	        var props = {
	            Contents : self.attach(content),
	            Parent   : pageTree,
	            MediaBox : [ 0, 0, paperSize[0], paperSize[1] ]
	        };
	        var page = new PDFPage(self, props);
	        page._content = content;
	        pageTree.addPage(self.attach(page));

	        // canvas-like coord. system.  (0,0) is upper-left.
	        // text must be vertically mirorred before drawing.
	        page.transform(1, 0, 0, -1, 0, paperSize[1]);

	        if (margin) {
	            page.translate(margin.left, margin.top);
	            // XXX: clip to right/bottom margin.  Make this optional?
	            page.rect(0, 0, contentWidth, contentHeight);
	            page.clip();
	        }

	        self.pages.push(page);
	        return page;
	    };

	    self.render = function() {
	        var i;
	        /// file header
	        out("%PDF-1.4", NL, "%\xc2\xc1\xda\xcf\xce", NL, NL);

	        /// file body
	        for (i = 0; i < objects.length; ++i) {
	            objects[i].renderFull(out);
	            out(NL, NL);
	        }

	        /// cross-reference table
	        var xrefOffset = out.offset();
	        out("xref", NL, 0, " ", objects.length + 1, NL);
	        out("0000000000 65535 f ", NL);
	        for (i = 0; i < objects.length; ++i) {
	            out(zeropad(objects[i]._offset, 10), " 00000 n ", NL);
	        }
	        out(NL);

	        /// trailer
	        out("trailer", NL);
	        out(new PDFDictionary({
	            Size: objects.length + 1,
	            Root: catalog,
	            Info: new PDFDictionary({
	                Producer     : new PDFString(getOption("producer", "Kendo UI PDF Generator")), // XXX: kendo.version?
	                Title        : new PDFString(getOption("title", "")),
	                Author       : new PDFString(getOption("author", "")),
	                Subject      : new PDFString(getOption("subject", "")),
	                Keywords     : new PDFString(getOption("keywords", "")),
	                Creator      : new PDFString(getOption("creator", "Kendo UI PDF Generator")),
	                CreationDate : getOption("date", new Date())
	            })
	        }), NL, NL);

	        /// end
	        out("startxref", NL, xrefOffset, NL);
	        out("%%EOF", NL);

	        return out.stream().offset(0);
	    };
	}

	var FONT_CACHE = {
	    "Times-Roman"           : true,
	    "Times-Bold"            : true,
	    "Times-Italic"          : true,
	    "Times-BoldItalic"      : true,
	    "Helvetica"             : true,
	    "Helvetica-Bold"        : true,
	    "Helvetica-Oblique"     : true,
	    "Helvetica-BoldOblique" : true,
	    "Courier"               : true,
	    "Courier-Bold"          : true,
	    "Courier-Oblique"       : true,
	    "Courier-BoldOblique"   : true,
	    "Symbol"                : true,
	    "ZapfDingbats"          : true
	};

	function loadBinary(url, cont) {
	    function error() {
	        if (window.console) {
	            if (window.console.error) {
	                window.console.error("Cannot load URL: %s", url);
	            } else {
	                window.console.log("Cannot load URL: %s", url);
	            }
	        }
	        cont(null);
	    }
	    var req = new XMLHttpRequest();
	    req.open('GET', url, true);
	    if (HAS_TYPED_ARRAYS) {
	        req.responseType = "arraybuffer";
	    }
	    req.onload = function() {
	        if (req.status == 200 || req.status == 304) {
	            if (HAS_TYPED_ARRAYS) {
	                cont(new Uint8Array(req.response));
	            } else {
	                cont(new window.VBArray(req.responseBody).toArray()); // IE9 only
	            }
	        } else {
	            error();
	        }
	    };
	    req.onerror = error;
	    req.send(null);
	}

	function loadFont(url, cont) {
	    var font = FONT_CACHE[url];
	    if (font) {
	        cont(font);
	    } else {
	        loadBinary(url, function(data){
	            if (data == null) {
	                throw new Error("Cannot load font from " + url);
	            } else {
	                var font = new TTFFont(data);
	                FONT_CACHE[url] = font;
	                cont(font);
	            }
	        });
	    }
	}

	var IMAGE_CACHE = {};

	function loadImage(url, cont) {
	    var img = IMAGE_CACHE[url], bloburl, blob;
	    if (img) {
	        cont(img);
	    } else {
	        img = new Image();
	        if (!(/^data:/i.test(url))) {
	            img.crossOrigin = "Anonymous";
	        }
	        if (HAS_TYPED_ARRAYS && !(/^data:/i.test(url))) {
	            // IE10 fails to load images from another domain even when the server sends the
	            // proper CORS headers.  a XHR, however, will be able to load the data.
	            // http://stackoverflow.com/a/19734516/154985
	            //
	            // On the other hand, it's worth doing it this way for all browsers which support
	            // responseType = "blob" (HAS_TYPED_ARRAYS will be true), because we can inspect the
	            // mime type and if it's a JPEG (very common case) we can save a lot of time in
	            // _load below.
	            var xhr = new XMLHttpRequest();
	            xhr.onload = function() {
	                blob = xhr.response;
	                bloburl = URL.createObjectURL(blob);
	                _load(bloburl);
	            };
	            xhr.onerror = _onerror;
	            xhr.open("GET", url, true);
	            xhr.responseType = "blob";
	            xhr.send();
	        } else {
	            _load(url);
	        }
	    }

	    function _load(url) {
	        img.src = url;
	        if (img.complete && !browser.msie) {
	            // IE, bless it's little heart, says img.complete == true even though the image is
	            // not loaded (width=0), therefore we must go the onload route (ticket 929635).
	            _onload();
	        } else {
	            img.onload = _onload;
	            img.onerror = _onerror;
	        }
	    }

	    function _onerror() {
	        cont(IMAGE_CACHE[url] = "TAINTED");
	    }

	    function _onload() {
	        if (blob && /^image\/jpe?g$/i.test(blob.type)) {
	            // If we know we got a JPEG, we can skip the process of rendering it to a
	            // canvas, getting the pixel data, searching for transparency we know we won't
	            // find, getting back a data URI and then decoding the BASE64 to finally get the
	            // binary we already have.  Also, we avoid downgrading the image quality, with
	            // the possible drawback of making a bigger PDF; still, seems legit.
	            //
	            // Besides saving a lot of work, this also reuses the buffer memory
	            // (BinaryStream does not create a copy), potentially saving some GC cycles.
	            var reader = new FileReader();
	            reader.onload = function() {
	                img = new PDFJpegImage(img.width, img.height, BinaryStream(new Uint8Array(this.result)));
	                URL.revokeObjectURL(bloburl);
	                cont(IMAGE_CACHE[url] = img);
	            };
	            reader.readAsArrayBuffer(blob);
	            return;
	        }

	        var canvas = document.createElement("canvas");
	        canvas.width = img.width;
	        canvas.height = img.height;
	        var ctx = canvas.getContext("2d");

	        ctx.drawImage(img, 0, 0);

	        var imgdata;
	        try {
	            imgdata = ctx.getImageData(0, 0, img.width, img.height);
	        } catch (ex) {
	            // it tainted the canvas -- can't draw it.
	            _onerror();
	            return;
	        } finally {
	            if (bloburl) {
	                URL.revokeObjectURL(bloburl);
	            }
	        }

	        // in case it contains transparency, we must separate rgb data from the alpha
	        // channel and create a PDFRawImage image with opacity.  otherwise we can use a
	        // PDFJpegImage.
	        //
	        // to do this in one step, we create the rgb and alpha streams anyway, even if
	        // we might end up not using them if hasAlpha remains false.

	        var hasAlpha = false, rgb = BinaryStream(), alpha = BinaryStream();
	        var rawbytes = imgdata.data;
	        var i = 0;
	        while (i < rawbytes.length) {
	            rgb.writeByte(rawbytes[i++]);
	            rgb.writeByte(rawbytes[i++]);
	            rgb.writeByte(rawbytes[i++]);
	            var a = rawbytes[i++];
	            if (a < 255) {
	                hasAlpha = true;
	            }
	            alpha.writeByte(a);
	        }

	        if (hasAlpha) {
	            img = new PDFRawImage(img.width, img.height, rgb, alpha);
	        } else {
	            // no transparency, encode as JPEG.
	            var data = canvas.toDataURL("image/jpeg");
	            data = data.substr(data.indexOf(";base64,") + 8);

	            var stream = BinaryStream();
	            stream.writeBase64(data);
	            stream.offset(0);
	            img = new PDFJpegImage(img.width, img.height, stream);
	        }

	        cont(IMAGE_CACHE[url] = img);
	    }
	}

	function manyLoader(loadOne) {
	    return function(urls, callback) {
	        var n = urls.length, i = n;
	        if (n === 0) {
	            return callback();
	        }
	        function next() {
	            if (--n === 0) {
	                callback();
	            }
	        }
	        while (i-- > 0) {
	            loadOne(urls[i], next);
	        }
	    };
	}

	var loadFonts = manyLoader(loadFont);
	var loadImages = manyLoader(loadImage);

	PDFDocument.prototype = {
	    loadFonts: loadFonts,
	    loadImages: loadImages,

	    getFont: function(url) {
	        var font = this.FONTS[url];
	        if (!font) {
	            font = FONT_CACHE[url];
	            if (!font) {
	                throw new Error("Font " + url + " has not been loaded");
	            }
	            if (font === true) {
	                font = this.attach(new PDFStandardFont(url));
	            } else {
	                font = this.attach(new PDFFont(this, font));
	            }
	            this.FONTS[url] = font;
	        }
	        return font;
	    },

	    getImage: function(url) {
	        var img = this.IMAGES[url];
	        if (!img) {
	            img = IMAGE_CACHE[url];
	            if (!img) {
	                throw new Error("Image " + url + " has not been loaded");
	            }
	            if (img === "TAINTED") {
	                return null;
	            }
	            img = this.IMAGES[url] = this.attach(img.asStream(this));
	        }
	        return img;
	    },

	    getOpacityGS: function(opacity, forStroke) {
	        var id = parseFloat(opacity).toFixed(3);
	        opacity = parseFloat(id);
	        id += forStroke ? "S" : "F";
	        var cache = this._opacityGSCache || (this._opacityGSCache = {});
	        var gs = cache[id];
	        if (!gs) {
	            var props = {
	                Type: _("ExtGState")
	            };
	            if (forStroke) {
	                props.CA = opacity;
	            } else {
	                props.ca = opacity;
	            }
	            gs = this.attach(new PDFDictionary(props));
	            gs._resourceName = _("GS" + (++RESOURCE_COUNTER));
	            cache[id] = gs;
	        }
	        return gs;
	    },

	    dict: function(props) {
	        return new PDFDictionary(props);
	    },

	    name: function(str) {
	        return _(str);
	    },

	    stream: function(props, content) {
	        return new PDFStream(content, props);
	    }
	};

	/* -----[ utils ]----- */

	function pad(str, len, ch) {
	    while (str.length < len) {
	        str = ch + str;
	    }
	    return str;
	}

	function zeropad(n, len) {
	    return pad(String(n), len, "0");
	}

	function hasOwnProperty(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	}

	var isArray = Array.isArray || function(obj) {
	    return obj instanceof Array;
	};

	function isDate(obj) {
	    return obj instanceof Date;
	}

	function renderArray(a, out) {
	    out("[");
	    if (a.length > 0) {
	        out.withIndent(function(){
	            for (var i = 0; i < a.length; ++i) {
	                if (i > 0 && i % 8 === 0) {
	                    out.indent(a[i]);
	                } else {
	                    out(" ", a[i]);
	                }
	            }
	        });
	        //out.indent();
	    }
	    out(" ]");
	}

	function renderDate(date, out) {
	    out("(D:",
	        zeropad(date.getUTCFullYear(), 4),
	        zeropad(date.getUTCMonth() + 1, 2),
	        zeropad(date.getUTCDate(), 2),
	        zeropad(date.getUTCHours(), 2),
	        zeropad(date.getUTCMinutes(), 2),
	        zeropad(date.getUTCSeconds(), 2),
	        "Z)");
	}

	function mm2pt(mm) {
	    return mm * (72/25.4);
	}

	function cm2pt(cm) {
	    return mm2pt(cm * 10);
	}

	function in2pt(inch)  {
	    return inch * 72;
	}

	function unitsToPoints(x, def) {
	    if (typeof x == "number") {
	        return x;
	    }
	    if (typeof x == "string") {
	        var m;
	        m = /^\s*([0-9.]+)\s*(mm|cm|in|pt)\s*$/.exec(x);
	        if (m) {
	            var num = parseFloat(m[1]);
	            if (!isNaN(num)) {
	                if (m[2] == "pt") {
	                    return num;
	                }
	                return {
	                    "mm": mm2pt,
	                    "cm": cm2pt,
	                    "in": in2pt
	                }[m[2]](num);
	            }
	        }
	    }
	    if (def != null) {
	        return def;
	    }
	    throw new Error("Can't parse unit: " + x);
	}

	/* -----[ PDF basic objects ]----- */

	function PDFValue(){}

	PDFValue.prototype.beforeRender = function(){};

	function defclass(Ctor, proto, Base) {
	    if (!Base) {
	        Base = PDFValue;
	    }
	    Ctor.prototype = new Base();
	    for (var i in proto) {
	        if (hasOwnProperty(proto, i)) {
	            Ctor.prototype[i] = proto[i];
	        }
	    }
	    return Ctor;
	}

	/// strings

	var PDFString = defclass(function PDFString(value){
	    this.value = value;
	}, {
	    render: function(out) {
	        //out("(\xFE\xFF", utf16_be_encode(this.escape()), ")");
	        var txt = "", esc = this.escape();
	        for (var i = 0; i < esc.length; ++i) {
	            txt += String.fromCharCode(esc.charCodeAt(i) & 0xFF);
	        }
	        out("(", txt, ")");
	    },
	    escape: function() {
	        return this.value.replace(/([\(\)\\])/g, "\\$1");
	    },
	    toString: function() {
	        return this.value;
	    }
	});

	var PDFHexString = defclass(function PDFHexString(value){
	    this.value = value;
	}, {
	    render: function(out) {
	        var this$1 = this;

	        out("<");
	        for (var i = 0; i < this.value.length; ++i) {
	            out(zeropad(this$1.value.charCodeAt(i).toString(16), 4));
	        }
	        out(">");
	    }
	}, PDFString);

	/// names

	var PDFName = defclass(function PDFName(name) {
	    this.name = name;
	}, {
	    render: function(out) {
	        out("/" + this.escape());
	    },
	    escape: function() {
	        return this.name.replace(/[^\x21-\x7E]/g, function(c){
	            return "#" + zeropad(c.charCodeAt(0).toString(16), 2);
	        });
	    },
	    toString: function() {
	        return this.name;
	    }
	});

	var PDFName_cache = {};
	PDFName.get = _;

	function _(name) {
	    if (hasOwnProperty(PDFName_cache, name)) {
	        return PDFName_cache[name];
	    }
	    return (PDFName_cache[name] = new PDFName(name));
	}

	/// dictionary

	var PDFDictionary = defclass(function PDFDictionary(props) {
	    this.props = props;
	}, {
	    render: function(out) {
	        var props = this.props, empty = true;
	        out("<<");
	        out.withIndent(function(){
	            for (var i in props) {
	                if (hasOwnProperty(props, i) && !/^_/.test(i)) {
	                    empty = false;
	                    out.indent(_(i), " ", props[i]);
	                }
	            }
	        });
	        if (!empty) {
	            out.indent();
	        }
	        out(">>");
	    }
	});

	/// streams

	var PDFStream = defclass(function PDFStream(data, props, compress) {
	    if (typeof data == "string") {
	        var tmp = BinaryStream();
	        tmp.write(data);
	        data = tmp;
	    }
	    this.data = data;
	    this.props = props || {};
	    this.compress = compress;
	}, {
	    render: function(out) {
	        var data = this.data.get(), props = this.props;
	        if (this.compress && window.pako && typeof window.pako.deflate == "function") {
	            if (!props.Filter) {
	                props.Filter = [];
	            } else if (!(props.Filter instanceof Array)) {
	                props.Filter = [ props.Filter ];
	            }
	            props.Filter.unshift(_("FlateDecode"));
	            data = window.pako.deflate(data);
	        }
	        props.Length = data.length;
	        out(new PDFDictionary(props), " stream", NL);
	        out.writeData(data);
	        out(NL, "endstream");
	    }
	});

	/// catalog

	var PDFCatalog = defclass(function PDFCatalog(props){
	    props = this.props = props || {};
	    props.Type = _("Catalog");
	}, {
	    setPages: function(pagesObj) {
	        this.props.Pages = pagesObj;
	    }
	}, PDFDictionary);

	/// page tree

	var PDFPageTree = defclass(function PDFPageTree(){
	    this.props = {
	        Type  : _("Pages"),
	        Kids  : [],
	        Count : 0
	    };
	}, {
	    addPage: function(pageObj) {
	        this.props.Kids.push(pageObj);
	        this.props.Count++;
	    }
	}, PDFDictionary);

	/// images

	// JPEG

	function PDFJpegImage(width, height, data) {
	    this.asStream = function() {
	        var stream = new PDFStream(data, {
	            Type             : _("XObject"),
	            Subtype          : _("Image"),
	            Width            : width,
	            Height           : height,
	            BitsPerComponent : 8,
	            ColorSpace       : _("DeviceRGB"),
	            Filter           : _("DCTDecode")
	        });
	        stream._resourceName = _("I" + (++RESOURCE_COUNTER));
	        return stream;
	    };
	}

	// PDFRawImage will be used for images with transparency (PNG)

	function PDFRawImage(width, height, rgb, alpha) {
	    this.asStream = function(pdf) {
	        var mask = new PDFStream(alpha, {
	            Type             : _("XObject"),
	            Subtype          : _("Image"),
	            Width            : width,
	            Height           : height,
	            BitsPerComponent : 8,
	            ColorSpace       : _("DeviceGray")
	        }, true);
	        var stream = new PDFStream(rgb, {
	            Type             : _("XObject"),
	            Subtype          : _("Image"),
	            Width            : width,
	            Height           : height,
	            BitsPerComponent : 8,
	            ColorSpace       : _("DeviceRGB"),
	            SMask            : pdf.attach(mask)
	        }, true);
	        stream._resourceName = _("I" + (++RESOURCE_COUNTER));
	        return stream;
	    };
	}

	/// standard fonts

	var PDFStandardFont = defclass(function PDFStandardFont(name){
	    this.props = {
	        Type     : _("Font"),
	        Subtype  : _("Type1"),
	        BaseFont : _(name)
	    };
	    this._resourceName = _("F" + (++RESOURCE_COUNTER));
	}, {
	    encodeText: function(str) {
	        return new PDFString(String(str));
	    }
	}, PDFDictionary);

	/// TTF fonts

	var PDFFont = defclass(function PDFFont(pdf, font, props){
	    props = this.props = props || {};
	    props.Type = _("Font");
	    props.Subtype = _("Type0");
	    props.Encoding = _("Identity-H");

	    this._pdf = pdf;
	    this._font = font;
	    this._sub = font.makeSubset();
	    this._resourceName = _("F" + (++RESOURCE_COUNTER));

	    var head = font.head;

	    this.name = font.psName;
	    var scale = this.scale = font.scale;
	    this.bbox = [
	        head.xMin * scale,
	        head.yMin * scale,
	        head.xMax * scale,
	        head.yMax * scale
	    ];

	    this.italicAngle = font.post.italicAngle;
	    this.ascent = font.ascent * scale;
	    this.descent = font.descent * scale;
	    this.lineGap = font.lineGap * scale;
	    this.capHeight = font.os2.capHeight || this.ascent;
	    this.xHeight = font.os2.xHeight || 0;
	    this.stemV = 0;

	    this.familyClass = (font.os2.familyClass || 0) >> 8;
	    this.isSerif = this.familyClass >= 1 && this.familyClass <= 7;
	    this.isScript = this.familyClass == 10;

	    this.flags = ((font.post.isFixedPitch ? 1 : 0) |
	                  (this.isSerif ? 1 << 1 : 0) |
	                  (this.isScript ? 1 << 3 : 0) |
	                  (this.italicAngle !== 0 ? 1 << 6 : 0) |
	                  (1 << 5));
	}, {
	    encodeText: function(text) {
	        return new PDFHexString(this._sub.encodeText(String(text)));
	    },
	    getTextWidth: function(fontSize, text) {
	        var this$1 = this;

	        var width = 0, codeMap = this._font.cmap.codeMap;
	        for (var i = 0; i < text.length; ++i) {
	            var glyphId = codeMap[text.charCodeAt(i)];
	            width += this$1._font.widthOfGlyph(glyphId || 0);
	        }
	        return width * fontSize / 1000;
	    },
	    beforeRender: function() {
	        var self = this;
	        var sub = self._sub;

	        // write the TTF data
	        var data = sub.render();
	        var fontStream = new PDFStream(BinaryStream(data), {
	            Length1: data.length
	        }, true);

	        var descriptor = self._pdf.attach(new PDFDictionary({
	            Type         : _("FontDescriptor"),
	            FontName     : _(self._sub.psName),
	            FontBBox     : self.bbox,
	            Flags        : self.flags,
	            StemV        : self.stemV,
	            ItalicAngle  : self.italicAngle,
	            Ascent       : self.ascent,
	            Descent      : self.descent,
	            CapHeight    : self.capHeight,
	            XHeight      : self.xHeight,
	            FontFile2    : self._pdf.attach(fontStream)
	        }));

	        var cmap = sub.ncid2ogid;
	        var firstChar = sub.firstChar;
	        var lastChar = sub.lastChar;
	        var charWidths = [];
	        (function loop(i, chunk){
	            if (i <= lastChar) {
	                var gid = cmap[i];
	                if (gid == null) {
	                    loop(i + 1);
	                } else {
	                    if (!chunk) {
	                        charWidths.push(i, chunk = []);
	                    }
	                    chunk.push(self._font.widthOfGlyph(gid));
	                    loop(i + 1, chunk);
	                }
	            }
	        })(firstChar);

	        // As if two dictionaries weren't enough, we need another
	        // one, the "descendant font".  Only that one can be of
	        // Subtype CIDFontType2.  PDF is the X11 of document
	        // formats: portable but full of legacy that nobody cares
	        // about anymore.

	        var descendant = new PDFDictionary({
	            Type: _("Font"),
	            Subtype: _("CIDFontType2"),
	            BaseFont: _(self._sub.psName),
	            CIDSystemInfo: new PDFDictionary({
	                Registry   : new PDFString("Adobe"),
	                Ordering   : new PDFString("Identity"),
	                Supplement : 0
	            }),
	            FontDescriptor: descriptor,
	            FirstChar: firstChar,
	            LastChar: lastChar,
	            DW: Math.round(self._font.widthOfGlyph(0)),
	            W: charWidths,
	            CIDToGIDMap: self._pdf.attach(self._makeCidToGidMap())
	        });

	        var dict = self.props;
	        dict.BaseFont = _(self._sub.psName);
	        dict.DescendantFonts = [ self._pdf.attach(descendant) ];

	        // Compute the ToUnicode map so that apps can extract
	        // meaningful text from the PDF.
	        var unimap = new PDFToUnicodeCmap(firstChar, lastChar, sub.subset);
	        var unimapStream = new PDFStream(makeOutput(), null, true);
	        unimapStream.data(unimap);
	        dict.ToUnicode = self._pdf.attach(unimapStream);
	    },
	    _makeCidToGidMap: function() {
	        return new PDFStream(BinaryStream(this._sub.cidToGidMap()), null, true);
	    }
	}, PDFDictionary);

	var PDFToUnicodeCmap = defclass(function PDFUnicodeCMap(firstChar, lastChar, map){
	    this.firstChar = firstChar;
	    this.lastChar = lastChar;
	    this.map = map;
	}, {
	    render: function(out) {
	        out.indent("/CIDInit /ProcSet findresource begin");
	        out.indent("12 dict begin");
	        out.indent("begincmap");
	        out.indent("/CIDSystemInfo <<");
	        out.indent("  /Registry (Adobe)");
	        out.indent("  /Ordering (UCS)");
	        out.indent("  /Supplement 0");
	        out.indent(">> def");
	        out.indent("/CMapName /Adobe-Identity-UCS def");
	        out.indent("/CMapType 2 def");
	        out.indent("1 begincodespacerange");
	        out.indent("  <0000><ffff>");
	        out.indent("endcodespacerange");

	        var self = this;
	        out.indent(self.lastChar - self.firstChar + 1, " beginbfchar");
	        out.withIndent(function(){
	            for (var code = self.firstChar; code <= self.lastChar; ++code) {
	                var unicode = self.map[code];
	                var str = ucs2encode([ unicode ]);
	                out.indent("<", zeropad(code.toString(16), 4), ">", "<");
	                for (var i = 0; i < str.length; ++i) {
	                    out(zeropad(str.charCodeAt(i).toString(16), 4));
	                }
	                out(">");
	            }
	        });
	        out.indent("endbfchar");

	        out.indent("endcmap");
	        out.indent("CMapName currentdict /CMap defineresource pop");
	        out.indent("end");
	        out.indent("end");
	    }
	});

	/// gradients

	function makeHash(a) {
	    return a.map(function(x){
	        return isArray(x) ? makeHash(x)
	            : typeof x == "number" ? (Math.round(x * 1000) / 1000).toFixed(3)
	            : x;
	    }).join(" ");
	}

	function cacheColorGradientFunction(pdf, r1, g1, b1, r2, g2, b2) {
	    var hash = makeHash([ r1, g1, b1, r2, g2, b2 ]);
	    var func = pdf.GRAD_COL_FUNCTIONS[hash];
	    if (!func) {
	        func = pdf.GRAD_COL_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
	            FunctionType: 2,
	            Domain: [ 0, 1 ],
	            Range: [ 0, 1, 0, 1, 0, 1 ],
	            N: 1,
	            C0: [ r1 , g1 , b1 ],
	            C1: [ r2 , g2 , b2 ]
	        }));
	    }
	    return func;
	}

	function cacheOpacityGradientFunction(pdf, a1, a2) {
	    var hash = makeHash([ a1, a2 ]);
	    var func = pdf.GRAD_OPC_FUNCTIONS[hash];
	    if (!func) {
	        func = pdf.GRAD_OPC_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
	            FunctionType: 2,
	            Domain: [ 0, 1 ],
	            Range: [ 0, 1 ],
	            N: 1,
	            C0: [ a1 ],
	            C1: [ a2 ]
	        }));
	    }
	    return func;
	}

	function makeGradientFunctions(pdf, stops) {
	    var hasAlpha = false;
	    var opacities = [];
	    var colors = [];
	    var offsets = [];
	    var encode = [];
	    var i, prev, cur, prevColor, curColor;
	    for (i = 1; i < stops.length; ++i) {
	        prev = stops[i - 1];
	        cur = stops[i];
	        prevColor = prev.color;
	        curColor = cur.color;
	        colors.push(cacheColorGradientFunction(
	            pdf,
	            prevColor.r, prevColor.g, prevColor.b,
	            curColor.r,  curColor.g,  curColor.b
	        ));
	        if (prevColor.a < 1 || curColor.a < 1) {
	            hasAlpha = true;
	        }
	        offsets.push(cur.offset);
	        encode.push(0, 1);
	    }
	    if (hasAlpha) {
	        for (i = 1; i < stops.length; ++i) {
	            prev = stops[i - 1];
	            cur = stops[i];
	            prevColor = prev.color;
	            curColor = cur.color;
	            opacities.push(cacheOpacityGradientFunction(
	                pdf, prevColor.a, curColor.a
	            ));
	        }
	    }
	    offsets.pop();
	    return {
	        hasAlpha  : hasAlpha,
	        colors    : assemble(colors),
	        opacities : hasAlpha ? assemble(opacities) : null
	    };
	    function assemble(funcs) {
	        if (funcs.length == 1) {
	            return funcs[0];
	        }
	        return {
	            FunctionType: 3,
	            Functions: funcs,
	            Domain: [ 0, 1 ],
	            Bounds: offsets,
	            Encode: encode
	        };
	    }
	}

	function cacheColorGradient(pdf, isRadial, stops, coords, funcs, box) {
	    var shading, hash;
	    // if box is given then we have user-space coordinates, which
	    // means the gradient is designed for a certain position/size
	    // on page.  caching won't do any good.
	    if (!box) {
	        var a = [ isRadial ].concat(coords);
	        stops.forEach(function(x){
	            a.push(x.offset, x.color.r, x.color.g, x.color.b);
	        });
	        hash = makeHash(a);
	        shading = pdf.GRAD_COL[hash];
	    }
	    if (!shading) {
	        shading = new PDFDictionary({
	            Type: _("Shading"),
	            ShadingType: isRadial ? 3 : 2,
	            ColorSpace: _("DeviceRGB"),
	            Coords: coords,
	            Domain: [ 0, 1 ],
	            Function: funcs,
	            Extend: [ true, true ]
	        });
	        pdf.attach(shading);
	        shading._resourceName = "S" + (++RESOURCE_COUNTER);
	        if (hash) {
	            pdf.GRAD_COL[hash] = shading;
	        }
	    }
	    return shading;
	}

	function cacheOpacityGradient(pdf, isRadial, stops, coords, funcs, box) {
	    var opacity, hash;
	    // if box is given then we have user-space coordinates, which
	    // means the gradient is designed for a certain position/size
	    // on page.  caching won't do any good.
	    if (!box) {
	        var a = [ isRadial ].concat(coords);
	        stops.forEach(function(x){
	            a.push(x.offset, x.color.a);
	        });
	        hash = makeHash(a);
	        opacity = pdf.GRAD_OPC[hash];
	    }
	    if (!opacity) {
	        opacity = new PDFDictionary({
	            Type: _("ExtGState"),
	            AIS: false,
	            CA: 1,
	            ca: 1,
	            SMask: {
	                Type: _("Mask"),
	                S: _("Luminosity"),
	                G: pdf.attach(new PDFStream("/a0 gs /s0 sh", {
	                    Type: _("XObject"),
	                    Subtype: _("Form"),
	                    FormType: 1,
	                    BBox: (box ? [
	                        box.left, box.top + box.height, box.left + box.width, box.top
	                    ] : [ 0, 1, 1, 0 ]),
	                    Group: {
	                        Type: _("Group"),
	                        S: _("Transparency"),
	                        CS: _("DeviceGray"),
	                        I: true
	                    },
	                    Resources: {
	                        ExtGState: {
	                            a0: { CA: 1, ca: 1 }
	                        },
	                        Shading: {
	                            s0: {
	                                ColorSpace: _("DeviceGray"),
	                                Coords: coords,
	                                Domain: [ 0, 1 ],
	                                ShadingType: isRadial ? 3 : 2,
	                                Function: funcs,
	                                Extend: [ true, true ]
	                            }
	                        }
	                    }
	                }))
	            }
	        });
	        pdf.attach(opacity);
	        opacity._resourceName = "O" + (++RESOURCE_COUNTER);
	        if (hash) {
	            pdf.GRAD_OPC[hash] = opacity;
	        }
	    }
	    return opacity;
	}

	function cacheGradient(pdf, gradient, box) {
	    var isRadial = gradient.type == "radial";
	    var funcs = makeGradientFunctions(pdf, gradient.stops);
	    var coords = isRadial ? [
	        gradient.start.x , gradient.start.y , gradient.start.r,
	        gradient.end.x   , gradient.end.y   , gradient.end.r
	    ] : [
	        gradient.start.x , gradient.start.y,
	        gradient.end.x   , gradient.end.y
	    ];
	    var shading = cacheColorGradient(
	        pdf, isRadial, gradient.stops, coords, funcs.colors, gradient.userSpace && box
	    );
	    var opacity = funcs.hasAlpha ? cacheOpacityGradient(
	        pdf, isRadial, gradient.stops, coords, funcs.opacities, gradient.userSpace && box
	    ) : null;
	    return {
	        hasAlpha: funcs.hasAlpha,
	        shading: shading,
	        opacity: opacity
	    };
	}

	/// page object

	var PDFPage = defclass(function PDFPage(pdf, props){
	    this._pdf = pdf;
	    this._rcount = 0;
	    this._textMode = false;
	    this._fontResources = {};
	    this._gsResources = {};
	    this._xResources = {};
	    this._patResources = {};
	    this._shResources = {};
	    this._opacity = 1;
	    this._matrix = [ 1, 0, 0, 1, 0, 0 ];
	    this._annotations = [];

	    this._font = null;
	    this._fontSize = null;

	    this._contextStack = [];

	    props = this.props = props || {};
	    props.Type = _("Page");
	    props.ProcSet = [
	        _("PDF"),
	        _("Text"),
	        _("ImageB"),
	        _("ImageC"),
	        _("ImageI")
	    ];
	    props.Resources = new PDFDictionary({
	        Font      : new PDFDictionary(this._fontResources),
	        ExtGState : new PDFDictionary(this._gsResources),
	        XObject   : new PDFDictionary(this._xResources),
	        Pattern   : new PDFDictionary(this._patResources),
	        Shading   : new PDFDictionary(this._shResources)
	    });
	    props.Annots = this._annotations;
	}, {
	    _out: function() {
	        this._content.data.apply(null, arguments);
	    },
	    transform: function(a, b, c, d, e, f) {
	        if (!isIdentityMatrix(arguments)) {
	            this._matrix = mmul(arguments, this._matrix);
	            this._out(a, " ", b, " ", c, " ", d, " ", e, " ", f, " cm");
	            // XXX: debug
	            // this._out(" % current matrix: ", this._matrix);
	            this._out(NL);
	        }
	    },
	    translate: function(dx, dy) {
	        this.transform(1, 0, 0, 1, dx, dy);
	    },
	    scale: function(sx, sy) {
	        this.transform(sx, 0, 0, sy, 0, 0);
	    },
	    rotate: function(angle) {
	        var cos = Math.cos(angle), sin = Math.sin(angle);
	        this.transform(cos, sin, -sin, cos, 0, 0);
	    },
	    beginText: function() {
	        this._textMode = true;
	        this._out("BT", NL);
	    },
	    endText: function() {
	        this._textMode = false;
	        this._out("ET", NL);
	    },
	    _requireTextMode: function() {
	        if (!this._textMode) {
	            throw new Error("Text mode required; call page.beginText() first");
	        }
	    },
	    _requireFont: function() {
	        if (!this._font) {
	            throw new Error("No font selected; call page.setFont() first");
	        }
	    },
	    setFont: function(font, size) {
	        this._requireTextMode();
	        if (font == null) {
	            font = this._font;
	        } else if (!(font instanceof PDFFont)) {
	            font = this._pdf.getFont(font);
	        }
	        if (size == null) {
	            size = this._fontSize;
	        }
	        this._fontResources[font._resourceName] = font;
	        this._font = font;
	        this._fontSize = size;
	        this._out(font._resourceName, " ", size, " Tf", NL);
	    },
	    setTextLeading: function(size) {
	        this._requireTextMode();
	        this._out(size, " TL", NL);
	    },
	    setTextRenderingMode: function(mode) {
	        this._requireTextMode();
	        this._out(mode, " Tr", NL);
	    },
	    showText: function(text, requestedWidth) {
	        this._requireFont();
	        if (text.length > 1 && requestedWidth && this._font instanceof PDFFont) {
	            var outputWidth = this._font.getTextWidth(this._fontSize, text);
	            var scale = requestedWidth / outputWidth * 100;
	            this._out(scale, " Tz ");
	        }
	        this._out(this._font.encodeText(text), " Tj", NL);
	    },
	    showTextNL: function(text) {
	        this._requireFont();
	        this._out(this._font.encodeText(text), " '", NL);
	    },
	    addLink: function(uri, box) {
	        var ll = this._toPage({ x: box.left, y: box.bottom });
	        var ur = this._toPage({ x: box.right, y: box.top });
	        this._annotations.push(new PDFDictionary({
	            Type    : _("Annot"),
	            Subtype : _("Link"),
	            Rect    : [ ll.x, ll.y, ur.x, ur.y ],
	            Border  : [ 0, 0, 0 ],
	            A       : new PDFDictionary({
	                Type : _("Action"),
	                S    : _("URI"),
	                URI  : new PDFString(uri)
	            })
	        }));
	    },
	    setStrokeColor: function(r, g, b) {
	        this._out(r, " ", g, " ", b, " RG", NL);
	    },
	    setOpacity: function(opacity) {
	        this.setFillOpacity(opacity);
	        this.setStrokeOpacity(opacity);
	        this._opacity *= opacity;
	    },
	    setStrokeOpacity: function(opacity) {
	        if (opacity < 1) {
	            var gs = this._pdf.getOpacityGS(this._opacity * opacity, true);
	            this._gsResources[gs._resourceName] = gs;
	            this._out(gs._resourceName, " gs", NL);
	        }
	    },
	    setFillColor: function(r, g, b) {
	        this._out(r, " ", g, " ", b, " rg", NL);
	    },
	    setFillOpacity: function(opacity) {
	        if (opacity < 1) {
	            var gs = this._pdf.getOpacityGS(this._opacity * opacity, false);
	            this._gsResources[gs._resourceName] = gs;
	            this._out(gs._resourceName, " gs", NL);
	        }
	    },
	    gradient: function(gradient, box) {
	        this.save();
	        this.rect(box.left, box.top, box.width, box.height);
	        this.clip();
	        if (!gradient.userSpace) {
	            this.transform(box.width, 0, 0, box.height, box.left, box.top);
	        }
	        var g = cacheGradient(this._pdf, gradient, box);
	        var sname = g.shading._resourceName, oname;
	        this._shResources[sname] = g.shading;
	        if (g.hasAlpha) {
	            oname = g.opacity._resourceName;
	            this._gsResources[oname] = g.opacity;
	            this._out("/" + oname + " gs ");
	        }
	        this._out("/" + sname + " sh", NL);
	        this.restore();
	    },
	    setDashPattern: function(dashArray, dashPhase) {
	        this._out(dashArray, " ", dashPhase, " d", NL);
	    },
	    setLineWidth: function(width) {
	        this._out(width, " w", NL);
	    },
	    setLineCap: function(lineCap) {
	        this._out(lineCap, " J", NL);
	    },
	    setLineJoin: function(lineJoin) {
	        this._out(lineJoin, " j", NL);
	    },
	    setMitterLimit: function(mitterLimit) {
	        this._out(mitterLimit, " M", NL);
	    },
	    save: function() {
	        this._contextStack.push(this._context());
	        this._out("q", NL);
	    },
	    restore: function() {
	        this._out("Q", NL);
	        this._context(this._contextStack.pop());
	    },

	    // paths
	    moveTo: function(x, y) {
	        this._out(x, " ", y, " m", NL);
	    },
	    lineTo: function(x, y) {
	        this._out(x, " ", y, " l", NL);
	    },
	    bezier: function(x1, y1, x2, y2, x3, y3) {
	        this._out(x1, " ", y1, " ", x2, " ", y2, " ", x3, " ", y3, " c", NL);
	    },
	    bezier1: function(x1, y1, x3, y3) {
	        this._out(x1, " ", y1, " ", x3, " ", y3, " y", NL);
	    },
	    bezier2: function(x2, y2, x3, y3) {
	        this._out(x2, " ", y2, " ", x3, " ", y3, " v", NL);
	    },
	    close: function() {
	        this._out("h", NL);
	    },
	    rect: function(x, y, w, h) {
	        this._out(x, " ", y, " ", w, " ", h, " re", NL);
	    },
	    ellipse: function(x, y, rx, ry) {
	        function _X(v) { return x + v; }
	        function _Y(v) { return y + v; }

	        // how to get to the "magic number" is explained here:
	        // http://www.whizkidtech.redprince.net/bezier/circle/kappa/
	        var k = 0.5522847498307936;

	        this.moveTo(_X(0), _Y(ry));
	        this.bezier(
	            _X(rx * k) , _Y(ry),
	            _X(rx)     , _Y(ry * k),
	            _X(rx)     , _Y(0)
	        );
	        this.bezier(
	            _X(rx)     , _Y(-ry * k),
	            _X(rx * k) , _Y(-ry),
	            _X(0)      , _Y(-ry)
	        );
	        this.bezier(
	            _X(-rx * k) , _Y(-ry),
	            _X(-rx)     , _Y(-ry * k),
	            _X(-rx)     , _Y(0)
	        );
	        this.bezier(
	            _X(-rx)     , _Y(ry * k),
	            _X(-rx * k) , _Y(ry),
	            _X(0)       , _Y(ry)
	        );
	    },
	    circle: function(x, y, r) {
	        this.ellipse(x, y, r, r);
	    },
	    stroke: function() {
	        this._out("S", NL);
	    },
	    nop: function() {
	        this._out("n", NL);
	    },
	    clip: function() {
	        this._out("W n", NL);
	    },
	    clipStroke: function() {
	        this._out("W S", NL);
	    },
	    closeStroke: function() {
	        this._out("s", NL);
	    },
	    fill: function() {
	        this._out("f", NL);
	    },
	    fillStroke: function() {
	        this._out("B", NL);
	    },
	    drawImage: function(url) {
	        var img = this._pdf.getImage(url);
	        if (img) { // the result can be null for a cross-domain image
	            this._xResources[img._resourceName] = img;
	            this._out(img._resourceName, " Do", NL);
	        }
	    },
	    comment: function(txt) {
	        var self = this;
	        txt.split(/\r?\n/g).forEach(function(line){
	            self._out("% ", line, NL);
	        });
	    },

	    // internal
	    _context: function(val) {
	        if (val != null) {
	            this._opacity = val.opacity;
	            this._matrix = val.matrix;
	        } else {
	            return {
	                opacity: this._opacity,
	                matrix: this._matrix
	            };
	        }
	    },

	    _toPage: function(p) {
	        var m = this._matrix;
	        var a = m[0], b = m[1], c = m[2], d = m[3], e = m[4], f = m[5];
	        return {
	            x: a*p.x + c*p.y + e,
	            y: b*p.x + d*p.y + f
	        };
	    }
	}, PDFDictionary);

	function unquote(str) {
	    return str.replace(/^\s*(['"])(.*)\1\s*$/, "$2");
	}

	function parseFontDef(fontdef) {
	    // XXX: this is very crude for now and buggy.  Proper parsing is quite involved.
	    var rx = /^\s*((normal|italic)\s+)?((normal|small-caps)\s+)?((normal|bold|\d+)\s+)?(([0-9.]+)(px|pt))(\/(([0-9.]+)(px|pt)|normal))?\s+(.*?)\s*$/i;
	    var m = rx.exec(fontdef);
	    if (!m) {
	        return { fontSize: 12, fontFamily: "sans-serif" };
	    }
	    var fontSize = m[8] ? parseInt(m[8], 10) : 12;
	    return {
	        italic     : m[2] && m[2].toLowerCase() == "italic",
	        variant    : m[4],
	        bold       : m[6] && /bold|700/i.test(m[6]),
	        fontSize   : fontSize,
	        lineHeight : m[12] ? m[12] == "normal" ? fontSize : parseInt(m[12], 10) : null,
	        fontFamily : m[14].split(/\s*,\s*/g).map(unquote)
	    };
	}

	function getFontURL(style) {
	    function mkFamily(name) {
	        if (style.bold) {
	            name += "|bold";
	        }
	        if (style.italic) {
	            name += "|italic";
	        }
	        return name.toLowerCase();
	    }
	    var fontFamily = style.fontFamily;
	    var name, url;
	    if (fontFamily instanceof Array) {
	        for (var i = 0; i < fontFamily.length; ++i) {
	            name = mkFamily(fontFamily[i]);
	            url = FONT_MAPPINGS[name];
	            if (url) {
	                break;
	            }
	        }
	    } else {
	        url = FONT_MAPPINGS[fontFamily.toLowerCase()];
	    }
	    while (typeof url == "function") {
	        url = url();
	    }
	    if (!url) {
	        url = "Times-Roman";
	    }
	    return url;
	}

	var FONT_MAPPINGS = {
	    "serif"                    : "Times-Roman",
	    "serif|bold"               : "Times-Bold",
	    "serif|italic"             : "Times-Italic",
	    "serif|bold|italic"        : "Times-BoldItalic",
	    "sans-serif"               : "Helvetica",
	    "sans-serif|bold"          : "Helvetica-Bold",
	    "sans-serif|italic"        : "Helvetica-Oblique",
	    "sans-serif|bold|italic"   : "Helvetica-BoldOblique",
	    "monospace"                : "Courier",
	    "monospace|bold"           : "Courier-Bold",
	    "monospace|italic"         : "Courier-Oblique",
	    "monospace|bold|italic"    : "Courier-BoldOblique",
	    "zapfdingbats"             : "ZapfDingbats",
	    "zapfdingbats|bold"        : "ZapfDingbats",
	    "zapfdingbats|italic"      : "ZapfDingbats",
	    "zapfdingbats|bold|italic" : "ZapfDingbats"
	};

	function fontAlias(alias, name) {
	    alias = alias.toLowerCase();
	    FONT_MAPPINGS[alias] = function() {
	        return FONT_MAPPINGS[name];
	    };
	    FONT_MAPPINGS[alias + "|bold"] = function() {
	        return FONT_MAPPINGS[name + "|bold"];
	    };
	    FONT_MAPPINGS[alias + "|italic"] = function() {
	        return FONT_MAPPINGS[name + "|italic"];
	    };
	    FONT_MAPPINGS[alias + "|bold|italic"] = function() {
	        return FONT_MAPPINGS[name + "|bold|italic"];
	    };
	}

	// Let's define some common names to an appropriate replacement.
	// These are overridable via pdf.defineFont, should the user want to
	// include the proper versions.

	fontAlias("Times New Roman" , "serif");
	fontAlias("Courier New"     , "monospace");
	fontAlias("Arial"           , "sans-serif");
	fontAlias("Helvetica"       , "sans-serif");
	fontAlias("Verdana"         , "sans-serif");
	fontAlias("Tahoma"          , "sans-serif");
	fontAlias("Georgia"         , "sans-serif");
	fontAlias("Monaco"          , "monospace");
	fontAlias("Andale Mono"     , "monospace");

	function defineFont(name, url) {
	    if (arguments.length == 1) {
	        for (var i in name) {
	            if (hasOwnProperty(name, i)) {
	                defineFont(i, name[i]);
	            }
	        }
	    } else {
	        name = name.toLowerCase();
	        FONT_MAPPINGS[name] = url;

	        // special handling for DejaVu fonts: if they get defined,
	        // let them also replace the default families, for good
	        // Unicode support out of the box.
	        switch (name) {
	          case "dejavu sans"               : FONT_MAPPINGS["sans-serif"]              = url; break;
	          case "dejavu sans|bold"          : FONT_MAPPINGS["sans-serif|bold"]         = url; break;
	          case "dejavu sans|italic"        : FONT_MAPPINGS["sans-serif|italic"]       = url; break;
	          case "dejavu sans|bold|italic"   : FONT_MAPPINGS["sans-serif|bold|italic"]  = url; break;
	          case "dejavu serif"              : FONT_MAPPINGS["serif"]                   = url; break;
	          case "dejavu serif|bold"         : FONT_MAPPINGS["serif|bold"]              = url; break;
	          case "dejavu serif|italic"       : FONT_MAPPINGS["serif|italic"]            = url; break;
	          case "dejavu serif|bold|italic"  : FONT_MAPPINGS["serif|bold|italic"]       = url; break;
	          case "dejavu mono"               : FONT_MAPPINGS["monospace"]               = url; break;
	          case "dejavu mono|bold"          : FONT_MAPPINGS["monospace|bold"]          = url; break;
	          case "dejavu mono|italic"        : FONT_MAPPINGS["monospace|italic"]        = url; break;
	          case "dejavu mono|bold|italic"   : FONT_MAPPINGS["monospace|bold|italic"]   = url; break;
	        }
	    }
	}

	function mmul(a, b) {
	    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
	    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
	    return [
	        a1*a2 + b1*c2,          a1*b2 + b1*d2,
	        c1*a2 + d1*c2,          c1*b2 + d1*d2,
	        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
	    ];
	}

	function isIdentityMatrix(m) {
	    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
	}

	var TEXT_RENDERING_MODE = {
	    fill           : 0,
	    stroke         : 1,
	    fillAndStroke  : 2,
	    invisible      : 3,
	    fillAndClip    : 4,
	    strokeAndClip  : 5,
	    fillStrokeClip : 6,
	    clip           : 7
	};

	/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
	/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
	/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
	/* eslint-disable no-param-reassign, no-var, block-scoped-var */

	var TEXT_RENDERING_MODE$1 = TEXT_RENDERING_MODE;

	var DASH_PATTERNS = {
	    dash           : [ 4 ],
	    dashDot        : [ 4, 2, 1, 2 ],
	    dot            : [ 1, 2 ],
	    longDash       : [ 8, 2 ],
	    longDashDot    : [ 8, 2, 1, 2 ],
	    longDashDotDot : [ 8, 2, 1, 2, 1, 2 ],
	    solid          : []
	};

	var LINE_CAP = {
	    butt   : 0,
	    round  : 1,
	    square : 2
	};

	var LINE_JOIN = {
	    miter : 0,
	    round : 1,
	    bevel : 2
	};

	function render(group, callback) {
	    var fonts = [], images = [], options = group.options;

	    function getOption(name, defval, hash) {
	        if (!hash) {
	            hash = options;
	        }
	        if (hash.pdf && hash.pdf[name] != null) {
	            return hash.pdf[name];
	        }
	        return defval;
	    }

	    var multiPage = getOption("multiPage");

	    group.traverse(function(element){
	        dispatch({
	            Image: function(element) {
	                if (images.indexOf(element.src()) < 0) {
	                    images.push(element.src());
	                }
	            },
	            Text: function(element) {
	                var style = parseFontDef(element.options.font);
	                var url = getFontURL(style);
	                if (fonts.indexOf(url) < 0) {
	                    fonts.push(url);
	                }
	            }
	        }, element);
	    });

	    function doIt() {
	        if (--count > 0) {
	            return;
	        }

	        var pdf = new (PDFDocument)({
	            producer  : getOption("producer"),
	            title     : getOption("title"),
	            author    : getOption("author"),
	            subject   : getOption("subject"),
	            keywords  : getOption("keywords"),
	            creator   : getOption("creator"),
	            date      : getOption("date")
	        });

	        function drawPage(group) {
	            var options = group.options;

	            var tmp = optimize(group);
	            var bbox = tmp.bbox;
	            group = tmp.root;
	            // var tmp, bbox;

	            var paperSize = getOption("paperSize", getOption("paperSize", "auto"), options), addMargin = false;
	            if (paperSize == "auto") {
	                if (bbox) {
	                    var size = bbox.getSize();
	                    paperSize = [ size.width, size.height ];
	                    addMargin = true;
	                    var origin = bbox.getOrigin();
	                    tmp = new drawing.Group();
	                    tmp.transform(new kendoGeometry.Matrix(1, 0, 0, 1, -origin.x, -origin.y));
	                    tmp.append(group);
	                    group = tmp;
	                }
	                else {
	                    paperSize = "A4";
	                }
	            }

	            var page;
	            page = pdf.addPage({
	                paperSize : paperSize,
	                margin    : getOption("margin", getOption("margin"), options),
	                addMargin : addMargin,
	                landscape : getOption("landscape", getOption("landscape", false), options)
	            });
	            drawElement(group, page, pdf);
	        }

	        if (multiPage) {
	            group.children.forEach(drawPage);
	        } else {
	            drawPage(group);
	        }

	        callback(pdf.render(), pdf);
	    }

	    var count = 2;
	    loadFonts(fonts, doIt);
	    loadImages(images, doIt);
	}

	function toDataURL(group, callback) {
	    render(group, function(data){
	        callback("data:application/pdf;base64," + data.base64());
	    });
	}

	function toBlob(group, callback) {
	    render(group, function(data){
	        callback(new window.Blob([ data.get() ], { type: "application/pdf" }));
	    });
	}

	function saveAs$1(group, filename, proxy, callback) {
	    // XXX: Safari has Blob, but does not support the download attribute
	    //      so we'd end up converting to dataURL and using the proxy anyway.
	    if (window.Blob && !supportBrowser.safari) {
	        toBlob(group, function(blob){
	            kendo.saveAs({ dataURI: blob, fileName: filename });
	            if (callback) {
	                callback(blob);
	            }
	        });
	    } else {
	        toDataURL(group, function(dataURL){
	            kendo.saveAs({ dataURI: dataURL, fileName: filename, proxyURL: proxy });
	            if (callback) {
	                callback(dataURL);
	            }
	        });
	    }
	}

	function dispatch(handlers, element) {
	    var handler = handlers[element.nodeType];
	    if (handler) {
	        return handler.call.apply(handler, arguments);
	    }
	    return element;
	}

	function drawElement(element, page, pdf) {
	    if (element.options._pdfDebug) {
	        page.comment("BEGIN: " + element.options._pdfDebug);
	    }

	    var transform = element.transform();
	    var opacity = element.opacity();

	    page.save();

	    if (opacity != null && opacity < 1) {
	        page.setOpacity(opacity);
	    }

	    setStrokeOptions(element, page, pdf);
	    setFillOptions(element, page, pdf);

	    if (transform) {
	        var m = transform.matrix();
	        page.transform(m.a, m.b, m.c, m.d, m.e, m.f);
	    }

	    setClipping(element, page, pdf);

	    dispatch({
	        Path      : drawPath,
	        MultiPath : drawMultiPath,
	        Circle    : drawCircle,
	        Arc       : drawArc,
	        Text      : drawText,
	        Image     : drawImage,
	        Group     : drawGroup,
	        Rect      : drawRect
	    }, element, page, pdf);

	    page.restore();

	    if (element.options._pdfDebug) {
	        page.comment("END: " + element.options._pdfDebug);
	    }
	}

	function setStrokeOptions(element, page) {
	    var stroke = element.stroke && element.stroke();
	    if (!stroke) {
	        return;
	    }

	    var color = stroke.color;
	    if (color) {
	        color = parseColor$1(color);
	        if (color == null) {
	            return; // no stroke
	        }
	        page.setStrokeColor(color.r, color.g, color.b);
	        if (color.a != 1) {
	            page.setStrokeOpacity(color.a);
	        }
	    }

	    var width = stroke.width;
	    if (width != null) {
	        if (width === 0) {
	            return; // no stroke
	        }
	        page.setLineWidth(width);
	    }

	    var dashType = stroke.dashType;
	    if (dashType) {
	        page.setDashPattern(DASH_PATTERNS[dashType], 0);
	    }

	    var lineCap = stroke.lineCap;
	    if (lineCap) {
	        page.setLineCap(LINE_CAP[lineCap]);
	    }

	    var lineJoin = stroke.lineJoin;
	    if (lineJoin) {
	        page.setLineJoin(LINE_JOIN[lineJoin]);
	    }

	    var opacity = stroke.opacity;
	    if (opacity != null) {
	        page.setStrokeOpacity(opacity);
	    }
	}

	function setFillOptions(element, page) {
	    var fill = element.fill && element.fill();
	    if (!fill) {
	        return;
	    }

	    if (fill instanceof drawing.Gradient) {
	        return;
	    }

	    var color = fill.color;
	    if (color) {
	        color = parseColor$1(color);
	        if (color == null) {
	            return; // no fill
	        }
	        page.setFillColor(color.r, color.g, color.b);
	        if (color.a != 1) {
	            page.setFillOpacity(color.a);
	        }
	    }

	    var opacity = fill.opacity;
	    if (opacity != null) {
	        page.setFillOpacity(opacity);
	    }
	}

	function setClipping(element, page, pdf) {
	    // XXX: only Path supported at the moment.
	    var clip = element.clip();
	    if (clip) {
	        _drawPath(clip, page, pdf);
	        page.clip();
	        // page.setStrokeColor(Math.random(), Math.random(), Math.random());
	        // page.setLineWidth(1);
	        // page.stroke();
	    }
	}

	function shouldDraw(thing) {
	    return (thing &&
	            (thing instanceof drawing.Gradient ||
	             (thing.color && !/^(none|transparent)$/i.test(thing.color) &&
	              (thing.width == null || thing.width > 0) &&
	              (thing.opacity == null || thing.opacity > 0))));
	}

	function maybeGradient(element, page, pdf, stroke) {
	    var fill = element.fill();
	    if (fill instanceof drawing.Gradient) {
	        if (stroke) {
	            page.clipStroke();
	        } else {
	            page.clip();
	        }
	        var isRadial = fill instanceof drawing.RadialGradient;
	        var start, end;
	        if (isRadial) {
	            start = { x: fill.center().x , y: fill.center().y , r: 0 };
	            end   = { x: fill.center().x , y: fill.center().y , r: fill.radius() };
	        } else {
	            start = { x: fill.start().x , y: fill.start().y };
	            end   = { x: fill.end().x   , y: fill.end().y   };
	        }

	        var stops = fill.stops.elements().map(function(stop){
	            var offset = stop.offset();
	            if (/%$/.test(offset)) {
	                offset = parseFloat(offset) / 100;
	            } else {
	                offset = parseFloat(offset);
	            }
	            var color = parseColor$1(stop.color());
	            color.a *= stop.opacity();
	            return {
	                offset: offset,
	                color: color
	            };
	        });

	        // Duplicats first and last stop to fix
	        // https://github.com/telerik/kendo-ui-core/issues/1782
	        stops.unshift(stops[0]);
	        stops.push(stops[stops.length - 1]);

	        var gradient = {
	            userSpace : fill.userSpace(),
	            type      : isRadial ? "radial" : "linear",
	            start     : start,
	            end       : end,
	            stops     : stops
	        };
	        var box = element.rawBBox();
	        var tl = box.topLeft(), size = box.getSize();
	        box = {
	            left   : tl.x,
	            top    : tl.y,
	            width  : size.width,
	            height : size.height
	        };
	        page.gradient(gradient, box);
	        return true;
	    }
	}

	function maybeFillStroke(element, page, pdf) {
	    if (shouldDraw(element.fill()) && shouldDraw(element.stroke())) {
	        if (!maybeGradient(element, page, pdf, true)) {
	            page.fillStroke();
	        }
	    } else if (shouldDraw(element.fill())) {
	        if (!maybeGradient(element, page, pdf, false)) {
	            page.fill();
	        }
	    } else if (shouldDraw(element.stroke())) {
	        page.stroke();
	    } else {
	        // we should not get here; the path should have been
	        // optimized away.  but let's be prepared.
	        page.nop();
	    }
	}

	function maybeDrawRect(path, page) {
	    var segments = path.segments;
	    if (segments.length == 4 && path.options.closed) {
	        // detect if this path looks like a rectangle parallel to the axis
	        var a = [];
	        for (var i = 0; i < segments.length; ++i) {
	            if (segments[i].controlIn()) { // has curve?
	                return false;
	            }
	            a[i] = segments[i].anchor();
	        }
	        // it's a rectangle if the y/x/y/x or x/y/x/y coords of
	        // consecutive points are the same.
	        var isRect = (
	            a[0].y == a[1].y && a[1].x == a[2].x && a[2].y == a[3].y && a[3].x == a[0].x
	        ) || (
	            a[0].x == a[1].x && a[1].y == a[2].y && a[2].x == a[3].x && a[3].y == a[0].y
	        );
	        if (isRect) {
	            // this saves a bunch of instructions in PDF:
	            // moveTo, lineTo, lineTo, lineTo, close -> rect.
	            page.rect(a[0].x, a[0].y,
	                      a[2].x - a[0].x /*width*/,
	                      a[2].y - a[0].y /*height*/);
	            return true;
	        }
	    }
	}

	function _drawPath(element, page, pdf) {
	    var segments = element.segments;
	    if (segments.length === 0) {
	        return;
	    }
	    if (!maybeDrawRect(element, page, pdf)) {
	        for (var prev, i = 0; i < segments.length; ++i) {
	            var seg = segments[i];
	            var anchor = seg.anchor();
	            if (!prev) {
	                page.moveTo(anchor.x, anchor.y);
	            } else {
	                var prevOut = prev.controlOut();
	                var controlIn = seg.controlIn();
	                if (prevOut && controlIn) {
	                    page.bezier(
	                        prevOut.x   , prevOut.y,
	                        controlIn.x , controlIn.y,
	                        anchor.x    , anchor.y
	                    );
	                } else {
	                    page.lineTo(anchor.x, anchor.y);
	                }
	            }
	            prev = seg;
	        }
	        if (element.options.closed) {
	            page.close();
	        }
	    }
	}

	function drawPath(element, page, pdf) {
	    _drawPath(element, page, pdf);
	    maybeFillStroke(element, page, pdf);
	}

	function drawMultiPath(element, page, pdf) {
	    var paths = element.paths;
	    for (var i = 0; i < paths.length; ++i) {
	        _drawPath(paths[i], page, pdf);
	    }
	    maybeFillStroke(element, page, pdf);
	}

	function drawCircle(element, page, pdf) {
	    var g = element.geometry();
	    page.circle(g.center.x, g.center.y, g.radius);
	    maybeFillStroke(element, page, pdf);
	}

	function drawArc(element, page, pdf) {
	    var points = element.geometry().curvePoints();
	    page.moveTo(points[0].x, points[0].y);
	    for (var i = 1; i < points.length;) {
	        page.bezier(
	            points[i].x, points[i++].y,
	            points[i].x, points[i++].y,
	            points[i].x, points[i++].y
	        );
	    }
	    maybeFillStroke(element, page, pdf);
	}

	function drawText(element, page) {
	    var style = parseFontDef(element.options.font);
	    var pos = element._position;
	    var mode;
	    if (element.fill() && element.stroke()) {
	        mode = TEXT_RENDERING_MODE$1.fillAndStroke;
	    } else if (element.fill()) {
	        mode = TEXT_RENDERING_MODE$1.fill;
	    } else if (element.stroke()) {
	        mode = TEXT_RENDERING_MODE$1.stroke;
	    }

	    page.transform(1, 0, 0, -1, pos.x, pos.y + style.fontSize);
	    page.beginText();
	    page.setFont(getFontURL(style), style.fontSize);
	    page.setTextRenderingMode(mode);
	    page.showText(element.content(), element._pdfRect ? element._pdfRect.width() : null);
	    page.endText();
	}

	function drawGroup(element, page, pdf) {
	    if (element._pdfLink) {
	        page.addLink(element._pdfLink.url, element._pdfLink);
	    }
	    var children = element.children;
	    for (var i = 0; i < children.length; ++i) {
	        drawElement(children[i], page, pdf);
	    }
	}

	function drawImage(element, page) {
	    var url = element.src();
	    if (!url) {
	        return;
	    }

	    var rect = element.rect();
	    var tl = rect.getOrigin();
	    var sz = rect.getSize();
	    page.transform(sz.width, 0, 0, -sz.height, tl.x, tl.y + sz.height);
	    page.drawImage(url);
	}

	function drawRect(element, page, pdf) {
	    var geometry = element.geometry();
	    page.rect(geometry.origin.x, geometry.origin.y, geometry.size.width, geometry.size.height);
	    maybeFillStroke(element, page, pdf);
	}

	function parseColor$1(value) {
	    var color = kendo.parseColor(value, true);
	    return color ? color.toRGB() : null;
	}

	function optimize(root) {
	    var clipbox = false;
	    var matrix = kendoGeometry.Matrix.unit();
	    var currentBox = null;
	    var changed;
	    do {
	        changed = false;
	        root = opt(root);
	    } while (root && changed);
	    return { root: root, bbox: currentBox };

	    function change(newShape) {
	        changed = true;
	        return newShape;
	    }

	    function visible(shape) {
	        return (shape.visible() && shape.opacity() > 0 &&
	                ( shouldDraw(shape.fill()) ||
	                  shouldDraw(shape.stroke()) ));
	    }

	    function optArray(a) {
	        var b = [];
	        for (var i = 0; i < a.length; ++i) {
	            var el = opt(a[i]);
	            if (el != null) {
	                b.push(el);
	            }
	        }
	        return b;
	    }

	    function withClipping(shape, f) {
	        var saveclipbox = clipbox;
	        var savematrix = matrix;

	        if (shape.transform()) {
	            matrix = matrix.multiplyCopy(shape.transform().matrix());
	        }

	        var clip = shape.clip();
	        if (clip) {
	            clip = clip.bbox();
	            if (clip) {
	                clip = clip.bbox(matrix);
	                clipbox = clipbox ? kendoGeometry.Rect.intersect(clipbox, clip) : clip;
	            }
	        }

	        try {
	            return f();
	        }
	        finally {
	            clipbox = saveclipbox;
	            matrix = savematrix;
	        }
	    }

	    function inClipbox(shape) {
	        if (clipbox == null) {
	            return false;
	        }
	        var box = shape.rawBBox().bbox(matrix);
	        if (clipbox && box) {
	            box = kendoGeometry.Rect.intersect(box, clipbox);
	        }
	        return box;
	    }

	    function opt(shape) {
	        return withClipping(shape, function(){
	            if (!(shape instanceof drawing.Group || shape instanceof drawing.MultiPath)) {
	                var box = inClipbox(shape);
	                if (!box) {
	                    return change(null);
	                }
	                currentBox = currentBox ? kendoGeometry.Rect.union(currentBox, box) : box;
	            }
	            return dispatch({
	                Path: function(shape) {
	                    if (shape.segments.length === 0 || !visible(shape)) {
	                        return change(null);
	                    }
	                    return shape;
	                },
	                MultiPath: function(shape) {
	                    if (!visible(shape)) {
	                        return change(null);
	                    }
	                    var el = new drawing.MultiPath(shape.options);
	                    el.paths = optArray(shape.paths);
	                    if (el.paths.length === 0) {
	                        return change(null);
	                    }
	                    return el;
	                },
	                Circle: function(shape) {
	                    if (!visible(shape)) {
	                        return change(null);
	                    }
	                    return shape;
	                },
	                Arc: function(shape) {
	                    if (!visible(shape)) {
	                        return change(null);
	                    }
	                    return shape;
	                },
	                Text: function(shape) {
	                    if (!/\S/.test(shape.content()) || !visible(shape)) {
	                        return change(null);
	                    }
	                    return shape;
	                },
	                Image: function(shape) {
	                    if (!(shape.visible() && shape.opacity() > 0)) {
	                        return change(null);
	                    }
	                    return shape;
	                },
	                Group: function(shape) {
	                    var el = new drawing.Group(shape.options);
	                    el.children = optArray(shape.children);
	                    el._pdfLink = shape._pdfLink;
	                    if (shape !== root && el.children.length === 0 && !shape._pdfLink) {
	                        return change(null);
	                    }
	                    return el;
	                },
	                Rect: function(shape) {
	                    if (!visible(shape)) {
	                        return change(null);
	                    }
	                    return shape;
	                }
	            }, shape);
	        });
	    }
	}

	function exportPDF(group, options) {
	    var promise = util.createPromise();

	    for (var i in options) {
	        if (i == "margin" && group.options.pdf && group.options.pdf._ignoreMargin) {
	            // This hackish option is set by the page breaking code in drawDOM.  The idea is
	            // that margin is already taken into account there (that's required to do proper
	            // page breaking) and we don't want to set it again here, as it would double the
	            // top-left margin, and truncate the content on bottom/right.
	            continue;
	        }
	        group.options.set("pdf." + i, options[i]);
	    }

	    toDataURL(group, promise.resolve);

	    return promise;
	}

	kendo.deepExtend(kendo.pdf, {
	    Document: PDFDocument,
	    BinaryStream: BinaryStream,
	    defineFont: defineFont,
	    parseFontDef: parseFontDef,
	    getFontURL: getFontURL,
	    loadFonts: loadFonts,
	    loadImages: loadImages,
	    getPaperOptions: getPaperOptions,
	    TEXT_RENDERING_MODE: TEXT_RENDERING_MODE,
	    exportPDF: exportPDF,
	    saveAs: saveAs$1,
	    toDataURL: toDataURL,
	    toBlob: toBlob,
	    render: render
	});

	kendo.drawing.exportPDF = kendo.pdf.exportPDF;
	kendo.drawing.pdf = kendo.pdf;

	})(kendo);

	return kendo;

	}, __webpack_require__(3));

/***/ },

/***/ 975:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.drawing */ 56);

/***/ }

/******/ });

/***/ }),
/* 67 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/services/data-source.service.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @progress/kendo-ui/js/kendo.data.js */ 6);
var DataSource = (function () {
    function DataSource() {
    }
    /* tslint:disable:max-line-length */
    /*
     * Local Data Source
     * @see {@link http://docs.telerik.com/kendo-ui/framework/datasource/overview#to-local-data|To Local Data}
     * @see {@link http://docs.telerik.com/kendo-ui/framework/datasource/overview#to-remote-service|To Remote Service}
     */
    /* tslint:enable:max-line-length */
    DataSource.prototype.createDataSource = function (options) {
        return new kendo.data.DataSource(options);
    };
    return DataSource;
}());
exports.default = DataSource;


/***/ }),
/* 68 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/services/scheduler-data-source.service.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @progress/kendo-ui/js/kendo.data.js */ 6);
/**
 * FIXME: Rename to DataSourceFactory and return a type of "SchedulerDataSource"
 * that exposes the fetch method and anything else required from kendo.data.SchedulerDataSource
 */
var SchedulerDataSource = (function () {
    function SchedulerDataSource() {
    }
    /* tslint:disable:max-line-length */
    /**
     * Local Data Source
     * @see {@link http://docs.telerik.com/kendo-ui/framework/datasource/overview#to-local-data|To Local Data}
     * @see {@link http://docs.telerik.com/kendo-ui/framework/datasource/overview#to-remote-service|To Remote Service}
     * @see {@link http://docs.telerik.com/kendo-ui/api/javascript/data/schedulerdatasource|SchedulerDataSource}
     */
    /* tslint:enable:max-line-length */
    SchedulerDataSource.prototype.createDataSource = function (options) {
        return new kendo.data.SchedulerDataSource(options);
    };
    return SchedulerDataSource;
}());
exports.default = SchedulerDataSource;


/***/ }),
/* 69 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/lib/services/validator.service.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(/*! jquery */ 3);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.validator.js */ 64);
var ValidatorService = (function () {
    function ValidatorService() {
    }
    ValidatorService.prototype.create = function (options) {
        var defaultOpts = {
            rules: {
                required: function (ele) {
                    if (options.attrs.required) {
                        return ele[0].value;
                    }
                    else {
                        return true;
                    }
                },
            },
            messages: {
                required: "Required",
            },
        };
        this.options = $.extend(true, {}, defaultOpts, options, options.customOptions);
        var validator = new kendo.ui.Validator(options.element, {
            messages: this.options.messages,
            rules: this.options.rules,
        });
        validator.bind("validateInput", this.options.validateInput);
        return validator;
    };
    return ValidatorService;
}());
exports.ValidatorService = ValidatorService;


/***/ }),
/* 70 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/lib/thGrid/thGridFramework.service.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var thGrid_cssClasses_1 = __webpack_require__(/*! ./thGrid.cssClasses */ 247);
var GridFrameworkService = (function () {
    function GridFrameworkService() {
        this.cssClasses = thGrid_cssClasses_1.bootstrapCssClasses;
    }
    GridFrameworkService.prototype.getRowClasses = function (config) {
        if (config === void 0) { config = {}; }
        return {
            rowClasses: [
                this.cssClasses.row.row,
                config.hideGutters ?
                    this.cssClasses.row.noGutters || null :
                    this.cssClasses.row.gutters || null,
                this.cssClasses.row.alignment[config.align || "centre"] || null,
            ].filter(function (cssClass) { return cssClass !== null; }),
        };
    };
    GridFrameworkService.prototype.getColumnClasses = function (config) {
        return {
            columnClasses: [
                this.cssClasses.column.column,
                config.columns ? this.cssClasses.column.columnsMd.replace("xx", config.columns) : null,
                config.columnsLg ? this.cssClasses.column.columnsLg.replace("xx", config.columnsLg) : null,
                config.columnsSm ? this.cssClasses.column.columnsSm.replace("xx", config.columnsSm) : null,
                config.columnsXs ? this.cssClasses.column.columnsXs.replace("xx", config.columnsXs) : null,
                config.hideLg ? this.cssClasses.column.hideLg : null,
                config.hideMd ? this.cssClasses.column.hideMd : null,
                config.hideSm ? this.cssClasses.column.hideSm : null,
                config.hideXs ? this.cssClasses.column.hideXs : null,
            ].filter(function (cssClass) { return cssClass !== null; }),
        };
    };
    return GridFrameworkService;
}());
exports.default = GridFrameworkService;


/***/ }),
/* 71 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************************!*\
  !*** ./~/angular-translate-loader-static-files/angular-translate-loader-static-files.js ***!
  \******************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * angular-translate - v2.15.1 - 2017-03-04
 * 
 * Copyright (c) 2017 The angular-translate team, Pascal Precht; Licensed MIT
 */
(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return (factory());
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    factory();
  }
}(this, function () {

$translateStaticFilesLoader.$inject = ['$q', '$http'];
angular.module('pascalprecht.translate')
/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateStaticFilesLoader
 * @requires $q
 * @requires $http
 *
 * @description
 * Creates a loading function for a typical static file url pattern:
 * "lang-en_US.json", "lang-de_DE.json", etc. Using this builder,
 * the response of these urls must be an object of key-value pairs.
 *
 * @param {object} options Options object, which gets prefix, suffix, key, and fileMap
 */
.factory('$translateStaticFilesLoader', $translateStaticFilesLoader);

function $translateStaticFilesLoader($q, $http) {

  'use strict';

  return function (options) {

    if (!options || (!angular.isArray(options.files) && (!angular.isString(options.prefix) || !angular.isString(options.suffix)))) {
      throw new Error('Couldn\'t load static files, no files and prefix or suffix specified!');
    }

    if (!options.files) {
      options.files = [{
        prefix: options.prefix,
        suffix: options.suffix
      }];
    }

    var load = function (file) {
      if (!file || (!angular.isString(file.prefix) || !angular.isString(file.suffix))) {
        throw new Error('Couldn\'t load static file, no prefix or suffix specified!');
      }

      var fileUrl = [
        file.prefix,
        options.key,
        file.suffix
      ].join('');

      if (angular.isObject(options.fileMap) && options.fileMap[fileUrl]) {
        fileUrl = options.fileMap[fileUrl];
      }

      return $http(angular.extend({
        url: fileUrl,
        method: 'GET'
      }, options.$http))
        .then(function(result) {
          return result.data;
        }, function () {
          return $q.reject(options.key);
        });
    };

    var promises = [],
        length = options.files.length;

    for (var i = 0; i < length; i++) {
      promises.push(load({
        prefix: options.files[i].prefix,
        key: options.key,
        suffix: options.files[i].suffix
      }));
    }

    return $q.all(promises)
      .then(function (data) {
        var length = data.length,
            mergedData = {};

        for (var i = 0; i < length; i++) {
          for (var key in data[i]) {
            mergedData[key] = data[i][key];
          }
        }

        return mergedData;
      });
  };
}

$translateStaticFilesLoader.displayName = '$translateStaticFilesLoader';
return 'pascalprecht.translate';

}));


/***/ }),
/* 72 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/angular-translate/dist/angular-translate.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * angular-translate - v2.15.1 - 2017-03-04
 * 
 * Copyright (c) 2017 The angular-translate team, Pascal Precht; Licensed MIT
 */
(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return (factory());
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    factory();
  }
}(this, function () {

/**
 * @ngdoc overview
 * @name pascalprecht.translate
 *
 * @description
 * The main module which holds everything together.
 */
runTranslate.$inject = ['$translate'];
$translate.$inject = ['$STORAGE_KEY', '$windowProvider', '$translateSanitizationProvider', 'pascalprechtTranslateOverrider'];
$translateDefaultInterpolation.$inject = ['$interpolate', '$translateSanitization'];
translateDirective.$inject = ['$translate', '$interpolate', '$compile', '$parse', '$rootScope'];
translateAttrDirective.$inject = ['$translate', '$rootScope'];
translateCloakDirective.$inject = ['$translate', '$rootScope'];
translateFilterFactory.$inject = ['$parse', '$translate'];
$translationCache.$inject = ['$cacheFactory'];
angular.module('pascalprecht.translate', ['ng'])
  .run(runTranslate);

function runTranslate($translate) {

  'use strict';

  var key = $translate.storageKey(),
    storage = $translate.storage();

  var fallbackFromIncorrectStorageValue = function () {
    var preferred = $translate.preferredLanguage();
    if (angular.isString(preferred)) {
      $translate.use(preferred);
      // $translate.use() will also remember the language.
      // So, we don't need to call storage.put() here.
    } else {
      storage.put(key, $translate.use());
    }
  };

  fallbackFromIncorrectStorageValue.displayName = 'fallbackFromIncorrectStorageValue';

  if (storage) {
    if (!storage.get(key)) {
      fallbackFromIncorrectStorageValue();
    } else {
      $translate.use(storage.get(key))['catch'](fallbackFromIncorrectStorageValue);
    }
  } else if (angular.isString($translate.preferredLanguage())) {
    $translate.use($translate.preferredLanguage());
  }
}

runTranslate.displayName = 'runTranslate';

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateSanitizationProvider
 *
 * @description
 *
 * Configurations for $translateSanitization
 */
angular.module('pascalprecht.translate').provider('$translateSanitization', $translateSanitizationProvider);

function $translateSanitizationProvider () {

  'use strict';

  var $sanitize,
      $sce,
      currentStrategy = null, // TODO change to either 'sanitize', 'escape' or ['sanitize', 'escapeParameters'] in 3.0.
      hasConfiguredStrategy = false,
      hasShownNoStrategyConfiguredWarning = false,
      strategies;

  /**
   * Definition of a sanitization strategy function
   * @callback StrategyFunction
   * @param {string|object} value - value to be sanitized (either a string or an interpolated value map)
   * @param {string} mode - either 'text' for a string (translation) or 'params' for the interpolated params
   * @return {string|object}
   */

  /**
   * @ngdoc property
   * @name strategies
   * @propertyOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Following strategies are built-in:
   * <dl>
   *   <dt>sanitize</dt>
   *   <dd>Sanitizes HTML in the translation text using $sanitize</dd>
   *   <dt>escape</dt>
   *   <dd>Escapes HTML in the translation</dd>
   *   <dt>sanitizeParameters</dt>
   *   <dd>Sanitizes HTML in the values of the interpolation parameters using $sanitize</dd>
   *   <dt>escapeParameters</dt>
   *   <dd>Escapes HTML in the values of the interpolation parameters</dd>
   *   <dt>escaped</dt>
   *   <dd>Support legacy strategy name 'escaped' for backwards compatibility (will be removed in 3.0)</dd>
   * </dl>
   *
   */

  strategies = {
    sanitize: function (value, mode/*, context*/) {
      if (mode === 'text') {
        value = htmlSanitizeValue(value);
      }
      return value;
    },
    escape: function (value, mode/*, context*/) {
      if (mode === 'text') {
        value = htmlEscapeValue(value);
      }
      return value;
    },
    sanitizeParameters: function (value, mode/*, context*/) {
      if (mode === 'params') {
        value = mapInterpolationParameters(value, htmlSanitizeValue);
      }
      return value;
    },
    escapeParameters: function (value, mode/*, context*/) {
      if (mode === 'params') {
        value = mapInterpolationParameters(value, htmlEscapeValue);
      }
      return value;
    },
    sce: function (value, mode, context) {
      if (mode === 'text') {
        value = htmlTrustValue(value);
      } else if (mode === 'params') {
        if (context !== 'filter') {
          // do html escape in filter context #1101
          value = mapInterpolationParameters(value, htmlEscapeValue);
        }
      }
      return value;
    },
    sceParameters: function (value, mode/*, context*/) {
      if (mode === 'params') {
        value = mapInterpolationParameters(value, htmlTrustValue);
      }
      return value;
    }
  };
  // Support legacy strategy name 'escaped' for backwards compatibility.
  // TODO should be removed in 3.0
  strategies.escaped = strategies.escapeParameters;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateSanitizationProvider#addStrategy
   * @methodOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Adds a sanitization strategy to the list of known strategies.
   *
   * @param {string} strategyName - unique key for a strategy
   * @param {StrategyFunction} strategyFunction - strategy function
   * @returns {object} this
   */
  this.addStrategy = function (strategyName, strategyFunction) {
    strategies[strategyName] = strategyFunction;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateSanitizationProvider#removeStrategy
   * @methodOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Removes a sanitization strategy from the list of known strategies.
   *
   * @param {string} strategyName - unique key for a strategy
   * @returns {object} this
   */
  this.removeStrategy = function (strategyName) {
    delete strategies[strategyName];
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateSanitizationProvider#useStrategy
   * @methodOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
   *
   * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
   * @returns {object} this
   */
  this.useStrategy = function (strategy) {
    hasConfiguredStrategy = true;
    currentStrategy = strategy;
    return this;
  };

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translateSanitization
   * @requires $injector
   * @requires $log
   *
   * @description
   * Sanitizes interpolation parameters and translated texts.
   *
   */
  this.$get = ['$injector', '$log', function ($injector, $log) {

    var cachedStrategyMap = {};

    var applyStrategies = function (value, mode, context, selectedStrategies) {
      angular.forEach(selectedStrategies, function (selectedStrategy) {
        if (angular.isFunction(selectedStrategy)) {
          value = selectedStrategy(value, mode, context);
        } else if (angular.isFunction(strategies[selectedStrategy])) {
          value = strategies[selectedStrategy](value, mode, context);
        } else if (angular.isString(strategies[selectedStrategy])) {
          if (!cachedStrategyMap[strategies[selectedStrategy]]) {
            try {
              cachedStrategyMap[strategies[selectedStrategy]] = $injector.get(strategies[selectedStrategy]);
            } catch (e) {
              cachedStrategyMap[strategies[selectedStrategy]] = function() {};
              throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
            }
          }
          value = cachedStrategyMap[strategies[selectedStrategy]](value, mode, context);
        } else {
          throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
        }
      });
      return value;
    };

    // TODO: should be removed in 3.0
    var showNoStrategyConfiguredWarning = function () {
      if (!hasConfiguredStrategy && !hasShownNoStrategyConfiguredWarning) {
        $log.warn('pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details.');
        hasShownNoStrategyConfiguredWarning = true;
      }
    };

    if ($injector.has('$sanitize')) {
      $sanitize = $injector.get('$sanitize');
    }
    if ($injector.has('$sce')) {
      $sce = $injector.get('$sce');
    }

    return {
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateSanitization#useStrategy
       * @methodOf pascalprecht.translate.$translateSanitization
       *
       * @description
       * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
       *
       * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
       */
      useStrategy: (function (self) {
        return function (strategy) {
          self.useStrategy(strategy);
        };
      })(this),

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateSanitization#sanitize
       * @methodOf pascalprecht.translate.$translateSanitization
       *
       * @description
       * Sanitizes a value.
       *
       * @param {string|object} value The value which should be sanitized.
       * @param {string} mode The current sanitization mode, either 'params' or 'text'.
       * @param {string|StrategyFunction|array} [strategy] Optional custom strategy which should be used instead of the currently selected strategy.
       * @param {string} [context] The context of this call: filter, service. Default is service
       * @returns {string|object} sanitized value
       */
      sanitize: function (value, mode, strategy, context) {
        if (!currentStrategy) {
          showNoStrategyConfiguredWarning();
        }

        if (!strategy && strategy !== null) {
          strategy = currentStrategy;
        }

        if (!strategy) {
          return value;
        }

        if (!context) {
          context = 'service';
        }

        var selectedStrategies = angular.isArray(strategy) ? strategy : [strategy];
        return applyStrategies(value, mode, context, selectedStrategies);
      }
    };
  }];

  var htmlEscapeValue = function (value) {
    var element = angular.element('<div></div>');
    element.text(value); // not chainable, see #1044
    return element.html();
  };

  var htmlSanitizeValue = function (value) {
    if (!$sanitize) {
      throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as \'escape\'.');
    }
    return $sanitize(value);
  };

  var htmlTrustValue = function (value) {
    if (!$sce) {
      throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sce service.');
    }
    return $sce.trustAsHtml(value);
  };

  var mapInterpolationParameters = function (value, iteratee, stack) {
    if (angular.isDate(value)) {
      return value;
    } else if (angular.isObject(value)) {
      var result = angular.isArray(value) ? [] : {};

      if (!stack) {
        stack = [];
      } else {
        if (stack.indexOf(value) > -1) {
          throw new Error('pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object');
        }
      }

      stack.push(value);
      angular.forEach(value, function (propertyValue, propertyKey) {

        /* Skipping function properties. */
        if (angular.isFunction(propertyValue)) {
          return;
        }

        result[propertyKey] = mapInterpolationParameters(propertyValue, iteratee, stack);
      });
      stack.splice(-1, 1); // remove last

      return result;
    } else if (angular.isNumber(value)) {
      return value;
    } else if (!angular.isUndefined(value) && value !== null) {
      return iteratee(value);
    } else {
      return value;
    }
  };
}

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateProvider
 * @description
 *
 * $translateProvider allows developers to register translation-tables, asynchronous loaders
 * and similar to configure translation behavior directly inside of a module.
 *
 */
angular.module('pascalprecht.translate')
  .constant('pascalprechtTranslateOverrider', {})
  .provider('$translate', $translate);

function $translate($STORAGE_KEY, $windowProvider, $translateSanitizationProvider, pascalprechtTranslateOverrider) {

  'use strict';

  var $translationTable = {},
    $preferredLanguage,
    $availableLanguageKeys = [],
    $languageKeyAliases,
    $fallbackLanguage,
    $fallbackWasString,
    $uses,
    $nextLang,
    $storageFactory,
    $storageKey = $STORAGE_KEY,
    $storagePrefix,
    $missingTranslationHandlerFactory,
    $interpolationFactory,
    $interpolatorFactories = [],
    $loaderFactory,
    $cloakClassName = 'translate-cloak',
    $loaderOptions,
    $notFoundIndicatorLeft,
    $notFoundIndicatorRight,
    $postCompilingEnabled = false,
    $forceAsyncReloadEnabled = false,
    $nestedObjectDelimeter = '.',
    $isReady = false,
    $keepContent = false,
    loaderCache,
    directivePriority = 0,
    statefulFilter = true,
    postProcessFn,
    uniformLanguageTagResolver = 'default',
    languageTagResolver = {
      'default' : function (tag) {
        return (tag || '').split('-').join('_');
      },
      java : function (tag) {
        var temp = (tag || '').split('-').join('_');
        var parts = temp.split('_');
        return parts.length > 1 ? (parts[0].toLowerCase() + '_' + parts[1].toUpperCase()) : temp;
      },
      bcp47 : function (tag) {
        var temp = (tag || '').split('_').join('-');
        var parts = temp.split('-');
        return parts.length > 1 ? (parts[0].toLowerCase() + '-' + parts[1].toUpperCase()) : temp;
      },
      'iso639-1' : function (tag) {
        var temp = (tag || '').split('_').join('-');
        var parts = temp.split('-');
        return parts[0].toLowerCase();
      }
    };

  var version = '2.15.1';

  // tries to determine the browsers language
  var getFirstBrowserLanguage = function () {

    // internal purpose only
    if (angular.isFunction(pascalprechtTranslateOverrider.getLocale)) {
      return pascalprechtTranslateOverrider.getLocale();
    }

    var nav = $windowProvider.$get().navigator,
      browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],
      i,
      language;

    // support for HTML 5.1 "navigator.languages"
    if (angular.isArray(nav.languages)) {
      for (i = 0; i < nav.languages.length; i++) {
        language = nav.languages[i];
        if (language && language.length) {
          return language;
        }
      }
    }

    // support for other well known properties in browsers
    for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
      language = nav[browserLanguagePropertyKeys[i]];
      if (language && language.length) {
        return language;
      }
    }

    return null;
  };
  getFirstBrowserLanguage.displayName = 'angular-translate/service: getFirstBrowserLanguage';

  // tries to determine the browsers locale
  var getLocale = function () {
    var locale = getFirstBrowserLanguage() || '';
    if (languageTagResolver[uniformLanguageTagResolver]) {
      locale = languageTagResolver[uniformLanguageTagResolver](locale);
    }
    return locale;
  };
  getLocale.displayName = 'angular-translate/service: getLocale';

  /**
   * @name indexOf
   * @private
   *
   * @description
   * indexOf polyfill. Kinda sorta.
   *
   * @param {array} array Array to search in.
   * @param {string} searchElement Element to search for.
   *
   * @returns {int} Index of search element.
   */
  var indexOf = function (array, searchElement) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === searchElement) {
        return i;
      }
    }
    return -1;
  };

  /**
   * @name trim
   * @private
   *
   * @description
   * trim polyfill
   *
   * @returns {string} The string stripped of whitespace from both ends
   */
  var trim = function () {
    return this.toString().replace(/^\s+|\s+$/g, '');
  };

  var negotiateLocale = function (preferred) {
    if (!preferred) {
      return;
    }

    var avail = [],
      locale = angular.lowercase(preferred),
      i = 0,
      n = $availableLanguageKeys.length;

    for (; i < n; i++) {
      avail.push(angular.lowercase($availableLanguageKeys[i]));
    }

    // Check for an exact match in our list of available keys
    if (indexOf(avail, locale) > -1) {
      return preferred;
    }

    if ($languageKeyAliases) {
      var alias;
      for (var langKeyAlias in $languageKeyAliases) {
        if ($languageKeyAliases.hasOwnProperty(langKeyAlias)) {
          var hasWildcardKey = false;
          var hasExactKey = Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) &&
            angular.lowercase(langKeyAlias) === angular.lowercase(preferred);

          if (langKeyAlias.slice(-1) === '*') {
            hasWildcardKey = langKeyAlias.slice(0, -1) === preferred.slice(0, langKeyAlias.length - 1);
          }
          if (hasExactKey || hasWildcardKey) {
            alias = $languageKeyAliases[langKeyAlias];
            if (indexOf(avail, angular.lowercase(alias)) > -1) {
              return alias;
            }
          }
        }
      }
    }

    // Check for a language code without region
    var parts = preferred.split('_');

    if (parts.length > 1 && indexOf(avail, angular.lowercase(parts[0])) > -1) {
      return parts[0];
    }

    // If everything fails, return undefined.
    return;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#translations
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a new translation table for specific language key.
   *
   * To register a translation table for specific language, pass a defined language
   * key as first parameter.
   *
   * <pre>
   *  // register translation table for language: 'de_DE'
   *  $translateProvider.translations('de_DE', {
   *    'GREETING': 'Hallo Welt!'
   *  });
   *
   *  // register another one
   *  $translateProvider.translations('en_US', {
   *    'GREETING': 'Hello world!'
   *  });
   * </pre>
   *
   * When registering multiple translation tables for for the same language key,
   * the actual translation table gets extended. This allows you to define module
   * specific translation which only get added, once a specific module is loaded in
   * your app.
   *
   * Invoking this method with no arguments returns the translation table which was
   * registered with no language key. Invoking it with a language key returns the
   * related translation table.
   *
   * @param {string} langKey A language key.
   * @param {object} translationTable A plain old JavaScript object that represents a translation table.
   *
   */
  var translations = function (langKey, translationTable) {

    if (!langKey && !translationTable) {
      return $translationTable;
    }

    if (langKey && !translationTable) {
      if (angular.isString(langKey)) {
        return $translationTable[langKey];
      }
    } else {
      if (!angular.isObject($translationTable[langKey])) {
        $translationTable[langKey] = {};
      }
      angular.extend($translationTable[langKey], flatObject(translationTable));
    }
    return this;
  };

  this.translations = translations;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#cloakClassName
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   *
   * Let's you change the class name for `translate-cloak` directive.
   * Default class name is `translate-cloak`.
   *
   * @param {string} name translate-cloak class name
   */
  this.cloakClassName = function (name) {
    if (!name) {
      return $cloakClassName;
    }
    $cloakClassName = name;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#nestedObjectDelimeter
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   *
   * Let's you change the delimiter for namespaced translations.
   * Default delimiter is `.`.
   *
   * @param {string} delimiter namespace separator
   */
  this.nestedObjectDelimeter = function (delimiter) {
    if (!delimiter) {
      return $nestedObjectDelimeter;
    }
    $nestedObjectDelimeter = delimiter;
    return this;
  };

  /**
   * @name flatObject
   * @private
   *
   * @description
   * Flats an object. This function is used to flatten given translation data with
   * namespaces, so they are later accessible via dot notation.
   */
  var flatObject = function (data, path, result, prevKey) {
    var key, keyWithPath, keyWithShortPath, val;

    if (!path) {
      path = [];
    }
    if (!result) {
      result = {};
    }
    for (key in data) {
      if (!Object.prototype.hasOwnProperty.call(data, key)) {
        continue;
      }
      val = data[key];
      if (angular.isObject(val)) {
        flatObject(val, path.concat(key), result, key);
      } else {
        keyWithPath = path.length ? ('' + path.join($nestedObjectDelimeter) + $nestedObjectDelimeter + key) : key;
        if (path.length && key === prevKey) {
          // Create shortcut path (foo.bar == foo.bar.bar)
          keyWithShortPath = '' + path.join($nestedObjectDelimeter);
          // Link it to original path
          result[keyWithShortPath] = '@:' + keyWithPath;
        }
        result[keyWithPath] = val;
      }
    }
    return result;
  };
  flatObject.displayName = 'flatObject';

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#addInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Adds interpolation services to angular-translate, so it can manage them.
   *
   * @param {object} factory Interpolation service factory
   */
  this.addInterpolation = function (factory) {
    $interpolatorFactories.push(factory);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMessageFormatInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use interpolation functionality of messageformat.js.
   * This is useful when having high level pluralization and gender selection.
   */
  this.useMessageFormatInterpolation = function () {
    return this.useInterpolation('$translateMessageFormatInterpolation');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate which interpolation style to use as default, application-wide.
   * Simply pass a factory/service name. The interpolation service has to implement
   * the correct interface.
   *
   * @param {string} factory Interpolation service name.
   */
  this.useInterpolation = function (factory) {
    $interpolationFactory = factory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useSanitizeStrategy
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Simply sets a sanitation strategy type.
   *
   * @param {string} value Strategy type.
   */
  this.useSanitizeValueStrategy = function (value) {
    $translateSanitizationProvider.useStrategy(value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#preferredLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which of the registered translation tables to use for translation
   * at initial startup by passing a language key. Similar to `$translateProvider#use`
   * only that it says which language to **prefer**.
   *
   * @param {string} langKey A language key.
   */
  this.preferredLanguage = function (langKey) {
    if (langKey) {
      setupPreferredLanguage(langKey);
      return this;
    }
    return $preferredLanguage;
  };
  var setupPreferredLanguage = function (langKey) {
    if (langKey) {
      $preferredLanguage = langKey;
    }
    return $preferredLanguage;
  };
  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicator
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found. E.g. when
   * setting the indicator as 'X' and one tries to translate a translation id
   * called `NOT_FOUND`, this will result in `X NOT_FOUND X`.
   *
   * Internally this methods sets a left indicator and a right indicator using
   * `$translateProvider.translationNotFoundIndicatorLeft()` and
   * `$translateProvider.translationNotFoundIndicatorRight()`.
   *
   * **Note**: These methods automatically add a whitespace between the indicators
   * and the translation id.
   *
   * @param {string} indicator An indicator, could be any string.
   */
  this.translationNotFoundIndicator = function (indicator) {
    this.translationNotFoundIndicatorLeft(indicator);
    this.translationNotFoundIndicatorRight(indicator);
    return this;
  };

  /**
   * ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found left to the
   * translation id.
   *
   * @param {string} indicator An indicator.
   */
  this.translationNotFoundIndicatorLeft = function (indicator) {
    if (!indicator) {
      return $notFoundIndicatorLeft;
    }
    $notFoundIndicatorLeft = indicator;
    return this;
  };

  /**
   * ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found right to the
   * translation id.
   *
   * @param {string} indicator An indicator.
   */
  this.translationNotFoundIndicatorRight = function (indicator) {
    if (!indicator) {
      return $notFoundIndicatorRight;
    }
    $notFoundIndicatorRight = indicator;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#fallbackLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which of the registered translation tables to use when missing translations
   * at initial startup by passing a language key. Similar to `$translateProvider#use`
   * only that it says which language to **fallback**.
   *
   * @param {string||array} langKey A language key.
   *
   */
  this.fallbackLanguage = function (langKey) {
    fallbackStack(langKey);
    return this;
  };

  var fallbackStack = function (langKey) {
    if (langKey) {
      if (angular.isString(langKey)) {
        $fallbackWasString = true;
        $fallbackLanguage = [langKey];
      } else if (angular.isArray(langKey)) {
        $fallbackWasString = false;
        $fallbackLanguage = langKey;
      }
      if (angular.isString($preferredLanguage) && indexOf($fallbackLanguage, $preferredLanguage) < 0) {
        $fallbackLanguage.push($preferredLanguage);
      }

      return this;
    } else {
      if ($fallbackWasString) {
        return $fallbackLanguage[0];
      } else {
        return $fallbackLanguage;
      }
    }
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#use
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Set which translation table to use for translation by given language key. When
   * trying to 'use' a language which isn't provided, it'll throw an error.
   *
   * You actually don't have to use this method since `$translateProvider#preferredLanguage`
   * does the job too.
   *
   * @param {string} langKey A language key.
   */
  this.use = function (langKey) {
    if (langKey) {
      if (!$translationTable[langKey] && (!$loaderFactory)) {
        // only throw an error, when not loading translation data asynchronously
        throw new Error('$translateProvider couldn\'t find translationTable for langKey: \'' + langKey + '\'');
      }
      $uses = langKey;
      return this;
    }
    return $uses;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#resolveClientLocale
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
   *
   * @returns {string} the current client/browser language key
   */
  this.resolveClientLocale = function () {
    return getLocale();
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#storageKey
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which key must represent the choosed language by a user in the storage.
   *
   * @param {string} key A key for the storage.
   */
  var storageKey = function (key) {
    if (!key) {
      if ($storagePrefix) {
        return $storagePrefix + $storageKey;
      }
      return $storageKey;
    }
    $storageKey = key;
    return this;
  };

  this.storageKey = storageKey;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useUrlLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateUrlLoader` extension service as loader.
   *
   * @param {string} url Url
   * @param {Object=} options Optional configuration object
   */
  this.useUrlLoader = function (url, options) {
    return this.useLoader('$translateUrlLoader', angular.extend({url : url}, options));
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useStaticFilesLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateStaticFilesLoader` extension service as loader.
   *
   * @param {Object=} options Optional configuration object
   */
  this.useStaticFilesLoader = function (options) {
    return this.useLoader('$translateStaticFilesLoader', options);
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use any other service as loader.
   *
   * @param {string} loaderFactory Factory name to use
   * @param {Object=} options Optional configuration object
   */
  this.useLoader = function (loaderFactory, options) {
    $loaderFactory = loaderFactory;
    $loaderOptions = options || {};
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLocalStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateLocalStorage` service as storage layer.
   *
   */
  this.useLocalStorage = function () {
    return this.useStorage('$translateLocalStorage');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useCookieStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateCookieStorage` service as storage layer.
   */
  this.useCookieStorage = function () {
    return this.useStorage('$translateCookieStorage');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use custom service as storage layer.
   */
  this.useStorage = function (storageFactory) {
    $storageFactory = storageFactory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#storagePrefix
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets prefix for storage key.
   *
   * @param {string} prefix Storage key prefix
   */
  this.storagePrefix = function (prefix) {
    if (!prefix) {
      return prefix;
    }
    $storagePrefix = prefix;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandlerLog
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use built-in log handler when trying to translate
   * a translation Id which doesn't exist.
   *
   * This is actually a shortcut method for `useMissingTranslationHandler()`.
   *
   */
  this.useMissingTranslationHandlerLog = function () {
    return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandler
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Expects a factory name which later gets instantiated with `$injector`.
   * This method can be used to tell angular-translate to use a custom
   * missingTranslationHandler. Just build a factory which returns a function
   * and expects a translation id as argument.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.useMissingTranslationHandler('customHandler');
   *  });
   *
   *  app.factory('customHandler', function (dep1, dep2) {
   *    return function (translationId) {
   *      // something with translationId and dep1 and dep2
   *    };
   *  });
   * </pre>
   *
   * @param {string} factory Factory name
   */
  this.useMissingTranslationHandler = function (factory) {
    $missingTranslationHandlerFactory = factory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#usePostCompiling
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * If post compiling is enabled, all translated values will be processed
   * again with AngularJS' $compile.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.usePostCompiling(true);
   *  });
   * </pre>
   *
   * @param {string} factory Factory name
   */
  this.usePostCompiling = function (value) {
    $postCompilingEnabled = !(!value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#forceAsyncReload
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * If force async reload is enabled, async loader will always be called
   * even if $translationTable already contains the language key, adding
   * possible new entries to the $translationTable.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.forceAsyncReload(true);
   *  });
   * </pre>
   *
   * @param {boolean} value - valid values are true or false
   */
  this.forceAsyncReload = function (value) {
    $forceAsyncReloadEnabled = !(!value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#uniformLanguageTag
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate which language tag should be used as a result when determining
   * the current browser language.
   *
   * This setting must be set before invoking {@link pascalprecht.translate.$translateProvider#methods_determinePreferredLanguage determinePreferredLanguage()}.
   *
   * <pre>
   * $translateProvider
   *   .uniformLanguageTag('bcp47')
   *   .determinePreferredLanguage()
   * </pre>
   *
   * The resolver currently supports:
   * * default
   *     (traditionally: hyphens will be converted into underscores, i.e. en-US => en_US)
   *     en-US => en_US
   *     en_US => en_US
   *     en-us => en_us
   * * java
   *     like default, but the second part will be always in uppercase
   *     en-US => en_US
   *     en_US => en_US
   *     en-us => en_US
   * * BCP 47 (RFC 4646 & 4647)
   *     en-US => en-US
   *     en_US => en-US
   *     en-us => en-US
   *
   * See also:
   * * http://en.wikipedia.org/wiki/IETF_language_tag
   * * http://www.w3.org/International/core/langtags/
   * * http://tools.ietf.org/html/bcp47
   *
   * @param {string|object} options - options (or standard)
   * @param {string} options.standard - valid values are 'default', 'bcp47', 'java'
   */
  this.uniformLanguageTag = function (options) {

    if (!options) {
      options = {};
    } else if (angular.isString(options)) {
      options = {
        standard : options
      };
    }

    uniformLanguageTagResolver = options.standard;

    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#determinePreferredLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to try to determine on its own which language key
   * to set as preferred language. When `fn` is given, angular-translate uses it
   * to determine a language key, otherwise it uses the built-in `getLocale()`
   * method.
   *
   * The `getLocale()` returns a language key in the format `[lang]_[country]` or
   * `[lang]` depending on what the browser provides.
   *
   * Use this method at your own risk, since not all browsers return a valid
   * locale (see {@link pascalprecht.translate.$translateProvider#methods_uniformLanguageTag uniformLanguageTag()}).
   *
   * @param {Function=} fn Function to determine a browser's locale
   */
  this.determinePreferredLanguage = function (fn) {

    var locale = (fn && angular.isFunction(fn)) ? fn() : getLocale();

    if (!$availableLanguageKeys.length) {
      $preferredLanguage = locale;
    } else {
      $preferredLanguage = negotiateLocale(locale) || locale;
    }

    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#registerAvailableLanguageKeys
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a set of language keys the app will work with. Use this method in
   * combination with
   * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
   * When available languages keys are registered, angular-translate
   * tries to find the best fitting language key depending on the browsers locale,
   * considering your language key convention.
   *
   * @param {object} languageKeys Array of language keys the your app will use
   * @param {object=} aliases Alias map.
   */
  this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
    if (languageKeys) {
      $availableLanguageKeys = languageKeys;
      if (aliases) {
        $languageKeyAliases = aliases;
      }
      return this;
    }
    return $availableLanguageKeys;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLoaderCache
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a cache for internal $http based loaders.
   * {@link pascalprecht.translate.$translationCache $translationCache}.
   * When false the cache will be disabled (default). When true or undefined
   * the cache will be a default (see $cacheFactory). When an object it will
   * be treat as a cache object itself: the usage is $http({cache: cache})
   *
   * @param {object} cache boolean, string or cache-object
   */
  this.useLoaderCache = function (cache) {
    if (cache === false) {
      // disable cache
      loaderCache = undefined;
    } else if (cache === true) {
      // enable cache using AJS defaults
      loaderCache = true;
    } else if (typeof(cache) === 'undefined') {
      // enable cache using default
      loaderCache = '$translationCache';
    } else if (cache) {
      // enable cache using given one (see $cacheFactory)
      loaderCache = cache;
    }
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#directivePriority
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets the default priority of the translate directive. The standard value is `0`.
   * Calling this function without an argument will return the current value.
   *
   * @param {number} priority for the translate-directive
   */
  this.directivePriority = function (priority) {
    if (priority === undefined) {
      // getter
      return directivePriority;
    } else {
      // setter with chaining
      directivePriority = priority;
      return this;
    }
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#statefulFilter
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Since AngularJS 1.3, filters which are not stateless (depending at the scope)
   * have to explicit define this behavior.
   * Sets whether the translate filter should be stateful or stateless. The standard value is `true`
   * meaning being stateful.
   * Calling this function without an argument will return the current value.
   *
   * @param {boolean} state - defines the state of the filter
   */
  this.statefulFilter = function (state) {
    if (state === undefined) {
      // getter
      return statefulFilter;
    } else {
      // setter with chaining
      statefulFilter = state;
      return this;
    }
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#postProcess
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * The post processor will be intercept right after the translation result. It can modify the result.
   *
   * @param {object} fn Function or service name (string) to be called after the translation value has been set / resolved. The function itself will enrich every value being processed and then continue the normal resolver process
   */
  this.postProcess = function (fn) {
    if (fn) {
      postProcessFn = fn;
    } else {
      postProcessFn = undefined;
    }
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#keepContent
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * If keepContent is set to true than translate directive will always use innerHTML
   * as a default translation
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.keepContent(true);
   *  });
   * </pre>
   *
   * @param {boolean} value - valid values are true or false
   */
  this.keepContent = function (value) {
    $keepContent = !(!value);
    return this;
  };

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translate
   * @requires $interpolate
   * @requires $log
   * @requires $rootScope
   * @requires $q
   *
   * @description
   * The `$translate` service is the actual core of angular-translate. It expects a translation id
   * and optional interpolate parameters to translate contents.
   *
   * <pre>
   *  $translate('HEADLINE_TEXT').then(function (translation) {
   *    $scope.translatedText = translation;
   *  });
   * </pre>
   *
   * @param {string|array} translationId A token which represents a translation id
   *                                     This can be optionally an array of translation ids which
   *                                     results that the function returns an object where each key
   *                                     is the translation id and the value the translation.
   * @param {object=} interpolateParams An object hash for dynamic values
   * @param {string} interpolationId The id of the interpolation to use
   * @param {string} defaultTranslationText the optional default translation text that is written as
   *                                        as default text in case it is not found in any configured language
   * @param {string} forceLanguage A language to be used instead of the current language
   * @returns {object} promise
   */
  this.$get = ['$log', '$injector', '$rootScope', '$q', function ($log, $injector, $rootScope, $q) {

    var Storage,
      defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'),
      pendingLoader = false,
      interpolatorHashMap = {},
      langPromises = {},
      fallbackIndex,
      startFallbackIteration;

    var $translate = function (translationId, interpolateParams, interpolationId, defaultTranslationText, forceLanguage) {
      if (!$uses && $preferredLanguage) {
        $uses = $preferredLanguage;
      }
      var uses = (forceLanguage && forceLanguage !== $uses) ? // we don't want to re-negotiate $uses
        (negotiateLocale(forceLanguage) || forceLanguage) : $uses;

      // Check forceLanguage is present
      if (forceLanguage) {
        loadTranslationsIfMissing(forceLanguage);
      }

      // Duck detection: If the first argument is an array, a bunch of translations was requested.
      // The result is an object.
      if (angular.isArray(translationId)) {
        // Inspired by Q.allSettled by Kris Kowal
        // https://github.com/kriskowal/q/blob/b0fa72980717dc202ffc3cbf03b936e10ebbb9d7/q.js#L1553-1563
        // This transforms all promises regardless resolved or rejected
        var translateAll = function (translationIds) {
          var results = {}; // storing the actual results
          var promises = []; // promises to wait for
          // Wraps the promise a) being always resolved and b) storing the link id->value
          var translate = function (translationId) {
            var deferred = $q.defer();
            var regardless = function (value) {
              results[translationId] = value;
              deferred.resolve([translationId, value]);
            };
            // we don't care whether the promise was resolved or rejected; just store the values
            $translate(translationId, interpolateParams, interpolationId, defaultTranslationText, forceLanguage).then(regardless, regardless);
            return deferred.promise;
          };
          for (var i = 0, c = translationIds.length; i < c; i++) {
            promises.push(translate(translationIds[i]));
          }
          // wait for all (including storing to results)
          return $q.all(promises).then(function () {
            // return the results
            return results;
          });
        };
        return translateAll(translationId);
      }

      var deferred = $q.defer();

      // trim off any whitespace
      if (translationId) {
        translationId = trim.apply(translationId);
      }

      var promiseToWaitFor = (function () {
        var promise = $preferredLanguage ?
          langPromises[$preferredLanguage] :
          langPromises[uses];

        fallbackIndex = 0;

        if ($storageFactory && !promise) {
          // looks like there's no pending promise for $preferredLanguage or
          // $uses. Maybe there's one pending for a language that comes from
          // storage.
          var langKey = Storage.get($storageKey);
          promise = langPromises[langKey];

          if ($fallbackLanguage && $fallbackLanguage.length) {
            var index = indexOf($fallbackLanguage, langKey);
            // maybe the language from storage is also defined as fallback language
            // we increase the fallback language index to not search in that language
            // as fallback, since it's probably the first used language
            // in that case the index starts after the first element
            fallbackIndex = (index === 0) ? 1 : 0;

            // but we can make sure to ALWAYS fallback to preferred language at least
            if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {
              $fallbackLanguage.push($preferredLanguage);
            }
          }
        }
        return promise;
      }());

      if (!promiseToWaitFor) {
        // no promise to wait for? okay. Then there's no loader registered
        // nor is a one pending for language that comes from storage.
        // We can just translate.
        determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses).then(deferred.resolve, deferred.reject);
      } else {
        var promiseResolved = function () {
          // $uses may have changed while waiting
          if (!forceLanguage) {
            uses = $uses;
          }
          determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText, uses).then(deferred.resolve, deferred.reject);
        };
        promiseResolved.displayName = 'promiseResolved';

        promiseToWaitFor['finally'](promiseResolved)
          .catch(angular.noop); // we don't care about errors here, already handled
      }
      return deferred.promise;
    };

    /**
     * @name applyNotFoundIndicators
     * @private
     *
     * @description
     * Applies not fount indicators to given translation id, if needed.
     * This function gets only executed, if a translation id doesn't exist,
     * which is why a translation id is expected as argument.
     *
     * @param {string} translationId Translation id.
     * @returns {string} Same as given translation id but applied with not found
     * indicators.
     */
    var applyNotFoundIndicators = function (translationId) {
      // applying notFoundIndicators
      if ($notFoundIndicatorLeft) {
        translationId = [$notFoundIndicatorLeft, translationId].join(' ');
      }
      if ($notFoundIndicatorRight) {
        translationId = [translationId, $notFoundIndicatorRight].join(' ');
      }
      return translationId;
    };

    /**
     * @name useLanguage
     * @private
     *
     * @description
     * Makes actual use of a language by setting a given language key as used
     * language and informs registered interpolators to also use the given
     * key as locale.
     *
     * @param {string} key Locale key.
     */
    var useLanguage = function (key) {
      $uses = key;

      // make sure to store new language key before triggering success event
      if ($storageFactory) {
        Storage.put($translate.storageKey(), $uses);
      }

      $rootScope.$emit('$translateChangeSuccess', {language : key});

      // inform default interpolator
      defaultInterpolator.setLocale($uses);

      var eachInterpolator = function (interpolator, id) {
        interpolatorHashMap[id].setLocale($uses);
      };
      eachInterpolator.displayName = 'eachInterpolatorLocaleSetter';

      // inform all others too!
      angular.forEach(interpolatorHashMap, eachInterpolator);
      $rootScope.$emit('$translateChangeEnd', {language : key});
    };

    /**
     * @name loadAsync
     * @private
     *
     * @description
     * Kicks off registered async loader using `$injector` and applies existing
     * loader options. When resolved, it updates translation tables accordingly
     * or rejects with given language key.
     *
     * @param {string} key Language key.
     * @return {Promise} A promise.
     */
    var loadAsync = function (key) {
      if (!key) {
        throw 'No language key specified for loading.';
      }

      var deferred = $q.defer();

      $rootScope.$emit('$translateLoadingStart', {language : key});
      pendingLoader = true;

      var cache = loaderCache;
      if (typeof(cache) === 'string') {
        // getting on-demand instance of loader
        cache = $injector.get(cache);
      }

      var loaderOptions = angular.extend({}, $loaderOptions, {
        key : key,
        $http : angular.extend({}, {
          cache : cache
        }, $loaderOptions.$http)
      });

      var onLoaderSuccess = function (data) {
        var translationTable = {};
        $rootScope.$emit('$translateLoadingSuccess', {language : key});

        if (angular.isArray(data)) {
          angular.forEach(data, function (table) {
            angular.extend(translationTable, flatObject(table));
          });
        } else {
          angular.extend(translationTable, flatObject(data));
        }
        pendingLoader = false;
        deferred.resolve({
          key : key,
          table : translationTable
        });
        $rootScope.$emit('$translateLoadingEnd', {language : key});
      };
      onLoaderSuccess.displayName = 'onLoaderSuccess';

      var onLoaderError = function (key) {
        $rootScope.$emit('$translateLoadingError', {language : key});
        deferred.reject(key);
        $rootScope.$emit('$translateLoadingEnd', {language : key});
      };
      onLoaderError.displayName = 'onLoaderError';

      $injector.get($loaderFactory)(loaderOptions)
        .then(onLoaderSuccess, onLoaderError);

      return deferred.promise;
    };

    if ($storageFactory) {
      Storage = $injector.get($storageFactory);

      if (!Storage.get || !Storage.put) {
        throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or put() method!');
      }
    }

    // if we have additional interpolations that were added via
    // $translateProvider.addInterpolation(), we have to map'em
    if ($interpolatorFactories.length) {
      var eachInterpolationFactory = function (interpolatorFactory) {
        var interpolator = $injector.get(interpolatorFactory);
        // setting initial locale for each interpolation service
        interpolator.setLocale($preferredLanguage || $uses);
        // make'em recognizable through id
        interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
      };
      eachInterpolationFactory.displayName = 'interpolationFactoryAdder';

      angular.forEach($interpolatorFactories, eachInterpolationFactory);
    }

    /**
     * @name getTranslationTable
     * @private
     *
     * @description
     * Returns a promise that resolves to the translation table
     * or is rejected if an error occurred.
     *
     * @param langKey
     * @returns {Q.promise}
     */
    var getTranslationTable = function (langKey) {
      var deferred = $q.defer();
      if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {
        deferred.resolve($translationTable[langKey]);
      } else if (langPromises[langKey]) {
        var onResolve = function (data) {
          translations(data.key, data.table);
          deferred.resolve(data.table);
        };
        onResolve.displayName = 'translationTableResolver';
        langPromises[langKey].then(onResolve, deferred.reject);
      } else {
        deferred.reject();
      }
      return deferred.promise;
    };

    /**
     * @name getFallbackTranslation
     * @private
     *
     * @description
     * Returns a promise that will resolve to the translation
     * or be rejected if no translation was found for the language.
     * This function is currently only used for fallback language translation.
     *
     * @param langKey The language to translate to.
     * @param translationId
     * @param interpolateParams
     * @param Interpolator
     * @param sanitizeStrategy
     * @returns {Q.promise}
     */
    var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy) {
      var deferred = $q.defer();

      var onResolve = function (translationTable) {
        if (Object.prototype.hasOwnProperty.call(translationTable, translationId) && translationTable[translationId] !== null) {
          Interpolator.setLocale(langKey);
          var translation = translationTable[translationId];
          if (translation.substr(0, 2) === '@:') {
            getFallbackTranslation(langKey, translation.substr(2), interpolateParams, Interpolator, sanitizeStrategy)
              .then(deferred.resolve, deferred.reject);
          } else {
            var interpolatedValue = Interpolator.interpolate(translationTable[translationId], interpolateParams, 'service', sanitizeStrategy, translationId);
            interpolatedValue = applyPostProcessing(translationId, translationTable[translationId], interpolatedValue, interpolateParams, langKey);

            deferred.resolve(interpolatedValue);

          }
          Interpolator.setLocale($uses);
        } else {
          deferred.reject();
        }
      };
      onResolve.displayName = 'fallbackTranslationResolver';

      getTranslationTable(langKey).then(onResolve, deferred.reject);

      return deferred.promise;
    };

    /**
     * @name getFallbackTranslationInstant
     * @private
     *
     * @description
     * Returns a translation
     * This function is currently only used for fallback language translation.
     *
     * @param langKey The language to translate to.
     * @param translationId
     * @param interpolateParams
     * @param Interpolator
     * @param sanitizeStrategy sanitize strategy override
     *
     * @returns {string} translation
     */
    var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy) {
      var result, translationTable = $translationTable[langKey];

      if (translationTable && Object.prototype.hasOwnProperty.call(translationTable, translationId) && translationTable[translationId] !== null) {
        Interpolator.setLocale(langKey);
        result = Interpolator.interpolate(translationTable[translationId], interpolateParams, 'filter', sanitizeStrategy, translationId);
        result = applyPostProcessing(translationId, translationTable[translationId], result, interpolateParams, langKey, sanitizeStrategy);
        // workaround for TrustedValueHolderType
        if (!angular.isString(result) && angular.isFunction(result.$$unwrapTrustedValue)) {
          var result2 = result.$$unwrapTrustedValue();
          if (result2.substr(0, 2) === '@:') {
            return getFallbackTranslationInstant(langKey, result2.substr(2), interpolateParams, Interpolator, sanitizeStrategy);
          }
        } else if (result.substr(0, 2) === '@:') {
          return getFallbackTranslationInstant(langKey, result.substr(2), interpolateParams, Interpolator, sanitizeStrategy);
        }
        Interpolator.setLocale($uses);
      }

      return result;
    };


    /**
     * @name translateByHandler
     * @private
     *
     * Translate by missing translation handler.
     *
     * @param translationId
     * @param interpolateParams
     * @param defaultTranslationText
     * @param sanitizeStrategy sanitize strategy override
     *
     * @returns translation created by $missingTranslationHandler or translationId is $missingTranslationHandler is
     * absent
     */
    var translateByHandler = function (translationId, interpolateParams, defaultTranslationText, sanitizeStrategy) {
      // If we have a handler factory - we might also call it here to determine if it provides
      // a default text for a translationid that can't be found anywhere in our tables
      if ($missingTranslationHandlerFactory) {
        return $injector.get($missingTranslationHandlerFactory)(translationId, $uses, interpolateParams, defaultTranslationText, sanitizeStrategy);
      } else {
        return translationId;
      }
    };

    /**
     * @name resolveForFallbackLanguage
     * @private
     *
     * Recursive helper function for fallbackTranslation that will sequentially look
     * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
     *
     * @param fallbackLanguageIndex
     * @param translationId
     * @param interpolateParams
     * @param Interpolator
     * @param defaultTranslationText
     * @param sanitizeStrategy
     * @returns {Q.promise} Promise that will resolve to the translation.
     */
    var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy) {
      var deferred = $q.defer();

      if (fallbackLanguageIndex < $fallbackLanguage.length) {
        var langKey = $fallbackLanguage[fallbackLanguageIndex];
        getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy).then(
          function (data) {
            deferred.resolve(data);
          },
          function () {
            // Look in the next fallback language for a translation.
            // It delays the resolving by passing another promise to resolve.
            return resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy).then(deferred.resolve, deferred.reject);
          }
        );
      } else {
        // No translation found in any fallback language
        // if a default translation text is set in the directive, then return this as a result
        if (defaultTranslationText) {
          deferred.resolve(defaultTranslationText);
        } else {
          var missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, defaultTranslationText);

          // if no default translation is set and an error handler is defined, send it to the handler
          // and then return the result if it isn't undefined
          if ($missingTranslationHandlerFactory && missingTranslationHandlerTranslation) {
            deferred.resolve(missingTranslationHandlerTranslation);
          } else {
            deferred.reject(applyNotFoundIndicators(translationId));
          }
        }
      }
      return deferred.promise;
    };

    /**
     * @name resolveForFallbackLanguageInstant
     * @private
     *
     * Recursive helper function for fallbackTranslation that will sequentially look
     * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
     *
     * @param fallbackLanguageIndex
     * @param translationId
     * @param interpolateParams
     * @param Interpolator
     * @param sanitizeStrategy
     * @returns {string} translation
     */
    var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator, sanitizeStrategy) {
      var result;

      if (fallbackLanguageIndex < $fallbackLanguage.length) {
        var langKey = $fallbackLanguage[fallbackLanguageIndex];
        result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator, sanitizeStrategy);
        if (!result && result !== '') {
          result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
        }
      }
      return result;
    };

    /**
     * Translates with the usage of the fallback languages.
     *
     * @param translationId
     * @param interpolateParams
     * @param Interpolator
     * @param defaultTranslationText
     * @param sanitizeStrategy
     * @returns {Q.promise} Promise, that resolves to the translation.
     */
    var fallbackTranslation = function (translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy) {
      // Start with the fallbackLanguage with index 0
      return resolveForFallbackLanguage((startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy);
    };

    /**
     * Translates with the usage of the fallback languages.
     *
     * @param translationId
     * @param interpolateParams
     * @param Interpolator
     * @param sanitizeStrategy
     * @returns {String} translation
     */
    var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator, sanitizeStrategy) {
      // Start with the fallbackLanguage with index 0
      return resolveForFallbackLanguageInstant((startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator, sanitizeStrategy);
    };

    var determineTranslation = function (translationId, interpolateParams, interpolationId, defaultTranslationText, uses, sanitizeStrategy) {

      var deferred = $q.defer();

      var table = uses ? $translationTable[uses] : $translationTable,
        Interpolator = (interpolationId) ? interpolatorHashMap[interpolationId] : defaultInterpolator;

      // if the translation id exists, we can just interpolate it
      if (table && Object.prototype.hasOwnProperty.call(table, translationId) && table[translationId] !== null) {
        var translation = table[translationId];

        // If using link, rerun $translate with linked translationId and return it
        if (translation.substr(0, 2) === '@:') {

          $translate(translation.substr(2), interpolateParams, interpolationId, defaultTranslationText, uses)
            .then(deferred.resolve, deferred.reject);
        } else {
          //
          var resolvedTranslation = Interpolator.interpolate(translation, interpolateParams, 'service', sanitizeStrategy, translationId);
          resolvedTranslation = applyPostProcessing(translationId, translation, resolvedTranslation, interpolateParams, uses);
          deferred.resolve(resolvedTranslation);
        }
      } else {
        var missingTranslationHandlerTranslation;
        // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
        if ($missingTranslationHandlerFactory && !pendingLoader) {
          missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, defaultTranslationText);
        }

        // since we couldn't translate the inital requested translation id,
        // we try it now with one or more fallback languages, if fallback language(s) is
        // configured.
        if (uses && $fallbackLanguage && $fallbackLanguage.length) {
          fallbackTranslation(translationId, interpolateParams, Interpolator, defaultTranslationText, sanitizeStrategy)
            .then(function (translation) {
              deferred.resolve(translation);
            }, function (_translationId) {
              deferred.reject(applyNotFoundIndicators(_translationId));
            });
        } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
          // looks like the requested translation id doesn't exists.
          // Now, if there is a registered handler for missing translations and no
          // asyncLoader is pending, we execute the handler
          if (defaultTranslationText) {
            deferred.resolve(defaultTranslationText);
          } else {
            deferred.resolve(missingTranslationHandlerTranslation);
          }
        } else {
          if (defaultTranslationText) {
            deferred.resolve(defaultTranslationText);
          } else {
            deferred.reject(applyNotFoundIndicators(translationId));
          }
        }
      }
      return deferred.promise;
    };

    var determineTranslationInstant = function (translationId, interpolateParams, interpolationId, uses, sanitizeStrategy) {

      var result, table = uses ? $translationTable[uses] : $translationTable,
        Interpolator = defaultInterpolator;

      // if the interpolation id exists use custom interpolator
      if (interpolatorHashMap && Object.prototype.hasOwnProperty.call(interpolatorHashMap, interpolationId)) {
        Interpolator = interpolatorHashMap[interpolationId];
      }

      // if the translation id exists, we can just interpolate it
      if (table && Object.prototype.hasOwnProperty.call(table, translationId) && table[translationId] !== null) {
        var translation = table[translationId];

        // If using link, rerun $translate with linked translationId and return it
        if (translation.substr(0, 2) === '@:') {
          result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId, uses, sanitizeStrategy);
        } else {
          result = Interpolator.interpolate(translation, interpolateParams, 'filter', sanitizeStrategy, translationId);
          result = applyPostProcessing(translationId, translation, result, interpolateParams, uses, sanitizeStrategy);
        }
      } else {
        var missingTranslationHandlerTranslation;
        // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
        if ($missingTranslationHandlerFactory && !pendingLoader) {
          missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, sanitizeStrategy);
        }

        // since we couldn't translate the inital requested translation id,
        // we try it now with one or more fallback languages, if fallback language(s) is
        // configured.
        if (uses && $fallbackLanguage && $fallbackLanguage.length) {
          fallbackIndex = 0;
          result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator, sanitizeStrategy);
        } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
          // looks like the requested translation id doesn't exists.
          // Now, if there is a registered handler for missing translations and no
          // asyncLoader is pending, we execute the handler
          result = missingTranslationHandlerTranslation;
        } else {
          result = applyNotFoundIndicators(translationId);
        }
      }

      return result;
    };

    var clearNextLangAndPromise = function (key) {
      if ($nextLang === key) {
        $nextLang = undefined;
      }
      langPromises[key] = undefined;
    };

    var applyPostProcessing = function (translationId, translation, resolvedTranslation, interpolateParams, uses, sanitizeStrategy) {
      var fn = postProcessFn;

      if (fn) {

        if (typeof(fn) === 'string') {
          // getting on-demand instance
          fn = $injector.get(fn);
        }
        if (fn) {
          return fn(translationId, translation, resolvedTranslation, interpolateParams, uses, sanitizeStrategy);
        }
      }

      return resolvedTranslation;
    };

    var loadTranslationsIfMissing = function (key) {
      if (!$translationTable[key] && $loaderFactory && !langPromises[key]) {
        langPromises[key] = loadAsync(key).then(function (translation) {
          translations(translation.key, translation.table);
          return translation;
        });
      }
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#preferredLanguage
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the language key for the preferred language.
     *
     * @param {string} langKey language String or Array to be used as preferredLanguage (changing at runtime)
     *
     * @return {string} preferred language key
     */
    $translate.preferredLanguage = function (langKey) {
      if (langKey) {
        setupPreferredLanguage(langKey);
      }
      return $preferredLanguage;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#cloakClassName
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the configured class name for `translate-cloak` directive.
     *
     * @return {string} cloakClassName
     */
    $translate.cloakClassName = function () {
      return $cloakClassName;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#nestedObjectDelimeter
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the configured delimiter for nested namespaces.
     *
     * @return {string} nestedObjectDelimeter
     */
    $translate.nestedObjectDelimeter = function () {
      return $nestedObjectDelimeter;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#fallbackLanguage
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the language key for the fallback languages or sets a new fallback stack.
     *
     * @param {string=} langKey language String or Array of fallback languages to be used (to change stack at runtime)
     *
     * @return {string||array} fallback language key
     */
    $translate.fallbackLanguage = function (langKey) {
      if (langKey !== undefined && langKey !== null) {
        fallbackStack(langKey);

        // as we might have an async loader initiated and a new translation language might have been defined
        // we need to add the promise to the stack also. So - iterate.
        if ($loaderFactory) {
          if ($fallbackLanguage && $fallbackLanguage.length) {
            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
              if (!langPromises[$fallbackLanguage[i]]) {
                langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
              }
            }
          }
        }
        $translate.use($translate.use());
      }
      if ($fallbackWasString) {
        return $fallbackLanguage[0];
      } else {
        return $fallbackLanguage;
      }

    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#useFallbackLanguage
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Sets the first key of the fallback language stack to be used for translation.
     * Therefore all languages in the fallback array BEFORE this key will be skipped!
     *
     * @param {string=} langKey Contains the langKey the iteration shall start with. Set to false if you want to
     * get back to the whole stack
     */
    $translate.useFallbackLanguage = function (langKey) {
      if (langKey !== undefined && langKey !== null) {
        if (!langKey) {
          startFallbackIteration = 0;
        } else {
          var langKeyPosition = indexOf($fallbackLanguage, langKey);
          if (langKeyPosition > -1) {
            startFallbackIteration = langKeyPosition;
          }
        }

      }

    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#proposedLanguage
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the language key of language that is currently loaded asynchronously.
     *
     * @return {string} language key
     */
    $translate.proposedLanguage = function () {
      return $nextLang;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#storage
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns registered storage.
     *
     * @return {object} Storage
     */
    $translate.storage = function () {
      return Storage;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#negotiateLocale
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns a language key based on available languages and language aliases. If a
     * language key cannot be resolved, returns undefined.
     *
     * If no or a falsy key is given, returns undefined.
     *
     * @param {string} [key] Language key
     * @return {string|undefined} Language key or undefined if no language key is found.
     */
    $translate.negotiateLocale = negotiateLocale;

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#use
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Tells angular-translate which language to use by given language key. This method is
     * used to change language at runtime. It also takes care of storing the language
     * key in a configured store to let your app remember the choosed language.
     *
     * When trying to 'use' a language which isn't available it tries to load it
     * asynchronously with registered loaders.
     *
     * Returns promise object with loaded language file data or string of the currently used language.
     *
     * If no or a falsy key is given it returns the currently used language key.
     * The returned string will be ```undefined``` if setting up $translate hasn't finished.
     * @example
     * $translate.use("en_US").then(function(data){
       *   $scope.text = $translate("HELLO");
       * });
     *
     * @param {string} [key] Language key
     * @return {object|string} Promise with loaded language data or the language key if a falsy param was given.
     */
    $translate.use = function (key) {
      if (!key) {
        return $uses;
      }

      var deferred = $q.defer();
      deferred.promise.then(null, angular.noop); // AJS "Possibly unhandled rejection"

      $rootScope.$emit('$translateChangeStart', {language : key});

      // Try to get the aliased language key
      var aliasedKey = negotiateLocale(key);
      // Ensure only registered language keys will be loaded
      if ($availableLanguageKeys.length > 0 && !aliasedKey) {
        return $q.reject(key);
      }

      if (aliasedKey) {
        key = aliasedKey;
      }

      // if there isn't a translation table for the language we've requested,
      // we load it asynchronously
      $nextLang = key;
      if (($forceAsyncReloadEnabled || !$translationTable[key]) && $loaderFactory && !langPromises[key]) {
        langPromises[key] = loadAsync(key).then(function (translation) {
          translations(translation.key, translation.table);
          deferred.resolve(translation.key);
          if ($nextLang === key) {
            useLanguage(translation.key);
          }
          return translation;
        }, function (key) {
          $rootScope.$emit('$translateChangeError', {language : key});
          deferred.reject(key);
          $rootScope.$emit('$translateChangeEnd', {language : key});
          return $q.reject(key);
        });
        langPromises[key]['finally'](function () {
          clearNextLangAndPromise(key);
        }).catch(angular.noop); // we don't care about errors (clearing)
      } else if (langPromises[key]) {
        // we are already loading this asynchronously
        // resolve our new deferred when the old langPromise is resolved
        langPromises[key].then(function (translation) {
          if ($nextLang === translation.key) {
            useLanguage(translation.key);
          }
          deferred.resolve(translation.key);
          return translation;
        }, function (key) {
          // find first available fallback language if that request has failed
          if (!$uses && $fallbackLanguage && $fallbackLanguage.length > 0 && $fallbackLanguage[0] !== key) {
            return $translate.use($fallbackLanguage[0]).then(deferred.resolve, deferred.reject);
          } else {
            return deferred.reject(key);
          }
        });
      } else {
        deferred.resolve(key);
        useLanguage(key);
      }

      return deferred.promise;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#resolveClientLocale
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
     *
     * @returns {string} the current client/browser language key
     */
    $translate.resolveClientLocale = function () {
      return getLocale();
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#storageKey
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the key for the storage.
     *
     * @return {string} storage key
     */
    $translate.storageKey = function () {
      return storageKey();
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#isPostCompilingEnabled
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns whether post compiling is enabled or not
     *
     * @return {bool} storage key
     */
    $translate.isPostCompilingEnabled = function () {
      return $postCompilingEnabled;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#isForceAsyncReloadEnabled
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns whether force async reload is enabled or not
     *
     * @return {boolean} forceAsyncReload value
     */
    $translate.isForceAsyncReloadEnabled = function () {
      return $forceAsyncReloadEnabled;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#isKeepContent
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns whether keepContent or not
     *
     * @return {boolean} keepContent value
     */
    $translate.isKeepContent = function () {
      return $keepContent;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#refresh
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Refreshes a translation table pointed by the given langKey. If langKey is not specified,
     * the module will drop all existent translation tables and load new version of those which
     * are currently in use.
     *
     * Refresh means that the module will drop target translation table and try to load it again.
     *
     * In case there are no loaders registered the refresh() method will throw an Error.
     *
     * If the module is able to refresh translation tables refresh() method will broadcast
     * $translateRefreshStart and $translateRefreshEnd events.
     *
     * @example
     * // this will drop all currently existent translation tables and reload those which are
     * // currently in use
     * $translate.refresh();
     * // this will refresh a translation table for the en_US language
     * $translate.refresh('en_US');
     *
     * @param {string} langKey A language key of the table, which has to be refreshed
     *
     * @return {promise} Promise, which will be resolved in case a translation tables refreshing
     * process is finished successfully, and reject if not.
     */
    $translate.refresh = function (langKey) {
      if (!$loaderFactory) {
        throw new Error('Couldn\'t refresh translation table, no loader registered!');
      }

      $rootScope.$emit('$translateRefreshStart', {language : langKey});

      var deferred = $q.defer(), updatedLanguages = {};

      //private helper
      function loadNewData(languageKey) {
        var promise = loadAsync(languageKey);
        //update the load promise cache for this language
        langPromises[languageKey] = promise;
        //register a data handler for the promise
        promise.then(function (data) {
            //clear the cache for this language
            $translationTable[languageKey] = {};
            //add the new data for this language
            translations(languageKey, data.table);
            //track that we updated this language
            updatedLanguages[languageKey] = true;
          },
          //handle rejection to appease the $q validation
          angular.noop);
        return promise;
      }

      //set up post-processing
      deferred.promise.then(
        function () {
          for (var key in $translationTable) {
            if ($translationTable.hasOwnProperty(key)) {
              //delete cache entries that were not updated
              if (!(key in updatedLanguages)) {
                delete $translationTable[key];
              }
            }
          }
          if ($uses) {
            useLanguage($uses);
          }
        },
        //handle rejection to appease the $q validation
        angular.noop
      ).finally(
        function () {
          $rootScope.$emit('$translateRefreshEnd', {language : langKey});
        }
      );

      if (!langKey) {
        // if there's no language key specified we refresh ALL THE THINGS!
        var languagesToReload = $fallbackLanguage && $fallbackLanguage.slice() || [];
        if ($uses && languagesToReload.indexOf($uses) === -1) {
          languagesToReload.push($uses);
        }
        $q.all(languagesToReload.map(loadNewData)).then(deferred.resolve, deferred.reject);

      } else if ($translationTable[langKey]) {
        //just refresh the specified language cache
        loadNewData(langKey).then(deferred.resolve, deferred.reject);

      } else {
        deferred.reject();
      }

      return deferred.promise;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#instant
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns a translation instantly from the internal state of loaded translation. All rules
     * regarding the current language, the preferred language of even fallback languages will be
     * used except any promise handling. If a language was not found, an asynchronous loading
     * will be invoked in the background.
     *
     * @param {string|array} translationId A token which represents a translation id
     *                                     This can be optionally an array of translation ids which
     *                                     results that the function's promise returns an object where
     *                                     each key is the translation id and the value the translation.
     * @param {object} interpolateParams Params
     * @param {string} interpolationId The id of the interpolation to use
     * @param {string} forceLanguage A language to be used instead of the current language
     * @param {string} sanitizeStrategy force sanitize strategy for this call instead of using the configured one
     *
     * @return {string|object} translation
     */
    $translate.instant = function (translationId, interpolateParams, interpolationId, forceLanguage, sanitizeStrategy) {

      // we don't want to re-negotiate $uses
      var uses = (forceLanguage && forceLanguage !== $uses) ? // we don't want to re-negotiate $uses
        (negotiateLocale(forceLanguage) || forceLanguage) : $uses;

      // Detect undefined and null values to shorten the execution and prevent exceptions
      if (translationId === null || angular.isUndefined(translationId)) {
        return translationId;
      }

      // Check forceLanguage is present
      if (forceLanguage) {
        loadTranslationsIfMissing(forceLanguage);
      }

      // Duck detection: If the first argument is an array, a bunch of translations was requested.
      // The result is an object.
      if (angular.isArray(translationId)) {
        var results = {};
        for (var i = 0, c = translationId.length; i < c; i++) {
          results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId, forceLanguage, sanitizeStrategy);
        }
        return results;
      }

      // We discarded unacceptable values. So we just need to verify if translationId is empty String
      if (angular.isString(translationId) && translationId.length < 1) {
        return translationId;
      }

      // trim off any whitespace
      if (translationId) {
        translationId = trim.apply(translationId);
      }

      var result, possibleLangKeys = [];
      if ($preferredLanguage) {
        possibleLangKeys.push($preferredLanguage);
      }
      if (uses) {
        possibleLangKeys.push(uses);
      }
      if ($fallbackLanguage && $fallbackLanguage.length) {
        possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
      }
      for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
        var possibleLangKey = possibleLangKeys[j];
        if ($translationTable[possibleLangKey]) {
          if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
            result = determineTranslationInstant(translationId, interpolateParams, interpolationId, uses, sanitizeStrategy);
          }
        }
        if (typeof result !== 'undefined') {
          break;
        }
      }

      if (!result && result !== '') {
        if ($notFoundIndicatorLeft || $notFoundIndicatorRight) {
          result = applyNotFoundIndicators(translationId);
        } else {
          // Return translation of default interpolator if not found anything.
          result = defaultInterpolator.interpolate(translationId, interpolateParams, 'filter', sanitizeStrategy);

          // looks like the requested translation id doesn't exists.
          // Now, if there is a registered handler for missing translations and no
          // asyncLoader is pending, we execute the handler
          var missingTranslationHandlerTranslation;
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams, sanitizeStrategy);
          }

          if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
            result = missingTranslationHandlerTranslation;
          }
        }
      }

      return result;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#versionInfo
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the current version information for the angular-translate library
     *
     * @return {string} angular-translate version
     */
    $translate.versionInfo = function () {
      return version;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#loaderCache
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns the defined loaderCache.
     *
     * @return {boolean|string|object} current value of loaderCache
     */
    $translate.loaderCache = function () {
      return loaderCache;
    };

    // internal purpose only
    $translate.directivePriority = function () {
      return directivePriority;
    };

    // internal purpose only
    $translate.statefulFilter = function () {
      return statefulFilter;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#isReady
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns whether the service is "ready" to translate (i.e. loading 1st language).
     *
     * See also {@link pascalprecht.translate.$translate#methods_onReady onReady()}.
     *
     * @return {boolean} current value of ready
     */
    $translate.isReady = function () {
      return $isReady;
    };

    var $onReadyDeferred = $q.defer();
    $onReadyDeferred.promise.then(function () {
      $isReady = true;
    });

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#onReady
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Calls the function provided or resolved the returned promise after the service is "ready" to translate (i.e. loading 1st language).
     *
     * See also {@link pascalprecht.translate.$translate#methods_isReady isReady()}.
     *
     * @param {Function=} fn Function to invoke when service is ready
     * @return {object} Promise resolved when service is ready
     */
    $translate.onReady = function (fn) {
      var deferred = $q.defer();
      if (angular.isFunction(fn)) {
        deferred.promise.then(fn);
      }
      if ($isReady) {
        deferred.resolve();
      } else {
        $onReadyDeferred.promise.then(deferred.resolve);
      }
      return deferred.promise;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#getAvailableLanguageKeys
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * This function simply returns the registered language keys being defined before in the config phase
     * With this, an application can use the array to provide a language selection dropdown or similar
     * without any additional effort
     *
     * @returns {object} returns the list of possibly registered language keys and mapping or null if not defined
     */
    $translate.getAvailableLanguageKeys = function () {
      if ($availableLanguageKeys.length > 0) {
        return $availableLanguageKeys;
      }
      return null;
    };

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translate#getTranslationTable
     * @methodOf pascalprecht.translate.$translate
     *
     * @description
     * Returns translation table by the given language key.
     *
     * Unless a language is provided it returns a translation table of the current one.
     * Note: If translation dictionary is currently downloading or in progress
     * it will return null.
     *
     * @param {string} langKey A token which represents a translation id
     *
     * @return {object} a copy of angular-translate $translationTable
     */
    $translate.getTranslationTable = function (langKey) {
      langKey = langKey || $translate.use();
      if (langKey && $translationTable[langKey]) {
        return angular.copy($translationTable[langKey]);
      }
      return null;
    };

    // Whenever $translateReady is being fired, this will ensure the state of $isReady
    var globalOnReadyListener = $rootScope.$on('$translateReady', function () {
      $onReadyDeferred.resolve();
      globalOnReadyListener(); // one time only
      globalOnReadyListener = null;
    });
    var globalOnChangeListener = $rootScope.$on('$translateChangeEnd', function () {
      $onReadyDeferred.resolve();
      globalOnChangeListener(); // one time only
      globalOnChangeListener = null;
    });

    if ($loaderFactory) {

      // If at least one async loader is defined and there are no
      // (default) translations available we should try to load them.
      if (angular.equals($translationTable, {})) {
        if ($translate.use()) {
          $translate.use($translate.use());
        }
      }

      // Also, if there are any fallback language registered, we start
      // loading them asynchronously as soon as we can.
      if ($fallbackLanguage && $fallbackLanguage.length) {
        var processAsyncResult = function (translation) {
          translations(translation.key, translation.table);
          $rootScope.$emit('$translateChangeEnd', {language : translation.key});
          return translation;
        };
        for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
          var fallbackLanguageId = $fallbackLanguage[i];
          if ($forceAsyncReloadEnabled || !$translationTable[fallbackLanguageId]) {
            langPromises[fallbackLanguageId] = loadAsync(fallbackLanguageId).then(processAsyncResult);
          }
        }
      }
    } else {
      $rootScope.$emit('$translateReady', {language : $translate.use()});
    }

    return $translate;
  }];
}

$translate.displayName = 'displayName';

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateDefaultInterpolation
 * @requires $interpolate
 *
 * @description
 * Uses angular's `$interpolate` services to interpolate strings against some values.
 *
 * Be aware to configure a proper sanitization strategy.
 *
 * See also:
 * * {@link pascalprecht.translate.$translateSanitization}
 *
 * @return {object} $translateDefaultInterpolation Interpolator service
 */
angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', $translateDefaultInterpolation);

function $translateDefaultInterpolation ($interpolate, $translateSanitization) {

  'use strict';

  var $translateInterpolator = {},
      $locale,
      $identifier = 'default';

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#setLocale
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Sets current locale (this is currently not use in this interpolation).
   *
   * @param {string} locale Language key or locale.
   */
  $translateInterpolator.setLocale = function (locale) {
    $locale = locale;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#getInterpolationIdentifier
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Returns an identifier for this interpolation service.
   *
   * @returns {string} $identifier
   */
  $translateInterpolator.getInterpolationIdentifier = function () {
    return $identifier;
  };

  /**
   * @deprecated will be removed in 3.0
   * @see {@link pascalprecht.translate.$translateSanitization}
   */
  $translateInterpolator.useSanitizeValueStrategy = function (value) {
    $translateSanitization.useStrategy(value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#interpolate
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Interpolates given value agains given interpolate params using angulars
   * `$interpolate` service.
   *
   * Since AngularJS 1.5, `value` must not be a string but can be anything input.
   *
   * @param {string} value translation
   * @param {object} interpolationParams interpolation params
   * @param {string} context current context (filter, directive, service)
   * @param {string} sanitizeStrategy sanitize strategy
   * @param {string} translationId current translationId
   *
   * @returns {string} interpolated string
   */
  $translateInterpolator.interpolate = function (value, interpolationParams, context, sanitizeStrategy, translationId) { // jshint ignore:line
    interpolationParams = interpolationParams || {};
    interpolationParams = $translateSanitization.sanitize(interpolationParams, 'params', sanitizeStrategy, context);

    var interpolatedText;
    if (angular.isNumber(value)) {
      // numbers are safe
      interpolatedText = '' + value;
    } else if (angular.isString(value)) {
      // strings must be interpolated (that's the job here)
      interpolatedText = $interpolate(value)(interpolationParams);
      interpolatedText = $translateSanitization.sanitize(interpolatedText, 'text', sanitizeStrategy, context);
    } else {
      // neither a number or a string, cant interpolate => empty string
      interpolatedText = '';
    }

    return interpolatedText;
  };

  return $translateInterpolator;
}

$translateDefaultInterpolation.displayName = '$translateDefaultInterpolation';

angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translate
 * @requires $interpolate, 
 * @requires $compile, 
 * @requires $parse, 
 * @requires $rootScope
 * @restrict AE
 *
 * @description
 * Translates given translation id either through attribute or DOM content.
 * Internally it uses $translate service to translate the translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate Translation id which could be either string or interpolated string.
 * @param {string=} translate-values Values to pass into translation id. Can be passed as object literal string or interpolated object.
 * @param {string=} translate-attr-ATTR translate Translation id and put it into ATTR attribute.
 * @param {string=} translate-default will be used unless translation was successful
 * @param {boolean=} translate-compile (default true if present) defines locally activation of {@link pascalprecht.translate.$translateProvider#methods_usePostCompiling}
 * @param {boolean=} translate-keep-content (default true if present) defines that in case a KEY could not be translated, that the existing content is left in the innerHTML}
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre translate="TRANSLATION_ID"></pre>
        <pre translate>TRANSLATION_ID</pre>
        <pre translate translate-attr-title="TRANSLATION_ID"></pre>
        <pre translate="{{translationId}}"></pre>
        <pre translate>{{translationId}}</pre>
        <pre translate="WITH_VALUES" translate-values="{value: 5}"></pre>
        <pre translate translate-values="{value: 5}">WITH_VALUES</pre>
        <pre translate="WITH_VALUES" translate-values="{{values}}"></pre>
        <pre translate translate-values="{{values}}">WITH_VALUES</pre>
        <pre translate translate-attr-title="WITH_VALUES" translate-values="{{values}}"></pre>
        <pre translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hi"></pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}',
          'WITH_CAMEL_CASE_KEY': 'The interpolation key is camel cased: {{camelCaseKey}}'
        }).preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
    <file name="scenario.js">
      it('should translate', function () {
        inject(function ($rootScope, $compile) {
          $rootScope.translationId = 'TRANSLATION_ID';

          element = $compile('<p translate="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate="{{translationId}}"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>TRANSLATION_ID</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>{{translationId}}</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate translate-attr-title="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.attr('title')).toBe('Hello there!');

          element = $compile('<p translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hello"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('The interpolation key is camel cased: Hello');
        });
      });
    </file>
   </example>
 */
.directive('translate', translateDirective);
function translateDirective($translate, $interpolate, $compile, $parse, $rootScope) {

  'use strict';

  /**
   * @name trim
   * @private
   *
   * @description
   * trim polyfill
   *
   * @returns {string} The string stripped of whitespace from both ends
   */
  var trim = function() {
    return this.toString().replace(/^\s+|\s+$/g, '');
  };

  return {
    restrict: 'AE',
    scope: true,
    priority: $translate.directivePriority(),
    compile: function (tElement, tAttr) {

      var translateValuesExist = (tAttr.translateValues) ?
        tAttr.translateValues : undefined;

      var translateInterpolation = (tAttr.translateInterpolation) ?
        tAttr.translateInterpolation : undefined;

      var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);

      var interpolateRegExp = '^(.*)(' + $interpolate.startSymbol() + '.*' + $interpolate.endSymbol() + ')(.*)',
          watcherRegExp = '^(.*)' + $interpolate.startSymbol() + '(.*)' + $interpolate.endSymbol() + '(.*)';

      return function linkFn(scope, iElement, iAttr) {

        scope.interpolateParams = {};
        scope.preText = '';
        scope.postText = '';
        scope.translateNamespace = getTranslateNamespace(scope);
        var translationIds = {};

        var initInterpolationParams = function (interpolateParams, iAttr, tAttr) {
          // initial setup
          if (iAttr.translateValues) {
            angular.extend(interpolateParams, $parse(iAttr.translateValues)(scope.$parent));
          }
          // initially fetch all attributes if existing and fill the params
          if (translateValueExist) {
            for (var attr in tAttr) {
              if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
                var attributeName = angular.lowercase(attr.substr(14, 1)) + attr.substr(15);
                interpolateParams[attributeName] = tAttr[attr];
              }
            }
          }
        };

        // Ensures any change of the attribute "translate" containing the id will
        // be re-stored to the scope's "translationId".
        // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.
        var observeElementTranslation = function (translationId) {

          // Remove any old watcher
          if (angular.isFunction(observeElementTranslation._unwatchOld)) {
            observeElementTranslation._unwatchOld();
            observeElementTranslation._unwatchOld = undefined;
          }

          if (angular.equals(translationId , '') || !angular.isDefined(translationId)) {
            var iElementText = trim.apply(iElement.text());

            // Resolve translation id by inner html if required
            var interpolateMatches = iElementText.match(interpolateRegExp);
            // Interpolate translation id if required
            if (angular.isArray(interpolateMatches)) {
              scope.preText = interpolateMatches[1];
              scope.postText = interpolateMatches[3];
              translationIds.translate = $interpolate(interpolateMatches[2])(scope.$parent);
              var watcherMatches = iElementText.match(watcherRegExp);
              if (angular.isArray(watcherMatches) && watcherMatches[2] && watcherMatches[2].length) {
                observeElementTranslation._unwatchOld = scope.$watch(watcherMatches[2], function (newValue) {
                  translationIds.translate = newValue;
                  updateTranslations();
                });
              }
            } else {
              // do not assigne the translation id if it is empty.
              translationIds.translate = !iElementText ? undefined : iElementText;
            }
          } else {
            translationIds.translate = translationId;
          }
          updateTranslations();
        };

        var observeAttributeTranslation = function (translateAttr) {
          iAttr.$observe(translateAttr, function (translationId) {
            translationIds[translateAttr] = translationId;
            updateTranslations();
          });
        };

        // initial setup with values
        initInterpolationParams(scope.interpolateParams, iAttr, tAttr);

        var firstAttributeChangedEvent = true;
        iAttr.$observe('translate', function (translationId) {
          if (typeof translationId === 'undefined') {
            // case of element "<translate>xyz</translate>"
            observeElementTranslation('');
          } else {
            // case of regular attribute
            if (translationId !== '' || !firstAttributeChangedEvent) {
              translationIds.translate = translationId;
              updateTranslations();
            }
          }
          firstAttributeChangedEvent = false;
        });

        for (var translateAttr in iAttr) {
          if (iAttr.hasOwnProperty(translateAttr) && translateAttr.substr(0, 13) === 'translateAttr' && translateAttr.length > 13) {
            observeAttributeTranslation(translateAttr);
          }
        }

        iAttr.$observe('translateDefault', function (value) {
          scope.defaultText = value;
          updateTranslations();
        });

        if (translateValuesExist) {
          iAttr.$observe('translateValues', function (interpolateParams) {
            if (interpolateParams) {
              scope.$parent.$watch(function () {
                angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
              });
            }
          });
        }

        if (translateValueExist) {
          var observeValueAttribute = function (attrName) {
            iAttr.$observe(attrName, function (value) {
              var attributeName = angular.lowercase(attrName.substr(14, 1)) + attrName.substr(15);
              scope.interpolateParams[attributeName] = value;
            });
          };
          for (var attr in iAttr) {
            if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
              observeValueAttribute(attr);
            }
          }
        }

        // Master update function
        var updateTranslations = function () {
          for (var key in translationIds) {
            if (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {
              updateTranslation(key, translationIds[key], scope, scope.interpolateParams, scope.defaultText, scope.translateNamespace);
            }
          }
        };

        // Put translation processing function outside loop
        var updateTranslation = function(translateAttr, translationId, scope, interpolateParams, defaultTranslationText, translateNamespace) {
          if (translationId) {
            // if translation id starts with '.' and translateNamespace given, prepend namespace
            if (translateNamespace && translationId.charAt(0) === '.') {
              translationId = translateNamespace + translationId;
            }

            $translate(translationId, interpolateParams, translateInterpolation, defaultTranslationText, scope.translateLanguage)
              .then(function (translation) {
                applyTranslation(translation, scope, true, translateAttr);
              }, function (translationId) {
                applyTranslation(translationId, scope, false, translateAttr);
              });
          } else {
            // as an empty string cannot be translated, we can solve this using successful=false
            applyTranslation(translationId, scope, false, translateAttr);
          }
        };

        var applyTranslation = function (value, scope, successful, translateAttr) {
          if (!successful) {
            if (typeof scope.defaultText !== 'undefined') {
              value = scope.defaultText;
            }
          }
          if (translateAttr === 'translate') {
            // default translate into innerHTML
            if (successful || (!successful && !$translate.isKeepContent() && typeof iAttr.translateKeepContent === 'undefined')) {
              iElement.empty().append(scope.preText + value + scope.postText);
            }
            var globallyEnabled = $translate.isPostCompilingEnabled();
            var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
            var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
            if ((globallyEnabled && !locallyDefined) || locallyEnabled) {
              $compile(iElement.contents())(scope);
            }
          } else {
            // translate attribute
            var attributeName = iAttr.$attr[translateAttr];
            if (attributeName.substr(0, 5) === 'data-') {
              // ensure html5 data prefix is stripped
              attributeName = attributeName.substr(5);
            }
            attributeName = attributeName.substr(15);
            iElement.attr(attributeName, value);
          }
        };

        if (translateValuesExist || translateValueExist || iAttr.translateDefault) {
          scope.$watch('interpolateParams', updateTranslations, true);
        }

        // Replaced watcher on translateLanguage with event listener
        scope.$on('translateLanguageChanged', updateTranslations);

        // Ensures the text will be refreshed after the current language was changed
        // w/ $translate.use(...)
        var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);

        // ensure translation will be looked up at least one
        if (iElement.text().length) {
          if (iAttr.translate) {
            observeElementTranslation(iAttr.translate);
          } else {
            observeElementTranslation('');
          }
        } else if (iAttr.translate) {
          // ensure attribute will be not skipped
          observeElementTranslation(iAttr.translate);
        }
        updateTranslations();
        scope.$on('$destroy', unbind);
      };
    }
  };
}

/**
 * Returns the scope's namespace.
 * @private
 * @param scope
 * @returns {string}
 */
function getTranslateNamespace(scope) {
  'use strict';
  if (scope.translateNamespace) {
    return scope.translateNamespace;
  }
  if (scope.$parent) {
    return getTranslateNamespace(scope.$parent);
  }
}

translateDirective.displayName = 'translateDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translate-attr
 * @restrict A
 *
 * @description
 * Translates attributes like translate-attr-ATTR, but with an object like ng-class.
 * Internally it uses `translate` service to translate translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate-attr Object literal mapping attributes to translation ids.
 * @param {string=} translate-values Values to pass into the translation ids. Can be passed as object literal string.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{value: 5}" />

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}',
        }).preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
    <file name="scenario.js">
      it('should translate', function () {
        inject(function ($rootScope, $compile) {
          $rootScope.translationId = 'TRANSLATION_ID';

          element = $compile('<input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{ value: 5 }" />')($rootScope);
          $rootScope.$digest();
          expect(element.attr('placeholder)).toBe('Hello there!');
          expect(element.attr('title)).toBe('The following value is dynamic: 5');
        });
      });
    </file>
   </example>
 */
.directive('translateAttr', translateAttrDirective);
function translateAttrDirective($translate, $rootScope) {

  'use strict';

  return {
    restrict: 'A',
    priority: $translate.directivePriority(),
    link: function linkFn(scope, element, attr) {

      var translateAttr,
          translateValues,
          previousAttributes = {};

      // Main update translations function
      var updateTranslations = function () {
        angular.forEach(translateAttr, function (translationId, attributeName) {
          if (!translationId) {
            return;
          }
          previousAttributes[attributeName] = true;

          // if translation id starts with '.' and translateNamespace given, prepend namespace
          if (scope.translateNamespace && translationId.charAt(0) === '.') {
            translationId = scope.translateNamespace + translationId;
          }
          $translate(translationId, translateValues, attr.translateInterpolation, undefined, scope.translateLanguage)
            .then(function (translation) {
              element.attr(attributeName, translation);
            }, function (translationId) {
              element.attr(attributeName, translationId);
            });
        });

        // Removing unused attributes that were previously used
        angular.forEach(previousAttributes, function (flag, attributeName) {
          if (!translateAttr[attributeName]) {
            element.removeAttr(attributeName);
            delete previousAttributes[attributeName];
          }
        });
      };

      // Watch for attribute changes
      watchAttribute(
        scope,
        attr.translateAttr,
        function (newValue) { translateAttr = newValue; },
        updateTranslations
      );
      // Watch for value changes
      watchAttribute(
        scope,
        attr.translateValues,
        function (newValue) { translateValues = newValue; },
        updateTranslations
      );

      if (attr.translateValues) {
        scope.$watch(attr.translateValues, updateTranslations, true);
      }

      // Replaced watcher on translateLanguage with event listener
      scope.$on('translateLanguageChanged', updateTranslations);

      // Ensures the text will be refreshed after the current language was changed
      // w/ $translate.use(...)
      var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);

      updateTranslations();
      scope.$on('$destroy', unbind);
    }
  };
}

function watchAttribute(scope, attribute, valueCallback, changeCallback) {
  'use strict';
  if (!attribute) {
    return;
  }
  if (attribute.substr(0, 2) === '::') {
    attribute = attribute.substr(2);
  } else {
    scope.$watch(attribute, function(newValue) {
      valueCallback(newValue);
      changeCallback();
    }, true);
  }
  valueCallback(scope.$eval(attribute));
}

translateAttrDirective.displayName = 'translateAttrDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateCloak
 * @requires $translate
 * @restrict A
 *
 * $description
 * Adds a `translate-cloak` class name to the given element where this directive
 * is applied initially and removes it, once a loader has finished loading.
 *
 * This directive can be used to prevent initial flickering when loading translation
 * data asynchronously.
 *
 * The class name is defined in
 * {@link pascalprecht.translate.$translateProvider#cloakClassName $translate.cloakClassName()}.
 *
 * @param {string=} translate-cloak If a translationId is provided, it will be used for showing
 *                                  or hiding the cloak. Basically it relies on the translation
 *                                  resolve.
 */
.directive('translateCloak', translateCloakDirective);

function translateCloakDirective($translate, $rootScope) {

  'use strict';

  return {
    compile : function (tElement) {
      var applyCloak = function (element) {
          element.addClass($translate.cloakClassName());
        },
        removeCloak = function (element) {
          element.removeClass($translate.cloakClassName());
        };
      applyCloak(tElement);

      return function linkFn(scope, iElement, iAttr) {
        //Create bound functions that incorporate the active DOM element.
        var iRemoveCloak = removeCloak.bind(this, iElement), iApplyCloak = applyCloak.bind(this, iElement);
        if (iAttr.translateCloak && iAttr.translateCloak.length) {
          // Register a watcher for the defined translation allowing a fine tuned cloak
          iAttr.$observe('translateCloak', function (translationId) {
            $translate(translationId).then(iRemoveCloak, iApplyCloak);
          });
          $rootScope.$on('$translateChangeSuccess', function () {
            $translate(iAttr.translateCloak).then(iRemoveCloak, iApplyCloak);
          });
        } else {
          $translate.onReady(iRemoveCloak);
        }
      };
    }
  };
}

translateCloakDirective.displayName = 'translateCloakDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateNamespace
 * @restrict A
 *
 * @description
 * Translates given translation id either through attribute or DOM content.
 * Internally it uses `translate` filter to translate translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate namespace name which could be either string or interpolated string.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div translate-namespace="CONTENT">

        <div>
            <h1 translate>.HEADERS.TITLE</h1>
            <h1 translate>.HEADERS.WELCOME</h1>
        </div>

        <div translate-namespace=".HEADERS">
            <h1 translate>.TITLE</h1>
            <h1 translate>.WELCOME</h1>
        </div>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'CONTENT': {
            'HEADERS': {
                TITLE: 'Title'
            }
          },
          'CONTENT.HEADERS.WELCOME': 'Welcome'
        }).preferredLanguage('en');

      });

    </file>
   </example>
 */
.directive('translateNamespace', translateNamespaceDirective);

function translateNamespaceDirective() {

  'use strict';

  return {
    restrict: 'A',
    scope: true,
    compile: function () {
      return {
        pre: function (scope, iElement, iAttrs) {
          scope.translateNamespace = getTranslateNamespace(scope);

          if (scope.translateNamespace && iAttrs.translateNamespace.charAt(0) === '.') {
            scope.translateNamespace += iAttrs.translateNamespace;
          } else {
            scope.translateNamespace = iAttrs.translateNamespace;
          }
        }
      };
    }
  };
}

/**
 * Returns the scope's namespace.
 * @private
 * @param scope
 * @returns {string}
 */
function getTranslateNamespace(scope) {
  'use strict';
  if (scope.translateNamespace) {
    return scope.translateNamespace;
  }
  if (scope.$parent) {
    return getTranslateNamespace(scope.$parent);
  }
}

translateNamespaceDirective.displayName = 'translateNamespaceDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateLanguage
 * @restrict A
 *
 * @description
 * Forces the language to the directives in the underlying scope.
 *
 * @param {string=} translate language that will be negotiated.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div>

        <div>
            <h1 translate>HELLO</h1>
        </div>

        <div translate-language="de">
            <h1 translate>HELLO</h1>
        </div>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider
          .translations('en',{
            'HELLO': 'Hello world!'
          })
          .translations('de',{
            'HELLO': 'Hallo Welt!'
          })
          .preferredLanguage('en');

      });

    </file>
   </example>
 */
.directive('translateLanguage', translateLanguageDirective);

function translateLanguageDirective() {

  'use strict';

  return {
    restrict: 'A',
    scope: true,
    compile: function () {
      return function linkFn(scope, iElement, iAttrs) {

        iAttrs.$observe('translateLanguage', function (newTranslateLanguage) {
          scope.translateLanguage = newTranslateLanguage;
        });

        scope.$watch('translateLanguage', function(){
          scope.$broadcast('translateLanguageChanged');
        });
      };
    }
  };
}

translateLanguageDirective.displayName = 'translateLanguageDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc filter
 * @name pascalprecht.translate.filter:translate
 * @requires $parse
 * @requires pascalprecht.translate.$translate
 * @function
 *
 * @description
 * Uses `$translate` service to translate contents. Accepts interpolate parameters
 * to pass dynamized values though translation.
 *
 * @param {string} translationId A translation id to be translated.
 * @param {*=} interpolateParams Optional object literal (as hash or string) to pass values into translation.
 *
 * @returns {string} Translated text.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre>{{ 'TRANSLATION_ID' | translate }}</pre>
        <pre>{{ translationId | translate }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:'{value: 5}' }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:values }}</pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en', {
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}'
        });
        $translateProvider.preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
   </example>
 */
.filter('translate', translateFilterFactory);

function translateFilterFactory($parse, $translate) {

  'use strict';

  var translateFilter = function (translationId, interpolateParams, interpolation, forceLanguage) {
    if (!angular.isObject(interpolateParams)) {
      var ctx = this || {
        '__SCOPE_IS_NOT_AVAILABLE': 'More info at https://github.com/angular/angular.js/commit/8863b9d04c722b278fa93c5d66ad1e578ad6eb1f'
        };
      interpolateParams = $parse(interpolateParams)(ctx);
    }

    return $translate.instant(translationId, interpolateParams, interpolation, forceLanguage);
  };

  if ($translate.statefulFilter()) {
    translateFilter.$stateful = true;
  }

  return translateFilter;
}

translateFilterFactory.displayName = 'translateFilterFactory';

angular.module('pascalprecht.translate')

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translationCache
 * @requires $cacheFactory
 *
 * @description
 * The first time a translation table is used, it is loaded in the translation cache for quick retrieval. You
 * can load translation tables directly into the cache by consuming the
 * `$translationCache` service directly.
 *
 * @return {object} $cacheFactory object.
 */
  .factory('$translationCache', $translationCache);

function $translationCache($cacheFactory) {

  'use strict';

  return $cacheFactory('translations');
}

$translationCache.displayName = '$translationCache';
return 'pascalprecht.translate';

}));


/***/ }),
/* 73 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./src/i18n/locale-en.json ***!
  \*********************************/
/***/ (function(module, exports) {

module.exports = {
	"thError": {
		"error": "We had trouble loading your content.",
		"instructions": "Try reloading the page."
	}
};

/***/ }),
/* 74 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./src/lib/thActionBar/index.coffee ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thActionBar.component */ 146);

__webpack_require__(/*! ./thActionBarDelegate.service */ 147);


/***/ }),
/* 75 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thActionBarBilling/index.coffee ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thActionBarBilling.directive */ 148);

__webpack_require__(/*! ./thActionBarBillingDelegate.service */ 149);

__webpack_require__(/*! ./thSelectableCollection.service */ 150);


/***/ }),
/* 76 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thAlert/index.coffee ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thAlertManager.service */ 152);

__webpack_require__(/*! ./thAlertAnchor.directive */ 151);


/***/ }),
/* 77 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thButton/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thButton.directive */ 153);


/***/ }),
/* 78 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/lib/thCheckbox/index.coffee ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thCheckbox.directive */ 154);


/***/ }),
/* 79 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./src/lib/thCompile/index.coffee ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thCompile.directive */ 155);


/***/ }),
/* 80 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./src/lib/thContentHeader/index.coffee ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thContentHeader.directive */ 156);


/***/ }),
/* 81 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/lib/thContextualMessage/index.coffee ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thContextualMessage.service */ 158);

__webpack_require__(/*! ./thContextualMessage.directive */ 157);


/***/ }),
/* 82 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/lib/thDefaults/index.coffee ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thDefaults.service */ 159);


/***/ }),
/* 83 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./src/lib/thDisclosure/index.coffee ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thDisclosureManager.service */ 161);

__webpack_require__(/*! ./thDisclosureToggle.directive */ 162);

__webpack_require__(/*! ./thDisclosureContent.directive */ 160);


/***/ }),
/* 84 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/lib/thDropdown/index.coffee ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thDropdown.directive */ 164);

__webpack_require__(/*! ./thItem.directive */ 165);

__webpack_require__(/*! ./thDivider.directive */ 163);


/***/ }),
/* 85 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thError/index.coffee ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thError.directive */ 166);


/***/ }),
/* 86 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thFilter/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./filters/ */ 175);

__webpack_require__(/*! ./thFilter.directive */ 192);

__webpack_require__(/*! ./thCustomFilterRow.directive */ 190);

__webpack_require__(/*! ./thCustomFilters.component */ 191);

__webpack_require__(/*! ./thSearchRow.directive */ 193);

__webpack_require__(/*! ./thStaticFilters.directive */ 194);

__webpack_require__(/*! ./thCustomFilterConverter.service */ 188);


/***/ }),
/* 87 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thInput/index.coffee ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thInput.directive */ 195);


/***/ }),
/* 88 */
/* unknown exports provided */
/* all exports used */
/*!*************************************!*\
  !*** ./src/lib/thLazy/index.coffee ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thLazyManager.service */ 197);

__webpack_require__(/*! ./thLazy.component */ 196);

__webpack_require__(/*! ./thMetaLoader.component */ 198);


/***/ }),
/* 89 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thLoader/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thLoader.directive */ 199);


/***/ }),
/* 90 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thModal/index.coffee ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thModalTitlebar/ */ 249);

__webpack_require__(/*! ./thModalManager.service */ 202);

__webpack_require__(/*! ./thModal.directive */ 200);

__webpack_require__(/*! ./thModalAnchor.directive */ 201);


/***/ }),
/* 91 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thPlural/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thPlural.filter */ 203);


/***/ }),
/* 92 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./src/lib/thPopover/index.coffee ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thPopoverManager.service */ 207);

__webpack_require__(/*! ./thPopover.directive */ 205);

__webpack_require__(/*! ./thPopoverUrl.directive */ 209);

__webpack_require__(/*! ./thPopoverContent.directive */ 206);

__webpack_require__(/*! ./thPopoverTarget.directive */ 208);


/***/ }),
/* 93 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./src/lib/thRadioGroup/index.coffee ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thRadioGroup.directive */ 211);

__webpack_require__(/*! ./thRadioButton.directive */ 210);


/***/ }),
/* 94 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thSelect/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thSelect.directive */ 212);


/***/ }),
/* 95 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thSwitch/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thSwitch.directive */ 213);


/***/ }),
/* 96 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thTable/index.coffee ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thTable.directive */ 215);

__webpack_require__(/*! ./thTableCell.directive */ 217);

__webpack_require__(/*! ./thTableRow.directive */ 223);

__webpack_require__(/*! ./thSimpleTableDelegate.service */ 214);

__webpack_require__(/*! ./thTable.service */ 216);

__webpack_require__(/*! ./thTableDelegate.service */ 218);

__webpack_require__(/*! ./thTableHeader.service */ 220);

__webpack_require__(/*! ./thTableFooter.service */ 219);

__webpack_require__(/*! ./thTablePagination.service */ 222);

__webpack_require__(/*! ./thTableSort.service */ 224);


/***/ }),
/* 97 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thTabset/index.coffee ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thTabset.directive */ 226);

__webpack_require__(/*! ./thTab.directive */ 225);


/***/ }),
/* 98 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/lib/thTextarea/index.coffee ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thTextarea.directive */ 227);


/***/ }),
/* 99 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/lib/thTruncate/index.coffee ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thTruncate.directive */ 228);


/***/ }),
/* 100 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./src/lib/thViewModel/index.coffee ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thViewModel.service */ 229);


/***/ }),
/* 101 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./src/lib/thWithFocus/index.coffee ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thWithFocus.directive */ 230);


/***/ }),
/* 102 */
/* unknown exports provided */
/* all exports used */
/*!******************************************!*\
  !*** ./src/lib/thWithLabel/index.coffee ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thWithLabel.directive */ 231);

__webpack_require__(/*! ./thWithSubtext.directive */ 232);


/***/ }),
/* 103 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./src/lib/thWithMessages/index.coffee ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thWithMessages.directive */ 234);

__webpack_require__(/*! ./thMessagesManager.service */ 233);


/***/ }),
/* 104 */
/* unknown exports provided */
/* all exports used */
/*!***********************************!*\
  !*** ./src/lib/services/index.ts ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
var utilities_service_1 = __webpack_require__(/*! ./utilities.service */ 235);
var validator_service_1 = __webpack_require__(/*! ./validator.service */ 69);
var data_source_service_1 = __webpack_require__(/*! ./data-source.service */ 67);
var scheduler_data_source_service_1 = __webpack_require__(/*! ./scheduler-data-source.service */ 68);
angular.module("ThemisComponents")
    .service("DataSource", data_source_service_1.default)
    .service("SchedulerDataSource", scheduler_data_source_service_1.default)
    .service("Utilities", utilities_service_1.default)
    .service("ValidatorService", validator_service_1.ValidatorService);


/***/ }),
/* 105 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************!*\
  !*** ./src/lib/thAutocomplete/index.ts ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
var autocomplete_component_1 = __webpack_require__(/*! ./autocomplete.component */ 236);
angular.module("ThemisComponents")
    .component("thAutocomplete", autocomplete_component_1.default);


/***/ }),
/* 106 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thDataTable/index.ts ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.grid.js */ 59);
var data_table_component_1 = __webpack_require__(/*! ./data-table.component */ 241);
var data_table_service_1 = __webpack_require__(/*! ./data-table.service */ 242);
var toolbar_component_1 = __webpack_require__(/*! ./toolbar/toolbar.component */ 243);
angular.module("ThemisComponents")
    .component("thDataTable", data_table_component_1.DataTableComponent)
    .component("thDataTableToolbar", toolbar_component_1.ToolbarComponent)
    .service("DataTableService", data_table_service_1.DataTableService);


/***/ }),
/* 107 */
/* unknown exports provided */
/* all exports used */
/*!***************************************!*\
  !*** ./src/lib/thDatePicker/index.ts ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
var thDatePicker_service_1 = __webpack_require__(/*! ./thDatePicker.service */ 245);
__webpack_require__(/*! ../services/validator.service */ 69);
__webpack_require__(/*! ./thDatePicker.component */ 244);
angular.module("ThemisComponents")
    .service("DatepickerService", thDatePicker_service_1.DatepickerService);


/***/ }),
/* 108 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./src/lib/thGrid/index.ts ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
var thRow_component_1 = __webpack_require__(/*! ./thRow.component */ 248);
var thColumn_component_1 = __webpack_require__(/*! ./thColumn.component */ 246);
angular.module("ThemisComponents")
    .component("thRow", thRow_component_1.default)
    .component("thColumn", thColumn_component_1.default);


/***/ }),
/* 109 */
/* unknown exports provided */
/* all exports used */
/*!**************************************!*\
  !*** ./src/lib/thScheduler/index.ts ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.scheduler.js */ 135);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.tooltip.js */ 142);
var scheduler_component_1 = __webpack_require__(/*! ./scheduler.component */ 254);
var calendar_entries_service_1 = __webpack_require__(/*! ./calendar-entries.service */ 251);
var calendar_data_source_service_1 = __webpack_require__(/*! ./calendars/calendar-data-source.service */ 252);
var calendars_component_1 = __webpack_require__(/*! ./calendars/calendars.component */ 253);
angular.module("ThemisComponents")
    .service("CalendarEntriesServiceFactory", calendar_entries_service_1.CalendarEntriesServiceFactory)
    .service("CalendarDataSourceFactory", calendar_data_source_service_1.CalendarDataSourceFactory)
    .component("thCalendars", calendars_component_1.CalendarsComponent)
    .component("thScheduler", scheduler_component_1.SchedulerComponent);


/***/ }),
/* 110 */,
/* 111 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/vendor_overrides/@progress/kendo-ui/js/kendo.angular.js ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(572);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 572:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function() {

	var __meta__ = { // jshint ignore:line
	    id: "angular",
	    name: "AngularJS Directives",
	    category: "framework",
	    description: "Adds Kendo UI for AngularJS directives",
	    depends: [ "core" ],
	    defer: true
	};

	(function ($, angular, undefined) {
	    "use strict";

	    // Angular2 exposes a global angular object, but it does not have an injector...
	    if (!angular || !angular.injector) {
	        return;
	    }

	    /*jshint eqnull:true,loopfunc:true,-W052,-W028  */

	    var module = angular.module('kendo.directives', []),
	        $injector = angular.injector(['ng']),
	        $parse = $injector.get('$parse'),
	        $timeout = $injector.get('$timeout'),
	        $defaultCompile,
	        $log = $injector.get('$log');

	    function withoutTimeout(f) {
	        var save = $timeout;
	        try {
	            $timeout = function(f){ return f(); };
	            return f();
	        } finally {
	            $timeout = save;
	        }
	    }

	    var OPTIONS_NOW;

	    var createDataSource = (function() {
	        var types = {
	            TreeList    : 'TreeListDataSource',
	            TreeView    : 'HierarchicalDataSource',
	            Scheduler   : 'SchedulerDataSource',
	            PivotGrid   : 'PivotDataSource',
	            PivotConfigurator   : 'PivotDataSource',
	            PanelBar    : 'HierarchicalDataSource',
	            Menu        : "$PLAIN",
	            ContextMenu : "$PLAIN"
	        };
	        var toDataSource = function(dataSource, type) {
	            if (type == '$PLAIN') {
	                return dataSource;
	            }
	            return kendo.data[type].create(dataSource);
	        };
	        return function(scope, element, role, source) {
	            var type = types[role] || 'DataSource';
	            var current = scope.$eval(source);
	            var ds = toDataSource(current, type);

	            scope.$watch(source, function(mew) {
	                var widget = kendoWidgetInstance(element);

	                if (widget && typeof widget.setDataSource == "function") {
	                    if (mew !== current) {
	                        var ds = toDataSource(mew, type);
	                        widget.setDataSource(ds);
	                        current = mew;
	                    }
	                }
	            });
	            return ds;
	        };
	    }());

	    var ignoredAttributes = {
	        kDataSource : true,
	        kOptions    : true,
	        kRebind     : true,
	        kNgModel    : true,
	        kNgDelay    : true
	    };

	    var ignoredOwnProperties = {
	        // XXX: other names to ignore here?
	        name    : true,
	        title   : true,
	        style   : true
	    };

	    function createWidget(scope, element, attrs, widget, origAttr, controllers) {
	        /* jshint latedef: false */
	        if (!(element instanceof jQuery)) {
	            throw new Error("The Kendo UI directives require jQuery to be available before AngularJS. Please include jquery before angular in the document.");
	        }

	        var kNgDelay = attrs.kNgDelay,
	            delayValue = scope.$eval(kNgDelay);

	        controllers = controllers || [];

	        var ngModel = controllers[0],
	            ngForm = controllers[1];

	        var ctor = $(element)[widget];

	        if (!ctor) {
	            window.console.error("Could not find: " + widget);
	            return null;
	        }

	        var parsed = parseOptions(scope, element, attrs, widget, ctor);

	        var options = parsed.options;

	        if (parsed.unresolved.length) {
	            var promises = [];

	            for (var i = 0, len = parsed.unresolved.length; i < len; i++) {

	                var unresolved = parsed.unresolved[i];

	                var promise = $.Deferred(function(d) {
	                    var unwatch = scope.$watch(unresolved.path, function(newValue) {
	                        if (newValue !== undefined) {
	                            unwatch();
	                            d.resolve();
	                        }
	                    });
	                }).promise();

	                promises.push(promise);
	            }

	            $.when.apply(null, promises).then(createIt);

	            return;
	        }

	        if (kNgDelay && !delayValue) {
	            var root = scope.$root || scope;

	            var register = function() {
	                var unregister = scope.$watch(kNgDelay, function(newValue) {
	                        if (newValue !== undefined) {
	                        unregister();
	                        // remove subsequent delays, to make ng-rebind work
	                        element.removeAttr(attrs.$attr.kNgDelay);
	                        kNgDelay = null;
	                        $timeout(createIt); // XXX: won't work without `timeout` ;-\
	                    }
	                });
	            };

	            // WARNING: the watchers should be registered in the digest cycle.
	            // the fork here is for the timeout/non-timeout initiated widgets.
	            if (/^\$(digest|apply)$/.test(root.$$phase)) {
	                register();
	            } else {
	                scope.$apply(register);
	            }

	            return;
	        } else {
	            return createIt();
	        }

	        function createIt() {
	            var originalElement;

	            if (attrs.kRebind) {
	                originalElement = $($(element)[0].cloneNode(true));
	            }

	            // re-parse the options here.
	            options = parseOptions(scope, element, attrs, widget, ctor).options;

	            if (element.is("select")) {
	                (function(options){
	                    if (options.length > 0) {
	                        var first = $(options[0]);
	                        if (!/\S/.test(first.text()) && /^\?/.test(first.val())) {
	                            first.remove();
	                        }
	                    }
	                }(element[0].options));
	            }

	            var object = ctor.call(element, OPTIONS_NOW = options).data(widget);

	            exposeWidget(object, scope, attrs, widget, origAttr);

	            scope.$emit("kendoWidgetCreated", object);

	            var destroyRegister = destroyWidgetOnScopeDestroy(scope, object);

	            if (attrs.kRebind) {
	                setupRebind(object, scope, element, originalElement, attrs.kRebind, destroyRegister, attrs);
	            }

	            if (attrs.kNgDisabled) {
	                var kNgDisabled = attrs.kNgDisabled;
	                var isDisabled = scope.$eval(kNgDisabled);
	                if (isDisabled) {
	                    object.enable(!isDisabled);
	                }
	                bindToKNgDisabled(object, scope, element, kNgDisabled);
	            }

	            if (attrs.kNgReadonly) {
	                var kNgReadonly = attrs.kNgReadonly;
	                var isReadonly = scope.$eval(kNgReadonly);
	                if (isReadonly) {
	                    object.readonly(isReadonly);
	                }
	                bindToKNgReadonly(object, scope, element, kNgReadonly);
	            }

	            // kNgModel is used for the "logical" value
	            if (attrs.kNgModel) {
	                bindToKNgModel(object, scope, attrs.kNgModel);
	            }

	            // 2 way binding: ngModel <-> widget.value()
	            if (ngModel) {
	                bindToNgModel(object, scope, element, ngModel, ngForm);
	            }

	            if (object) {
	                propagateClassToWidgetWrapper(object, element);
	            }

	            return object;
	        }
	    }


	    function parseOptions(scope, element, attrs, widget, ctor) {
	        var role = widget.replace(/^kendo/, '');
	        var unresolved = [];
	        var optionsPath = attrs.kOptions || attrs.options;
	        var optionsValue = scope.$eval(optionsPath);

	        if (optionsPath && optionsValue === undefined) {
	            unresolved.push({ option: "options", path: optionsPath });
	        }

	        var options = angular.extend({}, attrs.defaultOptions, optionsValue);

	        function addOption(name, value) {
	            var scopeValue = angular.copy(scope.$eval(value));
	            if (scopeValue === undefined) {
	                unresolved.push({ option: name, path: value });
	            } else {
	                options[name] = scopeValue;
	            }
	        }


	        var widgetOptions = ctor.widget.prototype.options;
	        var widgetEvents = ctor.widget.prototype.events;


	        $.each(attrs, function(name, value) {
	            if (name === "source" || name === "kDataSource" || name === "kScopeField" || name === "scopeField") {
	                return;
	            }

	            var dataName = "data" + name.charAt(0).toUpperCase() + name.slice(1);

	            if (name.indexOf("on") === 0) { // let's search for such event.
	                var eventKey = name.replace(/^on./, function(prefix) {
	                    return prefix.charAt(2).toLowerCase();
	                });

	                if (widgetEvents.indexOf(eventKey) > -1) {
	                    options[eventKey] = value;
	                }
	            } // don't elsif here - there are on* options

	            if (widgetOptions.hasOwnProperty(dataName)) {
	                addOption(dataName, value);
	            } else if (widgetOptions.hasOwnProperty(name) && !ignoredOwnProperties[name]) {
	                addOption(name, value);
	            } else if (!ignoredAttributes[name]) {
	                var match = name.match(/^k(On)?([A-Z].*)/);
	                if (match) {
	                    var optionName = match[2].charAt(0).toLowerCase() + match[2].slice(1);
	                    if (match[1] && name != "kOnLabel" // XXX: k-on-label can be used on MobileSwitch :-\
	                    ) {
	                        options[optionName] = value;
	                    } else {
	                        if (name == "kOnLabel") {
	                            optionName = "onLabel"; // XXX: that's awful.
	                        }
	                        addOption(optionName, value);
	                    }
	                }
	            }
	        });

	        // parse the datasource attribute
	        var dataSource = attrs.kDataSource || attrs.source;

	        if (dataSource) {
	            options.dataSource = createDataSource(scope, element, role, dataSource);
	        }

	        // deepExtend in kendo.core (used in Editor) will fail with stack
	        // overflow if we don't put it in an array :-\
	        options.$angular = [ scope ];

	        return {
	            options: options,
	            unresolved: unresolved
	        };
	    }

	    function bindToKNgDisabled(widget, scope, element, kNgDisabled) {
	        if ((kendo.ui.PanelBar && widget instanceof kendo.ui.PanelBar) || (kendo.ui.Menu && widget instanceof kendo.ui.Menu)) {
	            $log.warn("k-ng-disabled specified on a widget that does not have the enable() method: " + (widget.options.name));
	            return;
	        }
	        scope.$watch(kNgDisabled, function(newValue, oldValue) {
	            if (newValue != oldValue) {
	                widget.enable(!newValue);
	            }
	        });
	    }

	    function bindToKNgReadonly(widget, scope, element, kNgReadonly) {
	        if (typeof widget.readonly != "function") {
	            $log.warn("k-ng-readonly specified on a widget that does not have the readonly() method: " + (widget.options.name));
	            return;
	        }
	        scope.$watch(kNgReadonly, function(newValue, oldValue) {
	            if (newValue != oldValue) {
	                widget.readonly(newValue);
	            }
	        });
	    }

	    function exposeWidget(widget, scope, attrs, kendoWidget, origAttr) {
	        if (attrs[origAttr]) {
	            var set = $parse(attrs[origAttr]).assign;
	            if (set) {
	                // set the value of the expression to the kendo widget object to expose its api
	                set(scope, widget);
	            } else {
	                throw new Error(origAttr + ' attribute used but expression in it is not assignable: ' + attrs[kendoWidget]);
	            }
	        }
	    }

	    function formValue(element) {
	        if (/checkbox|radio/i.test(element.attr("type"))) {
	            return element.prop("checked");
	        }
	        return element.val();
	    }

	    var formRegExp = /^(input|select|textarea)$/i;

	    function isForm(element) {
	        return formRegExp.test(element[0].tagName);
	    }

	    function bindToNgModel(widget, scope, element, ngModel, ngForm) {
	        if (!widget.value) {
	            return;
	        }

	        var value;
	        // Some widgets trigger "change" on the input field
	        // and this would result in two events sent (#135)
	        var haveChangeOnElement = false;

	        if (isForm(element)) {
	            value = function() {
	                return formValue(element);
	            };
	        } else {
	            value = function() {
	                return widget.value();
	            };
	        }

	        // Angular will invoke $render when the view needs to be updated with the view value.
	        var viewRender = function() {
	            // Update the widget with the view value.

	            // delaying with setTimout for cases where the datasource is set thereafter.
	            // https://github.com/kendo-labs/angular-kendo/issues/304
	            var val = ngModel.$viewValue;
	            if (val === undefined) {
	                val = ngModel.$modelValue;
	            }

	            if (val === undefined) {
	                val = null;
	            }

	            haveChangeOnElement = true;
	            setTimeout(function(){
	                haveChangeOnElement = false;
	                if (widget) { // might have been destroyed in between. :-(
	                    var kNgModel = scope[widget.element.attr("k-ng-model")];

	                    if (kNgModel) {
	                        val = kNgModel;
	                    }

	                    if (widget.options.autoBind === false && !widget.listView.bound()) {
	                        if (val) {
	                            widget.value(val);
	                        }
	                    } else {
	                        widget.value(val);
	                    }
	                }
	            }, 0);
	        };

	        ngModel.$render = viewRender;
	        setTimeout(function() {
	            if (ngModel.$render !== viewRender) {
	                ngModel.$render = viewRender;
	                ngModel.$render();
	            }
	        });

	        if (isForm(element)) {
	            element.on("change", function() {
	                haveChangeOnElement = true;
	            });
	        }

	        var onChange = function(pristine) {
	            return function() {
	                var formPristine;
	                if (haveChangeOnElement) {
	                    return;
	                }
	                if (pristine && ngForm) {
	                    formPristine = ngForm.$pristine;
	                }
	                ngModel.$setViewValue(value());
	                if (pristine) {
	                    ngModel.$setPristine();
	                    if (formPristine) {
	                        ngForm.$setPristine();
	                    }
	                }
	                digest(scope);
	            };
	        };

	        widget.first("change", onChange(false));
	        widget.first("spin", onChange(false));

	        if (!(kendo.ui.AutoComplete && widget instanceof kendo.ui.AutoComplete)) {
	            widget.first("dataBound", onChange(true));
	        }

	        var currentVal = value();

	        // if the model value is undefined, then we set the widget value to match ( == null/undefined )
	        // In telerik/kendo-ui-core#1027 we discovered that after the timeout the $viewValue arives as NaN in some weird, default form.
	        // Hence the check below.
	        if (!isNaN(ngModel.$viewValue) && currentVal != ngModel.$viewValue) {
	            if (!ngModel.$isEmpty(ngModel.$viewValue)) {
	                widget.value(ngModel.$viewValue);
	            } else if (currentVal != null && currentVal !== "" && currentVal != ngModel.$viewValue) {
	                ngModel.$setViewValue(currentVal);
	            }
	        }

	        ngModel.$setPristine();
	    }

	    function bindToKNgModel(widget, scope, kNgModel) {
	        if (typeof widget.value != "function") {
	            $log.warn("k-ng-model specified on a widget that does not have the value() method: " + (widget.options.name));
	            return;
	        }

	        var form  = $(widget.element).parents("form");
	        var ngForm = kendo.getter(form.attr("name"), true)(scope);
	        var getter = $parse(kNgModel);
	        var setter = getter.assign;
	        var updating = false;

	        var valueIsCollection = kendo.ui.MultiSelect && widget instanceof kendo.ui.MultiSelect;

	        var length = function(value) {
	            //length is irrelevant when value is not collection
	            return value && valueIsCollection ? value.length : 0;
	        };

	        var currentValueLength = length(getter(scope));

	        widget.$angular_setLogicValue(getter(scope));

	        // keep in sync
	        var watchHandler = function(newValue, oldValue) {
	            if (newValue === undefined) {
	                // because widget's value() method usually checks if the new value is undefined,
	                // in which case it returns the current value rather than clearing the field.
	                // https://github.com/telerik/kendo-ui-core/issues/299
	                newValue = null;
	            }

	            //compare values by reference if a collection
	            if (updating || (newValue == oldValue && length(newValue) == currentValueLength)) {
	                return;
	            }

	            currentValueLength = length(newValue);
	            widget.$angular_setLogicValue(newValue);
	        };

	        if (valueIsCollection) {
	            scope.$watchCollection(kNgModel, watchHandler);
	        } else {
	            scope.$watch(kNgModel, watchHandler);
	        }

	        var changeHandler = function() {
	            updating = true;

	            if (ngForm && ngForm.$pristine) {
	                ngForm.$setDirty();
	            }

	            digest(scope, function(){
	                setter(scope, widget.$angular_getLogicValue());
	                currentValueLength = length(getter(scope));
	            });

	            updating = false;
	        };

	        widget.first("change", changeHandler);
	        widget.first("spin", changeHandler);
	    }

	    function destroyWidgetOnScopeDestroy(scope, widget) {
	        var deregister = scope.$on("$destroy", function() {
	            deregister();
	            if (widget) {
	                kendo.destroy(widget.element);
	                widget = null;
	            }
	        });

	        return deregister;
	    }

	    // mutation observers - propagate the original
	    // element's class to the widget wrapper.
	    function propagateClassToWidgetWrapper(widget, element) {
	        if (!(window.MutationObserver && widget.wrapper)) {
	            return;
	        }

	        var prevClassList = [].slice.call($(element)[0].classList);

	        var mo = new MutationObserver(function(changes){
	            suspend();    // make sure we don't trigger a loop
	            if (!widget) {
	                return;
	            }

	            changes.forEach(function(chg){
	                var w = $(widget.wrapper)[0];
	                switch (chg.attributeName) {

	                    case "class":
	                        // sync classes to the wrapper element
	                        var currClassList = [].slice.call(chg.target.classList);
	                        currClassList.forEach(function(cls){
	                            if (prevClassList.indexOf(cls) < 0) {
	                                w.classList.add(cls);
	                                if (kendo.ui.ComboBox && widget instanceof kendo.ui.ComboBox) { // https://github.com/kendo-labs/angular-kendo/issues/356
	                                    widget.input[0].classList.add(cls);
	                                }
	                            }
	                        });
	                        prevClassList.forEach(function(cls){
	                            if (currClassList.indexOf(cls) < 0) {
	                                w.classList.remove(cls);
	                                if (kendo.ui.ComboBox && widget instanceof kendo.ui.ComboBox) { // https://github.com/kendo-labs/angular-kendo/issues/356
	                                    widget.input[0].classList.remove(cls);
	                                }
	                            }
	                        });
	                        prevClassList = currClassList;
	                        break;

	                    case "disabled":
	                        if (typeof widget.enable == "function" && !widget.element.attr("readonly")) {
	                            widget.enable(!$(chg.target).attr("disabled"));
	                        }
	                        break;

	                    case "readonly":
	                        if (typeof widget.readonly == "function" && !widget.element.attr("disabled")) {
	                            widget.readonly(!!$(chg.target).attr("readonly"));
	                        }
	                        break;
	                }
	            });

	            resume();
	        });

	        function suspend() {
	            mo.disconnect();
	        }

	        function resume() {
	            mo.observe($(element)[0], { attributes: true });
	        }

	        resume();
	        widget.first("destroy", suspend);
	    }

	    function setupRebind(widget, scope, element, originalElement, rebindAttr, destroyRegister, attrs) {
	        // watch for changes on the expression passed in the k-rebind attribute
	        var unregister = scope.$watch(rebindAttr, function(newValue, oldValue) {
	            if (!widget._muteRebind && newValue !== oldValue) {
	                unregister(); // this watcher will be re-added if we compile again!

	                if (attrs._cleanUp) {
	                    attrs._cleanUp();
	                }

	                var templateOptions = WIDGET_TEMPLATE_OPTIONS[widget.options.name];

	                if (templateOptions) {
	                    templateOptions.forEach(function(name) {
	                        var templateContents = scope.$eval(attrs["k" + name]);

	                        if (templateContents) {
	                            originalElement.append($(templateContents).attr(kendo.toHyphens("k" + name), ""));
	                        }
	                    });
	                }

	                var _wrapper = $(widget.wrapper)[0];
	                var _element = $(widget.element)[0];
	                var isUpload = widget.options.name === "Upload";

	                if (isUpload) {
	                    element = $(_element);
	                }

	                var compile = element.injector().get("$compile");
	                widget._destroy();

	                if (destroyRegister) {
	                    destroyRegister();
	                }

	                widget = null;

	                if (_element) {
	                    if (_wrapper) {
	                        _wrapper.parentNode.replaceChild(_element, _wrapper);
	                    }
	                    $(element).replaceWith(originalElement);
	                }

	                compile(originalElement)(scope);
	            }
	        }, true); // watch for object equality. Use native or simple values.
	        digest(scope);
	    }

	    function bind(f, obj) {
	        return function(a, b) {
	            return f.call(obj, a, b);
	        };
	    }

	    function setTemplate(key, value) {
	        this[key] = kendo.stringify(value); // jshint ignore:line
	    }

	    module.factory('directiveFactory', [ '$compile', function(compile) {
	        var kendoRenderedTimeout;
	        var RENDERED = false;

	        // caching $compile for the dirty hack upstairs. This is awful, but we happen to have elements outside of the bootstrapped root :(.
	        $defaultCompile = compile;

	        var create = function(role, origAttr) {
	            return {
	                // Parse the directive for attributes and classes
	                restrict: "AC",
	                require: [ "?ngModel", "^?form" ],
	                scope: false,

	                controller: [ '$scope', '$attrs', '$element', function($scope, $attrs) {
	                    this.template = bind(setTemplate, $attrs);
	                    $attrs._cleanUp = bind(function(){
	                        this.template = null;
	                        $attrs._cleanUp = null;
	                    }, this);
	                }],

	                link: function(scope, element, attrs, controllers) {
	                    var $element = $(element);

	                    // we must remove data-kendo-widget-name attribute because
	                    // it breaks kendo.widgetInstance; can generate all kinds
	                    // of funny issues like
	                    //
	                    //   https://github.com/kendo-labs/angular-kendo/issues/167
	                    //
	                    // but we still keep the attribute without the
	                    // `data-` prefix, so k-rebind would work.
	                    var roleattr = role.replace(/([A-Z])/g, "-$1");

	                    $element.attr(roleattr, $element.attr("data-" + roleattr));
	                    $element[0].removeAttribute("data-" + roleattr);

	                    // #vendor-override
	                    var widget = createWidget(scope, $element, attrs, role, origAttr, controllers);

	                    if (!widget) {
	                        return;
	                    }

	                    if (kendoRenderedTimeout) {
	                        clearTimeout(kendoRenderedTimeout);
	                    }

	                    kendoRenderedTimeout = setTimeout(function() {
	                        scope.$emit("kendoRendered");
	                        if (!RENDERED) {
	                            RENDERED = true;
	                            // #vendor-override
	                            // $("form").each(function(){
	                            //     var form = $(this).controller("form");
	                            //     if (form) {
	                            //         form.$setPristine();
	                            //     }
	                            // });
	                        }
	                    });
	                }
	            };
	        };

	        return {
	            create: create
	        };
	    }]);

	    var TAGNAMES = {
	        Editor         : "textarea",
	        NumericTextBox : "input",
	        DatePicker     : "input",
	        DateTimePicker : "input",
	        TimePicker     : "input",
	        AutoComplete   : "input",
	        ColorPicker    : "input",
	        MaskedTextBox  : "input",
	        MultiSelect    : "input",
	        Upload         : "input",
	        Validator      : "form",
	        Button         : "button",
	        MobileButton        : "a",
	        MobileBackButton    : "a",
	        MobileDetailButton  : "a",
	        ListView       : "ul",
	        MobileListView: "ul",
	        PanelBar       : "ul",
	        TreeView       : "ul",
	        Menu           : "ul",
	        ContextMenu    : "ul",
	        ActionSheet    : "ul"
	    };

	    var SKIP_SHORTCUTS = [
	        'MobileView',
	        'MobileDrawer',
	        'MobileLayout',
	        'MobileSplitView',
	        'MobilePane',
	        'MobileModalView'
	    ];

	    var MANUAL_DIRECTIVES = [
	        'MobileApplication',
	        'MobileView',
	        'MobileModalView',
	        'MobileLayout',
	        'MobileActionSheet',
	        'MobileDrawer',
	        'MobileSplitView',
	        'MobilePane',
	        'MobileScrollView',
	        'MobilePopOver'
	    ];

	    angular.forEach(['MobileNavBar', 'MobileButton', 'MobileBackButton', 'MobileDetailButton', 'MobileTabStrip', 'MobileScrollView', 'MobileScroller'], function(widget) {
	        MANUAL_DIRECTIVES.push(widget);
	        widget = "kendo" + widget;
	        module.directive(widget, function() {
	            return {
	                restrict: "A",
	                link: function(scope, element, attrs) {
	                    createWidget(scope, element, attrs, widget, widget);
	                }
	            };
	        });
	    });

	    function createDirectives(klass, isMobile) {
	        function make(directiveName, widgetName) {
	            module.directive(directiveName, [
	                "directiveFactory",
	                function(directiveFactory) {
	                    return directiveFactory.create(widgetName, directiveName);
	                }
	            ]);
	        }

	        var name = isMobile ? "Mobile" : "";
	        name += klass.fn.options.name;

	        var className = name;
	        var shortcut = "kendo" + name.charAt(0) + name.substr(1).toLowerCase();
	        name = "kendo" + name;

	        // <kendo-numerictextbox>-type directives
	        var dashed = name.replace(/([A-Z])/g, "-$1");

	        if (SKIP_SHORTCUTS.indexOf(name.replace("kendo", "")) == -1) {
	            var names = name === shortcut ? [ name ] : [ name, shortcut ];
	            angular.forEach(names, function(directiveName) {
	                module.directive(directiveName, function(){
	                    return {
	                        restrict : "E",
	                        replace  : true,
	                        template : function(element, attributes) {
	                            var tag = TAGNAMES[className] || "div";
	                            var scopeField = attributes.kScopeField || attributes.scopeField;

	                            return "<" + tag + " " + dashed + (scopeField ? ('="' + scopeField + '"') : "") + ">" + element.html() + "</" + tag + ">";
	                        }
	                    };
	                });
	            });
	        }

	        if (MANUAL_DIRECTIVES.indexOf(name.replace("kendo", "")) > -1) {
	            return;
	        }

	        // here name should be like kendoMobileListView so kendo-mobile-list-view works,
	        // and shortcut like kendoMobilelistview, for kendo-mobilelistview

	        make(name, name);
	        if (shortcut != name) {
	            make(shortcut, name);
	        }

	    }

	    /* -----[ utils ]----- */

	    function kendoWidgetInstance(el) {
	        el = $(el);
	        return kendo.widgetInstance(el, kendo.ui) ||
	            kendo.widgetInstance(el, kendo.mobile.ui) ||
	            kendo.widgetInstance(el, kendo.dataviz.ui);
	    }

	    function digest(scope, func) {
	        var root = scope.$root || scope;
	        var isDigesting = /^\$(digest|apply)$/.test(root.$$phase);
	        if (func) {
	            if (isDigesting) {
	                func();
	            } else {
	                root.$apply(func);
	            }
	        } else if (!isDigesting) {
	            root.$digest();
	        }
	    }

	    function destroyScope(scope, el) {
	        scope.$destroy();
	        if (el) {
	            // prevent leaks. https://github.com/kendo-labs/angular-kendo/issues/237
	            $(el)
	                .removeData("$scope")
	                .removeData("$$kendoScope")
	                .removeData("$isolateScope")
	                .removeData("$isolateScopeNoTemplate")
	                .removeClass("ng-scope");
	        }
	    }

	    var pendingPatches = [];

	    // defadvice will patch a class' method with another function.  That
	    // function will be called in a context containing `next` (to call
	    // the next method) and `object` (a reference to the original
	    // object).
	    function defadvice(klass, methodName, func) {
	        if ($.isArray(klass)) {
	            return angular.forEach(klass, function(klass){
	                defadvice(klass, methodName, func);
	            });
	        }
	        if (typeof klass == "string") {
	            var a = klass.split(".");
	            var x = kendo;
	            while (x && a.length > 0) {
	                x = x[a.shift()];
	            }
	            if (!x) {
	                pendingPatches.push([ klass, methodName, func ]);
	                return false;
	            }
	            klass = x.prototype;
	        }
	        var origMethod = klass[methodName];
	        klass[methodName] = function() {
	            var self = this, args = arguments;
	            return func.apply({
	                self: self,
	                next: function() {
	                    return origMethod.apply(self, arguments.length > 0 ? arguments : args);
	                }
	            }, args);
	        };
	        return true;
	    }

	    kendo.onWidgetRegistered(function(entry){
	        pendingPatches = $.grep(pendingPatches, function(args){
	            return !defadvice.apply(null, args);
	        });
	        createDirectives(entry.widget, entry.prefix == "Mobile");
	    });

	    /* -----[ Customize widgets for Angular ]----- */

	    defadvice([ "ui.Widget", "mobile.ui.Widget" ], "angular", function(cmd, arg){
	        var self = this.self;
	        if (cmd == "init") {
	            // `arg` here should be the widget options.
	            // the Chart doesn't send the options to Widget::init in constructor
	            // hence the OPTIONS_NOW hack (initialized in createWidget).
	            if (!arg && OPTIONS_NOW) {
	                arg = OPTIONS_NOW;
	            }
	            OPTIONS_NOW = null;
	            if (arg && arg.$angular) {
	                self.$angular_scope = arg.$angular[0];
	                self.$angular_init(self.element, arg);
	            }
	            return;
	        }

	        var scope = self.$angular_scope;

	        if (scope) {
	            withoutTimeout(function(){
	                var x = arg(), elements = x.elements, data = x.data;
	                if (elements.length > 0) {
	                    switch (cmd) {

	                      case "cleanup":
	                        angular.forEach(elements, function(el){
	                            var itemScope = $(el).data("$$kendoScope");

	                            if (itemScope && itemScope !== scope && itemScope.$$kendoScope) {
	                                destroyScope(itemScope, el);
	                            }
	                        });
	                        break;

	                      case "compile":
	                        // #vendor-override
	                        var injector = undefined;
	                        try {
	                            injector = self.element.injector();
	                        } catch(err) {
	                            // falls back to $defaultCompile below
	                        }
	                        var compile = injector ? injector.get("$compile") : $defaultCompile;

	                        angular.forEach(elements, function(el, i){
	                            var itemScope;
	                            if (x.scopeFrom) {
	                                itemScope = x.scopeFrom;
	                            } else {
	                                var vars = data && data[i];
	                                if (vars !== undefined) {
	                                    itemScope = $.extend(scope.$new(), vars);
	                                    itemScope.$$kendoScope = true;
	                                } else {
	                                    itemScope = scope;
	                                }
	                            }

	                            $(el).data("$$kendoScope", itemScope);
	                            compile(el)(itemScope);
	                        });
	                        digest(scope);
	                        break;
	                    }
	                }
	            });
	        }
	    });

	    defadvice("ui.Widget", "$angular_getLogicValue", function(){
	        return this.self.value();
	    });

	    defadvice("ui.Widget", "$angular_setLogicValue", function(val){
	        this.self.value(val);
	    });

	    defadvice("ui.Select", "$angular_getLogicValue", function(){
	        var item = this.self.dataItem(),
	            valueField = this.self.options.dataValueField;

	        if (item) {
	            if (this.self.options.valuePrimitive) {
	                if (!!valueField) {
	                    return item[valueField];
	                } else {
	                    return item;
	                }
	            } else {
	                return item.toJSON();
	            }
	        } else {
	            return null;
	        }
	    });

	    defadvice("ui.Select", "$angular_setLogicValue", function(val){
	        var self = this.self;
	        var options = self.options;
	        var valueField = options.dataValueField;
	        var text = options.text || "";

	        if (val === undefined) {
	            val = "";
	        }

	        if (valueField && !options.valuePrimitive && val) {
	            text = val[options.dataTextField] || "";
	            val = val[valueField || options.dataTextField];
	        }

	        if (self.options.autoBind === false && !self.listView.bound()) {
	            if (!text && val && options.valuePrimitive) {
	                self.value(val);
	            } else {
	                self._preselect(val, text);
	            }
	        } else {
	            self.value(val);
	        }
	    });

	    defadvice("ui.MultiSelect", "$angular_getLogicValue", function() {
	        var value = this.self.dataItems().slice(0);
	        var valueField = this.self.options.dataValueField;

	        if (valueField && this.self.options.valuePrimitive) {
	            value = $.map(value, function(item) {
	                return item[valueField];
	            });
	        }

	        return value;
	    });

	    defadvice("ui.MultiSelect", "$angular_setLogicValue", function(val){
	        if (val == null) {
	            val = [];
	        }

	        var self = this.self;
	        var options = self.options;
	        var valueField = options.dataValueField;
	        var data = val;

	        if (valueField && !options.valuePrimitive) {
	            val = $.map(val, function(item) {
	                return item[valueField];
	            });
	        }

	        if (options.autoBind === false && !options.valuePrimitive && !self.listView.bound()) {
	            self._preselect(data, val);
	        } else {
	            self.value(val);
	        }
	    });

	    defadvice("ui.AutoComplete", "$angular_getLogicValue", function(){
	        var options = this.self.options;

	        var values = this.self.value().split(options.separator);
	        var valuePrimitive = options.valuePrimitive;
	        var data = this.self.listView.selectedDataItems(); //.concat(this.self.dataSource.data());
	        var dataItems = [];
	        for (var idx = 0, length = data.length; idx < length; idx++) {
	            var item = data[idx];
	            var dataValue = options.dataTextField ? item[options.dataTextField] : item;
	            for (var j = 0; j < values.length; j++) {
	                if (dataValue === values[j]) {
	                    if (valuePrimitive) {
	                        dataItems.push(dataValue);
	                    } else {
	                        dataItems.push(item.toJSON());
	                    }

	                    break;
	                }
	            }
	        }

	        return dataItems;
	    });

	    defadvice("ui.AutoComplete", "$angular_setLogicValue", function(value) {
	        if (value == null) {
	            value = [];
	        }

	        var self = this.self,
	            dataTextField = self.options.dataTextField;

	        if (dataTextField && !self.options.valuePrimitive) {
	            if (value.length !== undefined) {
	                value = $.map(value, function(item){
	                    return item[dataTextField];
	                });
	            } else {
	                value = value[dataTextField];
	            }
	        }

	        self.value(value);
	    });

	    // All event handlers that are strings are compiled the Angular way.
	    defadvice("ui.Widget", "$angular_init", function(element, options) {
	        var self = this.self;
	        if (options && !$.isArray(options)) {
	            var scope = self.$angular_scope;
	            for (var i = self.events.length; --i >= 0;) {
	                var event = self.events[i];
	                var handler = options[event];
	                if (handler && typeof handler == "string") {
	                    options[event] = self.$angular_makeEventHandler(event, scope, handler);
	                }
	            }
	        }
	    });

	    // most handers will only contain a kendoEvent in the scope.
	    defadvice("ui.Widget", "$angular_makeEventHandler", function(event, scope, handler){
	        handler = $parse(handler);
	        return function(e) {
	            digest(scope, function() {
	                handler(scope, { kendoEvent: e });
	            });
	        };
	    });

	    // for the Grid and ListView we add `data` and `selected` too.
	    defadvice([ "ui.Grid", "ui.ListView", "ui.TreeView", "ui.PanelBar" ], "$angular_makeEventHandler", function(event, scope, handler){
	        if (event != "change") {
	            return this.next();
	        }
	        handler = $parse(handler);
	        return function(ev) {
	            var widget = ev.sender;
	            var options = widget.options;
	            var cell, multiple, locals = { kendoEvent: ev }, elems, items, columns, colIdx;

	            if (angular.isString(options.selectable)) {
	                cell = options.selectable.indexOf('cell') !== -1;
	                multiple = options.selectable.indexOf('multiple') !== -1;
	            }

	            elems = locals.selected = this.select();
	            items = locals.data = [];
	            columns = locals.columns = [];
	            for (var i = 0; i < elems.length; i++) {
	                var item = cell ? elems[i].parentNode : elems[i];
	                var dataItem = widget.dataItem(item);
	                if (cell) {
	                    if (angular.element.inArray(dataItem, items) < 0) {
	                        items.push(dataItem);
	                    }
	                    colIdx = angular.element(elems[i]).index();
	                    if (angular.element.inArray(colIdx, columns) < 0 ) {
	                        columns.push(colIdx);
	                    }
	                } else {
	                    items.push(dataItem);
	                }
	            }

	            if (!multiple) {
	                locals.dataItem = locals.data = items[0];
	                locals.angularDataItem = kendo.proxyModelSetters(locals.dataItem);
	                locals.selected = elems[0];
	            }

	            digest(scope, function() {
	                handler(scope, locals);
	            });
	        };
	    });

	    // If no `template` is supplied for Grid columns, provide an Angular
	    // template.  The reason is that in this way AngularJS will take
	    // care to update the view as the data in scope changes.
	    defadvice("ui.Grid", "$angular_init", function(element, options){
	        this.next();
	        if (options.columns) {
	            var settings = $.extend({}, kendo.Template, options.templateSettings);
	            angular.forEach(options.columns, function(col){
	                if (col.field && !col.template && !col.format && !col.values && (col.encoded === undefined || col.encoded)) {
	                    col.template = "<span ng-bind='" +
	                        kendo.expr(col.field, "dataItem") + "'>#: " +
	                        kendo.expr(col.field, settings.paramName) + "#</span>";
	                }
	            });
	        }
	    });

	    {
	        // mobile/ButtonGroup does not have a "value" method, but looks
	        // like it would be useful.  We provide it here.

	        defadvice("mobile.ui.ButtonGroup", "value", function(mew){
	            var self = this.self;
	            if (mew != null) {
	                self.select(self.element.children("li.km-button").eq(mew));
	                self.trigger("change");
	                self.trigger("select", { index: self.selectedIndex });
	            }
	            return self.selectedIndex;
	        });

	        defadvice("mobile.ui.ButtonGroup", "_select", function(){
	            this.next();
	            this.self.trigger("change");
	        });
	    }

	    // mobile directives
	    module
	    .directive('kendoMobileApplication', function() {
	        return {
	            terminal: true,
	            link: function(scope, element, attrs) {
	                createWidget(scope, element, attrs, 'kendoMobileApplication', 'kendoMobileApplication');
	            }
	        };
	    }).directive('kendoMobileView', function() {
	        return {
	            scope: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileView', 'kendoMobileView');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                    attrs._instance._scroller();
	                }
	            }
	        };
	    }).directive('kendoMobileDrawer', function() {
	        return {
	            scope: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileDrawer', 'kendoMobileDrawer');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                    attrs._instance._scroller();
	                }
	            }
	        };
	    }).directive('kendoMobileModalView', function() {
	        return {
	            scope: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileModalView', 'kendoMobileModalView');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                    attrs._instance._scroller();
	                }
	            }
	        };
	    }).directive('kendoMobileSplitView', function() {
	        return {
	            terminal: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileSplitView', 'kendoMobileSplitView');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                }
	            }
	        };
	    }).directive('kendoMobilePane', function() {
	        return {
	            terminal: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    createWidget(scope, element, attrs, 'kendoMobilePane', 'kendoMobilePane');
	                }
	            }
	        };
	    }).directive('kendoMobileLayout', function() {
	        return {
	            link: {
	                pre: function (scope, element, attrs) {
	                    createWidget(scope, element, attrs, 'kendoMobileLayout', 'kendoMobileLayout');
	                }
	            }
	        };
	    }).directive('kendoMobileActionSheet', function() {
	        return {
	            restrict: "A",
	            link: function(scope, element, attrs) {
	                element.find("a[k-action]").each(function() {
	                    $(this).attr("data-" + kendo.ns + "action", $(this).attr("k-action"));
	                });

	                createWidget(scope, element, attrs, 'kendoMobileActionSheet', 'kendoMobileActionSheet');
	            }
	        };
	    }).directive('kendoMobilePopOver', function() {
	        return {
	            terminal: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    createWidget(scope, element, attrs, 'kendoMobilePopOver', 'kendoMobilePopOver');
	                }
	            }
	        };
	    }).directive('kendoViewTitle', function(){
	        return {
	            restrict : "E",
	            replace  : true,
	            template : function(element) {
	                return "<span data-" + kendo.ns + "role='view-title'>" + element.html() + "</span>";
	            }
	        };
	    }).directive('kendoMobileHeader', function() {
	            return {
	                restrict: "E",
	                link: function(scope, element) {
	                    element.addClass("km-header").attr("data-role", "header");
	                }
	            };
	    }).directive('kendoMobileFooter', function() {
	            return {
	                restrict: 'E',
	                link: function(scope, element) {
	                    element.addClass("km-footer").attr("data-role", "footer");
	                }
	            };
	    }).directive('kendoMobileScrollViewPage', function(){
	        return {
	            restrict : "E",
	            replace  : true,
	            template : function(element) {
	                return "<div data-" + kendo.ns + "role='page'>" + element.html() + "</div>";
	            }
	        };
	    });

	    angular.forEach(['align', 'icon', 'rel', 'transition', 'actionsheetContext'], function(attr) {
	          var kAttr = "k" + attr.slice(0, 1).toUpperCase() + attr.slice(1);

	          module.directive(kAttr, function() {
	              return {
	                  restrict: 'A',
	                  priority: 2,
	                  link: function(scope, element, attrs) {
	                      element.attr(kendo.attr(kendo.toHyphens(attr)), scope.$eval(attrs[kAttr]));
	                  }
	              };
	          });
	    });

	    var WIDGET_TEMPLATE_OPTIONS = {
	        "TreeMap": [ "Template" ],
	        "MobileListView": [ "HeaderTemplate", "Template" ],
	        "MobileScrollView": [ "EmptyTemplate", "Template" ],
	        "Grid": [ "AltRowTemplate", "DetailTemplate", "RowTemplate" ],
	        "ListView": [ "EditTemplate", "Template", "AltTemplate" ],
	        "Pager": [ "SelectTemplate", "LinkTemplate" ],
	        "PivotGrid": [ "ColumnHeaderTemplate", "DataCellTemplate", "RowHeaderTemplate" ],
	        "Scheduler": ["AllDayEventTemplate", "DateHeaderTemplate", "EventTemplate", "MajorTimeHeaderTemplate", "MinorTimeHeaderTemplate"],
	        "PanelBar": [ "Template" ],
	        "TreeView": [ "Template" ],
	        "Validator": [ "ErrorTemplate" ]
	    };

	    (function() {
	        var templateDirectives = {};
	        angular.forEach(WIDGET_TEMPLATE_OPTIONS, function(templates, widget) {
	            angular.forEach(templates, function(template) {
	                if (!templateDirectives[template]) {
	                    templateDirectives[template] = [ ];
	                }
	                templateDirectives[template].push("?^^kendo" + widget);
	            });
	        });

	        angular.forEach(templateDirectives, function(parents, directive) {
	            var templateName = "k" + directive;
	            var attrName = kendo.toHyphens(templateName);

	            module.directive(templateName, function() {
	                return {
	                    restrict: "A",
	                    require: parents,
	                    terminal: true,
	                    compile: function($element, $attrs) {
	                        if ($attrs[templateName] !== "") {
	                            return;
	                        }

	                        $element.removeAttr(attrName);
	                        var template = $element[0].outerHTML;

	                        return function(scope, element, attrs, controllers) {
	                            var controller;

	                            while(!controller && controllers.length) {
	                                controller = controllers.shift();
	                            }

	                            if (!controller) {
	                                $log.warn(attrName + " without a matching parent widget found. It can be one of the following: " + parents.join(", "));
	                            } else {
	                                controller.template(templateName, template);
	                                element.remove();
	                            }
	                        };
	                    }
	                };
	            });
	        });

	    })();


	})(window.kendo.jQuery, window.angular);

	return window.kendo;

	}, __webpack_require__(3));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(573)))

/***/ },

/***/ 573:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! jquery */ 3);

/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! @progress/kendo-ui/js/kendo.core.js */ 0);

/***/ }

/******/ });


/***/ }),
/* 112 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./~/@progress/kendo-ui/js/drawing/html.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(495);
	module.exports = __webpack_require__(495);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 495:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(496) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {
	    
	    var kendo = window.kendo;
	    var drawing = kendo.drawing;
	    var drawDOM = drawing.drawDOM;

	    drawing.drawDOM = function(element, options) {
	        return drawDOM($(element)[0], options);
	    };

	    drawing.drawDOM.drawText = drawDOM.drawText;
	    drawing.drawDOM.getFontFaces = drawDOM.getFontFaces;

	})(window.kendo.jQuery);

	}, __webpack_require__(3));


/***/ },

/***/ 496:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo-drawing */ 22);

/***/ }

/******/ });

/***/ }),
/* 113 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/drawing/surface.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(501);
	module.exports = __webpack_require__(501);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 496:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo-drawing */ 22);

/***/ },

/***/ 501:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(496), __webpack_require__(502) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	    var kendo = window.kendo;
	    var draw = kendo.drawing;
	    var DrawingSurface = draw.Surface;
	    var Widget = kendo.ui.Widget;
	    var deepExtend = kendo.deepExtend;
	    var proxy = $.proxy;

	    kendo.support.svg = DrawingSurface.support.svg;
	    kendo.support.canvas = DrawingSurface.support.canvas;    

	    var Surface = Widget.extend({
	        init: function(element, options) {
	            this.options = deepExtend({}, this.options, options);

	            Widget.fn.init.call(this, element, this.options);

	            this._instance = DrawingSurface.create(this.element[0], options);
	            if (this._instance.translate) {
	                this.translate = translate;
	            }
	            
	            this._triggerInstanceHandler = proxy(this._triggerInstanceEvent, this);
	            this._bindHandler("click");
	            this._bindHandler("mouseenter");
	            this._bindHandler("mouseleave");
	            this._bindHandler("mousemove");

	            this._enableTracking();
	        },

	        options: {
	            name: "Surface",
	            tooltip: {}
	        },

	        events: [
	            "click",
	            "mouseenter",
	            "mouseleave",
	            "mousemove",
	            "resize",
	            "tooltipOpen",
	            "tooltipClose"
	        ],

	        _triggerInstanceEvent: function(e) {
	            this.trigger(e.type, e);
	        },

	        _bindHandler: function(event) {
	            this._instance.bind(event, this._triggerInstanceHandler);
	        },

	        draw: function(element) {
	            this._instance.draw(element);
	        },

	        clear: function() {
	            if (this._instance) {
	                this._instance.clear();
	            }
	            this.hideTooltip();
	        },

	        destroy: function() {
	            if (this._instance) {
	                this._instance.destroy();
	                delete this._instance;
	            }

	            if (this._tooltip) {
	                this._tooltip.destroy();
	                delete this._tooltip;
	            }

	            Widget.fn.destroy.call(this);
	        },

	        exportVisual: function() {
	            return this._instance.exportVisual();
	        },

	        eventTarget: function(e) {
	            return this._instance.eventTarget(e);
	        },

	        showTooltip: function(shape, options) {
	            if (this._tooltip) {
	                this._tooltip.show(shape, options);
	            }
	        },

	        hideTooltip: function() {
	            if (this._tooltip) {
	                this._tooltip.hide();
	            }
	        },

	        suspendTracking: function() {
	            this._instance.suspendTracking();
	            this.hideTooltip();
	        },

	        resumeTracking: function() {
	            this._instance.resumeTracking();
	        },

	        getSize: function() {
	            return {
	                width: this.element.width(),
	                height: this.element.height()
	            };
	        },

	        setSize: function(size) {
	            this.element.css({
	                width: size.width,
	                height: size.height
	            });

	            this._size = size;
	            this._instance.currentSize(size);
	            this._resize();
	        },

	        _resize: function() {
	            this._instance.currentSize(this._size);
	            this._instance._resize();
	        },

	        _enableTracking: function() {
	            if (kendo.ui.Popup) {
	                this._tooltip = new draw.SurfaceTooltip(this, this.options.tooltip || {});
	            }
	        }
	    });

	    kendo.ui.plugin(Surface);

	    Surface.create = function(element, options) {
	        return new Surface(element, options);
	    };

	    kendo.drawing.Surface = Surface;

	    function translate(offset) {
	        this._instance.translate(offset);
	    }

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ },

/***/ 502:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./surface-tooltip */ 53);

/***/ }

/******/ });

/***/ }),
/* 114 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.autocomplete.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(587);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 587:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(588), __webpack_require__(589) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "autocomplete",
	    name: "AutoComplete",
	    category: "web",
	    description: "The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        caret = kendo.caret,
	        activeElement = kendo._activeElement,
	        placeholderSupported = support.placeholder,
	        ui = kendo.ui,
	        List = ui.List,
	        keys = kendo.keys,
	        DataSource = kendo.data.DataSource,
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_READONLY = "aria-readonly",
	        CHANGE = "change",
	        DEFAULT = "k-state-default",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        FOCUSED = "k-state-focused",
	        SELECTED = "k-state-selected",
	        STATEDISABLED = "k-state-disabled",
	        HOVER = "k-state-hover",
	        ns = ".kendoAutoComplete",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        proxy = $.proxy;

	    function indexOfWordAtCaret(caretIdx, text, separator) {
	        return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;
	    }

	    function wordAtCaret(caretIdx, text, separator) {
	        return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];
	    }

	    function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {
	        var words = text.split(separator);

	        words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);

	        if (separator && words[words.length - 1] !== "") {
	            words.push("");
	        }

	        return words.join(defaultSeparator);
	    }

	    var AutoComplete = List.extend({
	        init: function (element, options) {
	            var that = this, wrapper, disabled;

	            that.ns = ns;
	            options = $.isArray(options) ? { dataSource: options} : options;

	            List.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            options.placeholder = options.placeholder || element.attr("placeholder");
	            if (placeholderSupported) {
	                element.attr("placeholder", options.placeholder);
	            }

	            that._wrapper();
	            that._loader();
	            that._clearButton();

	            that._dataSource();
	            that._ignoreCase();

	            element[0].type = "text";
	            wrapper = that.wrapper;

	            that._popup();

	            element
	                .addClass("k-input")
	                .on("keydown" + ns, proxy(that._keydown, that))
	                .on("keypress" + ns, proxy(that._keypress, that))
	                .on("paste" + ns, proxy(that._search, that))
	                .on("focus" + ns, function () {
	                    that._prev = that._accessor();
	                    that._oldText = that._prev;
	                    that._placeholder(false);
	                    wrapper.addClass(FOCUSED);
	                })
	                .on("focusout" + ns, function () {
	                    that._change();
	                    that._placeholder();
	                    wrapper.removeClass(FOCUSED);
	                })
	                .attr({
	                    autocomplete: "off",
	                    role: "textbox",
	                    "aria-haspopup": true
	                });

	            that._clear.on("click" + ns, proxy(that._clearValue, that));
	            that._enable();

	            that._old = that._accessor();

	            if (element[0].id) {
	                element.attr("aria-owns", that.ul[0].id);
	            }

	            that._aria();

	            that._placeholder();

	            that._initList();

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            that.listView.bind("click", function(e) { e.preventDefault(); });

	            that._resetFocusItemHandler = $.proxy(that._resetFocusItem, that);

	            kendo.notify(that);
	        },

	        options: {
	            name: "AutoComplete",
	            enabled: true,
	            suggest: false,
	            template: "",
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#",
	            dataTextField: "",
	            minLength: 1,
	            enforceMinLength: false,
	            delay: 200,
	            height: 200,
	            filter: "startswith",
	            ignoreCase: true,
	            highlightFirst: false,
	            separator: null,
	            placeholder: "",
	            animation: {},
	            virtual: false,
	            value: null,
	            clearButton: true
	        },

	        _dataSource: function() {
	            var that = this;

	            if (that.dataSource && that._refreshHandler) {
	                that._unbindDataSource();
	            } else {
	                that._progressHandler = proxy(that._showBusy, that);
	                that._errorHandler = proxy(that._hideBusy, that);
	            }

	            that.dataSource = DataSource.create(that.options.dataSource)
	                .bind("progress", that._progressHandler)
	                .bind("error", that._errorHandler);
	        },

	        setDataSource: function(dataSource) {
	            this.options.dataSource = dataSource;
	            this._dataSource();

	            this.listView.setDataSource(this.dataSource);
	        },

	        events: [
	            "open",
	            "close",
	            CHANGE,
	            "select",
	            "filtering",
	            "dataBinding",
	            "dataBound"
	        ],

	        setOptions: function(options) {
	            var listOptions = this._listOptions(options);

	            List.fn.setOptions.call(this, options);

	            this.listView.setOptions(listOptions);
	            this._accessors();
	            this._aria();
	        },

	        _listOptions: function(options) {
	            var listOptions = List.fn._listOptions.call(this, $.extend(options, {
	                skipUpdateOnBind: true
	            }));

	            listOptions.dataValueField = listOptions.dataTextField;
	            listOptions.selectedItemChange = null;

	            return listOptions;
	        },

	        _editable: function(options) {
	            var that = this,
	                element = that.element,
	                wrapper = that.wrapper.off(ns),
	                readonly = options.readonly,
	                disable = options.disable;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .attr(ARIA_READONLY, false);
	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable)
	                       .attr(ARIA_READONLY, readonly);
	            }
	        },

	        close: function () {
	            var that = this;
	            var current = that.listView.focus();

	            if (current) {
	                current.removeClass(SELECTED);
	            }

	            that.popup.close();
	        },

	        destroy: function() {
	            var that = this;

	            that.element.off(ns);
	            that._clear.off(ns);
	            that.wrapper.off(ns);

	            List.fn.destroy.call(that);
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        select: function (li) {
	            this._select(li);
	        },

	        search: function (word) {
	            var that = this,
	            options = that.options,
	            ignoreCase = options.ignoreCase,
	            separator = that._separator(),
	            length;

	            word = word || that._accessor();

	            clearTimeout(that._typingTimeout);

	            if (separator) {
	                word = wordAtCaret(caret(that.element)[0], word, separator);
	            }

	            length = word.length;

	            if ((!options.enforceMinLength && !length) || length >= options.minLength) {
	                that._open = true;

	                that._mute(function() {
	                    this.listView.value([]);
	                });

	                that._filterSource({
	                    value: ignoreCase ? word.toLowerCase() : word,
	                    operator: options.filter,
	                    field: options.dataTextField,
	                    ignoreCase: ignoreCase
	                });

	                that.one("close", $.proxy(that._unifySeparators, that));
	            }
	        },

	        suggest: function (word) {
	            var that = this,
	                key = that._last,
	                value = that._accessor(),
	                element = that.element[0],
	                caretIdx = caret(element)[0],
	                separator = that._separator(),
	                words = value.split(separator),
	                wordIndex = indexOfWordAtCaret(caretIdx, value, separator),
	                selectionEnd = caretIdx,
	                idx;

	            if (key == keys.BACKSPACE || key == keys.DELETE) {
	                that._last = undefined;
	                return;
	            }

	            word = word || "";

	            if (typeof word !== "string") {
	                if (word[0]) {
	                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];
	                }

	                word = word ? that._text(word) : "";
	            }

	            if (caretIdx <= 0) {
	                caretIdx = value.toLowerCase().indexOf(word.toLowerCase()) + 1;
	            }

	            idx = value.substring(0, caretIdx).lastIndexOf(separator);
	            idx = idx > -1 ? caretIdx - (idx + separator.length) : caretIdx;
	            value = words[wordIndex].substring(0, idx);

	            if (word) {
	                word = word.toString();
	                idx = word.toLowerCase().indexOf(value.toLowerCase());
	                if (idx > -1) {
	                    word = word.substring(idx + value.length);

	                    selectionEnd = caretIdx + word.length;

	                    value += word;
	                }

	                if (separator && words[words.length - 1] !== "") {
	                    words.push("");
	                }

	            }

	            words[wordIndex] = value;

	            that._accessor(words.join(separator || ""));

	            if (element === activeElement()) {
	                caret(element, caretIdx, selectionEnd);
	            }
	        },

	        value: function (value) {
	            if (value !== undefined) {
	                this.listView.value(value);

	                this._accessor(value);
	                this._old = this._accessor();
	                this._oldText = this._accessor();
	            } else {
	                return this._accessor();
	            }
	        },

	        _click: function(e) {
	            var item = e.item;
	            var that = this;
	            var element = that.element;
	            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));

	            e.preventDefault();

	            that._active = true;

	            if (that.trigger("select", { dataItem: dataItem, item: item })) {
	                that.close();
	                return;
	            }
	            that._oldText = element.val();
	            that._select(item).done(function() {
	                that._blur();

	                caret(element, element.val().length);
	            });
	        },

	        _clearText: $.noop,

	        _resetFocusItem: function() {
	            var index = this.options.highlightFirst ? 0 : -1;

	            if (this.options.virtual) {
	                this.listView.scrollTo(0);
	            }

	            this.listView.focus(index);
	        },

	        _listBound: function() {
	            var that = this;
	            var popup = that.popup;
	            var options = that.options;
	            var data = that.dataSource.flatView();
	            var length = data.length;
	            var isActive = that.element[0] === activeElement();
	            var action;

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!data.length);

	            that._resizePopup();

	            popup.position();

	            if (length) {
	                if (options.suggest && isActive) {
	                    that.suggest(data[0]);
	                }
	            }

	            if (that._open) {
	                that._open = false;
	                action = that._allowOpening() ? "open" : "close";

	                if (that._typingTimeout && !isActive) {
	                    action = "close";
	                }

	                if (length) {
	                    that._resetFocusItem();

	                    if (options.virtual) {
	                        that.popup
	                            .unbind("activate", that._resetFocusItemHandler)
	                            .one("activate", that._resetFocusItemHandler);
	                    }
	                }

	                popup[action]();
	                that._typingTimeout = undefined;
	            }

	            if (that._touchScroller) {
	                that._touchScroller.reset();
	            }

	            that._hideBusy();
	            that._makeUnselectable();

	            that.trigger("dataBound");
	        },

	        _mute: function(callback) {
	            this._muted = true;
	            callback.call(this);
	            this._muted = false;
	        },

	        _listChange: function() {
	            var isActive = this._active || this.element[0] === activeElement();

	            if (isActive && !this._muted) {
	                this._selectValue(this.listView.selectedDataItems()[0]);
	            }
	        },

	        _selectValue: function(dataItem) {
	            var separator = this._separator();
	            var text = "";

	            if (dataItem) {
	                text = this._text(dataItem);
	            }

	            if (text === null) {
	                text = "";
	            }

	            if (separator) {
	                text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());
	            }

	            this._prev = text;
	            this._accessor(text);
	            this._placeholder();
	        },

	        _unifySeparators: function() {
	            this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));
	            return this;
	        },

	        _change: function() {
	            var that = this;
	            var value = that._unifySeparators().value();
	            var trigger = value !== List.unifyType(that._old, typeof value);

	            var valueUpdated = trigger && !that._typing;
	            var itemSelected = that._oldText !== value;

	            that._old = value;
	            that._oldText = value;

	            if (valueUpdated || itemSelected) {
	                // trigger the DOM change event so any subscriber gets notified
	                that.element.trigger(CHANGE);
	            }

	            if (trigger) {
	                that.trigger(CHANGE);
	            }

	            that.typing = false;
	        },

	        _accessor: function (value) {
	            var that = this,
	                element = that.element[0];

	            if (value !== undefined) {
	                element.value = value === null ? "" : value;
	                that._placeholder();
	            } else {
	                value = element.value;

	                if (element.className.indexOf("k-readonly") > -1) {
	                    if (value === that.options.placeholder) {
	                        return "";
	                    } else {
	                        return value;
	                    }
	                }

	                return value;
	            }
	        },

	        _keydown: function (e) {
	            var that = this;
	            var key = e.keyCode;
	            var listView = that.listView;
	            var visible = that.popup.visible();
	            var current = listView.focus();

	            that._last = key;

	            if (key === keys.DOWN) {
	                if (visible) {
	                    this._move(current ? "focusNext" : "focusFirst");
	                }
	                e.preventDefault();
	            } else if (key === keys.UP) {
	                if (visible) {
	                    this._move(current ? "focusPrev" : "focusLast");
	                }
	                e.preventDefault();
	            } else if (key === keys.ENTER || key === keys.TAB) {

	                if (key === keys.ENTER && visible) {
	                    e.preventDefault();
	                }

	                if (visible && current) {
	                    var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));
	                    if (that.trigger("select", { dataItem: dataItem, item: current })) {
	                        return;
	                    }

	                    this._select(current);
	                }

	                this._blur();
	            } else if (key === keys.ESC) {
	                if (visible) {
	                    e.preventDefault();
	                }
	                that.close();
	            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
	                e.preventDefault();

	                var direction = key === keys.PAGEDOWN ? 1 : -1;
	                listView.scrollWith(direction * listView.screenHeight());
	            } else {
	                that._search();
	            }
	        },

	        _keypress: function() {
	            this._oldText = this.element.val();
	            this._typing = true;
	        },

	        _move: function (action) {
	            this.listView[action]();

	            if (this.options.suggest) {
	                this.suggest(this.listView.focus());
	            }
	        },

	        _hideBusy: function () {
	            var that = this;
	            clearTimeout(that._busy);
	            that._loading.hide();
	            that.element.attr("aria-busy", false);
	            that._busy = null;
	            that._showClear();
	        },

	        _showBusy: function () {
	            var that = this;

	            if (that._busy) {
	                return;
	            }

	            that._busy = setTimeout(function () {
	                that.element.attr("aria-busy", true);
	                that._loading.show();
	                that._hideClear();
	            }, 100);
	        },

	        _placeholder: function(show) {
	            if (placeholderSupported) {
	                return;
	            }

	            var that = this,
	                element = that.element,
	                placeholder = that.options.placeholder,
	                value;

	            if (placeholder) {
	                value = element.val();

	                if (show === undefined) {
	                    show = !value;
	                }

	                if (!show) {
	                    if (value !== placeholder) {
	                        placeholder = value;
	                    } else {
	                        placeholder = "";
	                    }
	                }

	                if (value === that._old && !show) {
	                    return;
	                }

	                element.toggleClass("k-readonly", show)
	                       .val(placeholder);

	                if (!placeholder && element[0] === document.activeElement) {
	                    caret(element[0], 0, 0);
	                }
	            }
	        },

	        _separator: function() {
	            var separator = this.options.separator;
	            if (separator instanceof Array) {
	               return new RegExp(separator.join("|"), 'gi');
	            }
	            return separator;
	        },

	        _defaultSeparator: function() {
	            var separator = this.options.separator;
	            if (separator instanceof Array) {
	                return separator[0];
	            }
	            return separator;
	        },

	        _inputValue: function() {
	            return this.element.val();
	        },

	        _search: function () {
	            var that = this;
	            clearTimeout(that._typingTimeout);

	            that._typingTimeout = setTimeout(function () {
	                if (that._prev !== that._accessor()) {
	                    that._prev = that._accessor();
	                    that.search();
	                }
	            }, that.options.delay);
	        },

	        _select: function(candidate) {
	            var that = this;
	            that._active = true;
	            return that.listView.select(candidate).done(function() {
	                that._active = false;
	            });
	        },

	        _loader: function() {
	            this._loading = $('<span class="k-icon k-i-loading" style="display:none"></span>').insertAfter(this.element);
	        },

	        _clearButton: function() {
	            this._clear = $('<span unselectable="on" class="k-icon k-clear-value k-i-close" title="clear"></span>').attr({
	                "role": "button",
	                "tabIndex": -1
	            });
	            if (this.options.clearButton) {
	                this._clear.insertAfter(this.element);
	            }
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _wrapper: function () {
	            var that = this,
	                element = that.element,
	                DOMelement = element[0],
	                wrapper;

	            wrapper = element.parent();

	            if (!wrapper.is("span.k-widget")) {
	                wrapper = element.wrap("<span />").parent();
	            }

	            wrapper.attr("tabindex", -1);
	            wrapper.attr("role", "presentation");

	            wrapper[0].style.cssText = DOMelement.style.cssText;
	            element.css({
	                width: "100%",
	                height: DOMelement.style.height
	            });

	            that._focused = that.element;
	            that.wrapper = wrapper
	                              .addClass("k-widget k-autocomplete k-header")
	                              .addClass(DOMelement.className);
	        }
	    });

	    ui.plugin(AutoComplete);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 588:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.list */ 23);

/***/ },

/***/ 589:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ 9);

/***/ }

/******/ });

/***/ }),
/* 115 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.calendar.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(592);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 592:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "calendar",
	    name: "Calendar",
	    category: "web",
	    description: "The Calendar widget renders a graphical calendar that supports navigation and selection.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        keys = kendo.keys,
	        parse = kendo.parseDate,
	        adjustDST = kendo.date.adjustDST,
	        weekInYear = kendo.date.weekInYear,
	        extractFormat = kendo._extractFormat,
	        template = kendo.template,
	        getCulture = kendo.getCulture,
	        transitions = kendo.support.transitions,
	        transitionOrigin = transitions ? transitions.css + "transform-origin" : "",
	        cellTemplate = template('<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link" href="\\#" data-#=data.ns#value="#=data.dateString#">#=data.value#</a></td>', { useWithBlock: false }),
	        emptyCellTemplate = template('<td role="gridcell">&nbsp;</td>', { useWithBlock: false }),
	        weekNumberTemplate = template('<td class="k-alt">#= data.weekNumber #</td>', { useWithBlock: false }),
	        browser = kendo.support.browser,
	        isIE8 = browser.msie && browser.version < 9,
	        outerHeight = kendo._outerHeight,
	        outerWidth = kendo._outerWidth,
	        ns = ".kendoCalendar",
	        CLICK = "click" + ns,
	        KEYDOWN_NS = "keydown" + ns,
	        ID = "id",
	        MIN = "min",
	        LEFT = "left",
	        SLIDE = "slideIn",
	        MONTH = "month",
	        CENTURY = "century",
	        CHANGE = "change",
	        NAVIGATE = "navigate",
	        VALUE = "value",
	        HOVER = "k-state-hover",
	        DISABLED = "k-state-disabled",
	        FOCUSED = "k-state-focused",
	        OTHERMONTH = "k-other-month",
	        OTHERMONTHCLASS = ' class="' + OTHERMONTH + '"',
	        TODAY = "k-nav-today",
	        CELLSELECTOR = "td:has(.k-link)",
	        BLUR = "blur" + ns,
	        FOCUS = "focus",
	        FOCUS_WITH_NS = FOCUS + ns,
	        MOUSEENTER = support.touch ? "touchstart" : "mouseenter",
	        MOUSEENTER_WITH_NS = support.touch ? "touchstart" + ns : "mouseenter" + ns,
	        MOUSELEAVE = support.touch ? "touchend" + ns + " touchmove" + ns : "mouseleave" + ns,
	        MS_PER_MINUTE = 60000,
	        MS_PER_DAY = 86400000,
	        PREVARROW = "_prevArrow",
	        NEXTARROW = "_nextArrow",
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_SELECTED = "aria-selected",
	        proxy = $.proxy,
	        extend = $.extend,
	        DATE = Date,
	        views = {
	            month: 0,
	            year: 1,
	            decade: 2,
	            century: 3
	        };

	    var Calendar = Widget.extend({      
	        init: function(element, options) {
	            var that = this, value, id;

	            Widget.fn.init.call(that, element, options);

	            element = that.wrapper = that.element;
	            options = that.options;

	            options.url = window.unescape(options.url);

	            that.options.disableDates = getDisabledExpr(that.options.disableDates);

	            that._templates();

	            that._header();

	            that._footer(that.footer);
	            
	            id = element
	                    .addClass("k-widget k-calendar " + (options.weekNumber ? " k-week-number" : ""))
	                    .on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE, CELLSELECTOR, mousetoggle)
	                    .on(KEYDOWN_NS, "table.k-content", proxy(that._move, that))
	                    .on(CLICK, CELLSELECTOR, function(e) {
	                        var link = e.currentTarget.firstChild,
	                            value = that._toDateObject(link);

	                        if (link.href.indexOf("#") != -1) {
	                            e.preventDefault();
	                        }

	                        if (that._view.name == "month" && that.options.disableDates(value)) {
	                            return;
	                        }

	                        that._click($(link));
	                    })
	                    .on("mouseup" + ns, "table.k-content, .k-footer", function() {
	                        that._focusView(that.options.focusOnNav !== false);
	                    })
	                    .attr(ID);

	            if (id) {
	                that._cellID = id + "_cell_selected";
	            }

	            normalize(options);
	            value = parse(options.value, options.format, options.culture);

	            that._index = views[options.start];

	            that._current = new DATE(+restrictValue(value, options.min, options.max));

	            that._addClassProxy = function() {
	                that._active = true;

	                if (that._cell.hasClass(DISABLED)) {
	                    var todayString = that._view.toDateString(getToday());
	                    that._cell = that._cellByDate(todayString);
	                }

	                that._cell.addClass(FOCUSED);
	            };

	            that._removeClassProxy = function() {
	                that._active = false;
	                that._cell.removeClass(FOCUSED);
	            };

	            that.value(value);

	            kendo.notify(that);
	        },

	        options: {
	            name: "Calendar",
	            value: null,
	            min: new DATE(1900, 0, 1),
	            max: new DATE(2099, 11, 31),
	            dates: [],
	            url: "",
	            culture: "",
	            footer : "",
	            format : "",
	            month : {},
	            weekNumber: false,
	            start: MONTH,
	            depth: MONTH,
	            animation: {
	                horizontal: {
	                    effects: SLIDE,
	                    reverse: true,
	                    duration: 500,
	                    divisor: 2
	                },
	                vertical: {
	                    effects: "zoomIn",
	                    duration: 400
	                }
	            }
	        },

	        events: [
	            CHANGE,
	            NAVIGATE
	        ],

	        setOptions: function(options) {
	            var that = this;

	            normalize(options);

	            options.disableDates = getDisabledExpr(options.disableDates);

	            Widget.fn.setOptions.call(that, options);

	            that._templates();

	            that._footer(that.footer);
	            that._index = views[that.options.start];

	            that.navigate();
	        },

	        destroy: function() {
	            var that = this,
	            today = that._today;

	            that.element.off(ns);
	            that._title.off(ns);
	            that[PREVARROW].off(ns);
	            that[NEXTARROW].off(ns);

	            kendo.destroy(that._table);

	            if (today) {
	                kendo.destroy(today.off(ns));
	            }

	            Widget.fn.destroy.call(that);
	        },

	        current: function() {
	            return this._current;
	        },

	        view: function() {
	            return this._view;
	        },

	        focus: function(table) {
	            table = table || this._table;
	            this._bindTable(table);
	            table.focus();
	        },

	        min: function(value) {
	            return this._option(MIN, value);
	        },

	        max: function(value) {
	            return this._option("max", value);
	        },

	        navigateToPast: function() {
	            this._navigate(PREVARROW, -1);
	        },

	        navigateToFuture: function() {
	            this._navigate(NEXTARROW, 1);
	        },

	        navigateUp: function() {
	            var that = this,
	            index = that._index;

	            if (that._title.hasClass(DISABLED)) {
	                return;
	            }

	            that.navigate(that._current, ++index);
	        },

	        navigateDown: function(value) {
	            var that = this,
	            index = that._index,
	            depth = that.options.depth;

	            if (!value) {
	                return;
	            }

	            if (index === views[depth]) {
	                if (!isEqualDate(that._value, that._current) || !isEqualDate(that._value, value)) {
	                    that.value(value);
	                    that.trigger(CHANGE);
	                }
	                return;
	            }

	            that.navigate(value, --index);
	        },

	        navigate: function(value, view) {
	            view = isNaN(view) ? views[view] : view;

	            var that = this,
	                options = that.options,
	                culture = options.culture,
	                min = options.min,
	                max = options.max,
	                title = that._title,
	                from = that._table,
	                old = that._oldTable,
	                selectedValue = that._value,
	                currentValue = that._current,
	                future = value && +value > +currentValue,
	                vertical = view !== undefined && view !== that._index,
	                to, currentView, compare,
	                disabled;
	            if (!value) {
	                value = currentValue;
	            }

	            that._current = value = new DATE(+restrictValue(value, min, max));

	            if (view === undefined) {
	                view = that._index;
	            } else {
	                that._index = view;
	            }

	            that._view = currentView = calendar.views[view];
	            compare = currentView.compare;

	            disabled = view === views[CENTURY];
	            title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

	            disabled = compare(value, min) < 1;
	            that[PREVARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

	            disabled = compare(value, max) > -1;
	            that[NEXTARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

	            if (from && old && old.data("animating")) {
	                old.kendoStop(true, true);
	                from.kendoStop(true, true);
	            }

	            that._oldTable = from;

	            if (!from || that._changeView) {
	                title.html(currentView.title(value, min, max, culture));

	                that._table = to = $(currentView.content(extend({
	                    min: min,
	                    max: max,
	                    date: value,
	                    url: options.url,
	                    dates: options.dates,
	                    format: options.format,
	                    culture: culture,
	                    disableDates: options.disableDates,
	                    isWeekColumnVisible: options.weekNumber
	                }, that[currentView.name])));
	                
	                addClassToViewContainer(to, currentView.name);
	                makeUnselectable(to);
	                var replace = from && from.data("start") === to.data("start");
	                that._animate({
	                    from: from,
	                    to: to,
	                    vertical: vertical,
	                    future: future,
	                    replace: replace
	                });

	                that.trigger(NAVIGATE);

	                that._focus(value);
	            }

	            if (view === views[options.depth] && selectedValue && !that.options.disableDates(selectedValue)) {
	                that._class("k-state-selected", selectedValue);
	            }

	            that._class(FOCUSED, value);

	            if (!from && that._cell) {
	                that._cell.removeClass(FOCUSED);
	            }

	            that._changeView = true;
	        },

	        value: function(value) {
	            var that = this,
	                view = that._view,
	                options = that.options,
	                old = that._view,
	                min = options.min,
	                max = options.max;

	            if (value === undefined) {
	                return that._value;
	            }

	            if (value === null) {
	                that._current = new Date(that._current.getFullYear(), that._current.getMonth(), that._current.getDate());
	            }

	            value = parse(value, options.format, options.culture);

	            if (value !== null) {
	                value = new DATE(+value);

	                if (!isInRange(value, min, max)) {
	                    value = null;
	                }
	            }

	            if (value === null || !that.options.disableDates(value)) {
	                that._value = value;
	            } else if (that._value === undefined) {
	                that._value = null;
	            }

	            if (old && value === null && that._cell) {
	                that._cell.removeClass("k-state-selected");
	            } else {
	                that._changeView = !value || view && view.compare(value, that._current) !== 0;
	                that.navigate(value);
	            }
	        },

	        _move: function(e) {
	            var that = this,
	                options = that.options,
	                key = e.keyCode,
	                view = that._view,
	                index = that._index,
	                min = that.options.min,
	                max = that.options.max,
	                currentValue = new DATE(+that._current),
	                isRtl = kendo.support.isRtl(that.wrapper),
	                isDisabled = that.options.disableDates,
	                value, prevent, method, temp;

	            if (e.target === that._table[0]) {
	                that._active = true;
	            }

	            if (e.ctrlKey) {
	                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
	                    that.navigateToFuture();
	                    prevent = true;
	                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
	                    that.navigateToPast();
	                    prevent = true;
	                } else if (key == keys.UP) {
	                    that.navigateUp();
	                    prevent = true;
	                } else if (key == keys.DOWN) {
	                    that._click($(that._cell[0].firstChild));
	                    prevent = true;
	                }
	            } else {
	                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
	                    value = 1;
	                    prevent = true;
	                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
	                    value = -1;
	                    prevent = true;
	                } else if (key == keys.UP) {
	                    value = index === 0 ? -7 : -4;
	                    prevent = true;
	                } else if (key == keys.DOWN) {
	                    value = index === 0 ? 7 : 4;
	                    prevent = true;
	                } else if (key == keys.ENTER) {
	                    that._click($(that._cell[0].firstChild));
	                    prevent = true;
	                } else if (key == keys.HOME || key == keys.END) {
	                    method = key == keys.HOME ? "first" : "last";
	                    temp = view[method](currentValue);
	                    currentValue = new DATE(temp.getFullYear(), temp.getMonth(), temp.getDate(), currentValue.getHours(), currentValue.getMinutes(), currentValue.getSeconds(), currentValue.getMilliseconds());
	                    prevent = true;
	                } else if (key == keys.PAGEUP) {
	                    prevent = true;
	                    that.navigateToPast();
	                } else if (key == keys.PAGEDOWN) {
	                    prevent = true;
	                    that.navigateToFuture();
	                }

	                if (value || method) {
	                    if (!method) {
	                        view.setDate(currentValue, value);
	                    }

	                    if (isDisabled(currentValue)) {
	                        currentValue = that._nextNavigatable(currentValue, value);
	                    }
	                    if (isInRange(currentValue, min, max)) {
	                        that._focus(restrictValue(currentValue, options.min, options.max));
	                    }
	                }
	            }

	            if (prevent) {
	                e.preventDefault();
	            }

	            return that._current;
	        },

	        _nextNavigatable: function(currentValue, value) {
	            var that = this,
	            disabled = true,
	            view = that._view,
	            min = that.options.min,
	            max = that.options.max,
	            isDisabled = that.options.disableDates,
	            navigatableDate = new Date(currentValue.getTime());

	            view.setDate(navigatableDate, -value);

	            while (disabled) {
	                view.setDate(currentValue, value);

	                if (!isInRange(currentValue, min, max)) {
	                    currentValue = navigatableDate;
	                    break;
	                }
	                disabled = isDisabled(currentValue);
	            }
	            return currentValue;
	        },

	        _animate: function(options) {
	            var that = this,
	            from = options.from,
	            to = options.to,
	            active = that._active;

	            if (!from) {
	                to.insertAfter(that.element[0].firstChild);
	                that._bindTable(to);
	            } else if (from.parent().data("animating")) {
	                from.off(ns);
	                from.parent().kendoStop(true, true).remove();
	                from.remove();

	                to.insertAfter(that.element[0].firstChild);
	                that._focusView(active);
	            } else if (!from.is(":visible") || that.options.animation === false || options.replace) {
	                to.insertAfter(from);
	                from.off(ns).remove();

	                that._focusView(active);
	            } else {
	                that[options.vertical ? "_vertical" : "_horizontal"](from, to, options.future);
	            }
	        },

	        _horizontal: function(from, to, future) {
	            var that = this,
	                active = that._active,
	                horizontal = that.options.animation.horizontal,
	                effects = horizontal.effects,
	                viewWidth = outerWidth(from);

	            if (effects && effects.indexOf(SLIDE) != -1) {
	                from.add(to).css({ width: viewWidth });

	                from.wrap("<div/>");

	                that._focusView(active, from);

	                from.parent()
	                .css({
	                    position: "relative",
	                    width: viewWidth * 2,
	                    "float": LEFT,
	                    "margin-left": future ? 0 : -viewWidth
	                });

	                to[future ? "insertAfter" : "insertBefore"](from);

	                extend(horizontal, {
	                    effects: SLIDE + ":" + (future ? "right" : LEFT),
	                    complete: function() {
	                        from.off(ns).remove();
	                        that._oldTable = null;

	                        to.unwrap();

	                        that._focusView(active);

	                    }
	                });

	                from.parent().kendoStop(true, true).kendoAnimate(horizontal);
	            }
	        },

	        _vertical: function(from, to) {
	            var that = this,
	                vertical = that.options.animation.vertical,
	                effects = vertical.effects,
	                active = that._active, //active state before from's blur
	                cell, position;

	            if (effects && effects.indexOf("zoom") != -1) {
	                to.css({
	                    position: "absolute",
	                    top: outerHeight(from.prev()),
	                    left: 0
	                }).insertBefore(from);

	                if (transitionOrigin) {
	                    cell = that._cellByDate(that._view.toDateString(that._current));
	                    position = cell.position();
	                    position = (position.left + parseInt(cell.width() / 2, 10)) + "px" + " " + (position.top + parseInt(cell.height() / 2, 10) + "px");
	                    to.css(transitionOrigin, position);
	                }

	                from.kendoStop(true, true).kendoAnimate({
	                    effects: "fadeOut",
	                    duration: 600,
	                    complete: function() {
	                        from.off(ns).remove();
	                        that._oldTable = null;

	                        to.css({
	                            position: "static",
	                            top: 0,
	                            left: 0
	                        });

	                        that._focusView(active);
	                    }
	                });

	                to.kendoStop(true, true).kendoAnimate(vertical);
	            }
	        },

	        _cellByDate: function(value) {
	            return this._table.find("td:not(." + OTHERMONTH + ")")
	            .filter(function() {
	                return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
	            });
	        },

	        _class: function(className, date) {
	            var that = this,
	                id = that._cellID,
	                cell = that._cell,
	                value = that._view.toDateString(date),
	                disabledDate;

	            if (cell) {
	                cell.removeAttr(ARIA_SELECTED)
	                .removeAttr("aria-label")
	                .removeAttr(ID);
	            }

	            if (date && that._view.name == "month") {
	                disabledDate = that.options.disableDates(date);
	            }

	            cell = that._table
	            .find("td:not(." + OTHERMONTH + ")")
	            .removeClass(className)
	            .filter(function() {
	                return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
	            })
	            .attr(ARIA_SELECTED, true);

	            if (className === FOCUSED && !that._active && that.options.focusOnNav !== false || disabledDate) {
	                className = "";
	            }

	            cell.addClass(className);

	            if (cell[0]) {
	                that._cell = cell;
	            }

	            if (id) {
	                cell.attr(ID, id);
	                that._table.removeAttr("aria-activedescendant").attr("aria-activedescendant", id);
	            }
	        },

	        _bindTable: function (table) {
	            table
	            .on(FOCUS_WITH_NS, this._addClassProxy)
	            .on(BLUR, this._removeClassProxy);
	        },

	        _click: function(link) {
	            var that = this,
	            options = that.options,
	            currentValue = new Date(+that._current),
	            value = that._toDateObject(link);

	            adjustDST(value, 0);

	            if (that._view.name == "month" && that.options.disableDates(value)) {
	                value = that._value;
	            }

	            that._view.setDate(currentValue, value);

	            that.navigateDown(restrictValue(currentValue, options.min, options.max));
	        },

	        _focus: function(value) {
	            var that = this,
	            view = that._view;

	            if (view.compare(value, that._current) !== 0) {
	                that.navigate(value);
	            } else {
	                that._current = value;
	                that._class(FOCUSED, value);
	            }
	        },

	        _focusView: function(active, table) {
	            if (active) {
	                this.focus(table);
	            }
	        },

	        _footer: function(template) {
	            var that = this,
	            today = getToday(),
	            element = that.element,
	            footer = element.find(".k-footer");

	            if (!template) {
	                that._toggle(false);
	                footer.hide();
	                return;
	            }

	            if (!footer[0]) {
	                footer = $('<div class="k-footer"><a href="#" class="k-link k-nav-today"></a></div>').appendTo(element);
	            }

	            that._today = footer.show()
	            .find(".k-link")
	            .html(template(today))
	            .attr("title", kendo.toString(today, "D", that.options.culture));

	            that._toggle();
	        },

	        _header: function() {
	            var that = this,
	            element = that.element,
	            links;

	            if (!element.find(".k-header")[0]) {
	                element.html('<div class="k-header">' +
	                    '<a href="#" role="button" class="k-link k-nav-prev"><span class="k-icon k-i-arrow-60-left"></span></a>' +
	                    '<a href="#" role="button" aria-live="assertive" aria-atomic="true" class="k-link k-nav-fast"></a>' +
	                    '<a href="#" role="button" class="k-link k-nav-next"><span class="k-icon k-i-arrow-60-right"></span></a>' +
	                '</div>');
	            }

	            links = element.find(".k-link")
	            .on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE + " " + FOCUS_WITH_NS + " " + BLUR, mousetoggle)
	            .click(false);

	            that._title = links.eq(1).on(CLICK, function() { that._active = that.options.focusOnNav !== false; that.navigateUp(); });
	            that[PREVARROW] = links.eq(0).on(CLICK, function() { that._active = that.options.focusOnNav !== false; that.navigateToPast(); });
	            that[NEXTARROW] = links.eq(2).on(CLICK, function() { that._active = that.options.focusOnNav !== false; that.navigateToFuture(); });
	        },

	        _navigate: function(arrow, modifier) {
	            var that = this,
	            index = that._index + 1,
	            currentValue = new DATE(+that._current);

	            arrow = that[arrow];

	            if (!arrow.hasClass(DISABLED)) {
	                if (index > 3) {
	                    currentValue.setFullYear(currentValue.getFullYear() + 100 * modifier);
	                } else {
	                    calendar.views[index].setDate(currentValue, modifier);
	                }

	                that.navigate(currentValue);
	            }
	        },

	        _option: function(option, value) {
	            var that = this,
	                options = that.options,
	                currentValue = that._value || that._current,
	                isBigger;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = parse(value, options.format, options.culture);

	            if (!value) {
	                return;
	            }

	            options[option] = new DATE(+value);

	            if (option === MIN) {
	                isBigger = value > currentValue;
	            } else {
	                isBigger = currentValue > value;
	            }

	            if (isBigger || isEqualMonth(currentValue, value)) {
	                if (isBigger) {
	                    that._value = null;
	                }
	                that._changeView = true;
	            }

	            if (!that._changeView) {
	                that._changeView = !!(options.month.content || options.month.empty);
	            }

	            that.navigate(that._value);

	            that._toggle();
	        },

	        _toggle: function(toggle) {
	            var that = this,
	                options = that.options,
	                isTodayDisabled = that.options.disableDates(getToday()),
	                link = that._today;

	            if (toggle === undefined) {
	                toggle = isInRange(getToday(), options.min, options.max);
	            }

	            if (link) {
	                link.off(CLICK);

	                if (toggle && !isTodayDisabled) {
	                    link.addClass(TODAY)
	                    .removeClass(DISABLED)
	                    .on(CLICK, proxy(that._todayClick, that));
	                } else {
	                    link.removeClass(TODAY)
	                    .addClass(DISABLED)
	                    .on(CLICK, prevent);
	                }
	            }
	        },

	        _todayClick: function(e) {
	            var that = this,
	            depth = views[that.options.depth],
	            disabled = that.options.disableDates,
	            today = getToday();

	            e.preventDefault();

	            if (disabled(today)) {
	                return;
	            }

	            if (that._view.compare(that._current, today) === 0 && that._index == depth) {
	                that._changeView = false;
	            }

	            that._value = today;
	            that.navigate(today, depth);

	            that.trigger(CHANGE);
	        },

	        _toDateObject: function(link) {
	            var value = $(link).attr(kendo.attr(VALUE)).split("/");
	            //Safari cannot create correctly date from "1/1/2090"
	            value = new DATE(value[0], value[1], value[2]);

	            return value;
	        },

	        _templates: function() {
	            var that = this,
	                options = that.options,
	                footer = options.footer,
	                month = options.month,
	                content = month.content,
	                weekNumber = month.weekNumber,
	                empty = month.empty;

	            that.month = {
	                content: template('<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link#=data.linkClass#" href="#=data.url#" ' + kendo.attr("value") + '="#=data.dateString#" title="#=data.title#">' + (content || "#=data.value#") + '</a></td>', { useWithBlock: !!content }),
	                empty: template('<td role="gridcell">' + (empty || "&nbsp;") + "</td>", { useWithBlock: !!empty }),
	                weekNumber: template('<td class="k-alt">' + (weekNumber || "#= data.weekNumber #") + "</td>", { useWithBlock: !!weekNumber })
	            };

	            that.footer = footer !== false ? template(footer || '#= kendo.toString(data,"D","' + options.culture +'") #', { useWithBlock: false }) : null;
	        }
	    });

	    ui.plugin(Calendar);

	    var calendar = {
	        firstDayOfMonth: function (date) {
	            return new DATE(
	                date.getFullYear(),
	                date.getMonth(),
	                1
	            );
	        },

	        firstVisibleDay: function (date, calendarInfo) {
	            calendarInfo = calendarInfo || kendo.culture().calendar;

	            var firstDay = calendarInfo.firstDay,
	            firstVisibleDay = new DATE(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());

	            while (firstVisibleDay.getDay() != firstDay) {
	                calendar.setTime(firstVisibleDay, -1 * MS_PER_DAY);
	            }

	            return firstVisibleDay;
	        },

	        setTime: function (date, time) {
	            var tzOffsetBefore = date.getTimezoneOffset(),
	            resultDATE = new DATE(date.getTime() + time),
	            tzOffsetDiff = resultDATE.getTimezoneOffset() - tzOffsetBefore;

	            date.setTime(resultDATE.getTime() + tzOffsetDiff * MS_PER_MINUTE);
	        },
	        views: [{
	            name: MONTH,
	            title: function(date, min, max, culture) {
	                return getCalendarInfo(culture).months.names[date.getMonth()] + " " + date.getFullYear();
	            },
	            content: function(options) {
	                var that = this,
	                idx = 0,
	                min = options.min,
	                max = options.max,
	                date = options.date,
	                dates = options.dates,
	                format = options.format,
	                culture = options.culture,
	                navigateUrl = options.url,
	                isWeekColumnVisible = options.isWeekColumnVisible,
	                hasUrl = navigateUrl && dates[0],
	                currentCalendar = getCalendarInfo(culture),
	                firstDayIdx = currentCalendar.firstDay,
	                days = currentCalendar.days,
	                names = shiftArray(days.names, firstDayIdx),
	                shortNames = shiftArray(days.namesShort, firstDayIdx),
	                start = calendar.firstVisibleDay(date, currentCalendar),
	                firstDayOfMonth = that.first(date),
	                lastDayOfMonth = that.last(date),
	                toDateString = that.toDateString,
	                today = new DATE(),
	                html = '<table tabindex="0" role="grid" class="k-content" cellspacing="0" data-start="' + toDateString(start) + '"><thead><tr role="row">';
	                if (isWeekColumnVisible) {
	                    html += '<th scope="col" class="k-alt"></th>';
	                }
	                
	                for (; idx < 7; idx++) {
	                    html += '<th scope="col" title="' + names[idx] + '">' + shortNames[idx] + '</th>';
	                }

	                today = new DATE(today.getFullYear(), today.getMonth(), today.getDate());
	                adjustDST(today, 0);
	                today = +today;

	                return view({
	                    cells: 42,
	                    perRow: 7,
	                    html: html += '</tr></thead><tbody><tr role="row">',
	                    start: start,
	                    isWeekColumnVisible: isWeekColumnVisible,
	                    weekNumber: options.weekNumber,
	                    min: new DATE(min.getFullYear(), min.getMonth(), min.getDate()),
	                    max: new DATE(max.getFullYear(), max.getMonth(), max.getDate()),
	                    content: options.content,
	                    empty: options.empty,
	                    setter: that.setDate,
	                    disableDates: options.disableDates,
	                    build: function(date, idx, disableDates) {
	                        var cssClass = [],
	                        day = date.getDay(),
	                        linkClass = "",
	                        url = "#";

	                        if (date < firstDayOfMonth || date > lastDayOfMonth) {
	                            cssClass.push(OTHERMONTH);
	                        }

	                        if (disableDates(date)) {
	                            cssClass.push(DISABLED);
	                        }

	                        if (+date === today) {
	                            cssClass.push("k-today");
	                        }

	                        if (day === 0 || day === 6) {
	                            cssClass.push("k-weekend");
	                        }

	                        if (hasUrl && inArray(+date, dates)) {
	                            url = navigateUrl.replace("{0}", kendo.toString(date, format, culture));
	                            linkClass = " k-action-link";
	                        }

	                        return {
	                            date: date,
	                            dates: dates,
	                            ns: kendo.ns,
	                            title: kendo.toString(date, "D", culture),
	                            value: date.getDate(),
	                            dateString: toDateString(date),
	                            cssClass: cssClass[0] ? ' class="' + cssClass.join(" ") + '"' : "",
	                            linkClass: linkClass,
	                            url: url
	                        };
	                    },
	                    weekNumberBuild: function(date) {
	                        return {
	                            weekNumber: weekInYear(date, date),
	                            currentDate: date
	                        };          
	                    }
	                });
	            },
	            first: function(date) {
	                return calendar.firstDayOfMonth(date);
	            },
	            last: function(date) {
	                var last = new DATE(date.getFullYear(), date.getMonth() + 1, 0),
	                first = calendar.firstDayOfMonth(date),
	                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

	                if (timeOffset) {
	                    last.setHours(first.getHours() + (timeOffset / 60));
	                }

	                return last;
	            },
	            compare: function(date1, date2) {
	                var result,
	                month1 = date1.getMonth(),
	                year1 = date1.getFullYear(),
	                month2 = date2.getMonth(),
	                year2 = date2.getFullYear();

	                if (year1 > year2) {
	                    result = 1;
	                } else if (year1 < year2) {
	                    result = -1;
	                } else {
	                    result = month1 == month2 ? 0 : month1 > month2 ? 1 : -1;
	                }

	                return result;
	            },
	            setDate: function(date, value) {
	                var hours = date.getHours();
	                if (value instanceof DATE) {
	                    date.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
	                } else {
	                    calendar.setTime(date, value * MS_PER_DAY);
	                }
	                adjustDST(date, hours);
	            },
	            toDateString: function(date) {
	                return date.getFullYear() + "/" + date.getMonth() + "/" + date.getDate();
	            }
	        },
	        {
	            name: "year",
	            title: function(date) {
	                return date.getFullYear();
	            },
	            content: function(options) {
	                var namesAbbr = getCalendarInfo(options.culture).months.namesAbbr,
	                toDateString = this.toDateString,
	                min = options.min,
	                max = options.max;

	                return view({
	                    min: new DATE(min.getFullYear(), min.getMonth(), 1),
	                    max: new DATE(max.getFullYear(), max.getMonth(), 1),
	                    start: new DATE(options.date.getFullYear(), 0, 1),
	                    setter: this.setDate,
	                    build: function(date) {
	                        return {
	                            value: namesAbbr[date.getMonth()],
	                            ns: kendo.ns,
	                            dateString: toDateString(date),
	                            cssClass: ""
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                return new DATE(date.getFullYear(), 0, date.getDate());
	            },
	            last: function(date) {
	                return new DATE(date.getFullYear(), 11, date.getDate());
	            },
	            compare: function(date1, date2){
	                return compare(date1, date2);
	            },
	            setDate: function(date, value) {
	                var month,
	                hours = date.getHours();

	                if (value instanceof DATE) {
	                    month = value.getMonth();

	                    date.setFullYear(value.getFullYear(), month, date.getDate());

	                    if (month !== date.getMonth()) {
	                        date.setDate(0);
	                    }
	                } else {
	                    month = date.getMonth() + value;

	                    date.setMonth(month);

	                    if (month > 11) {
	                        month -= 12;
	                    }

	                    if (month > 0 && date.getMonth() != month) {
	                        date.setDate(0);
	                    }
	                }

	                adjustDST(date, hours);
	            },
	            toDateString: function(date) {
	                return date.getFullYear() + "/" + date.getMonth() + "/1";
	            }
	        },
	        {
	            name: "decade",
	            title: function(date, min, max) {
	                return title(date, min, max, 10);
	            },
	            content: function(options) {
	                var year = options.date.getFullYear(),
	                toDateString = this.toDateString;

	                return view({
	                    start: new DATE(year - year % 10 - 1, 0, 1),
	                    min: new DATE(options.min.getFullYear(), 0, 1),
	                    max: new DATE(options.max.getFullYear(), 0, 1),
	                    setter: this.setDate,
	                    build: function(date, idx) {
	                        return {
	                            value: date.getFullYear(),
	                            ns: kendo.ns,
	                            dateString: toDateString(date),
	                            cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 10, date.getMonth(), date.getDate());
	            },
	            last: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 10 + 9, date.getMonth(), date.getDate());
	            },
	            compare: function(date1, date2) {
	                return compare(date1, date2, 10);
	            },
	            setDate: function(date, value) {
	                setDate(date, value, 1);
	            },
	            toDateString: function(date) {
	                return date.getFullYear() + "/0/1";
	            }
	        },
	        {
	            name: CENTURY,
	            title: function(date, min, max) {
	                return title(date, min, max, 100);
	            },
	            content: function(options) {
	                var year = options.date.getFullYear(),
	                min = options.min.getFullYear(),
	                max = options.max.getFullYear(),
	                toDateString = this.toDateString,
	                minYear = min,
	                maxYear = max;

	                minYear = minYear - minYear % 10;
	                maxYear = maxYear - maxYear % 10;

	                if (maxYear - minYear < 10) {
	                    maxYear = minYear + 9;
	                }

	                return view({
	                    start: new DATE(year - year % 100 - 10, 0, 1),
	                    min: new DATE(minYear, 0, 1),
	                    max: new DATE(maxYear, 0, 1),
	                    setter: this.setDate,
	                    build: function(date, idx) {
	                        var start = date.getFullYear(),
	                        end = start + 9;

	                        if (start < min) {
	                            start = min;
	                        }

	                        if (end > max) {
	                            end = max;
	                        }

	                        return {
	                            ns: kendo.ns,
	                            value: start + " - " + end,
	                            dateString: toDateString(date),
	                            cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 100, date.getMonth(), date.getDate());
	            },
	            last: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 100 + 99, date.getMonth(), date.getDate());
	            },
	            compare: function(date1, date2) {
	                return compare(date1, date2, 100);
	            },
	            setDate: function(date, value) {
	                setDate(date, value, 10);
	            },
	            toDateString: function(date) {
	                var year = date.getFullYear();
	                return (year - year % 10) + "/0/1";
	            }
	        }]
	    };

	    function title(date, min, max, modular) {
	        var start = date.getFullYear(),
	            minYear = min.getFullYear(),
	            maxYear = max.getFullYear(),
	            end;

	        start = start - start % modular;
	        end = start + (modular - 1);

	        if (start < minYear) {
	            start = minYear;
	        }
	        if (end > maxYear) {
	            end = maxYear;
	        }

	        return start + "-" + end;
	    }

	    function view(options) {
	        var idx = 0,
	            data,
	            min = options.min,
	            max = options.max,
	            start = options.start,
	            setter = options.setter,
	            build = options.build,
	            weekNumberBuild = options.weekNumberBuild,
	            length = options.cells || 12,
	            isWeekColumnVisible = options.isWeekColumnVisible,
	            cellsPerRow = options.perRow || 4,
	            weekNumber = options.weekNumber || weekNumberTemplate,
	            content = options.content || cellTemplate,
	            empty = options.empty || emptyCellTemplate,      
	            html = options.html || '<table tabindex="0" role="grid" class="k-content k-meta-view" cellspacing="0"><tbody><tr role="row">';
	            if(isWeekColumnVisible) {
	                html += weekNumber(weekNumberBuild(start));
	            }
	            

	        for(; idx < length; idx++) {
	            if (idx > 0 && idx % cellsPerRow === 0) {
	                html += '</tr><tr role="row">';
	                if(isWeekColumnVisible) {
	                    html += weekNumber(weekNumberBuild(start));
	                }
	            }

	            start = new DATE(start.getFullYear(), start.getMonth(), start.getDate(), 0, 0, 0);
	            adjustDST(start, 0);

	            data = build(start, idx, options.disableDates);

	            html += isInRange(start, min, max) ? content(data) : empty(data);

	            setter(start, 1);
	        }

	        return html + "</tr></tbody></table>";
	    }

	    function compare(date1, date2, modifier) {
	        var year1 = date1.getFullYear(),
	            start  = date2.getFullYear(),
	            end = start,
	            result = 0;

	        if (modifier) {
	            start = start - start % modifier;
	            end = start - start % modifier + modifier - 1;
	        }

	        if (year1 > end) {
	            result = 1;
	        } else if (year1 < start) {
	            result = -1;
	        }

	        return result;
	    }

	    function getToday() {
	        var today = new DATE();
	        return new DATE(today.getFullYear(), today.getMonth(), today.getDate());
	    }

	    function restrictValue (value, min, max) {
	        var today = getToday();

	        if (value) {
	            today = new DATE(+value);
	        }

	        if (min > today) {
	            today = new DATE(+min);
	        } else if (max < today) {
	            today = new DATE(+max);
	        }
	        return today;
	    }

	    function isInRange(date, min, max) {
	        return +date >= +min && +date <= +max;
	    }

	    function shiftArray(array, idx) {
	        return array.slice(idx).concat(array.slice(0, idx));
	    }

	    function setDate(date, value, multiplier) {
	        value = value instanceof DATE ? value.getFullYear() : date.getFullYear() + multiplier * value;
	        date.setFullYear(value);
	    }

	    function mousetoggle(e) {
	        var disabled = $(this).hasClass("k-state-disabled");

	        if (!disabled) {
	            $(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);
	        }
	    }

	    function prevent (e) {
	        e.preventDefault();
	    }

	    function getCalendarInfo(culture) {
	        return getCulture(culture).calendars.standard;
	    }

	    function normalize(options) {
	        var start = views[options.start],
	            depth = views[options.depth],
	            culture = getCulture(options.culture);

	        options.format = extractFormat(options.format || culture.calendars.standard.patterns.d);

	        if (isNaN(start)) {
	            start = 0;
	            options.start = MONTH;
	        }

	        if (depth === undefined || depth > start) {
	            options.depth = MONTH;
	        }

	        if (options.dates === null) {
	            options.dates = [];
	        }
	    }

	    function makeUnselectable(element) {
	        if (isIE8) {
	            element.find("*").attr("unselectable", "on");
	        }
	    }

	    function addClassToViewContainer(element, currentView) {
	        element.addClass("k-" + currentView);
	    }

	    function inArray(date, dates) {
	        for(var i = 0, length = dates.length; i < length; i++) {
	            if (date === +dates[i]) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function isEqualDatePart(value1, value2) {
	        if (value1) {
	            return value1.getFullYear() === value2.getFullYear() &&
	                value1.getMonth() === value2.getMonth() &&
	                value1.getDate() === value2.getDate();
	        }

	        return false;
	    }

	    function isEqualMonth(value1, value2) {
	        if (value1) {
	            return value1.getFullYear() === value2.getFullYear() &&
	                value1.getMonth() === value2.getMonth();
	        }

	        return false;
	    }


	    function getDisabledExpr(option) {
	        if (kendo.isFunction(option)) {
	            return option;
	        }

	        if ($.isArray(option)) {
	            return createDisabledExpr(option);
	        }
	        return $.noop;
	    }

	    function convertDatesArray(dates) {
	        var result = [];
	        for (var i = 0; i < dates.length; i++) {
	            result.push(dates[i].setHours(0, 0, 0, 0));
	        }
	        return result;
	    }

	    function createDisabledExpr(dates) {
	        var body, callback,
	            disabledDates = [],
	            days = ["su", "mo", "tu", "we", "th", "fr", "sa"],
	            searchExpression = "if (found) {"+
	                    " return true " +
	                "} else {" +
	                    "return false" +
	                "}";

	        if (dates[0] instanceof DATE) {
	            disabledDates = convertDatesArray(dates);
	            body = "var found = date && $.inArray(date.setHours(0, 0, 0, 0),["+ disabledDates +"]) > -1;" + searchExpression;
	        } else {
	            for (var i = 0; i < dates.length; i++) {
	                var day = dates[i].slice(0,2).toLowerCase();
	                var index = $.inArray(day, days);
	                if (index > -1) {
	                    disabledDates.push(index);
	                }
	            }
	            body = "var found = date && $.inArray(date.getDay(),["+ disabledDates +"]) > -1;" + searchExpression;
	        }

	        callback = new Function("date", body); //jshint ignore:line

	        return callback;
	    }

	    function isEqualDate(oldValue, newValue) {
	       if (oldValue instanceof Date && newValue instanceof Date) {
	           oldValue = oldValue.getTime();
	           newValue = newValue.getTime();
	       }

	       return oldValue === newValue;
	    }

	    calendar.isEqualDatePart = isEqualDatePart;
	    calendar.isEqualDate = isEqualDate;
	    calendar.makeUnselectable =  makeUnselectable;
	    calendar.restrictValue = restrictValue;
	    calendar.isInRange = isInRange;
	    calendar.addClassToViewContainer = addClassToViewContainer;
	    calendar.normalize = normalize;
	    calendar.viewsEnum = views;
	    calendar.disabled = getDisabledExpr;

	    kendo.calendar = calendar;
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 116 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.columnmenu.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(600);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 600:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(596), __webpack_require__(601), __webpack_require__(602) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "columnmenu",
	    name: "Column Menu",
	    category: "framework",
	    depends: [ "popup", "filtermenu", "menu" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        proxy = $.proxy,
	        extend = $.extend,
	        grep = $.grep,
	        map = $.map,
	        inArray = $.inArray,
	        ACTIVE = "k-state-selected",
	        ASC = "asc",
	        DESC = "desc",
	        CHANGE = "change",
	        INIT = "init",
	        SELECT = "select",
	        POPUP = "kendoPopup",
	        FILTERMENU = "kendoFilterMenu",
	        MENU = "kendoMenu",
	        NS = ".kendoColumnMenu",
	        Widget = ui.Widget;

	    function trim(text) {
	        return $.trim(text).replace(/&nbsp;/gi, "");
	    }

	    function toHash(arr, key) {
	        var result = {};
	        var idx, len, current;
	        for (idx = 0, len = arr.length; idx < len; idx ++) {
	            current = arr[idx];
	            result[current[key]] = current;
	        }
	        return result;
	    }

	    function leafColumns(columns) {
	        var result = [];

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (!columns[idx].columns) {
	                result.push(columns[idx]);
	                continue;
	            }
	            result = result.concat(leafColumns(columns[idx].columns));
	        }

	        return result;
	    }

	    var ColumnMenu = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                link;

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;
	            that.owner = options.owner;
	            that.dataSource = options.dataSource;

	            that.field = element.attr(kendo.attr("field"));
	            that.title = element.attr(kendo.attr("title"));

	            link = element.find(".k-header-column-menu");

	            if (!link[0]) {
	                link = element.addClass("k-with-icon").prepend('<a class="k-header-column-menu" href="#" title="' + options.messages.settings + '"><span class="k-icon k-i-more-vertical"></span></a>').find(".k-header-column-menu");
	            }

	            that.link = link
	                .attr("tabindex", -1)
	                .on("click" + NS, proxy(that._click, that));

	            that.wrapper = $('<div class="k-column-menu"/>');

	            that._refreshHandler = proxy(that.refresh, that);

	            that.dataSource.bind(CHANGE, that._refreshHandler);
	        },

	        _init: function() {
	            var that = this;

	            that.pane = that.options.pane;
	            if (that.pane) {
	                that._isMobile = true;
	            }

	            if (that._isMobile) {
	                that._createMobileMenu();
	            } else {
	                that._createMenu();
	            }

	            that.owner._muteAngularRebind(function() {
	                that._angularItems("compile");
	            });

	            that._sort();

	            that._columns();

	            that._filter();

	            that._lockColumns();

	            that.trigger(INIT, { field: that.field, container: that.wrapper });
	        },

	        events: [ INIT, "sort", "filtering" ],

	        options: {
	            name: "ColumnMenu",
	            messages: {
	                sortAscending: "Sort Ascending",
	                sortDescending: "Sort Descending",
	                filter: "Filter",
	                columns: "Columns",
	                done: "Done",
	                settings: "Column Settings",
	                lock: "Lock",
	                unlock: "Unlock"
	            },
	            filter: "",
	            columns: true,
	            sortable: true,
	            filterable: true,
	            animations: {
	                left: "slide"
	            }
	        },

	        _createMenu: function() {
	            var that = this,
	                options = that.options;

	            that.wrapper.html(kendo.template(template)({
	                uid: kendo.guid(),
	                ns: kendo.ns,
	                messages: options.messages,
	                sortable: options.sortable,
	                filterable: options.filterable,
	                columns: that._ownerColumns(),
	                showColumns: options.columns,
	                lockedColumns: options.lockedColumns
	            }));

	            that.popup = that.wrapper[POPUP]({
	                anchor: that.link,
	                open: proxy(that._open, that),
	                activate: proxy(that._activate, that),
	                close: function() {
	                    if (that.options.closeCallback) {
	                        that.options.closeCallback(that.element);
	                    }
	                }
	            }).data(POPUP);

	            that.menu = that.wrapper.children()[MENU]({
	                orientation: "vertical",
	                closeOnClick: false
	            }).data(MENU);
	        },

	        _createMobileMenu: function() {
	            var that = this,
	                options = that.options;

	            var html = kendo.template(mobileTemplate)({
	                ns: kendo.ns,
	                field: that.field,
	                title: that.title || that.field,
	                messages: options.messages,
	                sortable: options.sortable,
	                filterable: options.filterable,
	                columns: that._ownerColumns(),
	                showColumns: options.columns,
	                lockedColumns: options.lockedColumns
	            });

	            that.view = that.pane.append(html);

	            that.wrapper = that.view.element.find(".k-column-menu");

	            that.menu = new MobileMenu(that.wrapper.children(), {
	                pane: that.pane
	            });

	            that.view.element.on("click", ".k-done", function(e) {
	                that.close();
	                e.preventDefault();
	            });

	            if (that.options.lockedColumns) {
	                that.view.bind("show", function() {
	                    that._updateLockedColumns();
	                });
	            }
	        },

	        _angularItems: function(action) {
	            var that = this;
	            that.angular(action, function(){
	                var items = that.wrapper.find(".k-columns-item input[" + kendo.attr("field") + "]").map(function(){
	                    return $(this).closest("li");
	                });
	                var data = map(that._ownerColumns(), function(col){
	                    return { column: col._originalObject };
	                });
	                return {
	                    elements: items,
	                    data: data
	                };
	            });
	        },

	        destroy: function() {
	            var that = this;

	            that._angularItems("cleanup");

	            Widget.fn.destroy.call(that);

	            if (that.filterMenu) {
	                that.filterMenu.destroy();
	            }

	            if (that._refreshHandler) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);
	            }

	            if (that.options.columns && that.owner) {
	                if (that._updateColumnsMenuHandler) {
	                    that.owner.unbind("columnShow", that._updateColumnsMenuHandler);
	                    that.owner.unbind("columnHide", that._updateColumnsMenuHandler);
	                }

	                if (that._updateColumnsLockedStateHandler) {
	                    that.owner.unbind("columnLock", that._updateColumnsLockedStateHandler);
	                    that.owner.unbind("columnUnlock", that._updateColumnsLockedStateHandler);
	                }
	            }

	            if (that.menu) {
	                that.menu.element.off(NS);
	                that.menu.destroy();
	            }

	            that.wrapper.off(NS);

	            if (that.popup) {
	                that.popup.destroy();
	            }

	            if (that.view) {
	                that.view.purge();
	            }

	            that.link.off(NS);
	            that.owner = null;
	            that.wrapper = null;
	            that.element = null;
	        },

	        close: function() {
	            this.menu.close();
	            if (this.popup) {
	                this.popup.close();
	                this.popup.element.off("keydown" + NS);
	            }
	        },

	        _click: function(e) {
	            e.preventDefault();
	            e.stopPropagation();

	            var options = this.options;

	            if (options.filter && this.element.is(!options.filter)) {
	                return;
	            }

	            if (!this.popup && !this.pane) {
	                this._init();
	            }

	            if (this._isMobile) {
	                this.pane.navigate(this.view, this.options.animations.left);
	            } else {
	                this.popup.toggle();
	            }
	        },

	        _open: function() {
	            var that = this;
	            $(".k-column-menu").not(that.wrapper).each(function() {
	                $(this).data(POPUP).close();
	            });
	            that.popup.element.on("keydown" + NS, function(e) {
	                if (e.keyCode == kendo.keys.ESC) {
	                    that.close();
	                }
	            });

	            if (that.options.lockedColumns) {
	                that._updateLockedColumns();
	            }
	        },

	        _activate: function() {
	            this.menu.element.focus();
	        },

	        _ownerColumns: function() {
	            var columns = leafColumns(this.owner.columns),
	                menuColumns = grep(columns, function(col) {
	                    var result = true,
	                        title = trim(col.title || "");

	                    if (col.menu === false || (!col.field && !title.length)) {
	                        result = false;
	                    }

	                    return result;
	                });

	            return map(menuColumns, function(col) {
	                return {
	                    originalField: col.field,
	                    field: col.field || col.title,
	                    title: col.title || col.field,
	                    hidden: col.hidden,
	                    index: inArray(col, columns),
	                    locked: !!col.locked,
	                    _originalObject: col
	                };
	            });
	        },

	        _sort: function() {
	            var that = this;

	            if (that.options.sortable) {
	                that.refresh();

	                that.menu.bind(SELECT, function(e) {
	                    var item = $(e.item),
	                        dir;

	                    if (item.hasClass("k-sort-asc")) {
	                        dir = ASC;
	                    } else if (item.hasClass("k-sort-desc")) {
	                        dir = DESC;
	                    }

	                    if (!dir) {
	                        return;
	                    }

	                    item.parent().find(".k-sort-" + (dir == ASC ? DESC : ASC)).removeClass(ACTIVE);

	                    that._sortDataSource(item, dir);

	                    that.close();
	                });
	            }
	        },

	        _sortDataSource: function(item, dir) {
	            var that = this,
	                sortable = that.options.sortable,
	                compare = sortable.compare === null ? undefined : sortable.compare,
	                dataSource = that.dataSource,
	                idx,
	                length,
	                sort = dataSource.sort() || [];

	            var removeClass = item.hasClass(ACTIVE) && sortable && sortable.allowUnsort !== false;

	            dir = !removeClass ? dir : undefined;

	            if (that.trigger("sort", { sort: { field: that.field, dir: dir, compare: compare } })) {
	                return;
	            }

	            if (removeClass) {
	                item.removeClass(ACTIVE);
	            } else {
	                item.addClass(ACTIVE);
	            }

	            if (sortable.mode === "multiple") {
	                for (idx = 0, length = sort.length; idx < length; idx++) {
	                    if (sort[idx].field === that.field) {
	                        sort.splice(idx, 1);
	                        break;
	                    }
	                }
	                sort.push({ field: that.field, dir: dir, compare: compare });
	            } else {
	                sort = [ { field: that.field, dir: dir, compare: compare} ];
	            }

	            dataSource.sort(sort);
	        },

	        _columns: function() {
	            var that = this;

	            if (that.options.columns) {

	                that._updateColumnsMenu();

	                that._updateColumnsMenuHandler = proxy(that._updateColumnsMenu, that);

	                that.owner.bind(["columnHide", "columnShow"], that._updateColumnsMenuHandler);

	                that._updateColumnsLockedStateHandler = proxy(that._updateColumnsLockedState, that);

	                that.owner.bind(["columnUnlock", "columnLock" ], that._updateColumnsLockedStateHandler);

	                that.menu.bind(SELECT, function(e) {
	                    var item = $(e.item),
	                        input,
	                        column,
	                        columns = leafColumns(that.owner.columns),
	                        field;

	                    if (that._isMobile) {
	                        e.preventDefault();
	                    }

	                    if (!item.parent().closest("li.k-columns-item")[0]) {
	                        return;
	                    }

	                    input = item.find(":checkbox");
	                    if (input.attr("disabled")) {
	                        return;
	                    }

	                    field = input.attr(kendo.attr("field"));

	                    column = grep(columns, function(column) {
	                        return column.field == field || column.title == field;
	                    })[0];

	                    if (column.hidden === true) {
	                        that.owner.showColumn(column);
	                    } else {
	                        that.owner.hideColumn(column);
	                    }
	                });
	            }
	        },

	        _updateColumnsMenu: function() {
	            var idx, length, current, checked, locked;
	            var fieldAttr = kendo.attr("field"),
	                lockedAttr = kendo.attr("locked"),
	                visible = grep(this._ownerColumns(), function(field) {
	                    return !field.hidden;
	                }),
	                visibleDataFields = grep(visible, function(field) {
	                    return field.originalField;
	                }),
	                lockedCount = grep(visibleDataFields, function(col) {
	                    return col.locked === true;
	                }).length,
	                nonLockedCount = grep(visibleDataFields, function(col) {
	                    return col.locked !== true;
	                }).length;

	            visible = map(visible, function(col) {
	                return col.field;
	            });

	            this.wrapper.find("[role='menuitemcheckbox']").attr("aria-checked", false);

	            var checkboxes = this.wrapper
	                .find(".k-columns-item input[" + fieldAttr + "]")
	                .prop("disabled", false)
	                .prop("checked", false);

	            for (idx = 0, length = checkboxes.length; idx < length; idx ++) {
	                current = checkboxes.eq(idx);
	                locked = current.attr(lockedAttr) === "true";
	                checked = false;
	                if (inArray(current.attr(fieldAttr), visible) > -1) {
	                    checked = true;
	                    current.prop("checked", checked);
	                }

	                current.closest("[role='menuitemcheckbox']").attr("aria-checked", checked);

	                if (checked) {
	                    if (lockedCount == 1 && locked) {
	                        current.prop("disabled", true);
	                    }

	                    if (nonLockedCount == 1 && !locked) {
	                        current.prop("disabled", true);
	                    }
	                }
	            }
	        },

	        _updateColumnsLockedState: function() {
	            var idx, length, current, column;
	            var fieldAttr = kendo.attr("field");
	            var lockedAttr = kendo.attr("locked");
	            var columns = toHash(this._ownerColumns(), "field");
	            var checkboxes = this.wrapper
	                .find(".k-columns-item input[type=checkbox]");

	            for (idx = 0, length = checkboxes.length; idx < length; idx ++ ) {
	                current = checkboxes.eq(idx);
	                column = columns[current.attr(fieldAttr)];
	                if (column) {
	                    current.attr(lockedAttr, column.locked);
	                }
	            }

	            this._updateColumnsMenu();
	        },

	        _filter: function() {
	            var that = this,
	                widget = FILTERMENU,
	                options = that.options;

	            if (options.filterable !== false) {

	                if (options.filterable.multi) {
	                    widget = "kendoFilterMultiCheck";
	                    if (options.filterable.dataSource) {
	                        options.filterable.checkSource = options.filterable.dataSource;
	                        delete options.filterable.dataSource;
	                    }
	                }
	                that.filterMenu = that.wrapper.find(".k-filterable")[widget](
	                    extend(true, {}, {
	                        appendToElement: true,
	                        dataSource: options.dataSource,
	                        values: options.values,
	                        field: that.field,
	                        title: that.title,
	                        change: function(e) {
	                            if (that.trigger("filtering", { filter: e.filter, field: e.field })) {
	                                e.preventDefault();
	                            }
	                        }
	                    },
	                    options.filterable)
	                    ).data(widget);

	                if (that._isMobile) {
	                    that.menu.bind(SELECT, function(e) {
	                        var item = $(e.item);

	                        if (item.hasClass("k-filter-item")) {
	                            that.pane.navigate(that.filterMenu.view, that.options.animations.left);
	                        }
	                    });
	                }
	            }
	        },

	        _lockColumns: function() {
	            var that = this;
	            that.menu.bind(SELECT, function(e) {
	                var item = $(e.item);

	                if (item.hasClass("k-lock")) {
	                    that.owner.lockColumn(that.field);
	                    that.close();
	                } else if (item.hasClass("k-unlock")) {
	                    that.owner.unlockColumn(that.field);
	                    that.close();
	                }
	            });
	        },

	        _updateLockedColumns: function() {
	            var field = this.field;
	            var columns = this.owner.columns;
	            var column = grep(columns, function(column) {
	                return column.field == field || column.title == field;
	            })[0];

	            if (!column) {
	                return;
	            }

	            var locked = column.locked === true;
	            var length = grep(columns, function(column) {
	                return !column.hidden && ((column.locked && locked) || (!column.locked && !locked));
	            }).length;

	            var lockItem = this.wrapper.find(".k-lock").removeClass("k-state-disabled");
	            var unlockItem = this.wrapper.find(".k-unlock").removeClass("k-state-disabled");

	            if (locked || length == 1) {
	                lockItem.addClass("k-state-disabled");
	            }

	            if (!locked || length == 1) {
	                unlockItem.addClass("k-state-disabled");
	            }

	            this._updateColumnsLockedState();
	        },

	        refresh: function() {
	            var that = this,
	                sort = that.options.dataSource.sort() || [],
	                descriptor,
	                field = that.field,
	                idx,
	                length;

	            that.wrapper.find(".k-sort-asc, .k-sort-desc").removeClass(ACTIVE);

	            for (idx = 0, length = sort.length; idx < length; idx++) {
	               descriptor = sort[idx];

	               if (field == descriptor.field) {
	                   that.wrapper.find(".k-sort-" + descriptor.dir).addClass(ACTIVE);
	               }
	            }

	            that.link[that._filterExist(that.dataSource.filter()) ? "addClass" : "removeClass"]("k-state-active");
	        },

	        _filterExist: function(filters) {
	            var found = false;
	            var filter;

	            if (!filters) {
	                return;
	            }

	            filters = filters.filters;

	            for (var idx = 0, length = filters.length; idx < length; idx++) {
	                filter = filters[idx];

	                if (filter.field == this.field) {
	                    found = true;
	                } else if (filter.filters) {
	                    found = found || this._filterExist(filter);
	                }
	            }

	            return found;
	        }
	    });

	    var template = '<ul id="#=uid#">'+
	                    '#if(sortable){#'+
	                        '<li class="k-item k-sort-asc"><span class="k-link"><span class="k-icon k-i-sort-asc-sm"></span>${messages.sortAscending}</span></li>'+
	                        '<li class="k-item k-sort-desc"><span class="k-link"><span class="k-icon k-i-sort-desc-sm"></span>${messages.sortDescending}</span></li>'+
	                        '#if(showColumns || filterable){#'+
	                            '<li class="k-separator" role="presentation"></li>'+
	                        '#}#'+
	                    '#}#'+
	                    '#if(showColumns){#'+
	                        '<li class="k-item k-columns-item" aria-haspopup="true"><span class="k-link"><span class="k-icon k-i-columns"></span>${messages.columns}</span><ul>'+
	                        '#for (var idx = 0; idx < columns.length; idx++) {#'+
	                            '<li role="menuitemcheckbox" aria-checked="false"><input type="checkbox" data-#=ns#field="#=columns[idx].field.replace(/\"/g,"&\\#34;")#" data-#=ns#index="#=columns[idx].index#" data-#=ns#locked="#=columns[idx].locked#"/>#=columns[idx].title#</li>'+
	                        '#}#'+
	                        '</ul></li>'+
	                        '#if(filterable || lockedColumns){#'+
	                            '<li class="k-separator" role="presentation"></li>'+
	                        '#}#'+
	                    '#}#'+
	                    '#if(filterable){#'+
	                        '<li class="k-item k-filter-item" aria-haspopup="true"><span class="k-link"><span class="k-icon k-i-filter"></span>${messages.filter}</span><ul>'+
	                            '<li><div class="k-filterable"></div></li>'+
	                        '</ul></li>'+
	                        '#if(lockedColumns){#'+
	                            '<li class="k-separator" role="presentation"></li>'+
	                        '#}#'+
	                    '#}#'+
	                    '#if(lockedColumns){#'+
	                        '<li class="k-item k-lock"><span class="k-link"><span class="k-icon k-i-lock"></span>${messages.lock}</span></li>'+
	                        '<li class="k-item k-unlock"><span class="k-link"><span class="k-icon k-i-unlock"></span>${messages.unlock}</span></li>'+
	                    '#}#'+
	                    '</ul>';

	    var mobileTemplate =
	            '<div data-#=ns#role="view" data-#=ns#init-widgets="false" data-#=ns#use-native-scrolling="true" class="k-grid-column-menu">'+
	                '<div data-#=ns#role="header" class="k-header">'+
	                    '${messages.settings}'+
	                    '<button class="k-button k-done">#=messages.done#</button>'+
	                '</div>'+
	                '<div class="k-column-menu k-mobile-list"><ul><li>'+
	                    '<span class="k-link">${title}</span><ul>'+
	                '#if(sortable){#'+
	                    '<li class="k-item k-sort-asc"><span class="k-link"><span class="k-icon k-i-sort-asc-sm"></span>${messages.sortAscending}</span></li>'+
	                    '<li class="k-item k-sort-desc"><span class="k-link"><span class="k-icon k-i-sort-desc-sm"></span>${messages.sortDescending}</span></li>'+
	                '#}#'+
	                '#if(lockedColumns){#'+
	                    '<li class="k-item k-lock"><span class="k-link"><span class="k-icon k-i-lock"></span>${messages.lock}</span></li>'+
	                    '<li class="k-item k-unlock"><span class="k-link"><span class="k-icon k-i-unlock"></span>${messages.unlock}</span></li>'+
	                '#}#'+
	                '#if(filterable){#'+
	                    '<li class="k-item k-filter-item">'+
	                        '<span class="k-link k-filterable">'+
	                            '<span class="k-icon k-i-filter"></span>'+
	                            '${messages.filter}</span>'+
	                    '</li>'+
	                '#}#'+
	                '</ul></li>'+
	                '#if(showColumns){#'+
	                    '<li class="k-columns-item"><span class="k-link">${messages.columns}</span><ul>'+
	                    '#for (var idx = 0; idx < columns.length; idx++) {#'+
	                        '<li class="k-item"><label class="k-label"><input type="checkbox" class="k-check" data-#=ns#field="#=columns[idx].field.replace(/\"/g,"&\\#34;")#" data-#=ns#index="#=columns[idx].index#" data-#=ns#locked="#=columns[idx].locked#"/>#=columns[idx].title#</label></li>'+
	                    '#}#'+
	                    '</ul></li>'+
	                '#}#'+
	                '</ul></div>'+
	            '</div>';

	    var MobileMenu = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            this.element.on("click" + NS, "li.k-item:not(.k-separator):not(.k-state-disabled)", "_click");
	        },

	        events: [ SELECT ],

	        _click: function(e) {
	            if (!$(e.target).is("[type=checkbox]")) {
	                e.preventDefault();
	            }

	            this.trigger(SELECT, { item: e.currentTarget });
	        },

	        close: function() {
	            this.options.pane.navigate("");
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            this.element.off(NS);
	        }
	    });

	    ui.plugin(ColumnMenu);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 601:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.filtermenu */ 58);

/***/ },

/***/ 602:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.menu */ 124);

/***/ }

/******/ });

/***/ }),
/* 117 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.columnsorter.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(603);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 603:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "columnsorter",
	    name: "Column Sorter",
	    category: "framework",
	    depends: ["core"],
	    advanced: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo;
	    var ui = kendo.ui;
	    var Widget = ui.Widget;
	    var DIR = "dir";
	    var ASC = "asc";
	    var SINGLE = "single";
	    var FIELD = "field";
	    var DESC = "desc";
	    var sorterNS = ".kendoColumnSorter";
	    var TLINK = ".k-link";
	    var ARIASORT = "aria-sort";
	    var proxy = $.proxy;

	    var ColumnSorter = Widget.extend({
	        init: function (element, options) {

	            var that = this, link;

	            Widget.fn.init.call(that, element, options);

	            that._refreshHandler = proxy(that.refresh, that);

	            that.dataSource = that.options.dataSource.bind("change", that._refreshHandler);

	            that.directions = that.options.initialDirection === ASC ? [ASC, DESC] : [DESC, ASC];

	            link = that.element.find(TLINK);

	            if (!link[0]) {
	                link = that.element.wrapInner('<a class="k-link" href="#"/>').find(TLINK);
	            }

	            that.link = link;

	            that.element.on("click" + sorterNS, proxy(that._click, that));
	        },

	        options: {
	            name: "ColumnSorter",
	            mode: SINGLE,
	            allowUnsort: true,
	            compare: null,
	            filter: "",
	            initialDirection: ASC
	        },

	        events: ["change"],

	        destroy: function () {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.element.off(sorterNS);

	            that.dataSource.unbind("change", that._refreshHandler);
	            that._refreshHandler = that.element = that.link = that.dataSource = null;
	        },

	        refresh: function () {
	            var that = this,
	                sort = that.dataSource.sort() || [],
	                idx,
	                length,
	                descriptor,
	                dir,
	                element = that.element,
	                field = element.attr(kendo.attr(FIELD));

	            element.removeAttr(kendo.attr(DIR));
	            element.removeAttr(ARIASORT);

	            for (idx = 0, length = sort.length; idx < length; idx++) {
	                descriptor = sort[idx];

	                if (field == descriptor.field) {
	                    element.attr(kendo.attr(DIR), descriptor.dir);
	                }
	            }

	            dir = element.attr(kendo.attr(DIR));
	            element.find(".k-i-sort-asc-sm,.k-i-sort-desc-sm").remove();

	            if (dir === ASC) {
	                $('<span class="k-icon k-i-sort-asc-sm" />').appendTo(that.link);
	                element.attr(ARIASORT, "ascending");
	            } else if (dir === DESC) {
	                $('<span class="k-icon k-i-sort-desc-sm" />').appendTo(that.link);
	                element.attr(ARIASORT, "descending");
	            }
	        },

	        _toggleSortDirection: function(dir) {
	            var directions = this.directions;
	            if (dir === directions[directions.length - 1] && this.options.allowUnsort) {
	                return undefined;
	            }
	            return directions[0] === dir ? directions[1] : directions[0];
	        },

	        _click: function (e) {
	            var that = this,
	                element = that.element,
	                field = element.attr(kendo.attr(FIELD)),
	                dir = element.attr(kendo.attr(DIR)),
	                options = that.options,
	                compare = that.options.compare === null ? undefined : that.options.compare,
	                sort = that.dataSource.sort() || [],
	                idx,
	                length;

	            e.preventDefault();

	            if (options.filter && !element.is(options.filter)) {
	                return;
	            }

	            dir = this._toggleSortDirection(dir);

	            if (this.trigger("change", { sort: { field: field, dir: dir, compare: compare } })) {
	                return;
	            }

	            if (options.mode === SINGLE) {
	                sort = [{ field: field, dir: dir, compare: compare }];
	            } else if (options.mode === "multiple") {
	                for (idx = 0, length = sort.length; idx < length; idx++) {
	                    if (sort[idx].field === field) {
	                        sort.splice(idx, 1);
	                        break;
	                    }
	                }
	                sort.push({ field: field, dir: dir, compare: compare });
	            }


	            this.dataSource.sort(sort);
	        }
	    });

	    ui.plugin(ColumnSorter);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 118 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.combobox.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(604);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 588:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.list */ 23);

/***/ },

/***/ 589:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ 9);

/***/ },

/***/ 604:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(588), __webpack_require__(589) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "combobox",
	    name: "ComboBox",
	    category: "web",
	    description: "The ComboBox widget allows the selection from pre-defined values or entering a new value.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        List = ui.List,
	        Select = ui.Select,
	        caret = kendo.caret,
	        support = kendo.support,
	        placeholderSupported = support.placeholder,
	        activeElement = kendo._activeElement,
	        keys = kendo.keys,
	        ns = ".kendoComboBox",
	        CLICK = "click" + ns,
	        MOUSEDOWN = "mousedown" + ns,
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        CHANGE = "change",
	        DEFAULT = "k-state-default",
	        FOCUSED = "k-state-focused",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_DISABLED = "aria-disabled",
	        STATE_FILTER = "filter",
	        STATE_ACCEPT = "accept",
	        STATE_REBIND = "rebind",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        proxy = $.proxy;

	    var ComboBox = Select.extend({
	        init: function(element, options) {
	            var that = this, text, disabled;

	            that.ns = ns;

	            options = $.isArray(options) ? { dataSource: options } : options;

	            Select.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element.on("focus" + ns, proxy(that._focusHandler, that));

	            options.placeholder = options.placeholder || element.attr("placeholder");

	            that._reset();

	            that._wrapper();

	            that._input();

	            that._clearButton();

	            that._tabindex(that.input);

	            that._popup();

	            that._dataSource();
	            that._ignoreCase();

	            that._enable();

	            that._oldIndex = that.selectedIndex = -1;

	            that._aria();

	            that._initialIndex = options.index;

	            that.requireValueMapper(that.options);
	            that._initList();

	            that._cascade();

	            if (options.autoBind) {
	                that._filterSource();
	            } else {
	                text = options.text;

	                if (!text && that._isSelect) {
	                    text = element.children(":selected").text();
	                }

	                if (text) {
	                    that._setText(text);
	                }
	            }

	            if (!text) {
	                that._placeholder();
	            }

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            kendo.notify(that);
	        },

	        options: {
	            name: "ComboBox",
	            enabled: true,
	            index: -1,
	            text: null,
	            value: null,
	            autoBind: true,
	            delay: 200,
	            dataTextField: "",
	            dataValueField: "",
	            minLength: 1,
	            enforceMinLength: false,
	            height: 200,
	            highlightFirst: true,
	            filter: "none",
	            placeholder: "",
	            suggest: false,
	            cascadeFrom: "",
	            cascadeFromField: "",
	            ignoreCase: true,
	            animation: {},
	            virtual: false,
	            template: null,
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#",
	            clearButton: true,
	            syncValueAndText: true
	        },

	        events:[
	            "open",
	            "close",
	            CHANGE,
	            "select",
	            "filtering",
	            "dataBinding",
	            "dataBound",
	            "cascade",
	            "set"
	        ],

	        setOptions: function(options) {
	            Select.fn.setOptions.call(this, options);

	            this.listView.setOptions(options);

	            this._accessors();
	            this._aria();
	        },

	        destroy: function() {
	            var that = this;

	            that.input.off(ns);
	            that.element.off(ns);
	            that._inputWrapper.off(ns);
	            clearTimeout(that._pasteTimeout);

	            that._arrow.off(CLICK + " " + MOUSEDOWN);
	            that._clear.off(CLICK + " " + MOUSEDOWN);

	            Select.fn.destroy.call(that);
	        },

	        _change: function() {
	            var that = this;
	            var text = that.text();
	            var hasText = text && text !== that._oldText && text !== that.options.placeholder;
	            var index = that.selectedIndex;
	            var isCustom = index === -1;

	            if (!that.options.syncValueAndText && !that.value() && isCustom && hasText) {
	                that._old = "";
	                that._oldIndex = index;
	                that._oldText = text;

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	                that._typing = false;
	                return;
	            }

	            Select.fn._change.call(that);
	        },

	        _focusHandler: function() {
	            this.input.focus();
	        },

	        _arrowClick: function() {
	            this._toggle();
	        },

	        _inputFocus: function() {
	            this._inputWrapper.addClass(FOCUSED);
	            this._placeholder(false);
	        },

	        _inputFocusout: function() {
	            var that = this;
	            var value = that.value();

	            that._inputWrapper.removeClass(FOCUSED);
	            clearTimeout(that._typingTimeout);
	            that._typingTimeout = null;

	            that.text(that.text());

	            var item = that._focus();
	            var dataItem = this.listView.dataItemByIndex(this.listView.getElementIndex(item));

	            if (value !== that.value() && that.trigger("select", { dataItem: dataItem, item: item })) {
	                that.value(value);
	                return;
	            }

	            that._placeholder();
	            that._blur();

	            that.element.blur();
	        },

	        _inputPaste: function() {
	            var that = this;
	            clearTimeout(that._pasteTimeout);
	            that._pasteTimeout = null;

	            that._pasteTimeout = setTimeout(function() {
	                that.search();
	            });
	        },

	        _editable: function(options) {
	            var that = this,
	                disable = options.disable,
	                readonly = options.readonly,
	                wrapper = that._inputWrapper.off(ns),
	                input = that.element.add(that.input.off(ns)),
	                arrow = that._arrow.off(CLICK + " " + MOUSEDOWN),
	                clear = that._clear;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                input.removeAttr(DISABLED)
	                     .removeAttr(READONLY)
	                     .attr(ARIA_DISABLED, false);

	                arrow.on(CLICK, proxy(that._arrowClick, that))
	                     .on(MOUSEDOWN, function(e) { e.preventDefault(); });

	                clear.on(CLICK, proxy(that._clearValue, that))
	                    .on(MOUSEDOWN, function(e) { e.preventDefault(); });

	                that.input
	                    .on("keydown" + ns, proxy(that._keydown, that))
	                    .on("focus" + ns, proxy(that._inputFocus, that))
	                    .on("focusout" + ns, proxy(that._inputFocusout, that))
	                    .on("paste" + ns, proxy(that._inputPaste, that));

	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                input.attr(DISABLED, disable)
	                     .attr(READONLY, readonly)
	                     .attr(ARIA_DISABLED, disable);
	            }
	        },

	        open: function() {
	            var that = this;
	            var state = that._state;

	            if (that.popup.visible()) {
	                return;
	            }

	            if ((!that.listView.bound() && state !== STATE_FILTER) || state === STATE_ACCEPT) {
	                that._open = true;
	                that._state = STATE_REBIND;
	                if (that.options.minLength !== 1) {
	                    that.refresh();
	                    that._openPopup();
	                } else {
	                    that._filterSource();
	                }
	            } else if (that._allowOpening()) {
	                that._openPopup();
	                that._focusItem();
	            }
	        },

	        _scrollToFocusedItem: function() {
	            var listView = this.listView;

	            listView.scrollToIndex(listView.getElementIndex(listView.focus()));
	        },

	        _openPopup: function() {
	            this.popup.one("activate", proxy(this._scrollToFocusedItem, this));
	            this.popup.open();
	        },

	        _updateSelectionState: function() {
	            var that = this;
	            var text = that.options.text;
	            var value = that.options.value;

	            if (that.listView.isFiltered()) {
	                return;
	            }

	            if (that.selectedIndex === -1) {
	                if (text === undefined || text === null) {
	                    text = value;
	                }

	                that._accessor(value);
	                that.input.val(text || that.input.val());
	                that._placeholder();
	            } else if (that._oldIndex === -1) {
	                that._oldIndex = that.selectedIndex;
	            }
	        },

	        _buildOptions: function(data) {
	            var that = this;
	            if (!that._isSelect) {
	                return;
	            }

	            var custom = that._customOption;

	            if (that._state === STATE_REBIND) {
	                that._state = "";
	            }

	            that._customOption = undefined;
	            that._options(data, "", that.value());

	            if (custom && custom[0].selected) {
	                that._custom(custom.val());
	            }
	        },

	        _updateSelection: function() {
	            var that = this;
	            var listView = that.listView;
	            var initialIndex = that._initialIndex;
	            var hasInitialIndex = initialIndex !== null && initialIndex > -1;
	            var filtered = that._state === STATE_FILTER;

	            if (filtered) {
	                $(listView.focus()).removeClass("k-state-selected");
	                return;
	            }

	            if (that._fetch) {
	                return;
	            }

	            if (!listView.value().length) {
	                if (hasInitialIndex) {
	                    that.select(initialIndex);
	                } else if (that._accessor()) {
	                    listView.value(that._accessor());
	                }
	            }

	            that._initialIndex = null;

	            var dataItem = listView.selectedDataItems()[0];

	            if (!dataItem) {
	                return;
	            }

	            if (that._value(dataItem) !== that.value()) {
	                that._custom(that._value(dataItem));
	            }

	            if (that.text() && that.text() !== that._text(dataItem)) {
	                that._selectValue(dataItem);
	            }
	        },

	        _updateItemFocus: function() {
	            var listView = this.listView;

	            if (!this.options.highlightFirst) {
	                listView.focus(-1);
	            } else if (!listView.focus() && !listView.focusIndex()) {
	                listView.focus(0);
	            }
	        },

	        _listBound: function() {
	            var that = this;
	            var isActive = that.input[0] === activeElement();

	            var data = that.dataSource.flatView();
	            var skip = that.listView.skip();
	            var isFirstPage = skip === undefined || skip === 0;

	            that._presetValue = false;

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!data.length);

	            that._resizePopup();

	            that.popup.position();

	            that._buildOptions(data);

	            that._makeUnselectable();

	            that._updateSelection();

	            if (data.length && isFirstPage) {
	                that._updateItemFocus();

	                if (that.options.suggest && isActive && that.input.val()) {
	                    that.suggest(data[0]);
	                }
	            }

	            if (that._open) {
	                that._open = false;

	                if (that._typingTimeout && !isActive) {
	                    that.popup.close();
	                } else {
	                    that.toggle(that._allowOpening());
	                }

	                that._typingTimeout = null;
	            }

	            that._hideBusy();
	            that.trigger("dataBound");
	        },

	        _listChange: function() {
	            this._selectValue(this.listView.selectedDataItems()[0]);

	            if (this._presetValue) {
	                this._oldIndex = this.selectedIndex;
	            }
	        },

	        _get: function(candidate) {
	            var data, found, idx;

	            if (typeof candidate === "function") {
	                data = this.dataSource.flatView();

	                for (idx = 0; idx < data.length; idx++) {
	                    if (candidate(data[idx])) {
	                        candidate = idx;
	                        found = true;
	                        break;
	                    }
	                }

	                if (!found) {
	                    candidate = -1;
	                }
	            }

	            return candidate;
	        },

	        _select: function(candidate, keepState) {
	            var that = this;
	            candidate = that._get(candidate);

	            if (candidate === -1) {
	                that.input[0].value = "";
	                that._accessor("");
	            }

	            return that.listView.select(candidate).done(function() {
	                if (!keepState && that._state === STATE_FILTER) {
	                    that._state = STATE_ACCEPT;
	                }
	            });
	        },

	        _selectValue: function(dataItem) {
	            var idx = this.listView.select();
	            var value = "";
	            var text = "";

	            idx = idx[idx.length - 1];
	            if (idx === undefined) {
	                idx = -1;
	            }

	            this.selectedIndex = idx;

	            if (idx === -1 && !dataItem) {
	                text = this.input[0].value;
	                if (this.options.syncValueAndText) {
	                    value = text;
	                }

	                this.listView.focus(-1);
	            } else {
	                if (dataItem) {
	                    value = this._dataValue(dataItem);
	                    text = this._text(dataItem);
	                }

	                if (value === null) {
	                    value = "";
	                }
	            }

	            this._prev = this.input[0].value = text;
	            this._accessor(value !== undefined ? value : text, idx);

	            this._placeholder();
	            this._triggerCascade();
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        suggest: function(word) {
	            var that = this;
	            var element = that.input[0];
	            var value = that.text();
	            var caretIdx = caret(element)[0];
	            var key = that._last;
	            var idx;

	            if (key == keys.BACKSPACE || key == keys.DELETE) {
	                that._last = undefined;
	                return;
	            }

	            word = word || "";

	            if (typeof word !== "string") {
	                if (word[0]) {
	                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];
	                }

	                word = word ? that._text(word) : "";
	            }

	            if (caretIdx <= 0) {
	                caretIdx = value.toLowerCase().indexOf(word.toLowerCase()) + 1;
	            }

	            if (word) {
	                word = word.toString();
	                idx = word.toLowerCase().indexOf(value.toLowerCase());
	                if (idx > -1) {
	                    value += word.substring(idx + value.length);
	                }
	            } else {
	                value = value.substring(0, caretIdx);
	            }

	            if (value.length !== caretIdx || !word) {
	                element.value = value;
	                if (element === activeElement()) {
	                    caret(element, caretIdx, value.length);
	                }
	            }
	        },

	        text: function (text) {
	            text = text === null ? "" : text;

	            var that = this;
	            var input = that.input[0];
	            var ignoreCase = that.options.ignoreCase;
	            var loweredText = text;
	            var dataItem;
	            var value;

	            if (text === undefined) {
	                return input.value;
	            }

	            if (that.options.autoBind === false && !that.listView.bound()) {
	                that._setText(text);
	                return;
	            }

	            dataItem = that.dataItem();

	            if (dataItem && that._text(dataItem) === text) {
	                value = that._value(dataItem);

	                if (value === List.unifyType(that._old, typeof value)) {
	                    that._triggerCascade();
	                    return;
	                }
	            }

	            if (ignoreCase) {
	                loweredText = loweredText.toLowerCase();
	            }

	            that._select(function(data) {
	                data = that._text(data);

	                if (ignoreCase) {
	                    data = (data + "").toLowerCase();
	                }

	                return data === loweredText;
	            }).done(function() {
	                if (that.selectedIndex < 0) {
	                    input.value = text;

	                    if (that.options.syncValueAndText) {
	                        that._accessor(text);
	                    }

	                    that._triggerCascade();
	                }

	                that._prev = input.value;
	            });
	        },

	        toggle: function(toggle) {
	            this._toggle(toggle, true);
	        },

	        value: function(value) {
	            var that = this;
	            var options = that.options;
	            var listView = that.listView;

	            if (value === undefined) {
	                value = that._accessor() || that.listView.value()[0];
	                return value === undefined || value === null ? "" : value;
	            }

	            that.requireValueMapper(that.options, value);

	            that.trigger("set", { value: value });

	            if (value === options.value && that.input.val() === options.text) {
	                return;
	            }

	            that._accessor(value);

	            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {
	                that._clearFilter();
	            } else {
	                that._fetchData();
	            }

	            listView
	                .value(value)
	                .done(function() {
	                    if (that.selectedIndex === -1) {
	                        that._accessor(value);
	                        that.input.val(value);
	                        that._placeholder(true);
	                    }

	                    that._old = that._accessor();
	                    that._oldIndex = that.selectedIndex;

	                    that._prev = that.input.val();

	                    if (that._state === STATE_FILTER) {
	                        that._state = STATE_ACCEPT;
	                    }
	                });
	        },

	        _click: function(e) {
	            var that = this;
	            var item = e.item;
	            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));

	            e.preventDefault();

	            if (that.trigger("select", { dataItem: dataItem, item: item })) {
	                that.close();
	                return;
	            }

	            that._userTriggered = true;

	            that._select(item).done(function() {
	                that._blur();
	            });
	        },

	        _inputValue: function() {
	            return this.text();
	        },

	        _searchByWord: function(word) {
	            var that = this;
	            var options = that.options;
	            var dataSource = that.dataSource;
	            var ignoreCase = options.ignoreCase;
	            var predicate = function (dataItem) {
	                var text = that._text(dataItem);
	                if (text !== undefined) {
	                    text = text + "";
	                    if (text !== "" && word === "") {
	                        return false;
	                    }

	                    if (ignoreCase) {
	                        text = text.toLowerCase();
	                    }

	                    return text.indexOf(word) === 0;
	                }
	            };

	            if (ignoreCase) {
	                word = word.toLowerCase();
	            }

	            if (!that.ul[0].firstChild) {
	                dataSource.one(CHANGE, function () {
	                    if (dataSource.view()[0]) {
	                        that.search(word);
	                    }
	                }).fetch();
	                return;
	            }

	            this.listView.focus(this._get(predicate));

	            var current = this.listView.focus();

	            if (current) {
	                if (options.suggest) {
	                    that.suggest(current);
	                }

	                this.open();
	            }

	            if (this.options.highlightFirst && !word) {
	                this.listView.focusFirst();
	            }
	        },

	        _input: function() {
	            var that = this,
	                element = that.element.removeClass("k-input")[0],
	                accessKey = element.accessKey,
	                wrapper = that.wrapper,
	                SELECTOR = "input.k-input",
	                name = element.name || "",
	                input,
	                maxLength;

	            if (name) {
	                name = 'name="' + name + '_input" ';
	            }

	            input = wrapper.find(SELECTOR);

	            if (!input[0]) {
	                wrapper.append('<span tabindex="-1" unselectable="on" class="k-dropdown-wrap k-state-default"><input ' + name + 'class="k-input" type="text" autocomplete="off"/><span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-arrow-60-down"></span></span></span>')
	                    .append(that.element);

	                input = wrapper.find(SELECTOR);
	            }

	            input[0].style.cssText = element.style.cssText;
	            input[0].title = element.title;

	            maxLength = parseInt(this.element.prop("maxlength") || this.element.attr("maxlength"), 10);
	            if (maxLength > -1) {
	                input[0].maxLength = maxLength;
	            }

	            input.addClass(element.className)
	                 .css({
	                    width: "100%",
	                    height: element.style.height
	                 })
	                 .attr({
	                     "role": "combobox",
	                     "aria-expanded": false
	                 })
	                 .show();

	            if (placeholderSupported) {
	                input.attr("placeholder", that.options.placeholder);
	            }

	            if (accessKey) {
	                element.accessKey = "";
	                input[0].accessKey = accessKey;
	            }

	            that._focused = that.input = input;
	            that._inputWrapper = $(wrapper[0].firstChild);
	            that._arrow = wrapper.find(".k-select")
	                .attr({
	                    "role": "button",
	                    "tabIndex": -1
	                });

	            if (element.id) {
	                that._arrow.attr("aria-controls", that.ul[0].id);
	            }
	        },

	        _clearButton: function() {
	            this._clear = $('<span unselectable="on" class="k-icon k-clear-value k-i-close" title="clear"></span>').attr({
	                "role": "button",
	                "tabIndex": -1
	            });
	            if (this.options.clearButton) {
	                this._clear.insertAfter(this.input);
	                this.wrapper.addClass("k-combobox-clearable");
	            }
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode;

	            that._last = key;

	            clearTimeout(that._typingTimeout);
	            that._typingTimeout = null;

	            if (key != keys.TAB && !that._move(e)) {
	               that._search();
	            }
	        },

	        _placeholder: function(show) {
	            if (placeholderSupported) {
	                return;
	            }

	            var that = this,
	                input = that.input,
	                placeholder = that.options.placeholder,
	                value;

	            if (placeholder) {
	                value = that.value();

	                if (show === undefined) {
	                    show = !value;
	                }

	                input.toggleClass("k-readonly", show);

	                if (!show) {
	                    if (!value) {
	                        placeholder = "";
	                    } else {
	                        return;
	                    }
	                }

	                input.val(placeholder);

	                if (!placeholder && input[0] === activeElement()) {
	                    caret(input[0], 0, 0);
	                }
	            }
	        },

	        _search: function() {
	            var that = this;

	            that._typingTimeout = setTimeout(function() {
	                var value = that.text();

	                if (that._prev !== value) {
	                    that._prev = value;

	                    if (that.options.filter === "none") {
	                        that.listView.select(-1);
	                    }

	                    that.search(value);
	                }

	                that._typingTimeout = null;
	            }, that.options.delay);
	        },

	        _setText: function(text) {
	            this.input.val(text);
	            this._prev = text;
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper = element.parent();

	            if (!wrapper.is("span.k-widget")) {
	                wrapper = element.hide().wrap("<span />").parent();
	                wrapper[0].style.cssText = element[0].style.cssText;
	            }

	            that.wrapper = wrapper.addClass("k-widget k-combobox k-header")
	                                  .addClass(element[0].className)
	                                  .css("display", "");
	        },

	        _clearSelection: function(parent, isFiltered) {
	            var that = this;
	            var hasValue = parent.value();
	            var custom = hasValue && parent.selectedIndex === -1;

	            if (this.selectedIndex == -1 && this.value()) {
	                return;
	            }

	            if (isFiltered || !hasValue || custom) {
	                that.options.value = "";
	                that.value("");
	            }
	        },

	        _preselect: function(value, text) {
	            this.input.val(text);
	            this._accessor(value);

	            this._old = this._accessor();
	            this._oldIndex = this.selectedIndex;

	            this.listView.setValue(value);
	            this._placeholder();

	            this._initialIndex = null;
	            this._presetValue = true;
	        }
	    });

	    ui.plugin(ComboBox);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 119 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.data.odata.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(609);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 609:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.odata",
	    name: "OData",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        extend = $.extend,
	        odataFilters = {
	            eq: "eq",
	            neq: "ne",
	            gt: "gt",
	            gte: "ge",
	            lt: "lt",
	            lte: "le",
	            contains : "substringof",
	            doesnotcontain: "substringof",
	            endswith: "endswith",
	            startswith: "startswith",
	            isnull: "eq",
	            isnotnull: "ne",
	            isempty: "eq",
	            isnotempty: "ne"
	        },
	        odataFiltersVersionFour = extend({}, odataFilters, {
	            contains: "contains"
	        }),
	        mappers = {
	            pageSize: $.noop,
	            page: $.noop,
	            filter: function(params, filter, useVersionFour) {
	                if (filter) {
	                    filter = toOdataFilter(filter, useVersionFour);
	                    if (filter) {
	                        params.$filter = filter;
	                    }
	                }
	            },
	            sort: function(params, orderby) {
	                var expr = $.map(orderby, function(value) {
	                    var order = value.field.replace(/\./g, "/");

	                    if (value.dir === "desc") {
	                        order += " desc";
	                    }

	                    return order;
	                }).join(",");

	                if (expr) {
	                    params.$orderby = expr;
	                }
	            },
	            skip: function(params, skip) {
	                if (skip) {
	                    params.$skip = skip;
	                }
	            },
	            take: function(params, take) {
	                if (take) {
	                    params.$top = take;
	                }
	            }
	        },
	        defaultDataType = {
	            read: {
	                dataType: "jsonp"
	            }
	        };

	    function toOdataFilter(filter, useOdataFour) {
	        var result = [],
	            logic = filter.logic || "and",
	            idx,
	            length,
	            field,
	            type,
	            format,
	            operator,
	            value,
	            ignoreCase,
	            filters = filter.filters;

	        for (idx = 0, length = filters.length; idx < length; idx++) {
	            filter = filters[idx];
	            field = filter.field;
	            value = filter.value;
	            operator = filter.operator;

	            if (filter.filters) {
	                filter = toOdataFilter(filter, useOdataFour);
	            } else {
	                ignoreCase = filter.ignoreCase;
	                field = field.replace(/\./g, "/");
	                filter = odataFilters[operator];
	                if (useOdataFour) {
	                    filter = odataFiltersVersionFour[operator];
	                }

	                if (operator === "isnull" || operator === "isnotnull") {
	                    filter = kendo.format("{0} {1} null", field, filter);
	                } else if (operator === "isempty" || operator === "isnotempty") {
	                    filter = kendo.format("{0} {1} ''", field, filter);
	                } else if (filter && value !== undefined) {
	                    type = $.type(value);
	                    if (type === "string") {
	                        format = "'{1}'";
	                        value = value.replace(/'/g, "''");

	                        if (ignoreCase === true) {
	                            field = "tolower(" + field + ")";
	                        }

	                    } else if (type === "date") {
	                        if (useOdataFour) {
	                            format = "{1:yyyy-MM-ddTHH:mm:ss+00:00}";
	                            value = kendo.timezone.apply(value, 'Etc/UTC');
	                        } else {
	                            format = "datetime'{1:yyyy-MM-ddTHH:mm:ss}'";
	                        }
	                    } else {
	                        format = "{1}";
	                    }

	                    if (filter.length > 3) {
	                        if (filter !== "substringof") {
	                            format = "{0}({2}," + format + ")";
	                        } else {
	                            format = "{0}(" + format + ",{2})";
	                            if (operator === "doesnotcontain") {
	                                if (useOdataFour) {
	                                    format = "{0}({2},'{1}') eq -1";
	                                    filter = "indexof";
	                                } else {
	                                    format += " eq false";
	                                }
	                            }
	                        }
	                    } else {
	                        format = "{2} {0} " + format;
	                    }

	                    filter = kendo.format(format, filter, value, field);
	                }
	            }

	            result.push(filter);
	        }

	        filter = result.join(" " + logic + " ");

	        if (result.length > 1) {
	            filter = "(" + filter + ")";
	        }

	        return filter;
	    }

	    function stripMetadata(obj) {
	        for (var name in obj) {
	            if(name.indexOf("@odata") === 0) {
	                delete obj[name];
	            }
	        }
	    }

	    extend(true, kendo.data, {
	        schemas: {
	            odata: {
	                type: "json",
	                data: function(data) {
	                    return data.d.results || [data.d];
	                },
	                total: "d.__count"
	            }
	        },
	        transports: {
	            odata: {
	                read: {
	                    cache: true, // to prevent jQuery from adding cache buster
	                    dataType: "jsonp",
	                    jsonp: "$callback"
	                },
	                update: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json", // to inform the server the the request body is JSON encoded
	                    type: "PUT" // can be PUT or MERGE
	                },
	                create: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json",
	                    type: "POST" // must be POST to create new entity
	                },
	                destroy: {
	                    cache: true,
	                    dataType: "json",
	                    type: "DELETE"
	                },
	                parameterMap: function(options, type, useVersionFour) {
	                    var params,
	                        value,
	                        option,
	                        dataType;

	                    options = options || {};
	                    type = type || "read";
	                    dataType = (this.options || defaultDataType)[type];
	                    dataType = dataType ? dataType.dataType : "json";

	                    if (type === "read") {
	                        params = {
	                            $inlinecount: "allpages"
	                        };

	                        if (dataType != "json") {
	                            params.$format = "json";
	                        }

	                        for (option in options) {
	                            if (mappers[option]) {
	                                mappers[option](params, options[option], useVersionFour);
	                            } else {
	                                params[option] = options[option];
	                            }
	                        }
	                    } else {
	                        if (dataType !== "json") {
	                            throw new Error("Only json dataType can be used for " + type + " operation.");
	                        }

	                        if (type !== "destroy") {
	                            for (option in options) {
	                                value = options[option];
	                                if (typeof value === "number") {
	                                    options[option] = value + "";
	                                }
	                            }

	                            params = kendo.stringify(options);
	                        }
	                    }

	                    return params;
	                }
	            }
	        }
	    });

	    extend(true, kendo.data, {
	        schemas: {
	            "odata-v4": {
	                type: "json",
	                data: function(data) {
	                    data = $.extend({}, data);
	                    stripMetadata(data);

	                    if (data.value) {
	                        return data.value;
	                    }
	                    return [data];
	                },
	                total: function(data) {
	                    return data["@odata.count"];
	                }
	            }
	        },
	        transports: {
	            "odata-v4": {
	                read: {
	                    cache: true, // to prevent jQuery from adding cache buster
	                    dataType: "json"
	                },
	                update: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json;IEEE754Compatible=true", // to inform the server the the request body is JSON encoded
	                    type: "PUT" // can be PUT or MERGE
	                },
	                create: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json;IEEE754Compatible=true",
	                    type: "POST" // must be POST to create new entity
	                },
	                destroy: {
	                    cache: true,
	                    dataType: "json",
	                    type: "DELETE"
	                },
	                parameterMap: function(options, type) {
	                    var result = kendo.data.transports.odata.parameterMap(options, type, true);
	                    if (type == "read") {
	                        result.$count = true;
	                        delete result.$inlinecount;
	                    }

	                    return result;
	                }
	            }
	        }
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 120 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.data.xml.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(611);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 611:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.xml",
	    name: "XML",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	/*jshint  eqnull: true, boss: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        isArray = $.isArray,
	        isPlainObject = $.isPlainObject,
	        map = $.map,
	        each = $.each,
	        extend = $.extend,
	        getter = kendo.getter,
	        Class = kendo.Class;

	    var XmlDataReader = Class.extend({
	        init: function(options) {
	            var that = this,
	                total = options.total,
	                model = options.model,
	                parse = options.parse,
	                errors = options.errors,
	                serialize = options.serialize,
	                data = options.data;

	            if (model) {
	                if (isPlainObject(model)) {
	                    var base = options.modelBase || kendo.data.Model;

	                    if (model.fields) {
	                        each(model.fields, function(field, value) {
	                            if (isPlainObject(value) && value.field) {
	                                if (!$.isFunction(value.field)) {
	                                    value = extend(value, { field: that.getter(value.field) });
	                                }
	                            } else {
	                                value = { field: that.getter(value) };
	                            }
	                            model.fields[field] = value;
	                        });
	                    }

	                    var id = model.id;
	                    if (id) {
	                        var idField = {};

	                        idField[that.xpathToMember(id, true)] = { field : that.getter(id) };
	                        model.fields = extend(idField, model.fields);
	                        model.id = that.xpathToMember(id);
	                    }
	                    model = base.define(model);
	                }

	                that.model = model;
	            }

	            if (total) {
	                if (typeof total == "string") {
	                    total = that.getter(total);
	                    that.total = function(data) {
	                        return parseInt(total(data), 10);
	                    };
	                } else if (typeof total == "function"){
	                    that.total = total;
	                }
	            }

	            if (errors) {
	                if (typeof errors == "string") {
	                    errors = that.getter(errors);
	                    that.errors = function(data) {
	                        return errors(data) || null;
	                    };
	                } else if (typeof errors == "function"){
	                    that.errors = errors;
	                }
	            }

	            if (data) {
	                if (typeof data == "string") {
	                    data = that.xpathToMember(data);
	                    that.data = function(value) {
	                        var result = that.evaluate(value, data),
	                            modelInstance;

	                        result = isArray(result) ? result : [result];

	                        if (that.model && model.fields) {
	                            modelInstance = new that.model();

	                            return map(result, function(value) {
	                                if (value) {
	                                    var record = {}, field;

	                                    for (field in model.fields) {
	                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));
	                                    }

	                                    return record;
	                                }
	                            });
	                        }

	                        return result;
	                    };
	                } else if (typeof data == "function") {
	                    that.data = data;
	                }
	            }

	            if (typeof parse == "function") {
	                var xmlParse = that.parse;

	                that.parse = function(data) {
	                    var xml = parse.call(that, data);
	                    return xmlParse.call(that, xml);
	                };
	            }

	            if (typeof serialize == "function") {
	                that.serialize = serialize;
	            }
	        },
	        total: function(result) {
	            return this.data(result).length;
	        },
	        errors: function(data) {
	            return data ? data.errors : null;
	        },
	        serialize: function(data) {
	            return data;
	        },
	        parseDOM: function(element) {
	            var result = {},
	                parsedNode,
	                node,
	                nodeType,
	                nodeName,
	                member,
	                attribute,
	                attributes = element.attributes,
	                attributeCount = attributes.length,
	                idx;

	            for (idx = 0; idx < attributeCount; idx++) {
	                attribute = attributes[idx];
	                result["@" + attribute.nodeName] = attribute.nodeValue;
	            }

	            for (node = element.firstChild; node; node = node.nextSibling) {
	                nodeType = node.nodeType;

	                if (nodeType === 3 || nodeType === 4) {
	                    // text nodes or CDATA are stored as #text field
	                    result["#text"] = node.nodeValue;
	                } else if (nodeType === 1) {
	                    // elements are stored as fields
	                    parsedNode = this.parseDOM(node);

	                    nodeName = node.nodeName;

	                    member = result[nodeName];

	                    if (isArray(member)) {
	                        // elements of same nodeName are stored as array
	                        member.push(parsedNode);
	                    } else if (member !== undefined) {
	                        member = [member, parsedNode];
	                    } else {
	                        member = parsedNode;
	                    }

	                    result[nodeName] = member;
	                }
	            }
	            return result;
	        },

	        evaluate: function(value, expression) {
	            var members = expression.split("."),
	                member,
	                result,
	                length,
	                intermediateResult,
	                idx;

	            while (member = members.shift()) {
	                value = value[member];

	                if (isArray(value)) {
	                    result = [];
	                    expression = members.join(".");

	                    for (idx = 0, length = value.length; idx < length; idx++) {
	                        intermediateResult = this.evaluate(value[idx], expression);

	                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];

	                        result.push.apply(result, intermediateResult);
	                    }

	                    return result;
	                }
	            }

	            return value;
	        },

	        parse: function(xml) {
	            var documentElement,
	                tree,
	                result = {};

	            documentElement = xml.documentElement || $.parseXML(xml).documentElement;

	            tree = this.parseDOM(documentElement);

	            result[documentElement.nodeName] = tree;

	            return result;
	        },

	        xpathToMember: function(member, raw) {
	            if (!member) {
	                return "";
	            }

	            member = member.replace(/^\//, "") // remove the first "/"
	                           .replace(/\//g, "."); // replace all "/" with "."

	            if (member.indexOf("@") >= 0) {
	                // replace @attribute with '["@attribute"]'
	                return member.replace(/\.?(@.*)/, raw? '$1':'["$1"]');
	            }

	            if (member.indexOf("text()") >= 0) {
	                // replace ".text()" with '["#text"]'
	                return member.replace(/(\.?text\(\))/, raw? '#text':'["#text"]');
	            }

	            return member;
	        },
	        getter: function(member) {
	            return getter(this.xpathToMember(member), true);
	        }
	    });

	    $.extend(true, kendo.data, {
	        XmlDataReader: XmlDataReader,
	        readers: {
	            xml: XmlDataReader
	        }
	    });
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 121 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.datetimepicker.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(674);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 674:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(675), __webpack_require__(676) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "datetimepicker",
	    name: "DateTimePicker",
	    category: "web",
	    description: "The DateTimePicker allows the end user to select a value from a calendar or a time drop-down list.",
	    depends: [ "datepicker", "timepicker" ]
	};

	(function($, undefined) {

	    var kendo = window.kendo,
	        TimeView = kendo.TimeView,
	        parse = kendo.parseDate,
	        activeElement = kendo._activeElement,
	        extractFormat = kendo._extractFormat,
	        calendar = kendo.calendar,
	        isInRange = calendar.isInRange,
	        restrictValue = calendar.restrictValue,
	        isEqualDatePart = calendar.isEqualDatePart,
	        getMilliseconds = TimeView.getMilliseconds,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        OPEN = "open",
	        CLOSE = "close",
	        CHANGE = "change",
	        ns = ".kendoDateTimePicker",
	        CLICK = "click" + ns,
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        DEFAULT = "k-state-default",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        STATEDISABLED = "k-state-disabled",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        MOUSEDOWN = "mousedown" + ns,
	        MONTH = "month",
	        SPAN = "<span/>",
	        ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
	        ARIA_EXPANDED = "aria-expanded",
	        ARIA_HIDDEN = "aria-hidden",
	        ARIA_OWNS = "aria-owns",
	        ARIA_DISABLED = "aria-disabled",
	        DATE = Date,
	        MIN = new DATE(1800, 0, 1),
	        MAX = new DATE(2099, 11, 31),
	        dateViewParams = { view: "date" },
	        timeViewParams = { view: "time" },
	        extend = $.extend;

	    var DateTimePicker = Widget.extend({
	        init: function(element, options) {
	            var that = this, disabled;

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            options.disableDates = kendo.calendar.disabled(options.disableDates);
	            options.min = parse(element.attr("min")) || parse(options.min);
	            options.max = parse(element.attr("max")) || parse(options.max);

	            normalize(options);

	            that._initialOptions = extend({}, options);

	            that._wrapper();

	            that._views();

	            that._icons();

	            that._reset();
	            that._template();

	            try {
	                element[0].setAttribute("type", "text");
	            } catch(e) {
	                element[0].type = "text";
	            }

	            element.addClass("k-input")
	                   .attr({
	                       "role": "combobox",
	                       "aria-expanded": false
	                   });


	            that._midnight = that._calculateMidnight(options.min, options.max);

	            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }

	            that._old = that._update(options.value || that.element.val());
	            that._oldText = element.val();

	            kendo.notify(that);
	        },

	        options: {
	            name: "DateTimePicker",
	            value: null,
	            format: "",
	            timeFormat: "",
	            culture: "",
	            parseFormats: [],
	            dates: [],
	            min: new DATE(MIN),
	            max: new DATE(MAX),
	            interval: 30,
	            height: 200,
	            footer: "",
	            start: MONTH,
	            depth: MONTH,
	            animation: {},
	            month : {},
	            ARIATemplate: 'Current focused date is #=kendo.toString(data.current, "d")#',
	            dateButtonText: "Open the date view",
	            timeButtonText: "Open the time view"
	    },

	    events: [
	        OPEN,
	        CLOSE,
	        CHANGE
	    ],

	        setOptions: function(options) {
	            var that = this,
	                value = that._value,
	                min, max, currentValue;

	            Widget.fn.setOptions.call(that, options);

	            options = that.options;

	            options.min = min = parse(options.min);
	            options.max = max = parse(options.max);

	            normalize(options);

	            that._midnight = that._calculateMidnight(options.min, options.max);

	            currentValue = options.value || that._value || that.dateView._current;

	            if (min && !isEqualDatePart(min, currentValue)) {
	                min = new DATE(MIN);
	            }

	            if (max && !isEqualDatePart(max, currentValue)) {
	                max = new DATE(MAX);
	            }

	            that.dateView.setOptions(options);

	            that.timeView.setOptions(extend({}, options, {
	                format: options.timeFormat,
	                min: min,
	                max: max
	            }));

	            if (value) {
	                that.element.val(kendo.toString(value, options.format, options.culture));
	                that._updateARIA(value);
	            }
	        },

	        _editable: function(options) {
	            var that = this,
	                element = that.element.off(ns),
	                dateIcon = that._dateIcon.off(ns),
	                timeIcon = that._timeIcon.off(ns),
	                wrapper = that._inputWrapper.off(ns),
	                readonly = options.readonly,
	                disable = options.disable;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .on("keydown" + ns, $.proxy(that._keydown, that))
	                       .on("focus" + ns, function() {
	                           that._inputWrapper.addClass(FOCUSED);
	                       })
	                       .on("focusout" + ns, function() {
	                           that._inputWrapper.removeClass(FOCUSED);
	                           if (element.val() !== that._oldText) {
	                               that._change(element.val());
	                           }
	                           that.close("date");
	                           that.close("time");
	                       });

	               dateIcon.on(MOUSEDOWN, preventDefault)
	                        .on(CLICK, function() {
	                            that.toggle("date");

	                            if (!kendo.support.touch && element[0] !== activeElement()) {
	                                element.focus();
	                            }
	                        });


	               timeIcon.on(MOUSEDOWN, preventDefault)
	                        .on(CLICK, function() {
	                            that.toggle("time");

	                            if (!kendo.support.touch && element[0] !== activeElement()) {
	                                element.focus();
	                            }
	                        });

	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);
	            that.dateView.destroy();
	            that.timeView.destroy();

	            that.element.off(ns);
	            that._dateIcon.off(ns);
	            that._timeIcon.off(ns);
	            that._inputWrapper.off(ns);

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        close: function(view) {
	            if (view !== "time") {
	                view = "date";
	            }

	            this[view + "View"].close();
	        },

	        open: function(view) {
	            if (view !== "time") {
	                view = "date";
	            }

	            this[view + "View"].open();
	        },

	        min: function(value) {
	            return this._option("min", value);
	        },

	        max: function(value) {
	            return this._option("max", value);
	        },

	        toggle: function(view) {
	            var secondView = "timeView";

	            if (view !== "time") {
	                view = "date";
	            } else {
	                secondView = "dateView";
	            }

	            this[view + "View"].toggle();
	            this[secondView].close();
	        },

	        value: function(value) {
	            var that = this;

	            if (value === undefined) {
	                return that._value;
	            }

	            that._old = that._update(value);
	            if (that._old === null) {
	                that.element.val("");
	            }

	            that._oldText = that.element.val();
	        },

	        _change: function(value) {
	            var that = this,
	            oldValue = that.element.val(),
	            dateChanged;

	            value = that._update(value);
	            dateChanged = +that._old != +value;

	            var valueUpdated = dateChanged && !that._typing;
	            var textFormatted = oldValue !== that.element.val();

	            if (valueUpdated || textFormatted) {
	                that.element.trigger(CHANGE);
	            }

	            if (dateChanged) {
	                that._old = value;
	                that._oldText = that.element.val();

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _option: function(option, value) {
	            var that = this;
	            var options = that.options;
	            var timeView = that.timeView;
	            var timeViewOptions = timeView.options;
	            var current = that._value || that._old;
	            var minDateEqual;
	            var maxDateEqual;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = parse(value, options.parseFormats, options.culture);

	            if (!value) {
	                return;
	            }

	            if (options.min.getTime() === options.max.getTime()) {
	                timeViewOptions.dates = [];
	            }

	            options[option] = new DATE(value.getTime());
	            that.dateView[option](value);

	            that._midnight = that._calculateMidnight(options.min, options.max);

	            if (current) {
	                minDateEqual = isEqualDatePart(options.min, current);
	                maxDateEqual = isEqualDatePart(options.max, current);
	            }

	            if (minDateEqual || maxDateEqual) {
	                timeViewOptions[option] = value;

	                if (minDateEqual && !maxDateEqual) {
	                    timeViewOptions.max = lastTimeOption(options.interval);
	                }

	                if (maxDateEqual) {
	                    if (that._midnight) {
	                        timeView.dataBind([MAX]);
	                        return;
	                    } else if (!minDateEqual) {
	                        timeViewOptions.min = MIN;
	                    }
	                }
	            } else {
	                timeViewOptions.max = MAX;
	                timeViewOptions.min = MIN;
	            }

	            timeView.bind();
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                min = options.min,
	                max = options.max,
	                dates = options.dates,
	                timeView = that.timeView,
	                current = that._value,
	                date = parse(value, options.parseFormats, options.culture),
	                isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
	                rebind, timeViewOptions, old, skip, formattedValue;

	            if (options.disableDates && options.disableDates(date)) {
	                date = null;
	                if (!that._old && !that.element.val()) {
	                    value = null;
	                }
	            }

	            if (+date === +current && isSameType) {
	                formattedValue = kendo.toString(date, options.format, options.culture);

	                if (formattedValue !== value ) {
	                    that.element.val(date === null ? value : formattedValue);
	                    if (value instanceof String) {
	                        that.element.trigger(CHANGE);
	                    }
	                }

	                return date;
	            }

	            if (date !== null && isEqualDatePart(date, min)) {
	                date = restrictValue(date, min, max);
	            } else if (!isInRange(date, min, max)) {
	                date = null;
	            }

	            that._value = date;
	            timeView.value(date);
	            that.dateView.value(date);

	            if (date) {
	                old = that._old;
	                timeViewOptions = timeView.options;

	                if (dates[0]) {
	                    dates = $.grep(dates, function(d) { return isEqualDatePart(date, d); });

	                    if (dates[0]) {
	                        timeView.dataBind(dates);
	                        skip = true;
	                    }
	                }

	                if (!skip) {
	                    if (isEqualDatePart(date, min)) {
	                        timeViewOptions.min = min;
	                        timeViewOptions.max = lastTimeOption(options.interval);
	                        rebind = true;
	                    }

	                    if (isEqualDatePart(date, max)) {
	                        if (that._midnight) {
	                            timeView.dataBind([MAX]);
	                            skip = true;
	                        } else {
	                            timeViewOptions.max = max;
	                            if (!rebind) {
	                                timeViewOptions.min = MIN;
	                            }
	                            rebind = true;
	                        }
	                    }
	                }

	                if (!skip && ((!old && rebind) || (old && !isEqualDatePart(old, date)))) {
	                    if (!rebind) {
	                        timeViewOptions.max = MAX;
	                        timeViewOptions.min = MIN;
	                    }

	                    timeView.bind();
	                }
	            }

	            that.element.val(kendo.toString(date || value, options.format, options.culture));
	            that._updateARIA(date);

	            return date;
	        },

	        _keydown: function(e) {
	            var that = this,
	                dateView = that.dateView,
	                timeView = that.timeView,
	                value = that.element.val(),
	                isDateViewVisible = dateView.popup.visible();

	            if (e.altKey && e.keyCode === kendo.keys.DOWN) {
	                that.toggle(isDateViewVisible ? "time" : "date");
	            } else if (isDateViewVisible) {
	                dateView.move(e);
	                that._updateARIA(dateView._current);
	            } else if (timeView.popup.visible()) {
	                timeView.move(e);
	            } else if (e.keyCode === kendo.keys.ENTER && value !== that._oldText) {
	                that._change(value);
	            } else {
	                that._typing = true;
	            }
	        },

	        _views: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                id = element.attr("id"),
	                dateView, timeView,
	                div, ul, msMin,
	                date;

	            that.dateView = dateView = new kendo.DateView(extend({}, options, {
	                id: id,
	                anchor: that.wrapper,
	                change: function() {
	                    var value = dateView.calendar.value(),
	                        msValue = +value,
	                        msMin = +options.min,
	                        msMax = +options.max,
	                        current, adjustedDate;

	                    if (msValue === msMin || msValue === msMax) {
	                        current = msValue === msMin ? msMin : msMax;
	                        current = new DATE(that._value || current);
	                        current.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());

	                        if (isInRange(current, msMin, msMax)) {
	                            value = current;
	                        }
	                    }

	                    if (that._value) {

	                       adjustedDate = kendo.date.setHours(new Date(value), that._value);

	                       if (isInRange(adjustedDate, msMin, msMax)) {
	                           value = adjustedDate;
	                       }
	                    }

	                    that._change(value);
	                    that.close("date");
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE, dateViewParams)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, false);
	                        div.attr(ARIA_HIDDEN, true);

	                        if (!timeView.popup.visible()) {
	                            element.removeAttr(ARIA_OWNS);
	                        }
	                    }
	                },
	                open:  function(e) {
	                    if (that.trigger(OPEN, dateViewParams)) {
	                        e.preventDefault();
	                    } else {

	                        if (element.val() !== that._oldText) {
	                            date = parse(element.val(), options.parseFormats, options.culture);

	                            that.dateView[date ? "current" : "value"](date);
	                        }

	                        div.attr(ARIA_HIDDEN, false);
	                        element.attr(ARIA_EXPANDED, true)
	                               .attr(ARIA_OWNS, dateView._dateViewID);

	                        that._updateARIA(date);
	                    }
	                }
	            }));
	            div = dateView.div;

	            msMin = options.min.getTime();
	            that.timeView = timeView = new TimeView({
	                id: id,
	                value: options.value,
	                anchor: that.wrapper,
	                animation: options.animation,
	                format: options.timeFormat,
	                culture: options.culture,
	                height: options.height,
	                interval: options.interval,
	                min: new DATE(MIN),
	                max: new DATE(MAX),
	                dates: msMin === options.max.getTime() ? [new Date(msMin)] : [],
	                parseFormats: options.parseFormats,
	                change: function(value, trigger) {
	                    value = timeView._parse(value);

	                    if (value < options.min) {
	                        value = new DATE(+options.min);
	                        timeView.options.min = value;
	                    } else if (value > options.max) {
	                        value = new DATE(+options.max);
	                        timeView.options.max = value;
	                    }

	                    if (trigger) {
	                        that._timeSelected = true;
	                        that._change(value);
	                    } else {
	                        element.val(kendo.toString(value, options.format, options.culture));
	                        dateView.value(value);
	                        that._updateARIA(value);
	                    }
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE, timeViewParams)) {
	                        e.preventDefault();
	                    } else {
	                        ul.attr(ARIA_HIDDEN, true);
	                        element.attr(ARIA_EXPANDED, false);

	                        if (!dateView.popup.visible()) {
	                            element.removeAttr(ARIA_OWNS);
	                        }
	                    }
	                },
	                open:  function(e) {
	                    timeView._adjustListWidth();
	                    if (that.trigger(OPEN, timeViewParams)) {
	                        e.preventDefault();
	                    } else {
	                        if (element.val() !== that._oldText) {
	                            date = parse(element.val(), options.parseFormats, options.culture);

	                            that.timeView.value(date);
	                        }

	                        ul.attr(ARIA_HIDDEN, false);
	                        element.attr(ARIA_EXPANDED, true)
	                               .attr(ARIA_OWNS, timeView._timeViewID);

	                        timeView.options.active(timeView.current());
	                    }
	                },
	                active: function(current) {
	                    element.removeAttr(ARIA_ACTIVEDESCENDANT);
	                    if (current) {
	                        element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
	                    }
	                }
	            });
	            ul = timeView.ul;
	        },

	        _icons: function() {
	            var that = this;
	            var element = that.element;
	            var options = that.options;
	            var icons;

	            icons = element.next("span.k-select");

	            if (!icons[0]) {
	                icons = $('<span unselectable="on" class="k-select">' +
	                            '<span class="k-link k-link-date" aria-label="' + options.dateButtonText + '"><span unselectable="on" class="k-icon k-i-calendar"></span></span>' +
	                            '<span class="k-link k-link-time" aria-label="' + options.timeButtonText + '"><span unselectable="on" class="k-icon k-i-clock"></span></span>' +
	                          '</span>'
	                         ).insertAfter(element);
	            }

	            icons = icons.children();

	            icons = icons.children();
	            that._dateIcon = icons.eq(0).attr("aria-controls", that.dateView._dateViewID);
	            that._timeIcon = icons.eq(1).attr("aria-controls", that.timeView._timeViewID);
	        },

	        _wrapper: function() {
	            var that = this,
	            element = that.element,
	            wrapper;

	            wrapper = element.parents(".k-datetimepicker");

	            if (!wrapper[0]) {
	                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
	                wrapper = wrapper.wrap(SPAN).parent();
	            }

	            wrapper[0].style.cssText = element[0].style.cssText;
	            element.css({
	                width: "100%",
	                height: element[0].style.height
	            });

	            that.wrapper = wrapper.addClass("k-widget k-datetimepicker k-header")
	                                  .addClass(element[0].className);

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    that.value(element[0].defaultValue);
	                    that.max(that._initialOptions.max);
	                    that.min(that._initialOptions.min);
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _template: function() {
	            this._ariaTemplate = kendo.template(this.options.ARIATemplate);
	        },

	        _calculateMidnight: function(min, max) {
	            return getMilliseconds(min) + getMilliseconds(max) === 0;
	        },

	        _updateARIA: function(date) {
	            var cell;
	            var that = this;
	            var calendar = that.dateView.calendar;

	            that.element.removeAttr(ARIA_ACTIVEDESCENDANT);

	            if (calendar) {
	                cell = calendar._cell;
	                cell.attr("aria-label", that._ariaTemplate({ current: date || calendar.current() }));

	                that.element.attr(ARIA_ACTIVEDESCENDANT, cell.attr("id"));
	            }
	        }
	    });

	    function lastTimeOption(interval) {
	        var date = new Date(2100, 0, 1);
	        date.setMinutes(-interval);
	        return date;
	    }

	    function preventDefault(e) {
	        e.preventDefault();
	    }

	    function normalize(options) {
	        var patterns = kendo.getCulture(options.culture).calendars.standard.patterns,
	            parseFormats = !options.parseFormats.length,
	            timeFormat;

	        options.format = extractFormat(options.format || patterns.g);
	        options.timeFormat = timeFormat = extractFormat(options.timeFormat || patterns.t);
	        kendo.DateView.normalize(options);

	        if (parseFormats) {
	           options.parseFormats.unshift("yyyy-MM-ddTHH:mm:ss");
	        }

	        if ($.inArray(timeFormat, options.parseFormats) === -1) {
	            options.parseFormats.splice(1, 0, timeFormat);
	        }
	    }

	    ui.plugin(DateTimePicker);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 675:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.datepicker */ 8);

/***/ },

/***/ 676:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.timepicker */ 141);

/***/ }

/******/ });

/***/ }),
/* 122 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.excel.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(723);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 581:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data */ 6);

/***/ },

/***/ 723:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(581), __webpack_require__(724) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "excel",
	    name: "Excel export",
	    category: "framework",
	    advanced: true,
	    mixin: true,
	    depends: [ "data", "ooxml" ]
	};

	(function($, kendo){

	kendo.ExcelExporter = kendo.Class.extend({
	    init: function(options) {
	        options.columns = this._trimColumns(options.columns || []);

	        this.allColumns = $.map(this._leafColumns(options.columns || []), this._prepareColumn);

	        this.columns = $.grep(this.allColumns, function(column) { return !column.hidden;});

	        this.options = options;

	        var dataSource = options.dataSource;

	        if (dataSource instanceof kendo.data.DataSource) {
	            this.dataSource = new dataSource.constructor($.extend(
	                {},
	                dataSource.options,
	                {
	                    page: options.allPages ? 0 : dataSource.page(),
	                    filter: dataSource.filter(),
	                    pageSize: options.allPages ? dataSource.total() : dataSource.pageSize(),
	                    sort: dataSource.sort(),
	                    group: dataSource.group(),
	                    aggregate: dataSource.aggregate()
	                }));

	            var data = dataSource.data();

	            if (data.length > 0) {
	                // Avoid toJSON() for perf and avoid data() to prevent reparenting.
	                this.dataSource._data = data;

	                var transport = this.dataSource.transport;
	                if (dataSource._isServerGrouped() && transport.options && transport.options.data) { // clear the transport data when using aspnet-mvc transport
	                    transport.options.data = null;
	                }
	            }

	        } else {
	            this.dataSource = kendo.data.DataSource.create(dataSource);
	        }
	    },
	    _trimColumns: function(columns) {
	        var that = this;
	        return $.grep(columns, function(column) {
	            var result = !(!column.field);
	            if (!result && column.columns) {
	                result = that._trimColumns(column.columns).length > 0;
	            }
	            return result;
	        });
	    },
	    _leafColumns: function(columns) {
	        var result = [];

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (!columns[idx].columns) {
	                result.push(columns[idx]);
	                continue;
	            }
	            result = result.concat(this._leafColumns(columns[idx].columns));
	        }

	        return result;
	    },
	    workbook: function() {
	        return $.Deferred($.proxy(function(d) {
	            this.dataSource.fetch()
	                .then($.proxy(function() {
	                    var workbook = {
	                        sheets: [
	                            {
	                               columns: this._columns(),
	                               rows: this._rows(),
	                               freezePane: this._freezePane(),
	                               filter: this._filter()
	                            }
	                        ]
	                    };
	                    d.resolve(workbook, this.dataSource.view());
	                }, this));
	        }, this)).promise();
	    },
	    _prepareColumn: function(column) {
	        if (!column.field) {
	            return;
	        }

	        var value = function(dataItem) {
	            return dataItem.get(column.field);
	        };

	        var values = null;

	        if (column.values) {
	            values = {};

	            $.each(column.values, function() {
	               values[this.value] = this.text;
	            });

	            value = function(dataItem) {
	                return values[dataItem.get(column.field)];
	            };
	        }

	        return $.extend({}, column, {
	            value: value,
	            values: values,
	            groupHeaderTemplate: kendo.template(column.groupHeaderTemplate || "#= title #: #= value #"),
	            groupFooterTemplate: column.groupFooterTemplate ? kendo.template(column.groupFooterTemplate) : null,
	            footerTemplate: column.footerTemplate ? kendo.template(column.footerTemplate) : null
	        });
	    },
	    _filter: function() {
	        if (!this.options.filterable) {
	            return null;
	        }

	        var depth = this._depth();

	        return {
	            from: depth,
	            to: depth + this.columns.length - 1
	        };
	    },

	    _dataRow: function(dataItem, level, depth) {
	        if (this._hierarchical()) {
	            level = this.dataSource.level(dataItem) + 1;
	        }

	        var cells = [];

	        for (var li = 0; li < level; li++) {
	            cells[li] = {
	                background: "#dfdfdf",
	                color: "#333"
	            };
	        }

	        // grouped
	        if (depth && dataItem.items) {
	            var column = $.grep(this.allColumns, function(column) {
	                return column.field == dataItem.field;
	            })[0];

	            var title = column && column.title ? column.title : dataItem.field;
	            var template = column ? column.groupHeaderTemplate : null;
	            var value = title + ": " + dataItem.value;
	            var group = $.extend({
	                    title: title,
	                    field: dataItem.field,
	                    value: column && column.values ? column.values[dataItem.value] : dataItem.value,
	                    aggregates: dataItem.aggregates
	                }, dataItem.aggregates[dataItem.field]);

	            if (template) {
	                value = template(group);
	            }

	            cells.push( {
	                value: value,
	                background: "#dfdfdf",
	                color: "#333",
	                colSpan: this.columns.length + depth - level
	            } );

	            var rows = this._dataRows(dataItem.items, level + 1);

	            rows.unshift({
	                type: "group-header",
	                cells: cells
	            });

	            return rows.concat(this._footer(dataItem));
	        } else {
	            var dataCells = [];

	            for (var ci = 0; ci < this.columns.length; ci++) {
	                dataCells[ci] = this._cell(dataItem, this.columns[ci]);
	            }

	            if (this._hierarchical()) {
	                dataCells[0].colSpan = depth - level + 1;
	            }

	            return [{
	                type: "data",
	                cells: cells.concat(dataCells)
	            }];
	        }
	    },

	    _dataRows: function(dataItems, level) {
	        var depth = this._depth();
	        var rows = [];

	        for (var i = 0; i < dataItems.length; i++) {
	            rows.push.apply(rows, this._dataRow(dataItems[i], level, depth));
	        }

	        return rows;
	    },
	    _footer: function(dataItem) {
	        var rows = [];
	        var footer = false;

	        var cells = $.map(this.columns, $.proxy(function(column) {
	            if (column.groupFooterTemplate) {
	                footer = true;
	                return {
	                    background: "#dfdfdf",
	                    color: "#333",
	                    value: column.groupFooterTemplate($.extend({}, this.dataSource.aggregates(), dataItem.aggregates, dataItem.aggregates[column.field]))
	                };
	            } else {
	                return {
	                    background: "#dfdfdf",
	                    color: "#333"
	                };
	            }
	        }, this));

	        if (footer) {
	            rows.push({
	                type: "group-footer",
	                cells: $.map(new Array(this.dataSource.group().length), function() {
	                    return {
	                        background: "#dfdfdf",
	                        color: "#333"
	                    };
	                }).concat(cells)
	            });
	        }

	        return rows;
	    },
	    _isColumnVisible: function(column) {
	        return this._visibleColumns([column]).length > 0 && (column.field || column.columns);
	    },
	    _visibleColumns: function(columns) {
	        var that = this;
	        return $.grep(columns, function(column) {
	            var result = !column.hidden;
	            if (result && column.columns) {
	                result = that._visibleColumns(column.columns).length > 0;
	            }
	            return result;
	        });
	    },
	    _headerRow: function(row, groups) {
	        var headers = $.map(row.cells, function(cell) {
	            return {
	                background: "#7a7a7a",
	                color: "#fff",
	                value: cell.title,
	                colSpan: cell.colSpan > 1 ? cell.colSpan : 1,
	                rowSpan: row.rowSpan > 1 && !cell.colSpan ? row.rowSpan : 1
	            };
	        });

	        if (this._hierarchical()) {
	            headers[0].colSpan = this._depth() + 1;
	        }

	        return {
	            type: "header",
	            cells: $.map(new Array(groups.length), function() {
	                return {
	                    background: "#7a7a7a",
	                    color: "#fff"
	                };
	            }).concat(headers)
	        };
	    },
	    _prependHeaderRows: function(rows) {
	        var groups = this.dataSource.group();

	        var headerRows = [{ rowSpan: 1, cells: [], index: 0 }];

	        this._prepareHeaderRows(headerRows, this.options.columns);

	        for (var idx = headerRows.length - 1; idx >= 0; idx--) {
	            rows.unshift(this._headerRow(headerRows[idx], groups));
	        }
	    },
	    _prepareHeaderRows: function(rows, columns, parentCell, parentRow) {
	        var row = parentRow || rows[rows.length - 1];

	        var childRow = rows[row.index + 1];
	        var totalColSpan = 0;
	        var column;
	        var cell;

	        for (var idx = 0; idx < columns.length; idx++) {
	            column = columns[idx];
	            if (this._isColumnVisible(column)) {

	                cell = { title: column.title || column.field, colSpan: 0 };
	                row.cells.push(cell);

	                if (column.columns && column.columns.length) {
	                    if (!childRow) {
	                        childRow = { rowSpan: 0, cells: [], index: rows.length };
	                        rows.push(childRow);
	                    }
	                    cell.colSpan = this._trimColumns(this._visibleColumns(column.columns)).length;
	                    this._prepareHeaderRows(rows, column.columns, cell, childRow);
	                    totalColSpan += cell.colSpan - 1;
	                    row.rowSpan = rows.length - row.index;
	                }
	            }
	        }
	        if (parentCell) {
	            parentCell.colSpan += totalColSpan;
	        }
	    },
	    _rows: function() {
	        var groups = this.dataSource.group();

	        var rows = this._dataRows(this.dataSource.view(), 0);

	        if (this.columns.length) {

	            this._prependHeaderRows(rows);

	            var footer = false;

	            var cells = $.map(this.columns, $.proxy(function(column) {
	                if (column.footerTemplate) {
	                    footer = true;
	                    var aggregates = this.dataSource.aggregates();

	                    return {
	                        background: "#dfdfdf",
	                        color: "#333",
	                        value: column.footerTemplate($.extend({}, aggregates, aggregates[column.field]))
	                    };
	                } else {
	                    return {
	                        background: "#dfdfdf",
	                        color: "#333"
	                    };
	                }
	            }, this));

	            if (footer) {
	                rows.push({
	                    type: "footer",
	                    cells: $.map(new Array(groups.length), function() {
	                        return {
	                            background: "#dfdfdf",
	                            color: "#333"
	                        };
	                    }).concat(cells)
	                });
	            }
	        }

	        return rows;
	    },
	    _headerDepth: function(columns) {
	        var result = 1;
	        var max = 0;

	        for (var idx = 0; idx < columns.length; idx++) {
	            if (columns[idx].columns) {
	                var temp = this._headerDepth(columns[idx].columns);
	                if (temp > max) {
	                    max = temp;
	                }
	            }
	        }
	        return result + max;
	    },
	    _freezePane: function() {
	        var columns = this._visibleColumns(this.options.columns || []);

	        var colSplit = this._visibleColumns(this._trimColumns(this._leafColumns($.grep(columns, function(column) {
	            return column.locked;
	        })))).length;

	        return {
	            rowSplit: this._headerDepth(columns),
	            colSplit: colSplit? colSplit + this.dataSource.group().length : 0
	        };
	    },
	    _cell: function(dataItem, column) {
	        return {
	            value: column.value(dataItem)
	        };
	    },
	    _hierarchical: function() {
	        return this.options.hierarchy && this.dataSource.level;
	    },
	    _depth: function() {
	        var dataSource = this.dataSource;
	        var depth = 0;
	        var view, i, level;

	        if (this._hierarchical()) {
	            view = dataSource.view();

	            for (i = 0; i < view.length; i++) {
	                level = dataSource.level(view[i]);

	                if (level > depth) {
	                    depth = level;
	                }
	            }

	            depth++;
	        } else {
	            depth = dataSource.group().length;
	        }

	        return depth;
	    },
	    _columns: function() {
	        var depth = this._depth();
	        var columns = $.map(new Array(depth), function() {
	            return { width: 20 };
	        });

	        return columns.concat($.map(this.columns, function(column) {
	            return {
	                width: parseInt(column.width, 10),
	                autoWidth: column.width ? false : true
	            };
	        }));
	    }
	});

	kendo.ExcelMixin = {
	    extend: function(proto) {
	       proto.events.push("excelExport");
	       proto.options.excel = $.extend(proto.options.excel, this.options);
	       proto.saveAsExcel = this.saveAsExcel;
	    },
	    options: {
	        proxyURL: "",
	        allPages: false,
	        filterable: false,
	        fileName: "Export.xlsx"
	    },
	    saveAsExcel: function() {
	        var excel = this.options.excel || {};

	        var exporter = new kendo.ExcelExporter({
	            columns: this.columns,
	            dataSource: this.dataSource,
	            allPages: excel.allPages,
	            filterable: excel.filterable,
	            hierarchy: excel.hierarchy
	        });

	        exporter.workbook().then($.proxy(function(book, data) {
	            if (!this.trigger("excelExport", { workbook: book, data: data })) {
	                var workbook = new kendo.ooxml.Workbook(book);

	                kendo.saveAs({
	                    dataURI: workbook.toDataURL(),
	                    fileName: book.fileName || excel.fileName,
	                    proxyURL: excel.proxyURL,
	                    forceProxy: excel.forceProxy
	                });
	            }
	        }, this));
	    }
	};

	})(kendo.jQuery, kendo);

	return kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 724:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.ooxml */ 62);

/***/ }

/******/ });

/***/ }),
/* 123 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.groupable.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(754);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 619:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.draganddrop */ 7);

/***/ },

/***/ 754:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(619) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "groupable",
	    name: "Groupable",
	    category: "framework",
	    depends: [ "core", "draganddrop" ],
	    advanced: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        outerWidth = kendo._outerWidth,
	        proxy = $.proxy,
	        isRtl = false,
	        NS = ".kendoGroupable",
	        CHANGE = "change",
	        indicatorTmpl = kendo.template('<div class="k-group-indicator" data-#=data.ns#field="${data.field}" data-#=data.ns#title="${data.title || ""}" data-#=data.ns#dir="${data.dir || "asc"}">' +
	                '<a href="\\#" class="k-link">' +
	                    '<span class="k-icon k-i-sort-${(data.dir || "asc") == "asc" ? "asc-sm" : "desc-sm"}" title="(sorted ${(data.dir || "asc") == "asc" ? "ascending": "descending"})"></span>' +
	                    '${data.title ? data.title: data.field}' +
	                '</a>' +
	                '<a class="k-button k-button-icon k-button-bare">' +
	                    '<span class="k-icon k-i-close"></span>' +
	                '</a>' +
	             '</div>',  { useWithBlock:false }),
	        hint = function(target) {
	            var title = target.attr(kendo.attr("title"));
	            if (title) {
	                title = kendo.htmlEncode(title);
	            }

	            return $('<div class="k-header k-drag-clue" />')
	                .css({
	                    width: target.width(),
	                    paddingLeft: target.css("paddingLeft"),
	                    paddingRight: target.css("paddingRight"),
	                    lineHeight: target.height() + "px",
	                    paddingTop: target.css("paddingTop"),
	                    paddingBottom: target.css("paddingBottom")
	                })
	                .html(title || target.attr(kendo.attr("field")))
	                .prepend('<span class="k-icon k-drag-status k-i-cancel" />');
	        },
	        dropCue = $('<div class="k-grouping-dropclue"/>');

	    function dropCueOffsetTop(element) {
	        return element.position().top + 3;
	    }

	    var Groupable = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                group = kendo.guid(),
	                intializePositions = proxy(that._intializePositions, that),
	                draggable,
	                horizontalCuePosition,
	                dropCuePositions = that._dropCuePositions = [];

	            Widget.fn.init.call(that, element, options);

	            isRtl = kendo.support.isRtl(element);
	            horizontalCuePosition = isRtl ? "right" : "left";

	            that.draggable = draggable = that.options.draggable || new kendo.ui.Draggable(that.element, {
	                filter: that.options.draggableElements,
	                hint: hint,
	                group: group
	            });

	            that.groupContainer = $(that.options.groupContainer, that.element)
	                .kendoDropTarget({
	                    group: draggable.options.group,
	                    dragenter: function(e) {
	                        if (that._canDrag(e.draggable.currentTarget)) {
	                            e.draggable.hint.find(".k-drag-status").removeClass("k-i-cancel").addClass("k-i-plus");
	                            dropCue.css("top", dropCueOffsetTop(that.groupContainer)).css(horizontalCuePosition, 0).appendTo(that.groupContainer);
	                        }
	                    },
	                    dragleave: function(e) {
	                        e.draggable.hint.find(".k-drag-status").removeClass("k-i-plus").addClass("k-i-cancel");
	                        dropCue.remove();
	                    },
	                    drop: function(e) {
	                        var targetElement = e.draggable.currentTarget,
	                            field = targetElement.attr(kendo.attr("field")),
	                            title = targetElement.attr(kendo.attr("title")),
	                            sourceIndicator = that.indicator(field),
	                            dropCuePositions = that._dropCuePositions,
	                            lastCuePosition = dropCuePositions[dropCuePositions.length - 1],
	                            position;

	                        if (!targetElement.hasClass("k-group-indicator") && !that._canDrag(targetElement)) {
	                            return;
	                        }
	                        if(lastCuePosition) {
	                            position = that._dropCuePosition(kendo.getOffset(dropCue).left + parseInt(lastCuePosition.element.css("marginLeft"), 10) * (isRtl ? -1 : 1) + parseInt(lastCuePosition.element.css("marginRight"), 10));
	                            if(position && that._canDrop($(sourceIndicator), position.element, position.left)) {
	                                if(position.before) {
	                                    position.element.before(sourceIndicator || that.buildIndicator(field, title));
	                                } else {
	                                    position.element.after(sourceIndicator || that.buildIndicator(field, title));
	                                }

	                                that._change();
	                            }
	                        } else {
	                            that.groupContainer.append(that.buildIndicator(field, title));
	                            that._change();
	                        }
	                    }
	                })
	                .kendoDraggable({
	                    filter: "div.k-group-indicator",
	                    hint: hint,
	                    group: draggable.options.group,
	                    dragcancel: proxy(that._dragCancel, that),
	                    dragstart: function(e) {
	                        var element = e.currentTarget,
	                            marginLeft = parseInt(element.css("marginLeft"), 10),
	                            elementPosition = element.position(),
	                            left = isRtl ? elementPosition.left - marginLeft : elementPosition.left + outerWidth(element);

	                        intializePositions();
	                        dropCue.css({top: dropCueOffsetTop(that.groupContainer), left: left}).appendTo(that.groupContainer);
	                        this.hint.find(".k-drag-status").removeClass("k-i-cancel").addClass("k-i-plus");
	                    },
	                    dragend: function() {
	                        that._dragEnd(this);
	                    },
	                    drag: proxy(that._drag, that)
	                })
	                .on("click" + NS, ".k-button", function(e) {
	                    e.preventDefault();
	                    that._removeIndicator($(this).parent());
	                })
	                .on("click" + NS,".k-link", function(e) {
	                    var current = $(this).parent(),
	                        newIndicator = that.buildIndicator(current.attr(kendo.attr("field")), current.attr(kendo.attr("title")), current.attr(kendo.attr("dir")) == "asc" ? "desc" : "asc");

	                    current.before(newIndicator).remove();
	                    that._change();
	                    e.preventDefault();
	                });

	            draggable.bind([ "dragend", "dragcancel", "dragstart", "drag" ],
	            {
	                dragend: function() {
	                    that._dragEnd(this);
	                },
	                dragcancel: proxy(that._dragCancel, that),
	                dragstart: function(e) {
	                    var element, marginRight, left;

	                    if (!that.options.allowDrag && !that._canDrag(e.currentTarget)) {
	                        e.preventDefault();
	                        return;
	                    }

	                    intializePositions();
	                    if(dropCuePositions.length) {
	                        element = dropCuePositions[dropCuePositions.length - 1].element;
	                        marginRight = parseInt(element.css("marginRight"), 10);
	                        left = element.position().left + outerWidth(element) + marginRight;
	                    } else {
	                        left = 0;
	                    }
	                },
	                drag: proxy(that._drag, that)
	            });

	            that.dataSource = that.options.dataSource;

	            if (that.dataSource && that._refreshHandler) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);
	            } else {
	                that._refreshHandler = proxy(that.refresh, that);
	            }

	            if(that.dataSource) {
	                that.dataSource.bind("change", that._refreshHandler);
	                that.refresh();
	            }
	        },

	        refresh: function() {
	            var that = this,
	                dataSource = that.dataSource;

	            if (that.groupContainer) {
	                that.groupContainer.empty().append(
	                    $.map(dataSource.group() || [], function(item) {
	                        var fieldName = item.field;
	                        var attr = kendo.attr("field");
	                        var element = that.element.find(that.options.filter)
	                            .filter(function() { return $(this).attr(attr) === fieldName; });

	                        return that.buildIndicator(item.field, element.attr(kendo.attr("title")), item.dir);
	                    }).join("")
	                );
	            }
	            that._invalidateGroupContainer();
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.groupContainer.off(NS);

	            if (that.groupContainer.data("kendoDropTarget")) {
	                that.groupContainer.data("kendoDropTarget").destroy();
	            }

	            if (that.groupContainer.data("kendoDraggable")) {
	                that.groupContainer.data("kendoDraggable").destroy();
	            }

	            if (!that.options.draggable) {
	                that.draggable.destroy();
	            }

	            if (that.dataSource && that._refreshHandler) {
	                that.dataSource.unbind("change", that._refreshHandler);
	                that._refreshHandler = null;
	            }

	            that.groupContainer = that.element = that.draggable = null;
	        },

	        events: ["change"],

	        options: {
	            name: "Groupable",
	            filter: "th",
	            draggableElements: "th",
	            messages: {
	                empty: "Drag a column header and drop it here to group by that column"
	            }
	        },

	        indicator: function(field) {
	            var indicators = $(".k-group-indicator", this.groupContainer);
	            return $.grep(indicators, function (item)
	                {
	                    return $(item).attr(kendo.attr("field")) === field;
	                })[0];
	        },

	        buildIndicator: function(field, title, dir) {
	            return indicatorTmpl({ field: field.replace(/"/g, "'"), dir: dir, title: title, ns: kendo.ns });
	        },

	        descriptors: function() {
	            var that = this,
	                indicators = $(".k-group-indicator", that.groupContainer),
	                aggregates,
	                names,
	                field,
	                idx,
	                length;

	            aggregates = that.element.find(that.options.filter).map(function() {
	                var cell = $(this),
	                    aggregate = cell.attr(kendo.attr("aggregates")),
	                    member = cell.attr(kendo.attr("field"));

	                if (aggregate && aggregate !== "") {
	                    names = aggregate.split(",");
	                    aggregate = [];
	                    for (idx = 0, length = names.length; idx < length; idx++) {
	                        aggregate.push({ field: member, aggregate: names[idx] });
	                    }
	                }
	                return aggregate;
	            }).toArray();

	            return $.map(indicators, function(item) {
	                item = $(item);
	                field = item.attr(kendo.attr("field"));

	                return {
	                    field: field,
	                    dir: item.attr(kendo.attr("dir")),
	                    aggregates: aggregates || []
	                };
	            });
	        },

	        _removeIndicator: function(indicator) {
	            var that = this;
	            indicator.remove();
	            that._invalidateGroupContainer();
	            that._change();
	        },

	        _change: function() {
	            var that = this;
	            if(that.dataSource) {
	                var descriptors = that.descriptors();
	                if (that.trigger("change", { groups: descriptors })) {
	                    that.refresh();
	                    return;
	                }
	                that.dataSource.group(descriptors);
	            }
	        },

	        _dropCuePosition: function(position) {
	            var dropCuePositions = this._dropCuePositions;
	            if(!dropCue.is(":visible") || dropCuePositions.length === 0) {
	                return;
	            }

	            position = Math.ceil(position);

	            var lastCuePosition = dropCuePositions[dropCuePositions.length - 1],
	                left = lastCuePosition.left,
	                right = lastCuePosition.right,
	                marginLeft = parseInt(lastCuePosition.element.css("marginLeft"), 10),
	                marginRight = parseInt(lastCuePosition.element.css("marginRight"), 10);

	            if(position >= right && !isRtl || position < left && isRtl) {
	                position = {
	                    left: lastCuePosition.element.position().left + (!isRtl ? outerWidth(lastCuePosition.element) + marginRight : - marginLeft),
	                    element: lastCuePosition.element,
	                    before: false
	                };
	            } else {
	                position = $.grep(dropCuePositions, function(item) {
	                    return (item.left <= position && position <= item.right) || (isRtl && position > item.right);
	                })[0];

	                if(position) {
	                    position = {
	                        left: isRtl ? position.element.position().left + outerWidth(position.element) + marginRight : position.element.position().left - marginLeft,
	                        element: position.element,
	                        before: true
	                    };
	                }
	            }

	            return position;
	        },
	        _drag: function(event) {
	            var position = this._dropCuePosition(event.x.location);

	            if (position) {
	                dropCue.css({ left: position.left, right: "auto" });
	            }
	        },
	        _canDrag: function(element) {
	            var field = element.attr(kendo.attr("field"));

	            return element.attr(kendo.attr("groupable")) != "false" &&
	                field &&
	                (element.hasClass("k-group-indicator") ||
	                    !this.indicator(field));
	        },
	        _canDrop: function(source, target, position) {
	            var next = source.next(),
	                result = source[0] !== target[0] && (!next[0] || target[0] !== next[0] || (!isRtl && position > next.position().left || isRtl && position < next.position().left));
	            return result;
	        },
	        _dragEnd: function(draggable) {
	            var that = this,
	                field = draggable.currentTarget.attr(kendo.attr("field")),
	                sourceIndicator = that.indicator(field);

	            if (draggable !== that.options.draggable && !draggable.dropped && sourceIndicator) {
	                that._removeIndicator($(sourceIndicator));
	            }

	            that._dragCancel();
	        },
	        _dragCancel: function() {
	            dropCue.remove();
	            this._dropCuePositions = [];
	        },
	        _intializePositions: function() {
	            var that = this,
	                indicators = $(".k-group-indicator", that.groupContainer),
	                left;

	            that._dropCuePositions = $.map(indicators, function(item) {
	                item = $(item);
	                left = kendo.getOffset(item).left;
	                return {
	                    left: parseInt(left, 10),
	                    right: parseInt(left + outerWidth(item), 10),
	                    element: item
	                };
	            });
	        },
	        _invalidateGroupContainer: function() {
	            var groupContainer = this.groupContainer;
	            if(groupContainer && groupContainer.is(":empty")) {
	                groupContainer.html(this.options.messages.empty);
	            }
	        }
	    });

	    kendo.ui.plugin(Groupable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 124 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.menu.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(762);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 762:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(596) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "menu",
	    name: "Menu",
	    category: "web",
	    description: "The Menu widget displays hierarchical data as a multi-level menu.",
	    depends: [ "popup" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        activeElement = kendo._activeElement,
	        touch = (kendo.support.touch && kendo.support.mobileOS),
	        MOUSEDOWN = "mousedown",
	        CLICK = "click",
	        extend = $.extend,
	        proxy = $.proxy,
	        each = $.each,
	        template = kendo.template,
	        keys = kendo.keys,
	        Widget = ui.Widget,
	        excludedNodesRegExp = /^(ul|a|div)$/i,
	        NS = ".kendoMenu",
	        IMG = "img",
	        OPEN = "open",
	        MENU = "k-menu",
	        LINK = "k-link",
	        LAST = "k-last",
	        CLOSE = "close",
	        TIMER = "timer",
	        FIRST = "k-first",
	        IMAGE = "k-image",
	        SELECT = "select",
	        ZINDEX = "zIndex",
	        ACTIVATE = "activate",
	        DEACTIVATE = "deactivate",
	        POINTERDOWN = "touchstart" + NS + " MSPointerDown" + NS + " pointerdown" + NS,
	        pointers = kendo.support.pointers,
	        msPointers = kendo.support.msPointers,
	        allPointers = msPointers || pointers,
	        MOUSEENTER = pointers ? "pointerover" : (msPointers ? "MSPointerOver" : "mouseenter"),
	        MOUSELEAVE = pointers ? "pointerout" : (msPointers ? "MSPointerOut" : "mouseleave"),
	        mobile = touch || allPointers,
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        KENDOPOPUP = "kendoPopup",
	        DEFAULTSTATE = "k-state-default",
	        HOVERSTATE = "k-state-hover",
	        FOCUSEDSTATE = "k-state-focused",
	        DISABLEDSTATE = "k-state-disabled",
	        SELECTEDSTATE = "k-state-selected",
	        menuSelector = ".k-menu",
	        groupSelector = ".k-menu-group",
	        popupSelector = groupSelector + ",.k-animation-container",
	        allItemsSelector = ":not(.k-list) > .k-item",
	        disabledSelector = ".k-item.k-state-disabled",
	        itemSelector = ".k-item:not(.k-state-disabled)",
	        linkSelector = ".k-item:not(.k-state-disabled) > .k-link",
	        exclusionSelector = ":not(.k-item.k-separator)",
	        nextSelector = exclusionSelector + ":eq(0)",
	        lastSelector = exclusionSelector + ":last",
	        templateSelector = "div:not(.k-animation-container,.k-list-container)",
	        touchPointerTypes = { "2": 1, "touch": 1 },

	        templates = {
	            content: template(
	                "<div #= contentCssAttributes(item) # tabindex='-1'>#= content(item) #</div>"
	            ),
	            group: template(
	                "<ul class='#= groupCssClass(group) #'#= groupAttributes(group) # role='menu' aria-hidden='true'>" +
	                    "#= renderItems(data) #" +
	                "</ul>"
	            ),
	            itemWrapper: template(
	                "<#= tag(item) # class='#= textClass(item) #'#= textAttributes(item) #>" +
	                    "#= image(data) ##= sprite(item) ##= text(item) #" +
	                    "#= arrow(data) #" +
	                "</#= tag(item) #>"
	            ),
	            item: template(
	                "<li class='#= wrapperCssClass(group, item) #' #= itemCssAttributes(item) # role='menuitem'  #=item.items ? \"aria-haspopup='true'\": \"\"#" +
	                    "#=item.enabled === false ? \"aria-disabled='true'\" : ''#>" +
	                    "#= itemWrapper(data) #" +
	                    "# if (item.items) { #" +
	                    "#= subGroup({ items: item.items, menu: menu, group: { expanded: item.expanded } }) #" +
	                    "# } else if (item.content || item.contentUrl) { #" +
	                    "#= renderContent(data) #" +
	                    "# } #" +
	                "</li>"
	            ),
	            image: template("<img #= imageCssAttributes(item) # alt='' src='#= item.imageUrl #' />"), // class='k-image'
	            arrow: template("<span class='#= arrowClass(item, group) #'></span>"),
	            sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
	            empty: template("")
	        },

	        rendering = {

	            wrapperCssClass: function (group, item) {
	                var result = "k-item",
	                    index = item.index;

	                if (item.enabled === false) {
	                    result += " k-state-disabled";
	                } else {
	                    result += " k-state-default";
	                }

	                if (group.firstLevel && index === 0) {
	                    result += " k-first";
	                }

	                if (index == group.length-1) {
	                    result += " k-last";
	                }

	                if (item.cssClass) {
	                    result += " " + item.cssClass;
	                }

	                if(item.attr && item.attr.hasOwnProperty("class")) {
	                    result += " " + item.attr["class"];
	                }

	                if(item.selected) {
	                    result += " " + SELECTEDSTATE;
	                }

	                return result;
	            },

	            itemCssAttributes: function (item) {
	                var result = "";
	                var attributes = item.attr || {};

	                for (var attr in attributes) {
	                    if(attributes.hasOwnProperty(attr) && attr !== "class") {
	                        result += attr + "=\"" + attributes[attr] + "\" ";
	                    }
	                }

	                return result;
	            },

	            imageCssAttributes: function (item) {
	                var result = "";
	                var attributes = item.imageAttr || {};

	                if (!attributes['class']) {
	                    attributes['class'] = IMAGE;
	                } else {
	                    attributes['class'] += " " + IMAGE;
	                }

	                for (var attr in attributes) {
	                    if(attributes.hasOwnProperty(attr)) {
	                        result += attr + "=\"" + attributes[attr] + "\" ";
	                    }
	                }

	                return result;
	            },

	            contentCssAttributes: function (item) {
	                var result = "";
	                var attributes = item.contentAttr || {};
	                var defaultClasses = "k-content k-group k-menu-group";

	                if (!attributes['class']) {
	                    attributes['class'] = defaultClasses;
	                } else {
	                    attributes['class'] += " " + defaultClasses;
	                }

	                for (var attr in attributes) {
	                    if(attributes.hasOwnProperty(attr)) {
	                        result += attr + "=\"" + attributes[attr] + "\" ";
	                    }
	                }

	                return result;
	            },

	            textClass: function() {
	                return LINK;
	            },

	            textAttributes: function(item) {
	                return item.url ? " href='" + item.url + "'" : "";
	            },

	            arrowClass: function(item, group) {
	                var result = "k-icon";

	                if (group.horizontal) {
	                    result += " k-i-arrow-60-down";
	                } else {
	                    result += " k-i-arrow-60-right";
	                }

	                return result;
	            },

	            text: function(item) {
	                return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
	            },

	            tag: function(item) {
	                return item.url ? "a" : "span";
	            },

	            groupAttributes: function(group) {
	                return group.expanded !== true ? " style='display:none'" : "";
	            },

	            groupCssClass: function() {
	                return "k-group k-menu-group";
	            },

	            content: function(item) {
	                return item.content ? item.content : "&nbsp;";
	            }
	        };

	    function getEffectDirection(direction, root) {
	        direction = direction.split(" ")[!root+0] || direction;
	        return direction.replace("top", "up").replace("bottom", "down");
	    }

	    function parseDirection(direction, root, isRtl) {
	        direction = direction.split(" ")[!root+0] || direction;
	        var output = { origin: ["bottom", (isRtl ? "right" : "left")], position: ["top", (isRtl ? "right" : "left")] },
	            horizontal = /left|right/.test(direction);

	        if (horizontal) {
	            output.origin = [ "top", direction ];
	            output.position[1] = kendo.directions[direction].reverse;
	        } else {
	            output.origin[0] = direction;
	            output.position[0] = kendo.directions[direction].reverse;
	        }

	        output.origin = output.origin.join(" ");
	        output.position = output.position.join(" ");

	        return output;
	    }

	    function contains(parent, child) {
	        try {
	            return $.contains(parent, child);
	        } catch (e) {
	            return false;
	        }
	    }

	    function updateItemClasses (item) {
	        item = $(item);

	        item.addClass("k-item")
	            .children(IMG)
	            .addClass(IMAGE);
	        item
	            .children("a")
	            .addClass(LINK)
	            .children(IMG)
	            .addClass(IMAGE);
	        item
	            .filter(":not([disabled])")
	            .addClass(DEFAULTSTATE);
	        item
	            .filter(".k-separator")
	            .empty()
	            .append("&nbsp;");
	        item
	            .filter("li[disabled]")
	            .addClass(DISABLEDSTATE)
	            .removeAttr("disabled")
	            .attr("aria-disabled", true);

	        if (!item.filter("[role]").length) {
	            item.attr("role", "menuitem");
	        }

	        if (!item.children("." + LINK).length) {
	            item
	                .contents()      // exclude groups, real links, templates and empty text nodes
	                .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !$.trim(this.nodeValue))); })
	                .wrapAll("<span class='" + LINK + "'/>");
	        }

	        updateArrow(item);
	        updateFirstLast(item);
	    }

	    function updateArrow (item) {
	        item = $(item);

	        item.find("> .k-link > [class*=k-i-arrow]:not(.k-sprite)").remove();

	        item.filter(":has(.k-menu-group)")
	            .children(".k-link:not(:has([class*=k-i-arrow]:not(.k-sprite)))")
	            .each(function () {
	                var item = $(this),
	                    arrowCssClass = getArrowCssClass(item);

	                item.append("<span class='k-icon " + arrowCssClass + "'/>");
	            });
	    }

	    function getArrowCssClass (item) {
	        var arrowCssClass,
	            parent = item.parent().parent(),
	            isRtl = kendo.support.isRtl(parent);

	        if (parent.hasClass(MENU + "-horizontal")) {
	            arrowCssClass = " k-i-arrow-60-down";
	        } else {
	            if (isRtl) {
	                arrowCssClass = " k-i-arrow-60-left";
	            }
	            else {
	                arrowCssClass = " k-i-arrow-60-right";
	            }
	        }
	        return arrowCssClass;
	    }

	    function updateFirstLast (item) {
	        item = $(item);

	        item.filter(".k-first:not(:first-child)").removeClass(FIRST);
	        item.filter(".k-last:not(:last-child)").removeClass(LAST);
	        item.filter(":first-child").addClass(FIRST);
	        item.filter(":last-child").addClass(LAST);
	    }

	    function storeItemSelectEventHandler (element, options) {
	        var selectHandler = getItemSelectEventHandler(options);
	        if(selectHandler) {
	            setItemData(element, selectHandler);
	        }

	        if (options.items) {
	            $(element).children("ul").children("li").each(function(i){
	                storeItemSelectEventHandler(this, options.items[i]);
	            });
	        }
	    }

	    function setItemData (element, selectHandler) {
	        $(element).children(".k-link").data({
	            selectHandler : selectHandler
	        });
	    }

	    function getItemSelectEventHandler (options) {
	        var selectHandler = options.select,
	            isFunction = kendo.isFunction;

	        if (selectHandler && isFunction(selectHandler)) {
	            return selectHandler;
	        }
	        return null;
	    }              

	    var Menu = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            element = that.wrapper = that.element;
	            options = that.options;

	            that._initData(options);

	            that._updateClasses();

	            that._animations(options);

	            that.nextItemZIndex = 100;

	            that._tabindex();

	            that._focusProxy = proxy(that._focusHandler, that);

	            element.on(POINTERDOWN, itemSelector, that._focusProxy)
	                   .on(CLICK + NS, disabledSelector, false)
	                   .on(CLICK + NS, itemSelector, proxy(that._click , that))
	                   .on("keydown" + NS, proxy(that._keydown, that))
	                   .on("focus" + NS, proxy(that._focus, that))
	                   .on("focus" + NS, ".k-content", proxy(that._focus, that))
	                   .on(POINTERDOWN + " " + MOUSEDOWN + NS, ".k-content", proxy(that._preventClose, that))
	                   .on("blur" + NS, proxy(that._removeHoverItem, that))
	                   .on("blur" + NS, "[tabindex]", proxy(that._checkActiveElement, that))
	                   .on(MOUSEENTER + NS, itemSelector, proxy(that._mouseenter, that))
	                   .on(MOUSELEAVE + NS, itemSelector, proxy(that._mouseleave, that))
	                   .on(MOUSEENTER + NS + " " + MOUSELEAVE + NS + " " +
	                       MOUSEDOWN + NS + " " + CLICK + NS, linkSelector, proxy(that._toggleHover, that));

	            if (options.openOnClick) {
	                that.clicked = false;
	                that._documentClickHandler = proxy(that._documentClick, that);
	                $(document).click(that._documentClickHandler);
	            }

	            element.attr("role", "menubar");

	            if (element[0].id) {
	                that._ariaId = kendo.format("{0}_mn_active", element[0].id);
	            }

	            kendo.notify(that);
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            ACTIVATE,
	            DEACTIVATE,
	            SELECT
	        ],

	        options: {
	            name: "Menu",
	            animation: {
	                open: {
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100
	                }
	            },
	            orientation: "horizontal",
	            direction: "default",
	            openOnClick: false,
	            closeOnClick: true,
	            hoverDelay: 100,
	            popupCollision: undefined
	        },

	        _initData: function(options) {
	            var that = this;

	            if (options.dataSource) {
	                that.angular("cleanup", function(){
	                    return {
	                        elements: that.element.children()
	                    };
	                });
	                that.element.empty();
	                that.append(options.dataSource, that.element);
	                that.angular("compile", function(){
	                    return {
	                        elements: that.element.children()
	                    };
	                });
	            }
	        },

	        setOptions: function(options) {
	            var animation = this.options.animation;

	            this._animations(options);

	            options.animation = extend(true, animation, options.animation);

	            if ("dataSource" in options) {
	                this._initData(options);
	            }

	            this._updateClasses();

	            Widget.fn.setOptions.call(this, options);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.element.off(NS);

	            if (that._documentClickHandler) {
	                $(document).unbind("click", that._documentClickHandler);
	            }

	            kendo.destroy(that.element);
	        },

	        enable: function (element, enable) {
	            this._toggleDisabled(element, enable !== false);

	            return this;
	        },

	        disable: function (element) {
	            this._toggleDisabled(element, false);

	            return this;
	        },

	        append: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find("> .k-menu-group, > .k-animation-container > .k-menu-group") : null);

	            each(inserted.items, function (i) {               
	                inserted.group.append(this);
	                updateArrow(this);
	                storeItemSelectEventHandler(this, item[i] || item);
	            });

	            updateArrow(referenceItem);
	            updateFirstLast(inserted.group.find(".k-first, .k-last").add(inserted.items));

	            return this;
	        },     

	        insertBefore: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.parent());

	            each(inserted.items, function (i) {
	                referenceItem.before(this);
	                updateArrow(this);
	                updateFirstLast(this);
	                storeItemSelectEventHandler(this, item[i] || item);
	            });

	            updateFirstLast(referenceItem);

	            return this;
	        },

	        insertAfter: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.parent());

	            each(inserted.items, function (i) {
	                referenceItem.after(this);
	                updateArrow(this);
	                updateFirstLast(this);
	                storeItemSelectEventHandler(this, item[i] || item);
	            });

	            updateFirstLast(referenceItem);

	            return this;
	        },

	        _insert: function (item, referenceItem, parent) {
	            var that = this,
	                items, groups;

	            if (!referenceItem || !referenceItem.length) {
	                parent = that.element;
	            }

	            var plain = $.isPlainObject(item),
	                groupData = {
	                    firstLevel: parent.hasClass(MENU),
	                    horizontal: parent.hasClass(MENU + "-horizontal"),
	                    expanded: true,
	                    length: parent.children().length
	                };

	            if (referenceItem && !parent.length) {
	                parent = $(Menu.renderGroup({ group: groupData })).appendTo(referenceItem);
	            }

	            if (plain || $.isArray(item)) { // is JSON
	                items = $($.map(plain ? [ item ] : item, function (value, idx) {
	                            if (typeof value === "string") {
	                                return $(value).get();
	                            } else {
	                                return $(Menu.renderItem({
	                                    group: groupData,
	                                    item: extend(value, { index: idx })
	                                })).get();
	                            }
	                        }));
	            } else {
	                if (typeof item == "string" && item.charAt(0) != "<") {
	                    items = that.element.find(item);
	                } else {
	                    items = $(item);
	                }

	                groups = items.find("> ul")
	                                .addClass("k-menu-group")
	                                .attr("role", "menu");

	                items = items.filter("li");

	                items.add(groups.find("> li")).each(function () {
	                    updateItemClasses(this);
	                });
	            }

	            return { items: items, group: parent };
	        },

	        remove: function (element) {
	            element = this.element.find(element);

	            var that = this,
	                parent = element.parentsUntil(that.element, allItemsSelector),
	                group = element.parent("ul:not(.k-menu)");

	            element.remove();

	            if (group && !group.children(allItemsSelector).length) {
	                var container = group.parent(".k-animation-container");
	                if (container.length) {
	                    container.remove();
	                } else {
	                    group.remove();
	                }
	            }

	            if (parent.length) {
	                parent = parent.eq(0);

	                updateArrow(parent);
	                updateFirstLast(parent);
	            }

	            return that;
	        },

	        open: function (element) {
	            var that = this,
	                options = that.options,
	                horizontal = options.orientation == "horizontal",
	                direction = options.direction,
	                isRtl = kendo.support.isRtl(that.wrapper);
	            element = that.element.find(element);

	            if (/^(top|bottom|default)$/.test(direction)) {
	                if (isRtl) {
	                    direction = horizontal ? (direction + " left").replace("default", "bottom") : "left";
	                } else {
	                    direction = horizontal ? (direction + " right").replace("default", "bottom") : "right";
	                }
	            }

	            element.siblings()
	                   .find(">.k-popup:visible,>.k-animation-container>.k-popup:visible")
	                   .each(function () {
	                       var popup = $(this).data("kendoPopup");

	                       if (popup) {
	                           popup.close(true);
	                       }
	                   });

	            element.each(function () {
	                var li = $(this);

	                clearTimeout(li.data(TIMER));

	                li.data(TIMER, setTimeout(function () {
	                    var ul = li.find(".k-menu-group:first:hidden"),
	                        popup;

	                    if (ul[0] && that._triggerEvent({ item: li[0], type: OPEN }) === false) {

	                        if (!ul.find(".k-menu-group")[0] && ul.children(".k-item").length > 1) {
	                            var windowHeight = $(window).height(),
	                                setScrolling = function(){
	                                    ul.css({maxHeight: windowHeight - (kendo._outerHeight(ul) - ul.height()) - kendo.getShadows(ul).bottom, overflow: "auto"});
	                                };

	                            if (kendo.support.browser.msie && kendo.support.browser.version <= 7) {
	                                setTimeout(setScrolling, 0); // timeout required by IE7
	                            } else {
	                                setScrolling();
	                            }
	                        } else {
	                            ul.css({maxHeight: "", overflow: ""});
	                        }

	                        li.data(ZINDEX, li.css(ZINDEX));
	                        li.css(ZINDEX, that.nextItemZIndex ++);

	                        popup = ul.data(KENDOPOPUP);
	                        var root = li.parent().hasClass(MENU),
	                            parentHorizontal = root && horizontal,
	                            directions = parseDirection(direction, root, isRtl),
	                            effects = options.animation.open.effects,
	                            openEffects = effects !== undefined ? effects : "slideIn:" + getEffectDirection(direction, root);

	                        if (!popup) {
	                            popup = ul.kendoPopup({
	                                activate: function() { that._triggerEvent({ item: this.wrapper.parent(), type: ACTIVATE }); },
	                                deactivate: function(e) {
	                                    e.sender.element // Restore opacity after fade.
	                                        .removeData("targetTransform")
	                                        .css({ opacity: "" });
	                                    that._triggerEvent({ item: this.wrapper.parent(), type: DEACTIVATE });
	                                },
	                                origin: directions.origin,
	                                position: directions.position,
	                                collision: options.popupCollision !== undefined ? options.popupCollision : (parentHorizontal ? "fit" : "fit flip"),
	                                anchor: li,
	                                appendTo: li,
	                                animation: {
	                                    open: extend(true, { effects: openEffects }, options.animation.open),
	                                    close: options.animation.close
	                                },
	                                close: function (e) {
	                                    var li = e.sender.wrapper.parent();

	                                    if (!that._triggerEvent({ item: li[0], type: CLOSE })) {
	                                        li.css(ZINDEX, li.data(ZINDEX));
	                                        li.removeData(ZINDEX);

	                                        if (touch) {
	                                            li.removeClass(HOVERSTATE);
	                                            that._removeHoverItem();
	                                        }
	                                    } else {
	                                        e.preventDefault();
	                                    }
	                                }
	                            }).data(KENDOPOPUP);
	                        } else {
	                            popup = ul.data(KENDOPOPUP);
	                            popup.options.origin = directions.origin;
	                            popup.options.position = directions.position;
	                            popup.options.animation.open.effects = openEffects;
	                        }
	                        ul.removeAttr("aria-hidden");
	                        popup.open();
	                    }

	                }, that.options.hoverDelay));
	            });

	            return that;
	        },

	        close: function (items, dontClearClose) {
	            var that = this,
	                element = that.element;

	            items = element.find(items);

	            if (!items.length) {
	                items = element.find(">.k-item");
	            }

	            items.each(function () {
	                var li = $(this);

	                if (!dontClearClose && that._isRootItem(li)) {
	                    that.clicked = false;
	                }

	                clearTimeout(li.data(TIMER));

	                li.data(TIMER, setTimeout(function () {
	                    var popup = li.find(".k-menu-group:not(.k-list-container):not(.k-calendar-container):first:visible").data(KENDOPOPUP);

	                    if (popup) {
	                        popup.close();
	                        popup.element.attr("aria-hidden", true);
	                    }
	                }, that.options.hoverDelay));
	            });

	            return that;
	        },

	        _toggleDisabled: function (items, enable) {
	            this.element.find(items).each(function () {
	                $(this)
	                    .toggleClass(DEFAULTSTATE, enable)
	                    .toggleClass(DISABLEDSTATE, !enable)
	                    .attr("aria-disabled", !enable);
	            });
	        },

	        _toggleHover: function(e) {
	            var target = $(kendo.eventTarget(e) || e.target).closest(allItemsSelector),
	                isEnter = e.type == MOUSEENTER || MOUSEDOWN.indexOf(e.type) !== -1;

	            if (!target.parents("li." + DISABLEDSTATE).length) {
	                target.toggleClass(HOVERSTATE, isEnter || e.type == "mousedown" || e.type == "click");
	            }

	            this._removeHoverItem();
	        },

	        _preventClose: function() {
	            if (!this.options.closeOnClick) {
	                this._closurePrevented = true;
	            }
	        },

	        _checkActiveElement: function(e) {
	            var that = this,
	                hoverItem = $(e ? e.currentTarget : this._hoverItem()),
	                target = that._findRootParent(hoverItem)[0];

	            if (!this._closurePrevented) {
	                setTimeout(function() {
	                    if (!document.hasFocus() || (!contains(target, kendo._activeElement()) && e && !contains(target, e.currentTarget))) {
	                        that.close(target);
	                    }
	                }, 0);
	            }

	            this._closurePrevented = false;
	        },

	        _removeHoverItem: function() {
	            var oldHoverItem = this._hoverItem();

	            if (oldHoverItem && oldHoverItem.hasClass(FOCUSEDSTATE)) {
	                oldHoverItem.removeClass(FOCUSEDSTATE);
	                this._oldHoverItem = null;
	            }
	        },

	        _updateClasses: function() {
	            var element = this.element,
	                nonContentGroupsSelector = ".k-menu-init div ul",
	                items;

	            element.removeClass("k-menu-horizontal k-menu-vertical");
	            element.addClass("k-widget k-reset k-header k-menu-init " + MENU).addClass(MENU + "-" + this.options.orientation);

	            element.find("li > ul")
	                   .filter(function() {
	                       return !kendo.support.matchesSelector.call(this, nonContentGroupsSelector);
	                   })
	                   .addClass("k-group k-menu-group")
	                   .attr("role", "menu")
	                   .attr("aria-hidden", element.is(":visible"))
	                   .end()
	                   .find("li > div")
	                   .addClass("k-content")
	                   .attr("tabindex", "-1"); // Capture the focus before the Menu

	            items = element.find("> li,.k-menu-group > li");

	            element.removeClass("k-menu-init");

	            items.each(function () {
	                updateItemClasses(this);             
	            });
	        },

	        _mouseenter: function (e) {
	            var that = this,
	                element = $(e.currentTarget),
	                hasChildren = (element.children(".k-animation-container").length || element.children(groupSelector).length);

	            if (e.delegateTarget != element.parents(menuSelector)[0]) {
	                return;
	            }

	            if ((!that.options.openOnClick || that.clicked) && !touch && !((pointers || msPointers) &&
	                e.originalEvent.pointerType in touchPointerTypes && that._isRootItem(element.closest(allItemsSelector)))) {
	                if (!contains(e.currentTarget, e.relatedTarget) && hasChildren) {
	                    that.open(element);
	                }
	            }

	            if (that.options.openOnClick && that.clicked || mobile) {
	                element.siblings().each(proxy(function (_, sibling) {
	                    that.close(sibling, true);
	                }, that));
	            }
	        },

	        _mouseleave: function (e) {
	            var that = this,
	                element = $(e.currentTarget),
	                hasChildren = (element.children(".k-animation-container").length || element.children(groupSelector).length);

	            if (element.parentsUntil(".k-animation-container", ".k-list-container,.k-calendar-container")[0]) {
	                e.stopImmediatePropagation();
	                return;
	            }

	            if (!that.options.openOnClick && !touch && !((pointers || msPointers) &&
	                e.originalEvent.pointerType in touchPointerTypes) &&
	                !contains(e.currentTarget, e.relatedTarget || e.target) && hasChildren &&
	                !contains(e.currentTarget, kendo._activeElement())) {
	                    that.close(element);
	            }
	        },

	        _click: function (e) {
	            var that = this, openHandle,
	                options = that.options,
	                target = $(kendo.eventTarget(e)),
	                targetElement = target[0],
	                nodeName = target[0] ? target[0].nodeName.toUpperCase() : "",
	                formNode = (nodeName == "INPUT" || nodeName == "SELECT" || nodeName == "BUTTON" || nodeName == "LABEL"),
	                link = target.closest("." + LINK),
	                element = target.closest(allItemsSelector),
	                itemElement = element[0],
	                href = link.attr("href"), childGroup, childGroupVisible,
	                targetHref = target.attr("href"),
	                sampleHref = $("<a href='#' />").attr("href"),
	                isLink = (!!href && href !== sampleHref),
	                isLocalLink = isLink && !!href.match(/^#/),
	                isTargetLink = (!!targetHref && targetHref !== sampleHref),
	                shouldCloseTheRootItem = (options.openOnClick && childGroupVisible && that._isRootItem(element));

	            while (targetElement && targetElement.parentNode != itemElement) {
	                targetElement = targetElement.parentNode;
	            }

	            if ($(targetElement).is(templateSelector)) {
	                return;
	            }

	            if (element.hasClass(DISABLEDSTATE)) {
	                e.preventDefault();
	                return;
	            }

	            if (!e.handled && that._triggerSelect(target, itemElement) && !formNode) { // We shouldn't stop propagation and shoudn't prevent form elements.
	                e.preventDefault();
	            }

	            e.handled = true;

	            childGroup = element.children(popupSelector);
	            childGroupVisible = childGroup.is(":visible");

	            if (options.closeOnClick && (!isLink || isLocalLink) && (!childGroup.length || shouldCloseTheRootItem)) {
	                element.removeClass(HOVERSTATE).css("height"); // Force refresh for Chrome
	                that._oldHoverItem = that._findRootParent(element);
	                that.close(link.parentsUntil(that.element, allItemsSelector));
	                that.clicked = false;
	                if ("MSPointerUp".indexOf(e.type) != -1) {
	                    e.preventDefault();
	                }
	                return;
	            }

	            if (isLink && e.enterKey) {
	                link[0].click();
	            }

	            if ((!that._isRootItem(element) || !options.openOnClick) && !kendo.support.touch && !((pointers || msPointers) && that._isRootItem(element.closest(allItemsSelector)))) {
	                return;
	            }

	            if (!isLink && !formNode && !isTargetLink) {
	                e.preventDefault();
	            }

	            that.clicked = true;
	            openHandle = childGroup.is(":visible") ? CLOSE : OPEN;
	            if (!options.closeOnClick && openHandle == CLOSE) {
	                return;
	            }
	            that[openHandle](element);
	        },

	        _triggerSelect: function (target, itemElement) {
	            var selectHandler = target.data("selectHandler"),
	                itemSelectEventData;

	            if (selectHandler) {
	                itemSelectEventData = this._getEventData(target);
	                selectHandler.call(this, itemSelectEventData);
	            }

	            var isSelectItemDefaultPrevented = itemSelectEventData && itemSelectEventData.isDefaultPrevented();
	            var isSelectDefaultPrevented = this._triggerEvent({ item: itemElement, type: SELECT });
	            return isSelectItemDefaultPrevented || isSelectDefaultPrevented;          
	        },

	        _getEventData: function (target) {
	            var eventData = { 
	                sender: this, 
	                target: target,
	                _defaultPrevented: false,
	                preventDefault: function () {
	                    this._defaultPrevented = true;
	                },
	                isDefaultPrevented: function () {
	                    return this._defaultPrevented;
	                }
	            };
	            return eventData;
	        },

	        _documentClick: function (e) {
	            if (contains(this.element[0], e.target)) {
	                return;
	            }

	            this.clicked = false;
	        },

	        _focus: function (e) {
	            var that = this,
	                target = e.target,
	                hoverItem = that._hoverItem(),
	                active = activeElement();

	            if (target != that.wrapper[0] && !$(target).is(":kendoFocusable")) {
	                e.stopPropagation();
	                $(target).closest(".k-content").closest(".k-menu-group").closest(".k-item").addClass(FOCUSEDSTATE);
	                that.wrapper.focus();
	                return;
	            }

	            if (active === e.currentTarget) {
	                if (hoverItem.length) {
	                    that._moveHover([], hoverItem);
	                } else if (!that._oldHoverItem) {
	                    that._moveHover([], that.wrapper.children().first());
	                }
	            }
	        },

	        _keydown: function (e) {
	            var that = this,
	                key = e.keyCode,
	                hoverItem = that._oldHoverItem,
	                target,
	                belongsToVertical,
	                hasChildren,
	                isRtl = kendo.support.isRtl(that.wrapper);

	            if (e.target != e.currentTarget && key != keys.ESC) {
	                return;
	            }

	            if (!hoverItem) {
	                hoverItem  = that._oldHoverItem = that._hoverItem();
	            }

	            belongsToVertical = that._itemBelongsToVertival(hoverItem);
	            hasChildren = that._itemHasChildren(hoverItem);

	            if (key == keys.RIGHT) {
	                target = that[isRtl ? "_itemLeft" : "_itemRight"](hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.LEFT) {
	                target = that[isRtl ? "_itemRight" : "_itemLeft"](hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.DOWN) {
	                target = that._itemDown(hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.UP) {
	                target = that._itemUp(hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.ESC) {
	                target = that._itemEsc(hoverItem, belongsToVertical);
	            } else if (key == keys.ENTER || key == keys.SPACEBAR) {
	                target = hoverItem.children(".k-link");
	                if (target.length > 0) {
	                    that._click({ target: target[0], preventDefault: function () {}, enterKey: true });
	                    that._moveHover(hoverItem, that._findRootParent(hoverItem));
	                }
	            } else if (key == keys.TAB) {
	                target = that._findRootParent(hoverItem);
	                that._moveHover(hoverItem, target);
	                that._checkActiveElement();
	                return;
	            }

	            if (target && target[0]) {
	                e.preventDefault();
	                e.stopPropagation(); // needed to handle ESC in column menu only when a root item is focused
	            }
	        },

	        _hoverItem: function() {
	            return this.wrapper.find(".k-item.k-state-hover,.k-item.k-state-focused").filter(":visible");
	        },

	        _itemBelongsToVertival: function (item) {
	            var menuIsVertical = this.wrapper.hasClass("k-menu-vertical");

	            if (!item.length) {
	                return menuIsVertical;
	            }
	            return item.parent().hasClass("k-menu-group") || menuIsVertical;
	        },

	        _itemHasChildren: function (item) {
	            if (!item.length) {
	                return false;
	            }
	            return item.children("ul.k-menu-group, div.k-animation-container").length > 0;
	        },

	        _moveHover: function (item, nextItem) {
	            var that = this,
	                id = that._ariaId;

	            if (item.length && nextItem.length) {
	                item.removeClass(FOCUSEDSTATE);
	            }

	            if (nextItem.length) {
	                if (nextItem[0].id) {
	                    id = nextItem[0].id;
	                }

	                nextItem.addClass(FOCUSEDSTATE);
	                that._oldHoverItem = nextItem;

	                if (id) {
	                    that.element.removeAttr("aria-activedescendant");
	                    $("#" + id).removeAttr("id");
	                    nextItem.attr("id", id);
	                    that.element.attr("aria-activedescendant", id);
	                }
	            }
	        },

	        _findRootParent: function (item) {
	            if (this._isRootItem(item)) {
	                return item;
	            } else {
	                return item.parentsUntil(menuSelector, "li.k-item").last();
	            }
	        },

	        _isRootItem: function (item) {
	            return item.parent().hasClass(MENU);
	        },

	        _itemRight: function (item, belongsToVertical, hasChildren) {
	            var that = this,
	                nextItem,
	                parentItem;

	            if (item.hasClass(DISABLEDSTATE)) {
	                return;
	            }

	            if (!belongsToVertical) {
	                nextItem = item.nextAll(nextSelector);
	                if (!nextItem.length) {
	                    nextItem = item.prevAll(lastSelector);
	                }
	            } else if (hasChildren) {
	                that.open(item);
	                nextItem = item.find(".k-menu-group").children().first();
	            } else if (that.options.orientation == "horizontal") {
	                parentItem = that._findRootParent(item);
	                that.close(parentItem);
	                nextItem = parentItem.nextAll(nextSelector);
	            }

	            if (nextItem && !nextItem.length) {
	                nextItem = that.wrapper.children(".k-item").first();
	            } else if (!nextItem) {
	                nextItem = [];
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemLeft: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                nextItem = item.prevAll(nextSelector);
	                if (!nextItem.length) {
	                    nextItem = item.nextAll(lastSelector);
	                }
	            } else {
	                nextItem = item.parent().closest(".k-item");
	                that.close(nextItem);
	                if (that._isRootItem(nextItem) && that.options.orientation == "horizontal") {
	                    nextItem = nextItem.prevAll(nextSelector);
	                }
	            }

	            if (!nextItem.length) {
	                nextItem = that.wrapper.children(".k-item").last();
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemDown: function (item, belongsToVertical, hasChildren) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                if (!hasChildren || item.hasClass(DISABLEDSTATE)) {
	                    return;
	                } else {
	                    that.open(item);
	                    nextItem = item.find(".k-menu-group").children().first();
	                }
	            } else {
	                nextItem = item.nextAll(nextSelector);
	            }

	            if (!nextItem.length && item.length) {
	                nextItem = item.parent().children().first();
	            } else if (!item.length) {
	                nextItem = that.wrapper.children(".k-item").first();
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemUp: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                return;
	            } else {
	                nextItem = item.prevAll(nextSelector);
	            }

	            if (!nextItem.length && item.length) {
	                nextItem = item.parent().children().last();
	            } else if (!item.length) {
	                nextItem = that.wrapper.children(".k-item").last();
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemEsc: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                return item;
	            } else {
	                nextItem = item.parent().closest(".k-item");
	                that.close(nextItem);
	                that._moveHover(item, nextItem);
	            }

	            return nextItem;
	        },

	        _triggerEvent: function(e) {
	            var that = this;

	            return that.trigger(e.type, { type: e.type, item: e.item });
	        },

	        _focusHandler: function (e) {
	            var that = this,
	                item = $(kendo.eventTarget(e)).closest(allItemsSelector);

	            if (item.hasClass(DISABLEDSTATE)) {
	                return;
	            }

	            setTimeout(function () {
	                that._moveHover([], item);
	                if (item.children(".k-content")[0]) {
	                    item.parent().closest(".k-item").removeClass(FOCUSEDSTATE);
	                }
	            }, 200);
	        },

	        _animations: function(options) {
	            if (options && ("animation" in options) && !options.animation) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }
	        }

	    });

	    // client-side rendering
	    extend(Menu, {
	        renderItem: function (options) {
	            options = extend({ menu: {}, group: {} }, options);

	            var empty = templates.empty,
	                item = options.item;

	            return templates.item(extend(options, {
	                image: item.imageUrl ? templates.image : empty,
	                sprite: item.spriteCssClass ? templates.sprite : empty,
	                itemWrapper: templates.itemWrapper,
	                renderContent: Menu.renderContent,
	                arrow: item.items || item.content ? templates.arrow : empty,
	                subGroup: Menu.renderGroup
	            }, rendering));
	        },

	        renderGroup: function (options) {
	            return templates.group(extend({
	                renderItems: function(options) {
	                    var html = "",
	                        i = 0,
	                        items = options.items,
	                        len = items ? items.length : 0,
	                        group = extend({ length: len }, options.group);

	                    for (; i < len; i++) {
	                        html += Menu.renderItem(extend(options, {
	                            group: group,
	                            item: extend({ index: i }, items[i])
	                        }));
	                    }

	                    return html;
	                }
	            }, options, rendering));
	        },

	        renderContent: function (options) {
	            return templates.content(extend(options, rendering));
	        }
	    });

	    var ContextMenu = Menu.extend({
	        init: function(element, options) {
	            var that = this;

	            Menu.fn.init.call(that, element, options);

	            that._marker = kendo.guid().substring(0, 8);

	            that.target = $(that.options.target);

	            that._popup();
	            that._wire();
	        },
	        options: {
	            name: "ContextMenu",
	            filter: null,
	            showOn: "contextmenu",
	            orientation: "vertical",
	            alignToAnchor: false,
	            target: "body"
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            ACTIVATE,
	            DEACTIVATE,
	            SELECT
	        ],

	        setOptions: function(options) {
	            var that = this;

	            Menu.fn.setOptions.call(that, options);

	            that.target.off(that.showOn + NS + that._marker, that._showProxy);

	            if (that.userEvents) {
	                that.userEvents.destroy();
	            }

	            that.target = $(that.options.target);
	            if (options.orientation && that.popup.wrapper[0]) {
	                that.popup.element.unwrap();
	            }

	            that._wire();

	            Menu.fn.setOptions.call(this, options);
	        },

	        destroy: function() {
	            var that = this;

	            that.target.off(that.options.showOn + NS + that._marker);
	            DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS + that._marker, that._closeProxy);

	            if (that.userEvents) {
	                that.userEvents.destroy();
	            }

	            Menu.fn.destroy.call(that);
	        },

	        open: function(x, y) {
	            var that = this;

	            x = $(x)[0];

	            if (contains(that.element[0], $(x)[0])) { // call parent open for children elements
	                Menu.fn.open.call(that, x);
	            } else {
	                if (that._triggerEvent({ item: that.element, type: OPEN }) === false) {
	                    if (that.popup.visible() && that.options.filter) {
	                        that.popup.close(true);
	                        that.popup.element.kendoStop(true);
	                    }

	                    if (y !== undefined) {
	                        that.popup.wrapper.hide();
	                        that.popup.open(x, y);
	                    } else {
	                        that.popup.options.anchor = (x ? x : that.popup.anchor) || that.target;
	                        that.popup.element.kendoStop(true);
	                        that.popup.open();
	                    }

	                    DOCUMENT_ELEMENT.off(that.popup.downEvent, that.popup._mousedownProxy);
	                    DOCUMENT_ELEMENT
	                        .on(kendo.support.mousedown + NS + that._marker, that._closeProxy);
	                }
	            }

	            return that;
	        },

	        close: function() {
	            var that = this;

	            if (contains(that.element[0], $(arguments[0])[0])) {
	                Menu.fn.close.call(that, arguments[0]);
	            } else {
	                if (that.popup.visible()) {
	                    if (that._triggerEvent({ item: that.element, type: CLOSE }) === false) {
	                        that.popup.close();
	                        DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS, that._closeProxy);
	                        that.unbind(SELECT, that._closeTimeoutProxy);
	                    }
	                }
	            }
	        },

	        _showHandler: function (e) {
	            var ev = e, offset,
	                that = this,
	                options = that.options;

	            if (e.event) {
	                ev = e.event;
	                ev.pageX = e.x.location;
	                ev.pageY = e.y.location;
	            }

	            if (contains(that.element[0], e.relatedTarget || e.target)) {
	                return;
	            }

	            that._eventOrigin = ev;

	            ev.preventDefault();
	            ev.stopImmediatePropagation();

	            that.element.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);

	            if ((options.filter && kendo.support.matchesSelector.call(ev.currentTarget, options.filter)) || !options.filter) {
	                if (options.alignToAnchor) {
	                    that.popup.options.anchor = ev.currentTarget;
	                    that.open(ev.currentTarget);
	                } else {
	                    that.popup.options.anchor = ev.currentTarget;

	                    if (that._targetChild) {
	                        offset = that.target.offset();
	                        that.open(ev.pageX - offset.left, ev.pageY - offset.top);
	                    } else {
	                        that.open(ev.pageX, ev.pageY);
	                    }
	                }
	            }
	        },

	        _closeHandler: function (e) {
	            var that = this,
	                target = $(e.relatedTarget || e.target),
					sameTarget = target.closest(that.target.selector)[0] == that.target[0],
	                children = target.closest(itemSelector).children(popupSelector),
	                containment = contains(that.element[0], target[0]);

	            that._eventOrigin = e;

	            var normalClick = e.which !== 3;

	            if (that.popup.visible() && ((normalClick && sameTarget) || !sameTarget) && ((that.options.closeOnClick && !children[0] && containment) || !containment)) {
	                    if (containment) {
	                        this.unbind(SELECT, this._closeTimeoutProxy);
	                        that.bind(SELECT, that._closeTimeoutProxy);
	                    } else {
	                        that.close();
	                    }
	            }
	        },

	        _wire: function() {
	            var that = this,
	                options = that.options,
	                target = that.target;

	            that._showProxy = proxy(that._showHandler, that);
	            that._closeProxy = proxy(that._closeHandler, that);
	            that._closeTimeoutProxy = proxy(that.close, that);

	            if (target[0]) {
	                if (kendo.support.mobileOS && options.showOn == "contextmenu") {
	                    that.userEvents = new kendo.UserEvents(target, {
	                        filter: options.filter,
	                        allowSelection: false
	                    });

	                    target.on(options.showOn + NS + that._marker, false);
	                    that.userEvents.bind("hold", that._showProxy);
	                } else {
	                    if (options.filter) {
	                        target.on(options.showOn + NS + that._marker, options.filter, that._showProxy);
	                    } else {
	                        target.on(options.showOn + NS + that._marker, that._showProxy);
	                    }
	                }
	            }
	        },

	        _triggerEvent: function(e) {
	            var that = this,
	                anchor = $(that.popup.options.anchor)[0],
	                origin = that._eventOrigin;

	            that._eventOrigin = undefined;

	            return that.trigger(e.type, extend({ type: e.type, item: e.item || this.element[0], target: anchor }, origin ? { event: origin } : {} ));
	        },

	        _popup: function() {
	            var that = this;

	            that._triggerProxy = proxy(that._triggerEvent, that);

	            that.popup = that.element
	                            .addClass("k-context-menu")
	                            .kendoPopup({
	                                anchor: that.target || "body",
	                                copyAnchorStyles: that.options.copyAnchorStyles,
	                                collision: that.options.popupCollision || "fit",
	                                animation: that.options.animation,
	                                activate: that._triggerProxy,
	                                deactivate: that._triggerProxy,
	                                appendTo: that.options.appendTo
	                            }).data("kendoPopup");

	            that._targetChild = contains(that.target[0], that.popup.element[0]);
	        }
	    });

	    ui.plugin(Menu);
	    ui.plugin(ContextMenu);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 125 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.loader.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(787);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 787:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.loader",
	    name: "Loader",
	    category: "mobile",
	    description: "Mobile Loader",
	    depends: [ "core" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Widget = ui.Widget,
	        CAPTURE_EVENTS = $.map(kendo.eventMap, function(value) { return value; }).join(" ").split(" ");

	    var Loader = Widget.extend({
	        init: function(container, options) {
	            var that = this,
	                element = $('<div class="km-loader"><span class="km-loading km-spin"></span><span class="km-loading-left"></span><span class="km-loading-right"></span></div>');

	            Widget.fn.init.call(that, element, options);

	            that.container = container;
	            that.captureEvents = false;

	            that._attachCapture();

	            element.append(that.options.loading).hide().appendTo(container);
	        },

	        options: {
	            name: "Loader",
	            loading: "<h1>Loading...</h1>",
	            timeout: 100
	        },

	        show: function() {
	            var that = this;

	            clearTimeout(that._loading);

	            if (that.options.loading === false) {
	                return;
	            }

	            that.captureEvents = true;
	            that._loading = setTimeout(function() {
	                that.element.show();
	            }, that.options.timeout);
	        },

	        hide: function() {
	            this.captureEvents = false;
	            clearTimeout(this._loading);
	            this.element.hide();
	        },

	        changeMessage: function(message) {
	            this.options.loading = message;
	            this.element.find(">h1").html(message);
	        },

	        transition: function() {
	            this.captureEvents = true;
	            this.container.css("pointer-events", "none");
	        },

	        transitionDone: function() {
	            this.captureEvents = false;
	            this.container.css("pointer-events", "");
	        },

	        _attachCapture: function() {
	            var that = this;
	            that.captureEvents = false;

	            function capture(e) {
	                if (that.captureEvents) {
	                    e.preventDefault();
	                }
	            }

	            for (var i = 0; i < CAPTURE_EVENTS.length; i ++) {
	                that.container[0].addEventListener(CAPTURE_EVENTS[i], capture, true);
	            }
	        }
	    });

	    ui.plugin(Loader);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 126 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.popover.js ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(791);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 751:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.pane */ 31);

/***/ },

/***/ 791:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(596), __webpack_require__(751) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.popover",
	    name: "PopOver",
	    category: "mobile",
	    description: "The mobile PopOver widget represents a transient view which is displayed when the user taps on a navigational widget or area on the screen. ",
	    depends: [ "popup", "mobile.pane" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        HIDE = "hide",
	        OPEN = "open",
	        CLOSE = "close",
	        WRAPPER = '<div class="km-popup-wrapper" />',
	        ARROW = '<div class="km-popup-arrow" />',
	        OVERLAY = '<div class="km-popup-overlay" />',
	        DIRECTION_CLASSES = "km-up km-down km-left km-right",
	        Widget = ui.Widget,
	        DIRECTIONS = {
	            "down": {
	                origin: "bottom center",
	                position: "top center"
	            },
	            "up": {
	                origin: "top center",
	                position: "bottom center"
	            },
	            "left": {
	                origin: "center left",
	                position: "center right",
	                collision: "fit flip"
	            },
	            "right": {
	                origin: "center right",
	                position: "center left",
	                collision: "fit flip"
	            }
	        },

	        ANIMATION = {
	            animation: {
	                open: {
	                    effects: "fade:in",
	                    duration: 0
	                },
	                close: {
	                    effects: "fade:out",
	                    duration: 400
	                }
	            }
	        },
	        DIMENSIONS = {
	            "horizontal": { offset: "top", size: "height" },
	            "vertical": { offset: "left", size: "width" }
	        },

	        REVERSE = {
	            "up": "down",
	            "down": "up",
	            "left": "right",
	            "right": "left"
	        };

	    var Popup = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                containerPopup = element.closest(".km-modalview-wrapper"),
	                viewport = element.closest(".km-root").children('.km-pane').first(),
	                container = containerPopup[0] ? containerPopup : viewport,
	                popupOptions,
	                axis;

	            if (options.viewport) {
	                viewport = options.viewport;
	            } else if (!viewport[0]) {
	                viewport = window;
	            }

	            if (options.container) {
	                container = options.container;
	            } else if (!container[0]) {
	                container = document.body;
	            }

	            popupOptions = {
	                viewport: viewport,
	                copyAnchorStyles: false,
	                autosize: true,
	                open: function() {
	                    that.overlay.show();
	                },

	                activate: $.proxy(that._activate, that),

	                deactivate: function() {
	                    that.overlay.hide();
	                    if (!that._apiCall) {
	                        that.trigger(HIDE);
	                    }

	                    that._apiCall = false;
	                }
	            };

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            element.wrap(WRAPPER).addClass("km-popup").show();

	            axis = that.options.direction.match(/left|right/) ? "horizontal" : "vertical";

	            that.dimensions = DIMENSIONS[axis];

	            that.wrapper = element.parent().css({
	                width: options.width,
	                height: options.height
	            }).addClass("km-popup-wrapper km-" + options.direction).hide();

	            that.arrow = $(ARROW).prependTo(that.wrapper).hide();

	            that.overlay = $(OVERLAY).appendTo(container).hide();
	            popupOptions.appendTo = that.overlay;

	            if (options.className) {
	                that.overlay.addClass(options.className);
	            }

	            that.popup = new kendo.ui.Popup(that.wrapper, $.extend(true, popupOptions, ANIMATION, DIRECTIONS[options.direction]));
	        },

	        options: {
	            name: "Popup",
	            width: 240,
	            height: "",
	            direction: "down",
	            container: null,
	            viewport: null
	        },

	        events: [
	            HIDE
	        ],

	        show: function(target) {
	            this.popup.options.anchor = $(target);
	            this.popup.open();
	        },

	        hide: function() {
	            this._apiCall = true;
	            this.popup.close();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.popup.destroy();
	            this.overlay.remove();
	        },

	        target: function() {
	            return this.popup.options.anchor;
	        },

	        _activate: function() {
	            var that = this,
	                direction = that.options.direction,
	                dimensions = that.dimensions,
	                offset = dimensions.offset,
	                popup = that.popup,
	                anchor = popup.options.anchor,
	                anchorOffset = $(anchor).offset(),
	                elementOffset = $(popup.element).offset(),
	                cssClass = popup.flipped ? REVERSE[direction] : direction,
	                min = that.arrow[dimensions.size]() * 2,
	                max = that.element[dimensions.size]() - that.arrow[dimensions.size](),
	                size = $(anchor)[dimensions.size](),
	                offsetAmount = anchorOffset[offset] - elementOffset[offset] + (size / 2);

	            if (offsetAmount < min) {
	                offsetAmount = min;
	            }

	            if (offsetAmount > max) {
	                offsetAmount = max;
	            }

	            that.wrapper.removeClass(DIRECTION_CLASSES).addClass("km-" + cssClass);
	            that.arrow.css(offset, offsetAmount).show();
	        }
	    });

	    var PopOver = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                popupOptions;

	            that.initialOpen = false;

	            Widget.fn.init.call(that, element, options);

	            popupOptions = $.extend({
	                className: "km-popover-root",
	                hide: function() { that.trigger(CLOSE); }
	            }, this.options.popup);

	            that.popup = new Popup(that.element, popupOptions);
	            that.popup.overlay.on("move", function(e) {
	                if (e.target == that.popup.overlay[0]) {
	                    e.preventDefault();
	                }
	            });

	            that.pane = new ui.Pane(that.element, $.extend(this.options.pane, { $angular: this.options.$angular }));

	            kendo.notify(that, ui);
	        },

	        options: {
	            name: "PopOver",
	            popup: { },
	            pane: { }
	        },

	        events: [
	            OPEN,
	            CLOSE
	        ],

	        open: function(target) {
	            this.popup.show(target);

	            if (!this.initialOpen) {
	                if (!this.pane.navigateToInitial()) {
	                    this.pane.navigate("");
	                }

	                this.popup.popup._position();
	                this.initialOpen = true;
	            } else {
	                this.pane.view()._invokeNgController();
	            }
	        },

	        openFor: function(target) {
	            this.open(target);
	            this.trigger(OPEN, { target: this.popup.target() });
	        },

	        close: function() {
	            this.popup.hide();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.pane.destroy();
	            this.popup.destroy();

	            kendo.destroy(this.element);
	        }
	    });

	    ui.plugin(Popup);
	    ui.plugin(PopOver);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 127 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.shim.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(794);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 794:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(596) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.shim",
	    name: "Shim",
	    category: "mobile",
	    description: "Mobile Shim",
	    depends: [ "popup" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Popup = kendo.ui.Popup,
	        SHIM = '<div class="km-shim"/>',
	        HIDE = "hide",
	        Widget = ui.Widget;

	    var Shim = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                app = kendo.mobile.application,
	                os = kendo.support.mobileOS,
	                osname = app ? app.os.name : (os ? os.name : "ios"),
	                ioswp = osname === "ios" || osname === "wp" || (app ? app.os.skin : false),
	                bb = osname === "blackberry",
	                align = options.align || (ioswp ?  "bottom center" : bb ? "center right" : "center center"),
	                position = options.position || (ioswp ? "bottom center" : bb ? "center right" : "center center"),
	                effect = options.effect || (ioswp ? "slideIn:up" : bb ? "slideIn:left" : "fade:in"),
	                shim = $(SHIM).handler(that).hide();

	            Widget.fn.init.call(that, element, options);

	            that.shim = shim;
	            element = that.element;
	            options = that.options;

	            if (options.className) {
	                that.shim.addClass(options.className);
	            }

	            if (!options.modal) {
	                that.shim.on("down", "_hide");
	            }

	            (app ? app.element : $(document.body)).append(shim);

	            that.popup = new Popup(that.element, {
	                anchor: shim,
	                modal: true,
	                appendTo: shim,
	                origin: align,
	                position: position,
	                animation: {
	                    open: {
	                        effects: effect,
	                        duration: options.duration
	                    },
	                    close: {
	                        duration: options.duration
	                    }
	                },

	                close: function(e) {
	                    var prevented = false;

	                    if (!that._apiCall) {
	                        prevented = that.trigger(HIDE);
	                    }

	                    if (prevented) {
	                        e.preventDefault();
	                    }

	                    that._apiCall = false;
	                },

	                deactivate: function() { // Deactivate event can't be prevented.
	                    shim.hide();
	                },

	                open: function() {
	                    shim.show();
	                }
	            });

	            kendo.notify(that);
	        },

	        events: [ HIDE ],

	        options: {
	            name: "Shim",
	            modal: false,
	            align: undefined,
	            position: undefined,
	            effect: undefined,
	            duration: 200
	        },

	        show: function() {
	            this.popup.open();
	        },

	        hide: function() {
	            this._apiCall = true;
	            this.popup.close();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.shim.kendoDestroy();
	            this.popup.destroy();
	            this.shim.remove();
	        },

	        _hide: function(e) {
	            if (!e || !$.contains(this.shim.children().children(".k-popup")[0], e.target)) {
	                this.popup.close();
	            }
	        }
	    });

	    ui.plugin(Shim);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 128 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.mobile.view.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(798);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 589:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.scroller */ 9);

/***/ },

/***/ 614:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.fx */ 30);

/***/ },

/***/ 616:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.view */ 143);

/***/ },

/***/ 798:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(614), __webpack_require__(589), __webpack_require__(616) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.view",
	    name: "View",
	    category: "mobile",
	    description: "Mobile View",
	    depends: [ "core", "fx", "mobile.scroller", "view" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        attr = kendo.attr,
	        Widget = ui.Widget,
	        ViewClone = kendo.ViewClone,
	        INIT = "init",
	        UI_OVERLAY = '<div style="height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 20000; display: none" />',
	        BEFORE_SHOW = "beforeShow",
	        SHOW = "show",
	        AFTER_SHOW = "afterShow",
	        BEFORE_HIDE = "beforeHide",
	        TRANSITION_END = "transitionEnd",
	        TRANSITION_START = "transitionStart",
	        HIDE = "hide",
	        DESTROY = "destroy",
	        attrValue = kendo.attrValue,
	        roleSelector = kendo.roleSelector,
	        directiveSelector = kendo.directiveSelector,
	        compileMobileDirective = kendo.compileMobileDirective;

	    function initPopOvers(element) {
	        var popovers = element.find(roleSelector("popover")),
	            idx, length,
	            roles = ui.roles;

	        for (idx = 0, length = popovers.length; idx < length; idx ++) {
	            kendo.initWidget(popovers[idx], {}, roles);
	        }
	    }

	    function preventScrollIfNotInput(e) {
	        if (!kendo.triggeredByInput(e)) {
	            e.preventDefault();
	        }
	    }

	    var View = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            this.params = {};

	            $.extend(this, options);

	            this.transition = this.transition || this.defaultTransition;

	            this._id();

	            if (!this.options.$angular) {
	                this._layout();
	                this._overlay();
	                this._scroller();
	                this._model();
	            } else {
	                this._overlay();
	            }
	        },

	        events: [
	            INIT,
	            BEFORE_SHOW,
	            SHOW,
	            AFTER_SHOW,
	            BEFORE_HIDE,
	            HIDE,
	            DESTROY,
	            TRANSITION_START,
	            TRANSITION_END
	        ],

	        options: {
	            name: "View",
	            title: "",
	            layout: null,
	            getLayout: $.noop,
	            reload: false,
	            transition: "",
	            defaultTransition: "",
	            useNativeScrolling: false,
	            stretch: false,
	            zoom: false,
	            model: null,
	            modelScope: window,
	            scroller: {},
	            initWidgets: true
	        },

	        enable: function(enable) {
	            if(typeof enable == "undefined") {
	                enable = true;
	            }

	            if(enable) {
	                this.overlay.hide();
	            } else {
	                this.overlay.show();
	            }
	        },

	        destroy: function() {
	            if (this.layout) {
	                this.layout.detach(this);
	            }

	            this.trigger(DESTROY);


	            Widget.fn.destroy.call(this);

	            if (this.scroller) {
	                this.scroller.destroy();
	            }

	            if (this.options.$angular) {
	                this.element.scope().$destroy();
	            }

	            kendo.destroy(this.element);
	        },

	        purge: function() {
	            this.destroy();
	            this.element.remove();
	        },

	        triggerBeforeShow: function() {
	            if (this.trigger(BEFORE_SHOW, { view: this })) {
	                return false;
	            }
	            return true;
	        },

	        triggerBeforeHide: function() {
	            if (this.trigger(BEFORE_HIDE, { view: this })) {
	                return false;
	            }
	            return true;
	        },

	        showStart: function() {
	            var element = this.element;

	            element.css("display", "");

	            if (!this.inited) {
	                this.inited = true;
	                this.trigger(INIT, {view: this});
	            } else { // skip the initial controller update
	                this._invokeNgController();
	            }

	            if (this.layout) {
	                this.layout.attach(this);
	            }

	            this._padIfNativeScrolling();
	            this.trigger(SHOW, {view: this});
	            kendo.resize(element);
	        },

	        showEnd: function() {
	            this.trigger(AFTER_SHOW, {view: this});
	            this._padIfNativeScrolling();
	        },

	        hideEnd: function() {
	            var that = this;
	            that.element.hide();
	            that.trigger(HIDE, {view: that});

	            if (that.layout) {
	                that.layout.trigger(HIDE, { view : that, layout: that.layout });
	            }
	        },

	        beforeTransition: function(type){
	            this.trigger(TRANSITION_START, { type: type });
	        },

	        afterTransition: function(type){
	            this.trigger(TRANSITION_END, { type: type });
	        },

	        _padIfNativeScrolling: function() {
	            if (mobile.appLevelNativeScrolling()) {
	                var isAndroid = kendo.support.mobileOS && kendo.support.mobileOS.android,
	                    skin = mobile.application.skin() || "",
	                    isAndroidForced = mobile.application.os.android || (skin.indexOf("android") > -1),
	                    hasPlatformIndependentSkin = skin === "flat" || (skin.indexOf("material") > -1),
	                    topContainer = (isAndroid || isAndroidForced) && (!hasPlatformIndependentSkin) ? "footer" : "header",
	                    bottomContainer = (isAndroid || isAndroidForced) && (!hasPlatformIndependentSkin) ? "header" : "footer";

	                this.content.css({
	                    paddingTop: this[topContainer].height(),
	                    paddingBottom: this[bottomContainer].height()
	                });
	            }
	        },

	        contentElement: function() {
	            var that = this;

	            return that.options.stretch ? that.content : that.scrollerContent;
	        },

	        clone: function() {
	            return new ViewClone(this);
	        },

	        _scroller: function() {
	            var that = this;

	            if (mobile.appLevelNativeScrolling()) {
	                return;
	            }
	            if (that.options.stretch) {
	                that.content.addClass("km-stretched-view");
	            } else {
	                that.content.kendoMobileScroller($.extend(that.options.scroller, { zoom: that.options.zoom, useNative: that.options.useNativeScrolling }));

	                that.scroller = that.content.data("kendoMobileScroller");
	                that.scrollerContent = that.scroller.scrollElement;
	            }

	            // prevent accidental address bar display when pulling the header
	            if (kendo.support.kineticScrollNeeded) {
	                $(that.element).on("touchmove", ".km-header", preventScrollIfNotInput);
	                if (!that.options.useNativeScrolling && !that.options.stretch) {
	                    $(that.element).on("touchmove", ".km-content", preventScrollIfNotInput);
	                }
	            }
	        },

	        _model: function() {
	            var that = this,
	                element = that.element,
	                model = that.options.model;

	            if (typeof model === "string") {
	                model = kendo.getter(model)(that.options.modelScope);
	            }

	            that.model = model;

	            initPopOvers(element);

	            that.element.css("display", "");
	            if (that.options.initWidgets) {
	                if (model) {
	                    kendo.bind(element, model, ui, kendo.ui, kendo.dataviz.ui);
	                } else {
	                    mobile.init(element.children());
	                }
	            }
	            that.element.css("display", "none");
	        },

	        _id: function() {
	            var element = this.element,
	                idAttrValue = element.attr("id") || "";

	            this.id = attrValue(element, "url") || "#" + idAttrValue;

	            if (this.id == "#") {
	                this.id = kendo.guid();
	                element.attr("id", this.id);
	            }
	        },

	        _layout: function() {
	            var contentSelector = roleSelector("content"),
	                element = this.element;

	            element.addClass("km-view");

	            this.header = element.children(roleSelector("header")).addClass("km-header");
	            this.footer = element.children(roleSelector("footer")).addClass("km-footer");

	            if (!element.children(contentSelector)[0]) {
	              element.wrapInner("<div " + attr("role") + '="content"></div>');
	            }

	            this.content = element.children(roleSelector("content"))
	                                .addClass("km-content");

	            this.element.prepend(this.header).append(this.footer);


	            this.layout = this.options.getLayout(this.layout);

	            if (this.layout) {
	                this.layout.setup(this);
	            }
	        },

	        _overlay: function() {
	            this.overlay = $(UI_OVERLAY).appendTo(this.element);
	        },

	        _invokeNgController: function() {
	            var controller,
	                scope;

	            if (this.options.$angular) {
	                controller = this.element.controller();
	                scope = this.options.$angular[0];

	                if (controller) {
	                    var callback = $.proxy(this, '_callController', controller, scope);

	                    if (/^\$(digest|apply)$/.test(scope.$$phase)) {
	                        callback();
	                    } else {
	                        scope.$apply(callback);
	                    }
	                }
	            }
	        },

	        _callController: function(controller, scope) {
	            this.element.injector().invoke(controller.constructor, controller, { $scope: scope });
	        }
	    });

	    function initWidgets(collection) {
	        collection.each(function() {
	            kendo.initWidget($(this), {}, ui.roles);
	        });
	    }

	    var Layout = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            element = this.element;

	            this.header = element.children(this._locate("header")).addClass("km-header");
	            this.footer = element.children(this._locate("footer")).addClass("km-footer");
	            this.elements = this.header.add(this.footer);

	            initPopOvers(element);

	            if (!this.options.$angular) {
	                kendo.mobile.init(this.element.children());
	            }
	            this.element.detach();
	            this.trigger(INIT, {layout: this});
	        },

	        _locate: function(selectors) {
	            return this.options.$angular ? directiveSelector(selectors) : roleSelector(selectors);
	        },

	        options: {
	            name: "Layout",
	            id: null,
	            platform: null
	        },

	        events: [
	            INIT,
	            SHOW,
	            HIDE
	        ],

	        setup: function(view) {
	            if (!view.header[0]) { view.header = this.header; }
	            if (!view.footer[0]) { view.footer = this.footer; }
	        },

	        detach: function(view) {
	            var that = this;
	            if (view.header === that.header && that.header[0]) {
	                view.element.prepend(that.header.detach()[0].cloneNode(true));
	            }

	            if (view.footer === that.footer && that.footer.length) {
	                view.element.append(that.footer.detach()[0].cloneNode(true));
	            }
	        },

	        attach: function(view) {
	            var that = this,
	                previousView = that.currentView;

	            if (previousView) {
	                that.detach(previousView);
	            }

	            if (view.header === that.header) {
	                that.header.detach();
	                view.element.children(roleSelector("header")).remove();
	                view.element.prepend(that.header);
	            }

	            if (view.footer === that.footer) {
	                that.footer.detach();
	                view.element.children(roleSelector("footer")).remove();
	                view.element.append(that.footer);
	            }

	            that.trigger(SHOW, {layout: that, view: view});
	            that.currentView = view;
	        }
	    });

	    var Observable = kendo.Observable,
	        bodyRegExp = /<body[^>]*>(([\u000a\u000d\u2028\u2029]|.)*)<\/body>/i,
	        LOAD_START = "loadStart",
	        LOAD_COMPLETE = "loadComplete",
	        SHOW_START = "showStart",
	        SAME_VIEW_REQUESTED = "sameViewRequested",
	        VIEW_SHOW = "viewShow",
	        VIEW_TYPE_DETERMINED = "viewTypeDetermined",
	        AFTER = "after";

	    var ViewEngine = Observable.extend({
	        init: function(options) {
	            var that = this,
	                views,
	                errorMessage,
	                container,
	                collection;

	            Observable.fn.init.call(that);

	            $.extend(that, options);
	            that.sandbox = $("<div />");
	            container = that.container;

	            views = that._hideViews(container);
	            that.rootView = views.first();

	            if (!that.rootView[0] && options.rootNeeded) {
	                if (container[0] == kendo.mobile.application.element[0]) {
	                    errorMessage = 'Your kendo mobile application element does not contain any direct child elements with data-role="view" attribute set. Make sure that you instantiate the mobile application using the correct container.';
	                } else {
	                    errorMessage = 'Your pane element does not contain any direct child elements with data-role="view" attribute set.';
	                }
	                throw new Error(errorMessage);
	            }

	            that.layouts = {};

	            that.viewContainer = new kendo.ViewContainer(that.container);

	            that.viewContainer.bind("accepted", function(e) {
	                e.view.params = that.params;
	            });

	            that.viewContainer.bind("complete", function(e) {
	                that.trigger(VIEW_SHOW, { view: e.view });
	            });

	            that.viewContainer.bind(AFTER, function() {
	                that.trigger(AFTER);
	            });

	            this.getLayoutProxy = $.proxy(this, "_getLayout");
	            that._setupLayouts(container);

	            collection = container.children(that._locate("modalview drawer"));
	            if (that.$angular) {

	                that.$angular[0].viewOptions = {
	                    defaultTransition: that.transition,
	                    loader: that.loader,
	                    container: that.container,
	                    getLayout: that.getLayoutProxy
	                };

	                collection.each(function(idx, element) {
	                    compileMobileDirective($(element), options.$angular[0]);
	                });
	            } else {
	                initWidgets(collection);
	            }

	            this.bind(this.events, options);
	        },

	        events: [
	            SHOW_START,
	            AFTER,
	            VIEW_SHOW,
	            LOAD_START,
	            LOAD_COMPLETE,
	            SAME_VIEW_REQUESTED,
	            VIEW_TYPE_DETERMINED
	        ],

	        destroy: function() {
	            kendo.destroy(this.container);

	            for (var id in this.layouts) {
	                this.layouts[id].destroy();
	            }
	        },

	        view: function() {
	            return this.viewContainer.view;
	        },

	        showView: function(url, transition, params) {
	            url = url.replace(new RegExp("^" + this.remoteViewURLPrefix), "");
	            if (url === "" && this.remoteViewURLPrefix) {
	                url = "/";
	            }

	            if (url.replace(/^#/, "") === this.url) {
	                this.trigger(SAME_VIEW_REQUESTED);
	                return false;
	            }

	            this.trigger(SHOW_START);

	            var that = this,
	                showClosure = function(view) {
	                    return that.viewContainer.show(view, transition, url);
	                },
	                element = that._findViewElement(url),
	                view = kendo.widgetInstance(element);

	            that.url = url.replace(/^#/, "");

	            that.params = params;

	            if (view && view.reload) {
	                view.purge();
	                element = [];
	            }

	            this.trigger(VIEW_TYPE_DETERMINED, { remote: element.length === 0, url: url });

	            if (element[0]) {
	                if (!view) {
	                    view = that._createView(element);
	                }

	                return showClosure(view);
	            } else {
	                if (this.serverNavigation) {
	                    location.href = url;
	                } else {
	                    that._loadView(url, showClosure);
	                }
	                return true;
	            }
	        },

	        append: function(html, url) {
	            var sandbox = this.sandbox,
	                urlPath = (url || "").split("?")[0],
	                container = this.container,
	                views,
	                modalViews,
	                view;

	            if (bodyRegExp.test(html)) {
	                html = RegExp.$1;
	            }

	            sandbox[0].innerHTML = html;

	            container.append(sandbox.children("script, style"));

	            views = this._hideViews(sandbox);
	            view = views.first();

	            // Generic HTML content found as remote view - no remote view markers
	            if (!view.length) {
	                views = view = sandbox.wrapInner("<div data-role=view />").children(); // one element
	            }

	            if (urlPath) {
	                view.hide().attr(attr("url"), urlPath);
	            }

	            this._setupLayouts(sandbox);

	            modalViews = sandbox.children(this._locate("modalview drawer"));

	            container.append(sandbox.children(this._locate("layout modalview drawer")).add(views));

	            // Initialize the modalviews after they have been appended to the final container
	            initWidgets(modalViews);

	            return this._createView(view);
	        },

	        _locate: function(selectors) {
	            return this.$angular ? directiveSelector(selectors) : roleSelector(selectors);
	        },

	        _findViewElement: function(url) {
	            var element,
	                urlPath = url.split("?")[0];

	            if (!urlPath) {
	                return this.rootView;
	            }

	            element = this.container.children("[" + attr("url") + "='" + urlPath + "']");

	            // do not try to search for "#/foo/bar" id, jQuery throws error
	            if (!element[0] && urlPath.indexOf("/") === -1) {
	                element = this.container.children(urlPath.charAt(0) === "#" ? urlPath : "#" + urlPath);
	            }

	            return element;
	        },

	        _createView: function(element) {
	            if (this.$angular) {
	                return compileMobileDirective(element, this.$angular[0]);
	            } else {
	                return kendo.initWidget(element, {
	                    defaultTransition: this.transition,
	                    loader: this.loader,
	                    container: this.container,
	                    getLayout: this.getLayoutProxy,
	                    modelScope: this.modelScope,
	                    reload: attrValue(element, "reload")
	                }, ui.roles);
	            }
	        },

	        _getLayout: function(name) {
	            if (name === "") {
	                return null;
	            }

	            return name ? this.layouts[name] : this.layouts[this.layout];
	        },

	        _loadView: function(url, callback) {
	            if (this._xhr) {
	                this._xhr.abort();
	            }

	            this.trigger(LOAD_START);

	            this._xhr = $.get(kendo.absoluteURL(url, this.remoteViewURLPrefix), "html")
	                .always($.proxy(this, "_xhrComplete", callback, url));
	        },

	        _xhrComplete: function(callback, url, response) {
	            var success = true;

	            if (typeof response === "object") {
	                if (response.status === 0) {
	                    if (response.responseText && response.responseText.length > 0) {
	                        success = true;
	                        response = response.responseText;
	                    } else { // request has been aborted for real
	                        return;
	                    }
	                }
	            }

	            this.trigger(LOAD_COMPLETE);

	            if (success) {
	                callback(this.append(response, url));
	            }
	        },

	        _hideViews: function(container) {
	            return container.children(this._locate("view splitview")).hide();
	        },

	        _setupLayouts: function(element) {
	            var that = this,
	                layout;

	            element.children(that._locate("layout")).each(function() {
	                if (that.$angular) {
	                    layout = compileMobileDirective($(this), that.$angular[0]);
	                } else {
	                    layout = kendo.initWidget($(this), {}, ui.roles);
	                }

	                var platform = layout.options.platform;

	                if (!platform || platform === mobile.application.os.name) {
	                    that.layouts[layout.options.id] = layout;
	                } else {
	                    layout.destroy();
	                }
	            });

	        }
	    });

	    kendo.mobile.ViewEngine = ViewEngine;

	    ui.plugin(View);
	    ui.plugin(Layout);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 129 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.pager.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(803);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 581:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.data */ 6);

/***/ },

/***/ 803:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(581) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "pager",
	    name: "Pager",
	    category: "framework",
	    depends: [ "data" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        proxy = $.proxy,
	        FIRST = ".k-i-seek-w",
	        LAST = ".k-i-seek-e",
	        PREV = ".k-i-arrow-w",
	        NEXT = ".k-i-arrow-e",
	        CHANGE = "change",
	        NS = ".kendoPager",
	        CLICK = "click",
	        KEYDOWN = "keydown",
	        DISABLED = "disabled",
	        iconTemplate = kendo.template('<a href="\\#" aria-label="#=text#" title="#=text#" class="k-link k-pager-nav #= wrapClassName #"><span class="k-icon #= className #"></span></a>');

	    function button(template, idx, text, numeric, title) {
	        return template( {
	            idx: idx,
	            text: text,
	            ns: kendo.ns,
	            numeric: numeric,
	            title: title || ""
	        });
	    }

	    function icon(className, text, wrapClassName) {
	        return iconTemplate({
	            className: className.substring(1),
	            text: text,
	            wrapClassName: wrapClassName || ""
	        });
	    }

	    function update(element, selector, page, disabled) {
	       element.find(selector)
	              .parent()
	              .attr(kendo.attr("page"), page)
	              .attr("tabindex", -1)
	              .toggleClass("k-state-disabled", disabled);
	    }

	    function first(element, page) {
	        update(element, FIRST, 1, page <= 1);
	    }

	    function prev(element, page) {
	        update(element, PREV, Math.max(1, page - 1), page <= 1);
	    }

	    function next(element, page, totalPages) {
	        update(element, NEXT, Math.min(totalPages, page + 1), page >= totalPages);
	    }

	    function last(element, page, totalPages) {
	        update(element, LAST, totalPages, page >= totalPages);
	    }

	    var Pager = Widget.extend( {
	        init: function(element, options) {
	            var that = this, page, totalPages;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            that.dataSource = kendo.data.DataSource.create(options.dataSource);
	            that.linkTemplate = kendo.template(that.options.linkTemplate);
	            that.selectTemplate = kendo.template(that.options.selectTemplate);
	            that.currentPageTemplate = kendo.template(that.options.currentPageTemplate);

	            page = that.page();
	            totalPages = that.totalPages();

	            that._refreshHandler = proxy(that.refresh, that);

	            that.dataSource.bind(CHANGE, that._refreshHandler);

	            if (options.previousNext) {
	                if (!that.element.find(FIRST).length) {
	                    that.element.append(icon(FIRST, options.messages.first, "k-pager-first"));

	                    first(that.element, page, totalPages);
	                }

	                if (!that.element.find(PREV).length) {
	                    that.element.append(icon(PREV, options.messages.previous));

	                    prev(that.element, page, totalPages);
	                }
	            }

	            if (options.numeric) {
	                that.list = that.element.find(".k-pager-numbers");

	                if (!that.list.length) {
	                   that.list = $('<ul class="k-pager-numbers k-reset" />').appendTo(that.element);
	                }
	            }

	            if (options.input) {
	                if (!that.element.find(".k-pager-input").length) {
	                   that.element.append('<span class="k-pager-input k-label">'+
	                       options.messages.page +
	                       '<input class="k-textbox">' +
	                       kendo.format(options.messages.of, totalPages) +
	                       '</span>');
	                }

	                that.element.on(KEYDOWN + NS, ".k-pager-input input", proxy(that._keydown, that));
	            }

	            if (options.previousNext) {
	                if (!that.element.find(NEXT).length) {
	                    that.element.append(icon(NEXT, options.messages.next));

	                    next(that.element, page, totalPages);
	                }

	                if (!that.element.find(LAST).length) {
	                    that.element.append(icon(LAST, options.messages.last, "k-pager-last"));

	                    last(that.element, page, totalPages);
	                }
	            }

	            if (options.pageSizes){
	                if (!that.element.find(".k-pager-sizes").length){
	                    var pageSizes = options.pageSizes.length ? options.pageSizes : ["all", 5, 10, 20];
	                    var pageItems = $.map(pageSizes, function(size) {
	                        if (size.toLowerCase && size.toLowerCase() === "all") {
	                            return "<option value='all'>" + options.messages.allPages + "</option>";
	                        }

	                        return "<option>" + size + "</option>";
	                    });

	                    $('<span class="k-pager-sizes k-label"><select/>' + options.messages.itemsPerPage + "</span>")
	                        .appendTo(that.element)
	                        .find("select").html(pageItems.join("")).end()
	                        .appendTo(that.element);
	                }

	                that.element.find(".k-pager-sizes select").val(that.pageSize());

	                if (kendo.ui.DropDownList) {
	                   that.element.find(".k-pager-sizes select").show().kendoDropDownList();
	                }

	                that.element.on(CHANGE + NS, ".k-pager-sizes select", proxy(that._change, that));
	            }

	            if (options.refresh) {
	                if (!that.element.find(".k-pager-refresh").length) {
	                    that.element.append('<a href="#" class="k-pager-refresh k-link" title="' + options.messages.refresh +
	                        '"><span class="k-icon k-i-reload"></span></a>');
	                }

	                that.element.on(CLICK + NS, ".k-pager-refresh", proxy(that._refreshClick, that));
	            }

	            if (options.info) {
	                if (!that.element.find(".k-pager-info").length) {
	                    that.element.append('<span class="k-pager-info k-label" />');
	                }
	            }

	            that.element
	                .on(CLICK + NS , "a", proxy(that._click, that))
	                .addClass("k-pager-wrap k-widget k-floatwrap");

	            that.element.on(CLICK + NS , ".k-current-page", proxy(that._toggleActive, that));

	            if (options.autoBind) {
	                that.refresh();
	            }

	            kendo.notify(that);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.element.off(NS);
	            that.dataSource.unbind(CHANGE, that._refreshHandler);
	            that._refreshHandler = null;

	            kendo.destroy(that.element);
	            that.element = that.list = null;
	        },

	        events: [
	            CHANGE
	        ],

	        options: {
	            name: "Pager",
	            selectTemplate: '<li><span class="k-state-selected">#=text#</span></li>',
	            currentPageTemplate: '<li class="k-current-page"><span class="k-link k-pager-nav">#=text#</span></li>',
	            linkTemplate: '<li><a tabindex="-1" href="\\#" class="k-link" data-#=ns#page="#=idx#" #if (title !== "") {# title="#=title#" #}#>#=text#</a></li>',
	            buttonCount: 10,
	            autoBind: true,
	            numeric: true,
	            info: true,
	            input: false,
	            previousNext: true,
	            pageSizes: false,
	            refresh: false,
	            messages: {
	                allPages: "All",
	                display: "{0} - {1} of {2} items",
	                empty: "No items to display",
	                page: "Page",
	                of: "of {0}",
	                itemsPerPage: "items per page",
	                first: "Go to the first page",
	                previous: "Go to the previous page",
	                next: "Go to the next page",
	                last: "Go to the last page",
	                refresh: "Refresh",
	                morePages: "More pages"
	            }
	        },

	        setDataSource: function(dataSource) {
	            var that = this;

	            that.dataSource.unbind(CHANGE, that._refreshHandler);
	            that.dataSource = that.options.dataSource = dataSource;
	            dataSource.bind(CHANGE, that._refreshHandler);

	            if (that.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        refresh: function(e) {
	            var that = this,
	                idx,
	                end,
	                start = 1,
	                reminder,
	                page = that.page(),
	                html = "",
	                options = that.options,
	                pageSize = that.pageSize(),
	                total = that.dataSource.total(),
	                totalPages = that.totalPages(),
	                linkTemplate = that.linkTemplate,
	                buttonCount = options.buttonCount;

	            if (e && e.action == "itemchange") {
	                return;
	            }

	            if (options.numeric) {

	                if (page > buttonCount) {
	                    reminder = (page % buttonCount);

	                    start = (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
	                }

	                end = Math.min((start + buttonCount) - 1, totalPages);

	                if (start > 1) {
	                    html += button(linkTemplate, start - 1, "...", false, options.messages.morePages);
	                }

	                for (idx = start; idx <= end; idx++) {
	                    html += button(idx == page ? that.selectTemplate : linkTemplate, idx, idx, true);
	                }

	                if (end < totalPages) {
	                    html += button(linkTemplate, idx, "...", false, options.messages.morePages);
	                }

	                if (html === "") {
	                    html = that.selectTemplate({ text: 0 });
	                }

	                html = this.currentPageTemplate({ text: page }) + html;

	                that.list.removeClass("k-state-expanded").html(html);
	            }

	            if (options.info) {
	                if (total > 0) {
	                    html = kendo.format(options.messages.display,
	                        Math.min((page - 1) * pageSize + 1, total), // first item in the page
	                        Math.min(page * pageSize, total), // last item in the page
	                    total);
	                } else {
	                    html = options.messages.empty;
	                }

	                that.element.find(".k-pager-info").html(html);
	            }

	            if (options.input) {
	                that.element
	                    .find(".k-pager-input")
	                    .html(that.options.messages.page +
	                        '<input class="k-textbox">' +
	                        kendo.format(options.messages.of, totalPages))
	                    .find("input")
	                    .val(page)
	                    .attr(DISABLED, total < 1)
	                    .toggleClass("k-state-disabled", total < 1);
	            }

	            if (options.previousNext) {
	                first(that.element, page, totalPages);

	                prev(that.element, page, totalPages);

	                next(that.element, page, totalPages);

	                last(that.element, page, totalPages);
	            }

	            if (options.pageSizes) {
	                var hasAll = that.element.find(".k-pager-sizes option[value='all']").length > 0;
	                var selectAll = hasAll && pageSize === this.dataSource.total();
	                var text = pageSize;
	                if (selectAll) {
	                    pageSize = "all";
	                    text = options.messages.allPages;
	                }

	                that.element
	                    .find(".k-pager-sizes select")
	                    .val(pageSize)
	                    .filter("[" + kendo.attr("role") + "=dropdownlist]")
	                    .kendoDropDownList("value", pageSize)
	                    .kendoDropDownList("text", text); // handles custom values
	            }
	        },

	        _keydown: function(e) {
	            if (e.keyCode === kendo.keys.ENTER) {
	                var input = this.element.find(".k-pager-input").find("input"),
	                    page = parseInt(input.val(), 10);

	                if (isNaN(page) || page < 1 || page > this.totalPages()) {
	                    page = this.page();
	                }

	                input.val(page);

	                this.page(page);
	            }
	        },

	        _refreshClick: function(e) {
	            e.preventDefault();

	            this.dataSource.read();
	        },

	        _change: function(e) {
	            var value = e.currentTarget.value;
	            var pageSize = parseInt(value, 10);
	            var dataSource = this.dataSource;

	            if (!isNaN(pageSize)){
	                dataSource.pageSize(pageSize);
	            } else if ((value + "").toLowerCase() == "all") {
	                dataSource.pageSize(dataSource.total());
	            }
	        },

	        _toggleActive: function() {
	            this.list.toggleClass("k-state-expanded");
	        },

	        _click: function(e) {
	            var target = $(e.currentTarget);

	            e.preventDefault();

	            if (!target.is(".k-state-disabled")) {
	                this.page(target.attr(kendo.attr("page")));
	            }
	        },

	        totalPages: function() {
	            return Math.ceil((this.dataSource.total() || 0) / (this.pageSize() || 1));
	        },

	        pageSize: function() {
	            return this.dataSource.pageSize() || this.dataSource.total();
	        },

	        page: function(page) {
	            if (page !== undefined) {
	                if (this.trigger("pageChange", { index: page })) {
	                   return;
	                }

	                this.dataSource.page(page);

	                this.trigger(CHANGE, { index: page });
	            } else {
	                if (this.dataSource.total() > 0) {
	                    return this.dataSource.page();
	                } else {
	                    return 0;
	                }
	            }
	        }
	    });

	    ui.plugin(Pager);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 130 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.progressbar.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(814);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 814:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "progressbar",
	    name: "ProgressBar",
	    category: "web",
	    description: "The ProgressBar offers rich functionality for displaying and tracking progress",
	    depends: [ "core" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        HORIZONTAL = "horizontal",
	        VERTICAL = "vertical",
	        DEFAULTMIN = 0,
	        DEFAULTMAX = 100,
	        DEFAULTVALUE = 0,
	        DEFAULTCHUNKCOUNT = 5,
	        KPROGRESSBAR = "k-progressbar",
	        KPROGRESSBARREVERSE = "k-progressbar-reverse",
	        KPROGRESSBARINDETERMINATE = "k-progressbar-indeterminate",
	        KPROGRESSBARCOMPLETE = "k-complete",
	        KPROGRESSWRAPPER = "k-state-selected",
	        KPROGRESSSTATUS = "k-progress-status",
	        KCOMPLETEDCHUNK = "k-state-selected",
	        KUPCOMINGCHUNK = "k-state-default",
	        KSTATEDISABLED = "k-state-disabled",
	        PROGRESSTYPE = {
	            VALUE: "value",
	            PERCENT: "percent",
	            CHUNK: "chunk"
	        },
	        CHANGE = "change",
	        COMPLETE = "complete",
	        BOOLEAN = "boolean",
	        math = Math,
	        extend = $.extend,
	        proxy = $.proxy,
	        HUNDREDPERCENT = 100,
	        DEFAULTANIMATIONDURATION = 400,
	        PRECISION = 3,
	        templates = {
	            progressStatus: "<span class='k-progress-status-wrap'><span class='k-progress-status'></span></span>"
	        };

	    var ProgressBar = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(this, element, options);

	            options = that.options;

	            that._progressProperty = (options.orientation === HORIZONTAL) ? "width" : "height";

	            that._fields();

	            options.value = that._validateValue(options.value);

	            that._validateType(options.type);

	            that._wrapper();

	            that._progressAnimation();

	            if ((options.value !== options.min) && (options.value !== false)) {
	               that._updateProgress();
	            }
	        },

	        setOptions: function(options) {
	            var that = this;

	            Widget.fn.setOptions.call(that, options);

	            if (options.hasOwnProperty("reverse")) {
	                that.wrapper.toggleClass("k-progressbar-reverse", options.reverse);
	            }

	            if (options.hasOwnProperty("enable")) {
	                that.enable(options.enable);
	            }

	            that._progressAnimation();

	            that._validateValue();

	            that._updateProgress();
	        },

	        events: [
	            CHANGE,
	            COMPLETE
	        ],

	        options: {
	            name: "ProgressBar",
	            orientation: HORIZONTAL,
	            reverse: false,
	            min: DEFAULTMIN,
	            max: DEFAULTMAX,
	            value: DEFAULTVALUE,
	            enable: true,
	            type: PROGRESSTYPE.VALUE,
	            chunkCount: DEFAULTCHUNKCOUNT,
	            showStatus: true,
	            animation: { }
	        },

	        _fields: function() {
	            var that = this;

	            that._isStarted = false;

	            that.progressWrapper = that.progressStatus = $();
	        },

	        _validateType: function(currentType) {
	            var isValid = false;

	            $.each(PROGRESSTYPE, function(k, type) {
	                if (type === currentType) {
	                    isValid = true;
	                    return false;
	                }
	            });

	            if (!isValid) {
	                throw new Error(kendo.format("Invalid ProgressBar type '{0}'", currentType));
	            }
	        },

	        _wrapper: function() {
	            var that = this;
	            var container = that.wrapper = that.element;
	            var options = that.options;
	            var orientation = options.orientation;
	            var initialStatusValue;

	            container.addClass("k-widget " + KPROGRESSBAR);

	            container.addClass(KPROGRESSBAR + "-" + ((orientation === HORIZONTAL) ? HORIZONTAL : VERTICAL));

	            if(options.enable === false) {
	                container.addClass(KSTATEDISABLED);
	            }

	            if (options.reverse) {
	                container.addClass(KPROGRESSBARREVERSE);
	            }

	            if (options.value === false) {
	                container.addClass(KPROGRESSBARINDETERMINATE);
	            }

	            if (options.type === PROGRESSTYPE.CHUNK) {
	                that._addChunkProgressWrapper();
	            } else {
	                if (options.showStatus){
	                    that.progressStatus = that.wrapper.prepend(templates.progressStatus)
	                                              .find("." + KPROGRESSSTATUS);

	                    initialStatusValue = (options.value !== false) ? options.value : options.min;

	                    if (options.type === PROGRESSTYPE.VALUE) {
	                        that.progressStatus.text(initialStatusValue);
	                    } else {
	                        that.progressStatus.text(that._calculatePercentage(initialStatusValue).toFixed() + "%");
	                    }
	                }
	            }
	        },

	        value: function(value) {
	            return this._value(value);
	        },

	        _value: function(value){
	            var that = this;
	            var options = that.options;
	            var validated;

	            if (value === undefined) {
	                return options.value;
	            } else {
	                if (typeof value !== BOOLEAN) {
	                    value = that._roundValue(value);

	                    if(!isNaN(value)) {
	                        validated = that._validateValue(value);

	                        if (validated !== options.value) {
	                            that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);

	                            options.value = validated;

	                            that._isStarted = true;

	                            that._updateProgress();
	                        }
	                    }
	                } else if (!value) {
	                    that.wrapper.addClass(KPROGRESSBARINDETERMINATE);
	                    options.value = false;
	                }
	            }
	        },

	        _roundValue: function(value) {
	            value = parseFloat(value);

	            var power = math.pow(10, PRECISION);

	            return math.floor(value * power) / power;
	        },

	        _validateValue: function(value) {
	            var that = this;
	            var options = that.options;

	            if (value !== false) {
	                if (value <= options.min || value === true) {
	                    return options.min;
	                } else if (value >= options.max) {
	                    return options.max;
	                }
	            } else if (value === false) {
	                return false;
	            }

	            if(isNaN(that._roundValue(value))) {
	                return options.min;
	            }

	            return value;
	        },

	        _updateProgress: function() {
	            var that = this;
	            var options = that.options;
	            var percentage = that._calculatePercentage();

	            if (options.type === PROGRESSTYPE.CHUNK) {
	                that._updateChunks(percentage);
	                that._onProgressUpdateAlways(options.value);
	            } else {
	                that._updateProgressWrapper(percentage);
	            }
	        },

	        _updateChunks: function(percentage) {
	            var that = this;
	            var options = that.options;
	            var chunkCount = options.chunkCount;
	            var percentagesPerChunk =  parseInt((HUNDREDPERCENT / chunkCount) * 100, 10) / 100;
	            var percentageParsed = parseInt(percentage * 100, 10) / 100;
	            var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);
	            var completedChunks;

	            if((options.orientation === HORIZONTAL && !(options.reverse)) ||
	               (options.orientation === VERTICAL && options.reverse)) {
	                completedChunks = that.wrapper.find("li.k-item:lt(" + completedChunksCount + ")");
	            } else {
	                completedChunks = that.wrapper.find("li.k-item:gt(-" + (completedChunksCount + 1) + ")");
	            }

	            that.wrapper.find("." + KCOMPLETEDCHUNK)
	                        .removeClass(KCOMPLETEDCHUNK)
	                        .addClass(KUPCOMINGCHUNK);

	            completedChunks.removeClass(KUPCOMINGCHUNK)
	                           .addClass(KCOMPLETEDCHUNK);
	        },

	        _updateProgressWrapper: function(percentage) {
	            var that = this;
	            var options = that.options;
	            var progressWrapper = that.wrapper.find("." + KPROGRESSWRAPPER);
	            var animationDuration = that._isStarted ? that._animation.duration : 0;
	            var animationCssOptions = { };

	            if (progressWrapper.length === 0) {
	                that._addRegularProgressWrapper();
	            }

	            animationCssOptions[that._progressProperty] = percentage + "%";
	            that.progressWrapper.animate(animationCssOptions, {
	                duration: animationDuration,
	                start: proxy(that._onProgressAnimateStart, that),
	                progress: proxy(that._onProgressAnimate, that),
	                complete: proxy(that._onProgressAnimateComplete, that, options.value),
	                always: proxy(that._onProgressUpdateAlways, that, options.value)
	            });
	        },

	        _onProgressAnimateStart: function() {
	            this.progressWrapper.show();
	        },

	        _onProgressAnimate: function(e) {
	            var that = this;
	            var options = that.options;
	            var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);
	            var progressStatusWrapSize;

	            if (options.showStatus) {
	                progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);

	                that.progressWrapper.find(".k-progress-status-wrap").css(that._progressProperty, progressStatusWrapSize + "%");
	            }

	            if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {
	                that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);
	            }
	        },

	        _onProgressAnimateComplete: function(currentValue) {
	            var that = this;
	            var options = that.options;
	            var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);
	            var progressValue;

	            if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {
	                that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);
	            }

	            if (options.showStatus) {
	                if (options.type === PROGRESSTYPE.VALUE) {
	                    progressValue = currentValue;
	                } else if (options.type == PROGRESSTYPE.PERCENT) {
	                    progressValue = that._calculatePercentage(currentValue).toFixed() + "%";
	                } else {
	                    progressValue = math.floor(that._calculatePercentage(currentValue)) + "%";
	                }
	                that.progressStatus.text(progressValue);
	            }

	            if (currentValue === options.min) {
	                that.progressWrapper.hide();
	            }
	        },

	        _onProgressUpdateAlways: function(currentValue) {
	            var that = this;
	            var options = that.options;

	            if (that._isStarted) {
	                that.trigger(CHANGE, { value: currentValue });
	            }

	            if (currentValue === options.max && that._isStarted) {
	                that.trigger(COMPLETE, { value: options.max });
	            }
	        },

	        enable: function(enable) {
	            var that = this;
	            var options = that.options;

	            options.enable = typeof(enable) === "undefined" ? true : enable;
	            that.wrapper.toggleClass(KSTATEDISABLED, !options.enable);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);
	        },

	        _addChunkProgressWrapper: function () {
	            var that = this;
	            var options = that.options;
	            var container = that.wrapper;
	            var chunkSize = HUNDREDPERCENT / options.chunkCount;
	            var html = "";

	            if (options.chunkCount <= 1) {
	                options.chunkCount = 1;
	            }

	            html += "<ul class='k-reset'>";
	            for (var i = options.chunkCount - 1; i >= 0; i--) {
	                html += "<li class='k-item k-state-default'></li>";
	            }
	            html += "</ul>";

	            container.append(html).find(".k-item").css(that._progressProperty, chunkSize + "%")
	                     .first().addClass("k-first")
	                     .end()
	                     .last().addClass("k-last");

	            that._normalizeChunkSize();
	        },

	        _normalizeChunkSize: function() {
	            var that = this;
	            var options = that.options;
	            var lastChunk = that.wrapper.find(".k-item:last");
	            var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);
	            var difference = HUNDREDPERCENT - (options.chunkCount * currentSize);

	            if (difference > 0) {
	                lastChunk.css(that._progressProperty, (currentSize + difference) + "%");
	            }
	        },

	        _addRegularProgressWrapper: function() {
	            var that = this;

	            that.progressWrapper = $("<div class='" + KPROGRESSWRAPPER + "'></div>").appendTo(that.wrapper);

	            if (that.options.showStatus) {
	                that.progressWrapper.append(templates.progressStatus);

	                that.progressStatus = that.wrapper.find("." + KPROGRESSSTATUS);
	            }
	        },

	        _calculateChunkSize: function() {
	            var that = this;
	            var chunkCount = that.options.chunkCount;
	            var chunkContainer = that.wrapper.find("ul.k-reset");

	            return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;
	        },

	        _calculatePercentage: function(currentValue) {
	            var that = this;
	            var options = that.options;
	            var value = (currentValue !== undefined) ? currentValue : options.value;
	            var min = options.min;
	            var max = options.max;
	            that._onePercent = math.abs((max - min) / 100);

	            return math.abs((value - min) / that._onePercent);
	        },

	        _progressAnimation: function() {
	            var that = this;
	            var options = that.options;
	            var animation = options.animation;

	            if (animation === false) {
	                that._animation = { duration: 0 };
	            } else {
	                that._animation = extend({
	                    duration: DEFAULTANIMATIONDURATION
	                }, options.animation);
	            }
	        }
	    });

	    kendo.ui.plugin(ProgressBar);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 131 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.reorderable.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(815);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 619:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.draganddrop */ 7);

/***/ },

/***/ 815:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(619) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "reorderable",
	    name: "Reorderable",
	    category: "framework",
	    depends: [ "core", "draganddrop" ],
	    advanced: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        getOffset = kendo.getOffset,
	        Widget = kendo.ui.Widget,
	        CHANGE =  "change",
	        KREORDERABLE = "k-reorderable";

	    function toggleHintClass(hint, denied) {
	        hint = $(hint);

	        if (denied) {
	            hint.find(".k-drag-status").removeClass("k-i-plus").addClass("k-i-cancel");
	        } else {
	            hint.find(".k-drag-status").removeClass("k-i-cancel").addClass("k-i-plus");
	        }
	    }

	    var Reorderable = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                draggable,
	                group = kendo.guid() + "-reorderable";

	            Widget.fn.init.call(that, element, options);

	            element = that.element.addClass(KREORDERABLE);
	            options = that.options;

	            that.draggable = draggable = options.draggable || new kendo.ui.Draggable(element, {
	                group: group,
	                autoScroll: true,
	                filter: options.filter,
	                hint: options.hint
	            });

	            that.reorderDropCue = $('<div class="k-reorder-cue"><div class="k-icon k-i-arrow-60-down"></div><div class="k-icon k-i-arrow-60-up"></div></div>');

	            element.find(draggable.options.filter).kendoDropTarget({
	                group: draggable.options.group,
	                dragenter: function(e) {
	                    if (!that._draggable) {
	                        return;
	                    }

	                    var dropTarget = this.element, offset;
	                    var denied = !that._dropTargetAllowed(dropTarget) || that._isLastDraggable();

	                    toggleHintClass(e.draggable.hint, denied);
	                    if (!denied) {
	                        offset = getOffset(dropTarget);
	                        var left = offset.left;

	                        if (options.inSameContainer && !options.inSameContainer({
	                            source: dropTarget,
	                            target: that._draggable,
	                            sourceIndex: that._index(dropTarget),
	                            targetIndex: that._index(that._draggable)
	                        })) {
	                            that._dropTarget = dropTarget;
	                        } else {
	                            if (that._index(dropTarget) > that._index(that._draggable)) {
	                                left += outerWidth(dropTarget);
	                            }
	                        }

	                        that.reorderDropCue.css({
	                             height: outerHeight(dropTarget),
	                             top: offset.top,
	                             left: left
	                        })
	                        .appendTo(document.body);
	                    }
	                },
	                dragleave: function(e) {
	                    toggleHintClass(e.draggable.hint, true);
	                    that.reorderDropCue.remove();
	                    that._dropTarget = null;
	                },
	                drop: function() {
	                    that._dropTarget = null;
	                    if (!that._draggable) {
	                        return;
	                    }
	                    var dropTarget = this.element;
	                    var draggable = that._draggable;

	                    if (that._dropTargetAllowed(dropTarget) && !that._isLastDraggable()) {
	                        that.trigger(CHANGE, {
	                            element: that._draggable,
	                            target: dropTarget,
	                            oldIndex: that._index(draggable),
	                            newIndex: that._index(dropTarget),
	                            position: getOffset(that.reorderDropCue).left > getOffset(dropTarget).left ? "after" : "before"
	                        });
	                    }
	                }
	            });

	            draggable.bind([ "dragcancel", "dragend", "dragstart", "drag" ],
	                {
	                    dragcancel: function() {
	                        that.reorderDropCue.remove();
	                        that._draggable = null;
	                        that._elements = null;
	                    },
	                    dragend: function() {
	                        that.reorderDropCue.remove();
	                        that._draggable = null;
	                        that._elements = null;
	                    },
	                    dragstart: function(e) {
	                        that._draggable = e.currentTarget;
	                        that._elements = that.element.find(that.draggable.options.filter);
	                    },
	                    drag: function(e) {
	                        if (!that._dropTarget || this.hint.find(".k-drag-status").hasClass("k-i-cancel")) {
	                            return;
	                        }

	                        var dropStartOffset = getOffset(that._dropTarget).left;
	                        var width = outerWidth(that._dropTarget);

	                        if (e.pageX > dropStartOffset + width / 2) {
	                            that.reorderDropCue.css({ left: dropStartOffset + width });
	                        } else {
	                            that.reorderDropCue.css({ left: dropStartOffset });
	                        }
	                    }
	                }
	            );
	        },

	        options: {
	            name: "Reorderable",
	            filter: "*"
	        },

	        events: [
	            CHANGE
	        ],

	        _isLastDraggable: function() {
	            var inSameContainer = this.options.inSameContainer,
	                draggable = this._draggable[0],
	                elements = this._elements.get(),
	                found = false,
	                item;

	            if (!inSameContainer) {
	                return false;
	            }

	            while (!found && elements.length > 0) {
	                item = elements.pop();
	                found = draggable !== item && inSameContainer({
	                    source: draggable,
	                    target: item,
	                    sourceIndex: this._index(draggable),
	                    targetIndex: this._index(item)
	                });
	            }

	            return !found;
	        },

	        _dropTargetAllowed: function(dropTarget) {
	            var inSameContainer = this.options.inSameContainer,
	                dragOverContainers = this.options.dragOverContainers,
	                draggable = this._draggable;

	            if (draggable[0] === dropTarget[0]) {
	                return false;
	            }

	            if (!inSameContainer || !dragOverContainers) {
	                return true;
	            }

	            if (inSameContainer({ source: draggable,
	                target: dropTarget,
	                sourceIndex: this._index(draggable),
	                targetIndex: this._index(dropTarget)
	            })) {
	                return true;
	            }

	            return dragOverContainers(this._index(draggable), this._index(dropTarget));
	        },

	        _index: function(element) {
	            return this._elements.index(element);
	        },

	        destroy: function() {
	           var that = this;

	           Widget.fn.destroy.call(that);

	           that.element.find(that.draggable.options.filter).each(function() {
	               var item = $(this);
	               if (item.data("kendoDropTarget")) {
	                   item.data("kendoDropTarget").destroy();
	               }
	           });

	           if (that.draggable) {
	               that.draggable.destroy();

	               that.draggable.element = that.draggable = null;
	           }
	           that.elements = that.reorderDropCue = that._elements = that._draggable = null;
	       }
	    });

	    kendo.ui.plugin(Reorderable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));



/***/ }

/******/ });

/***/ }),
/* 132 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.resizable.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(816);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 619:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.draganddrop */ 7);

/***/ },

/***/ 816:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(619) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "resizable",
	    name: "Resizable",
	    category: "framework",
	    depends: [ "core", "draganddrop" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        proxy = $.proxy,
	        isFunction = kendo.isFunction,
	        extend = $.extend,
	        HORIZONTAL = "horizontal",
	        VERTICAL = "vertical",
	        START = "start",
	        RESIZE = "resize",
	        RESIZEEND = "resizeend";

	    var Resizable = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            that.orientation = that.options.orientation.toLowerCase() != VERTICAL ? HORIZONTAL : VERTICAL;
	            that._positionMouse = that.orientation == HORIZONTAL ? "x" : "y";
	            that._position = that.orientation == HORIZONTAL ? "left" : "top";
	            that._sizingDom = that.orientation == HORIZONTAL ? "outerWidth" : "outerHeight";

	            that.draggable = new ui.Draggable(options.draggableElement || element, {
	                distance: 1,
	                filter: options.handle,
	                drag: proxy(that._resize, that),
	                dragcancel: proxy(that._cancel, that),
	                dragstart: proxy(that._start, that),
	                dragend: proxy(that._stop, that)
	            });

	            that.userEvents = that.draggable.userEvents;
	        },

	        events: [
	            RESIZE,
	            RESIZEEND,
	            START
	        ],

	        options: {
	            name: "Resizable",
	            orientation: HORIZONTAL
	        },

	        resize: function() {
	            // Overrides base widget resize
	        },

	        _max: function(e) {
	            var that = this,
	                hintSize = that.hint ? that.hint[that._sizingDom]() : 0,
	                size = that.options.max;

	            return isFunction(size) ? size(e) : size !== undefined ? (that._initialElementPosition + size) - hintSize : size;
	        },

	        _min: function(e) {
	            var that = this,
	                size = that.options.min;

	            return isFunction(size) ? size(e) : size !== undefined ? that._initialElementPosition + size : size;
	        },

	        _start: function(e) {
	            var that = this,
	                hint = that.options.hint,
	                el = $(e.currentTarget);

	            that._initialElementPosition = el.position()[that._position];
	            that._initialMousePosition = e[that._positionMouse].startLocation;

	            if (hint) {
	                that.hint = isFunction(hint) ? $(hint(el)) : hint;

	                that.hint.css({
	                    position: "absolute"
	                })
	                .css(that._position, that._initialElementPosition)
	                .appendTo(that.element);
	            }

	            that.trigger(START, e);

	            that._maxPosition = that._max(e);
	            that._minPosition = that._min(e);

	            $(document.body).css("cursor", el.css("cursor"));
	        },

	        _resize: function(e) {
	            var that = this,
	                maxPosition = that._maxPosition,
	                minPosition = that._minPosition,
	                currentPosition = that._initialElementPosition + (e[that._positionMouse].location - that._initialMousePosition),
	                position;

	            position = minPosition !== undefined ? Math.max(minPosition, currentPosition) : currentPosition;
	            that.position = position =  maxPosition !== undefined ? Math.min(maxPosition, position) : position;

	            if(that.hint) {
	                that.hint.toggleClass(that.options.invalidClass || "", position == maxPosition || position == minPosition)
	                         .css(that._position, position);
	            }

	            that.resizing = true;
	            that.trigger(RESIZE, extend(e, { position: position }));
	        },

	        _stop: function(e) {
	            var that = this;

	            if(that.hint) {
	                that.hint.remove();
	            }

	            that.resizing = false;
	            that.trigger(RESIZEEND, extend(e, { position: that.position }));
	            $(document.body).css("cursor", "");
	        },

	        _cancel: function(e) {
	            var that = this;

	            if (that.hint) {
	                that.position = undefined;
	                that.hint.css(that._position, that._initialElementPosition);
	                that._stop(e);
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            if (that.draggable) {
	                that.draggable.destroy();
	            }
	        },

	        press: function(target) {
	            if (!target) {
	                return;
	            }

	            var position = target.position(),
	                that = this;

	            that.userEvents.press(position.left, position.top, target[0]);
	            that.targetPosition = position;
	            that.target = target;
	        },

	        move: function(delta) {
	            var that = this,
	                orientation = that._position,
	                position = that.targetPosition,
	                current = that.position;

	            if (current === undefined) {
	                current = position[orientation];
	            }

	            position[orientation] = current + delta;

	            that.userEvents.move(position.left, position.top);
	        },

	        end: function() {
	            this.userEvents.end();
	            this.target = this.position = undefined;
	        }
	    });

	    kendo.ui.plugin(Resizable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 133 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.agendaview.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(826);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 822:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.view */ 10);

/***/ },

/***/ 826:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(822) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "scheduler.agendaview",
	        name: "Scheduler Agenda View",
	        category: "web",
	        description: "The Scheduler Agenda View",
	        depends: [ "scheduler.view" ],
	        hidden: true
	    };

	    (function($){
	        var kendo = window.kendo,
	            ui = kendo.ui,
	            NS = ".kendoAgendaView";

	        var EVENT_WRAPPER_FORMAT = '<div class="k-task" title="#:title.replace(/"/g,"\'")#" data-#=kendo.ns#uid="#=uid#">' +
	                                   '# if (resources[0]) {#' +
	                                   '<span class="k-scheduler-mark" style="background-color:#=resources[0].color#"></span>' +
	                                   "# } #" +
	                                   "# if (data.isException()) { #" +
	                                   '<span class="k-icon k-i-warning"></span>' +
	                                   '# } else if (data.isRecurring()) {#' +
	                                   '<span class="k-icon k-i-reload"></span>' +
	                                   "# } #" +
	                                   '{0}' +
	                                   '#if (showDelete) {#' +
	                                       '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-i-close"></span></a>' +
	                                   '#}#' +
	                               '</div>';

	            var AgendaGroupedView = kendo.Class.extend({
	    	        init: function(view) {
	    		        this._view = view;
	    	        },

	                _getColumns: function(groupHeaders, columns){
	                    return groupHeaders.concat(columns);
	                }, 
	                _getGroupsInDay: function(){
	                    return [];
	                },

	                _getSumOfItemsForDate: function(){
	                    return 0;
	                },

	                _renderTaskGroupsCells: function(headerCells, groups, taskGroupIndex, taskIndex){
	                    var view = this._view;

	                    if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {
	                         view._renderTaskGroupsCells(headerCells, groups);                             
	                    }
	                },

	                _renderDateCell: function(tableRow, groups, tasks, date, taskGroupIndex, tasksGroups){
	                     var view = this._view;

	                     tableRow.push(kendo.format(
	                        '<td class="k-scheduler-datecolumn{3}{2}" rowspan="{0}">{1}</td>',
	                        tasks.length,
	                        view._dateTemplate({ date: date }),
	                        taskGroupIndex == tasksGroups.length - 1 && !groups.length ? " k-last" : "",
	                        !groups.length ? " k-first" : ""
	                    ));
	                },

	                _renderDates: function (){
	                     return undefined;
	                },

	                _getParents: function (parentGroups){
	                    return parentGroups.splice(0);
	                },

	                _getGroupsByDate: function(){
	                    return undefined;
	                },

	                _renderTaskGroups: function(table, items, parents){
	                    var view = this._view;

	                    table.append(view._renderTaskGroups(items, parents));
	                }

	            });

		        var AgendaGroupedByDateView = kendo.Class.extend({
	                init: function(view) {
	    	            this._view = view;
	                },

	                _getColumns: function(groupHeaders, columns){
	                    var view = this._view;

	                    if (view._isMobilePhoneView()) {
	                        return groupHeaders.concat(columns);
	                    } else {
	                        var date = columns.slice(0, 1);
	                        var columnsWithoutDate = columns.slice(1);

	                        return date.concat(groupHeaders).concat(columnsWithoutDate);
	                    }
	                },

	                _compareDateGroups: function(currentGroup, prevGroup, index){           
	                    if (currentGroup[index].text == prevGroup[index].text) {
	                        if (index === 0) {
	                            return true;
	                        }else {
	                            return this._compareDateGroups(currentGroup, prevGroup, index - 1);
	                        }
	                    }

	                    return false;
	                },

	                _getGroupsInDay: function(tasksGroups, groups){
	                      var groupsInDay = [];
	                      var prevGroup = null;

	                       for (var tasksGroupIdx = 0; tasksGroupIdx < tasksGroups.length; tasksGroupIdx++) {                      
	                            for (var itemsIdx = 0; itemsIdx < tasksGroups[tasksGroupIdx].items.length; itemsIdx++) {
	                                var idx = 0;

	                                if (groupsInDay.length === 0) {                     
	                                    for (idx; idx < groups[tasksGroupIdx].length; idx++) {  
	                                        groupsInDay.push([1]);
	                                    }
	                                } else {
	                                    for (idx; idx < groups[tasksGroupIdx].length; idx++) {                         

	                                        if (this._compareDateGroups(groups[tasksGroupIdx], prevGroup, idx)) {
	                                            groupsInDay[idx][groupsInDay[idx].length - 1]++;
	                                        } else {
	                                            var lastItemValue = groupsInDay[idx][groupsInDay[idx].length - 1] - 1;
	                                            for (var i = 0; i < lastItemValue; i++) {
	                                                groupsInDay[idx].push(0);
	                                            }
	                                            groupsInDay[idx].push(1);
	                                        }
	                                    }
	                                }
	                                prevGroup = groups[tasksGroupIdx];                  
	                            }
	                        }
	                        
	                        return groupsInDay;
	                },

	                _getSumOfItemsForDate: function(tasksGroups){
	                    var sumOfItemsForDate = 0;

	                    for (var i = 0; i < tasksGroups.length; i++) {
	                                
	                        sumOfItemsForDate += tasksGroups[i].items.length;                  
	                    }
	                    return sumOfItemsForDate;
	                },

	                _renderTaskGroupsCells: function(headerCells, groups, taskGroupIndex, taskIndex, groupsInDay, sumOfItemsForDate, date, groupsRowSpanIndex){
	                    var view = this._view;
	                    var isPhoneView = view._isMobilePhoneView();

	                     if(!isPhoneView){                        
	                        if (taskGroupIndex === 0 && taskIndex === 0 ) {                  
	                            headerCells.push(kendo.format(
	                                '<td class="k-scheduler-datecolumn k-first" rowspan="{0}">{1}</td>',
	                                sumOfItemsForDate,
	                                view._dateTemplate({ date: date })
	                            ));
	                        }

	                        for (var idx = 0; idx < groups[taskGroupIndex].length; idx++) {
	                            if (groupsInDay[idx][groupsRowSpanIndex]) {
	                                headerCells.push(kendo.format(
	                                    '<td class="k-scheduler-groupcolumn" rowspan="{0}">{1}</td>',
	                                    groupsInDay[idx][groupsRowSpanIndex],
	                                    view._groupTemplate({ value: groups[taskGroupIndex][idx].text }),
	                                    groups[taskGroupIndex][idx].className
	                                ));
	                            }                            
	                        }
	                    }else{
	                        if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {
	                            view._renderTaskGroupsCells(headerCells, groups);  
	                        }
	                    }
	                },

	                _renderDateCell: function(){
	                   return undefined;
	                },

	                _renderDates: function(table){
	                    var view = this._view;
	                    var sortedArray = view._groupsByDate.sort(function(a, b) { 
	                        return a.array[0].value.getTime() - b.array[0].value.getTime(); 
	                    });

	                    for (var i = 0; i < sortedArray.length; i++) {
	                        table.append(view._renderTaskGroups(sortedArray[i].array, sortedArray[i].groups));
	                    }
	                },

	                _getParents: function(parentGroups){
	                    return parentGroups.slice(0);
	                },

	                _getGroupsByDate: function(groups, idx, parents){
	                    var view = this._view;

	                    if (groups[idx].items) {
	                        for (var taskGroupIndex = 0; taskGroupIndex < groups[idx].items.length; taskGroupIndex++) {
	                            var date = groups[idx].items[taskGroupIndex].value;
	                            var dateExists = false;

	                            for (var i = 0; i < view._groupsByDate.length; i++) {
	                                if (view._groupsByDate[i].array[0].value.getTime() === date.getTime()) {
	                                    dateExists = true;
	                                    view._groupsByDate[i].array.push(groups[idx].items[taskGroupIndex]);
	                                    view._groupsByDate[i].groups.push(parents);
	                                }
	                            }

	                            if (!dateExists) {
	                                view._groupsByDate.push({
	                                    array: [groups[idx].items[taskGroupIndex]],
	                                    groups: [parents]
	                                });
	                            }
	                        }
	                    }
	                },

	                _renderTaskGroups: function(){
	                    return undefined;
	                }

		        });

		        kendo.ui.scheduler.AgendaGroupedView = AgendaGroupedView;
		        kendo.ui.scheduler.AgendaGroupedByDateView = AgendaGroupedByDateView;


	        ui.AgendaView = ui.SchedulerView.extend({
	            init: function(element, options) {
	                ui.SchedulerView.fn.init.call(this, element, options);

	                this._groupedView = this._getGroupedView();

	                options = this.options;

	                if (options.editable) {
	                    options.editable = $.extend(
	                        { "delete": true },
	                        options.editable,
	                        { create: false, update: false }
	                    );
	                }

	                this.title = options.title;

	                this._eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_FORMAT);
	                this._dateTemplate = kendo.template(options.eventDateTemplate);
	                this._groupTemplate = kendo.template(options.eventGroupTemplate);
	                this._timeTemplate = kendo.template(options.eventTimeTemplate);

	                this.element.on("mouseenter" + NS, ".k-scheduler-agenda .k-scheduler-content tr", "_mouseenter")
	                            .on("mouseleave" + NS, ".k-scheduler-agenda .k-scheduler-content tr", "_mouseleave")
	                            .on("click" + NS, ".k-scheduler-agenda .k-scheduler-content .k-link:has(.k-i-close)", "_remove");

	                this._renderLayout(options.date);
	            },

	            name: "agenda",

	             _getGroupedView: function() {           
	                if (this._isGroupedByDate()) {
	                       return new kendo.ui.scheduler.AgendaGroupedByDateView(this);
	                } else {
	                       return new kendo.ui.scheduler.AgendaGroupedView(this);
	                }
	            },

	            _mouseenter: function(e) {
	                $(e.currentTarget).addClass("k-state-hover");
	            },

	            _mouseleave: function(e) {
	                $(e.currentTarget).removeClass("k-state-hover");
	            },

	            _remove: function(e) {
	                e.preventDefault();

	                this.trigger("remove", {
	                    uid: $(e.currentTarget).closest(".k-task").attr(kendo.attr("uid"))
	                });
	            },

	            nextDate: function() {
	                return kendo.date.nextDay(this.startDate());
	            },

	            startDate: function() {
	                return this._startDate;
	            },

	            endDate: function() {
	                return this._endDate;
	            },

	            previousDate: function() {
	                return kendo.date.previousDay(this.startDate());
	            },

	            _renderLayout: function(date) {
	                this._startDate = date;
	                this._endDate = kendo.date.addDays(date, 7);
	                this.createLayout(this._layout());
	                this.table.addClass("k-scheduler-agenda");
	            },

	            _layout: function() {
	                var columns = [
	                        { text: this.options.messages.time, className: "k-scheduler-timecolumn" },
	                        { text: this.options.messages.event }
	                ];

	                if (!this._isMobilePhoneView()) {
	                    columns.splice(0, 0, { text: this.options.messages.date, className: "k-scheduler-datecolumn" });
	                }

	                var resources = this.groupedResources;
	                if (resources.length) {
	                    var groupHeaders = [];
	                    for (var idx = 0; idx < resources.length; idx++) {
	                        groupHeaders.push({ text: "", className: "k-scheduler-groupcolumn"});
	                    }

	                    columns = this._groupedView._getColumns(groupHeaders, columns);                 
	                }

	                return {
	                    columns: columns
	                };
	            },

	            _tasks: function(events) {
	                var tasks = [];

	                for (var idx = 0; idx < events.length; idx++) {
	                    var event = events[idx];
	                    var start = event.start;
	                    var end = event.isAllDay ? kendo.date.getDate(event.end) : event.end;

	                    var eventDurationInDays = Math.ceil((end - kendo.date.getDate(start)) / kendo.date.MS_PER_DAY);

	                    if (event.isAllDay) {
	                        eventDurationInDays += 1;
	                    }

	                    var task = event.clone();
	                    task.startDate = kendo.date.getDate(start);

	                    if (task.startDate >= this.startDate()) {
	                        tasks.push(task);
	                    }

	                    if (eventDurationInDays > 1) {
	                        task.end = kendo.date.nextDay(start);
	                        task.head = true;
	                        for (var day = 1; day < eventDurationInDays; day++) {
	                            start = task.end;
	                            task = event.clone();                           
	                            task.start = task.startDate = kendo.date.getDate(start);
	                            task.end = kendo.date.nextDay(start);
	                            if (day == eventDurationInDays - 1) {
	                                task.end = new Date(task.start.getFullYear(), task.start.getMonth(), task.start.getDate(), end.getHours(), end.getMinutes(), end.getSeconds(), end.getMilliseconds());
	                                task.tail = true;
	                            } else {
	                                task.isAllDay = true;
	                                task.middle = true;
	                            }

	                            if ((kendo.date.getDate(task.end) <= this.endDate() && task.start >= this.startDate()) || kendo.date.getDate(task.start).getTime() == this.endDate().getTime()) {
	                                tasks.push(task);
	                            }
	                        }
	                    }
	                }

	                return new kendo.data.Query(tasks).sort([{ field: "start", dir: "asc" },{ field: "end", dir: "asc" }]).groupBy({field: "startDate"}).toArray();
	            },

	            _renderTaskGroups: function(tasksGroups, groups) {
	                var tableRows = [];
	                var editable = this.options.editable;
	                var showDelete = editable && editable.destroy !== false && !this._isMobile();
	                var isPhoneView = this._isMobilePhoneView();
	                var sumOfItemsForDate = this._groupedView._getSumOfItemsForDate(tasksGroups);
	                var groupsInDay = this._groupedView._getGroupsInDay(tasksGroups, groups);
	                var groupsRowSpanIndex = 0;               

	                for (var taskGroupIndex = 0; taskGroupIndex < tasksGroups.length; taskGroupIndex++) {
	                    var date = tasksGroups[taskGroupIndex].value;
	                   
	                    var tasks = tasksGroups[taskGroupIndex].items;

	                    var today = kendo.date.isToday(date);

	                    for (var taskIndex = 0; taskIndex < tasks.length; taskIndex++) {
	                        var task = tasks[taskIndex];

	                        var tableRow = [];

	                        var headerCells = !isPhoneView ? tableRow : [];

	                        this._groupedView._renderTaskGroupsCells(headerCells, groups, taskGroupIndex, taskIndex, groupsInDay, sumOfItemsForDate, date, groupsRowSpanIndex);

	                        groupsRowSpanIndex++;
	                        if (taskIndex === 0) {
	                            if (isPhoneView) {
	                                headerCells.push(kendo.format(
	                                    '<td class="k-scheduler-datecolumn" colspan="2">{0}</td>',
	                                    this._dateTemplate({ date: date })
	                                ));

	                                tableRows.push('<tr role="row" aria-selected="false"' + (today ? ' class="k-today">' : ">") + headerCells.join("")  + "</tr>");
	                            } else {
	                                this._groupedView._renderDateCell(tableRow, groups, tasks, date, taskGroupIndex, tasksGroups);
	                            }
	                        }

	                        if (task.head) {
	                            task.format = "{0:t}";
	                        } else if (task.tail) {
	                            task.format = "{1:t}";
	                        } else {
	                            task.format = "{0:t}-{1:t}";
	                        }

	                        task.resources = this.eventResources(task);

	                        tableRow.push(kendo.format(
	                            '<td class="k-scheduler-timecolumn"><div>{0}{1}{2}</div></td><td>{3}</td>',
	                            task.tail || task.middle ? '<span class="k-icon k-i-arrow-60-left"></span>' : "",
	                            this._timeTemplate(task.clone({ start: task._startTime || task.start, end: task.endTime || task.end })),
	                            task.head || task.middle ? '<span class="k-icon k-i-arrow-60-right"></span>' : "",
	                            this._eventTemplate(task.clone({ showDelete: showDelete }))
	                        ));

	                        tableRows.push('<tr role="row" aria-selected="false"' + (today ? ' class="k-today">' : ">") + tableRow.join("") + "</tr>");
	                    }
	                }

	                return tableRows.join("");
	            },

	            _renderTaskGroupsCells: function (headerCells, groups){
	                 for (var idx = 0; idx < groups.length; idx++) {
	                    headerCells.push(kendo.format(
	                        '<td class="k-scheduler-groupcolumn{2}" rowspan="{0}">{1}</td>',
	                        groups[idx].rowSpan,
	                        this._groupTemplate({ value: groups[idx].text }),
	                        groups[idx].className
	                    ));
	                }
	            },

	            render: function(events) {
	                var table = this.content.find("table").empty();
	                var groups = [];

	                if (events.length > 0) {
	                    var resources = this.groupedResources;

	                    if (resources.length) {
	                        groups = this._createGroupConfiguration(events, resources, null);
	                        this._groupsByDate = [];
	                        this._renderGroups(groups, table, []);
	                        this._groupedView._renderDates(table);
	                    } else {
	                        groups = this._tasks(events);
	                        table.append(this._renderTaskGroups(groups, []));
	                    }
	                }

	                var items = this._eventsList = flattenTaskGroups(groups);
	                this._angularItems(table, items);

	                this.refreshLayout();
	                this.trigger("activate");
	            },

	            _angularItems: function(table, items) {
	                this.angular("compile", function(){
	                    var data = [], elements = items.map(function(item){
	                        data.push({ dataItem: item });
	                        return table.find(".k-task[" + kendo.attr("uid") + "=" + item.uid + "]");
	                    });
	                    return { elements: elements, data: data };
	                });
	            },

	            _renderGroups: function(groups, table, parentGroups) {
	                for (var idx = 0, length = groups.length; idx < length; idx++) {
	                    var parents = this._groupedView._getParents(parentGroups);

	                    parents.push(groups[idx]);
	                    this._groupedView._getGroupsByDate(groups, idx, parents);

	                    if (groups[idx].groups) {
	                        this._renderGroups(groups[idx].groups, table, parents);
	                    } else {
	                        this._groupedView._renderTaskGroups(table, groups[idx].items, parents);  
	                    }
	                }
	            },

	            _createGroupConfiguration: function(events, resources, parent) {
	                var resource = resources[0];
	                var configuration = [];
	                var data = resource.dataSource.view();
	                var isPhoneView = this._isMobilePhoneView();

	                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
	                    var value = resourceValue(resource, data[dataIndex]);

	                    var tmp = new kendo.data.Query(events).filter({ field: resource.field, operator: ui.SchedulerView.groupEqFilter(value) }).toArray();

	                    if (tmp.length) {
	                        var tasks = this._tasks(tmp);
	                        var className = parent ? "" : " k-first";

	                        if (dataIndex === data.length - 1 && (!parent || parent.className.indexOf("k-last") > -1)) {
	                            className += " k-last";
	                        }

	                        var obj = {
	                            text: kendo.getter(resource.dataTextField)(data[dataIndex]),
	                            value: value,
	                            rowSpan: 0,
	                            className: className
	                        };

	                        if (resources.length > 1) {
	                            obj.groups = this._createGroupConfiguration(tmp, resources.slice(1), obj);
	                            if (parent) {
	                                parent.rowSpan += obj.rowSpan;
	                            }
	                        } else {
	                            obj.items = tasks;
	                            var span = rowSpan(obj.items);

	                            if (isPhoneView) {
	                                span += obj.items.length;
	                            }

	                            obj.rowSpan = span;
	                            if (parent) {
	                                parent.rowSpan += span;
	                            }
	                        }
	                        configuration.push(obj);
	                    }
	                }

	                return configuration;
	            },

	            selectionByElement: function(cell) {
	                var index, event;
	                cell = $(cell);
	                if (cell.hasClass("k-scheduler-datecolumn") || !this._eventsList.length) {
	                    return;
	                }

	                if (cell.is(".k-task")) {
	                    cell = cell.closest("td");
	                }

	                if (this._isMobile()) {
	                    var parent = cell.parent();
	                    index = parent.parent().children()
	                        .filter(function() {
	                            return $(this).children(":not(.k-scheduler-datecolumn)").length;
	                        })
	                        .index(parent);
	                } else {
	                    index = cell.parent().index();
	                }

	                event = this._eventsList[index];

	                return {
	                    index: index,
	                    start: event.start,
	                    end: event.end,
	                    isAllDay: event.isAllDay,
	                    uid: event.uid
	                };
	            },

	            select: function(selection) {
	                this.clearSelection();

	                var row = this.table
	                    .find(".k-task")
	                    .eq(selection.index)
	                    .closest("tr")
	                    .addClass("k-state-selected")
	                    .attr("aria-selected", true)[0];

	                this.current(row);
	            },

	            move: function(selection, key) {
	                var handled = false;
	                var index = selection.index;

	                if (key == kendo.keys.UP) {
	                    index --;
	                    handled = true;
	                } else  if (key == kendo.keys.DOWN) {
	                    index ++;
	                    handled = true;
	                }

	                if (handled) {
	                    var event = this._eventsList[index];
	                    if (event) {
	                        selection.start = event.start;
	                        selection.end = event.end;
	                        selection.isAllDay = event.isAllDay;
	                        selection.events = [ event.uid ];
	                        selection.index = index;
	                    }
	                }

	                return handled;
	            },

	            moveToEvent: function() {
	                return false;
	            },

	            constrainSelection: function(selection) {
	                var event = this._eventsList[0];
	                if (event) {
	                    selection.start = event.start;
	                    selection.end = event.end;
	                    selection.isAllDay = event.isAllDay;
	                    selection.events = [ event.uid ];
	                    selection.index = 0;
	                }
	            },

	            isInRange: function() {
	                return true;
	            },

	            destroy: function(){
	                if (this.element) {
	                    this.element.off(NS);
	                }

	                ui.SchedulerView.fn.destroy.call(this);
	            },

	            options: {
	                title: "Agenda",
	                name: "agenda",
	                editable: true,
	                selectedDateFormat: "{0:D}-{1:D}",
	                selectedShortDateFormat: "{0:d} - {1:d}",
	                eventTemplate: "#:title#",
	                eventTimeTemplate: "#if(data.isAllDay) {#" +
	                                '#=this.options.messages.allDay#' +
	                              "#} else { #" +
	                                '#=kendo.format(format, start, end)#' +
	                              "# } #",
	                eventDateTemplate: '<strong class="k-scheduler-agendaday">' +
	                                '#=kendo.toString(date, "dd")#' +
	                              '</strong>' +
	                              '<em class="k-scheduler-agendaweek">' +
	                                  '#=kendo.toString(date,"dddd")#' +
	                              '</em>' +
	                              '<span class="k-scheduler-agendadate">' +
	                                  '#=kendo.toString(date, "y")#' +
	                                  '</span>',
	                eventGroupTemplate: '<strong class="k-scheduler-adgendagroup">' +
	                                '#=value#' +
	                              '</strong>',
	                messages: {
	                    event: "Event",
	                    date: "Date",
	                    time: "Time",
	                    allDay: "all day"
	                }
	            }
	        });

	        function rowSpan(tasks) {
	            var result = 0;

	            for (var idx = 0, length = tasks.length; idx < length; idx++) {
	                result += tasks[idx].items.length;
	            }

	            return result;
	        }

	        function resourceValue(resource, item) {
	            if (resource.valuePrimitive) {
	                item = kendo.getter(resource.dataValueField)(item);
	            }
	            return item;
	        }

	        function flattenTaskGroups(groups) {
	            var idx = 0,
	                length = groups.length,
	                item,
	                result = [];

	            for ( ; idx < length; idx ++) {
	                item = groups[idx];
	                if (item.groups) {
	                    item = flattenGroup(item.groups);
	                    result = result.concat(item);
	                } else {
	                    result = result.concat(flattenGroup(item.items));
	                }
	            }

	            return result;
	        }

	        function flattenGroup(groups) {
	            var items = [].concat(groups),
	                item = items.shift(),
	                result = [],
	                push = [].push;
	            while (item) {
	                if (item.groups) {
	                    push.apply(items, item.groups);
	                } else if (item.items) {
	                    push.apply(items, item.items);
	                } else {
	                    push.call(result, item);
	                }

	                item = items.shift();
	            }

	            return result;
	        }

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 134 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.dayview.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(827);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 822:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.view */ 10);

/***/ },

/***/ 827:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(822) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "scheduler.dayview",
	    name: "Scheduler Day View",
	    category: "web",
	    description: "The Scheduler Day View",
	    depends: [ "scheduler.view" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        setTime = kendo.date.setTime,
	        SchedulerView = ui.SchedulerView,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        extend = $.extend,
	        proxy = $.proxy,
	        getDate = kendo.date.getDate,
	        MS_PER_MINUTE = kendo.date.MS_PER_MINUTE,
	        MS_PER_DAY = kendo.date.MS_PER_DAY,
	        CURRENT_TIME_MARKER_CLASS = "k-current-time",
	        CURRENT_TIME_MARKER_ARROW_CLASS = "k-current-time-arrow",
	        BORDER_SIZE_COEFF = 0.8666,
	        getMilliseconds = kendo.date.getMilliseconds,
	        NS = ".kendoMultiDayView";

	    var DAY_VIEW_EVENT_TEMPLATE = kendo.template('<div title="(#=kendo.format("{0:t} - {1:t}", start, end)#): #=title.replace(/"/g,"&\\#34;")#">' +
	                    '<div class="k-event-template k-event-time">#:kendo.format("{0:t} - {1:t}", start, end)#</div>' +
	                    '<div class="k-event-template">${title}</div>' +
	                '</div>'),
	        DAY_VIEW_ALL_DAY_EVENT_TEMPLATE = kendo.template('<div title="(#=kendo.format("{0:t}", start)#): #=title.replace(/"/g,"&\\#34;")#">' +
	                    '<div class="k-event-template">${title}</div>' +
	                '</div>'),
	        DATA_HEADER_TEMPLATE = kendo.template("<span class='k-link k-nav-day'>#=kendo.toString(date, 'ddd M/dd')#</span>"),
	        ALLDAY_EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" ' +
	                'data-#=ns#uid="#=uid#"' +
	                '#if (resources[0]) { #' +
	                    'style="background-color:#=resources[0].color#; border-color: #=resources[0].color#"' +
	                    'class="k-event#=inverseColor ? " k-event-inverse" : ""#" ' +
	                '#} else {#' +
	                    'class="k-event"' +
	                '#}#' +
	                '>' +
	                '<span class="k-event-actions">' +
	                    '# if(data.tail || data.middle) {#' +
	                        '<span class="k-icon k-i-arrow-60-left"></span>' +
	                    '#}#' +
	                    '# if(data.isException()) {#' +
	                        '<span class="k-icon k-i-warning"></span>' +
	                    '# } else if(data.isRecurring()) {#' +
	                        '<span class="k-icon k-i-reload"></span>' +
	                    '# } #' +
	                '</span>' +
	                '{0}' +
	                '<span class="k-event-actions">' +
	                    '#if (showDelete) {#' +
	                        '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-i-close"></span></a>' +
	                    '#}#' +
	                    '# if(data.head || data.middle) {#' +
	                        '<span class="k-icon k-i-arrow-60-right"></span>' +
	                    '#}#' +
	                '</span>' +
	                '#if(resizable && !singleDay && !data.tail && !data.middle){#' +
	                '<span class="k-resize-handle k-resize-w"></span>' +
	                '#}#' +
	                '#if(resizable && !singleDay && !data.head && !data.middle){#' +
	                '<span class="k-resize-handle k-resize-e"></span>' +
	                '#}#' +
	                '</div>',
	        EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" ' +
	                'data-#=ns#uid="#=uid#" ' +
	                '#if (resources[0]) { #' +
	                    'style="background-color:#=resources[0].color #; border-color: #=resources[0].color#"' +
	                    'class="k-event#=inverseColor ? " k-event-inverse" : ""#"' +
	                '#} else {#' +
	                    'class="k-event"' +
	                '#}#' +
	                '>' +
	                 '<span class="k-event-actions">' +
	                    '# if(data.isException()) {#' +
	                        '<span class="k-icon k-i-warning"></span>' +
	                    '# } else if(data.isRecurring()) {#' +
	                        '<span class="k-icon k-i-reload"></span>' +
	                    '# } #' +
	                '</span>' +
	                '{0}' +
	                '<span class="k-event-actions">' +
	                    '#if (showDelete) {#' +
	                        '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-i-close"></span></a>' +
	                    '#}#' +
	                '</span>' +
	                '<span class="k-event-top-actions">' +
	                    '# if(data.tail || data.middle) {#' +
	                    '<span class="k-icon k-i-arrow-60-up"></span>' +
	                    '# } #' +
	                '</span>' +
	                '<span class="k-event-bottom-actions">' +
	                    '# if(data.head || data.middle) {#' +
	                        '<span class="k-icon k-i-arrow-60-down"></span>' +
	                    '# } #' +
	                '</span>' +
	                '# if(resizable && !data.tail && !data.middle) {#' +
	                '<span class="k-resize-handle k-resize-n"></span>' +
	                '# } #' +
	                '# if(resizable && !data.head && !data.middle) {#' +
	                    '<span class="k-resize-handle k-resize-s"></span>' +
	                '# } #' +
	                '</div>';

	    function toInvariantTime(date) {
	        var staticDate = new Date(1980, 1, 1, 0, 0, 0);
	        setTime(staticDate, getMilliseconds(date));
	        return staticDate;
	    }

	    function isInDateRange(value, min, max) {
	        return value >= min && value <= max;
	    }

	    function isInTimeRange(value, min, max, overlaps) {
	        overlaps = overlaps ? value <= max : value < max;
	        return value > min && overlaps;
	    }

	    function addContinuousEvent(group, range, element, isAllDay) {
	        var events = group._continuousEvents;
	        var lastEvent = events[events.length - 1];
	        var startDate = getDate(range.start.startDate()).getTime();

	        //this handles all day event which is over multiple slots but starts
	        //after one of the time events
	        if (isAllDay && lastEvent &&
	            getDate(lastEvent.start.startDate()).getTime() == startDate) {

	                var idx = events.length - 1;
	                for ( ; idx > -1; idx --) {
	                    if (events[idx].isAllDay ||
	                        getDate(events[idx].start.startDate()).getTime() < startDate) {
	                            break;
	                        }
	                }

	                events.splice(idx + 1, 0, {
	                    element: element,
	                    isAllDay: true,
	                    uid: element.attr(kendo.attr("uid")),
	                    start: range.start,
	                    end: range.end
	                });
	            } else {
	                events.push({
	                    element: element,
	                    isAllDay: isAllDay,
	                    uid: element.attr(kendo.attr("uid")),
	                    start: range.start,
	                    end: range.end
	                });
	            }
	    }

	    function getWorkDays(options) {
	        var workDays = [];
	        var dayIndex = options.workWeekStart;

	        workDays.push(dayIndex);

	        while(options.workWeekEnd != dayIndex) {
	            if(dayIndex > 6 ) {
	                dayIndex -= 7;
	            } else {
	                dayIndex++;
	            }
	            workDays.push(dayIndex);
	        }
	        return workDays;
	    }

	    var MultiDayView = SchedulerView.extend({
	        init: function(element, options) {
	            var that = this;

	            SchedulerView.fn.init.call(that, element, options);

	            that.title = that.options.title || that.options.name;

	            that._workDays = getWorkDays(that.options);

	            that._templates();

	            that._editable();

	            that.calculateDateRange();

	            that._groups();

	            that._currentTime(true);
	        },

	        _currentTimeMarkerUpdater: function() {
	            this._updateCurrentTimeMarker(new Date());
	        },

	        _updateCurrentTimeMarker: function(currentTime) {
	            var options = this.options;

	            if(options.currentTimeMarker.useLocalTimezone === false) {
	                var timezone = options.dataSource.options.schema.timezone;

	                if(options.dataSource && timezone) {
	                   var timezoneOffset = kendo.timezone.offset(currentTime, timezone);
	                   currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);
	                }
	            }

	            this.times.find("." + CURRENT_TIME_MARKER_CLASS).remove();
	            this.content.find("." + CURRENT_TIME_MARKER_CLASS).remove();

	            var groupsCount = !options.group || options.group.orientation == "horizontal" ? 1 : this.groups.length;
	            var firstTimesCell = this.times.find("tr:first th:first");
	            var lastTimesCell = this.times.find("tr:first th:last");

	            for(var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
	                var currentGroup = this.groups[groupIndex];

	                if (!currentGroup) {
	                    return;
	                }

	                var utcCurrentTime = kendo.date.toUtcTime(currentTime);
	                var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);

	                if(ranges.length === 0) {
	                    return;
	                }

	                var collection = ranges[0].collection;
	                var slotElement = collection.slotByStartDate(currentTime);

	                if(slotElement) {
	                    var elementHtml = "<div class='" + CURRENT_TIME_MARKER_CLASS + "'></div>";
	                    var timesTableMarker = $(elementHtml).prependTo(this.times);
	                    var markerTopPosition = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).top);
	                    var timesTableMarkerCss = {};

	                    if (this._isRtl) {
	                        timesTableMarkerCss.right = firstTimesCell.position().left + outerHeight(firstTimesCell) - outerHeight(lastTimesCell);
	                        timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + "-left");
	                    } else {
	                        timesTableMarkerCss.left = lastTimesCell.position().left;
	                        timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + "-right");
	                    }

	                    timesTableMarkerCss.top = markerTopPosition - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2);

	                    timesTableMarker.css(timesTableMarkerCss);

	                    $(elementHtml).prependTo(this.content).css({
	                        top: markerTopPosition,
	                        height: "1px",
	                        right: "1px",
	                        width: this.content[0].scrollWidth,
	                        left: 0
	                    });
	                }
	            }
	        },

	        _currentTime: function(setUpdateTimer) {
	            var that = this;
	            var markerOptions = that.options.currentTimeMarker;

	            if (markerOptions !== false && markerOptions.updateInterval !== undefined) {
	                that._currentTimeMarkerUpdater();

	                if (setUpdateTimer) {
	                    that._currentTimeUpdateTimer = setInterval(proxy(this._currentTimeMarkerUpdater, that), markerOptions.updateInterval);
	                }
	            }
	        },

	        _updateResizeHint: function(event, groupIndex, startTime, endTime) {
	            var multiday = event.isMultiDay();

	            var group = this.groups[groupIndex];

	            var ranges = group.ranges(startTime, endTime, multiday, event.isAllDay);
	            var width, height, top, hint;

	            this._removeResizeHint();

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                var range = ranges[rangeIndex];
	                var start = range.startSlot();

	                if (this._isGroupedByDate() && multiday) {
	                    for (var slotIdx = start.index; slotIdx <= range.end.index; slotIdx++) {
	                        var slot = range.collection._slots[slotIdx];
	                        width = slot.offsetWidth;
	                        height = slot.clientHeight;
	                        top = slot.offsetTop;

	                        hint = SchedulerView.fn._createResizeHint.call(this,
	                            slot.offsetLeft,
	                            top,
	                            width,
	                            height
	                        );

	                        this._resizeHint = this._resizeHint.add(hint);
	                    }
	                } else {
	                    width = start.offsetWidth;
	                    height = start.clientHeight;
	                    top = start.offsetTop;

	                    if (multiday) {
	                        width = range.innerWidth();
	                    } else {
	                        var rect = range.outerRect(startTime, endTime, this.options.snap);
	                        top = rect.top;
	                        height = rect.bottom - rect.top;
	                    }

	                    hint = SchedulerView.fn._createResizeHint.call(this,
	                        start.offsetLeft,
	                        top,
	                        width,
	                        height
	                    );

	 	               this._resizeHint = this._resizeHint.add(hint);
	                }
	            }

	            var format = "t";
	            var container = this.content;

	            if (multiday) {
	                format = "M/dd";
	                container = this.element.find(".k-scheduler-header-wrap:has(.k-scheduler-header-all-day) > div");
	                if (!container.length) {
	                    container = this.content;
	                }
	            }

	            this._resizeHint.appendTo(container);

	            this._resizeHint.find(".k-label-top,.k-label-bottom").text("");

	            this._resizeHint.first().addClass("k-first").find(".k-label-top").text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));

	            this._resizeHint.last().addClass("k-last").find(".k-label-bottom").text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));
	        },

	        _updateMoveHint: function(event, groupIndex, distance) {
	            var multiday = event.isMultiDay();

	            var group = this.groups[groupIndex];

	            var start = kendo.date.toUtcTime(event.start) + distance;

	            var end = start + event.duration();

	            var ranges = group.ranges(start, end, multiday, event.isAllDay);

	            start = kendo.timezone.toLocalDate(start);

	            end = kendo.timezone.toLocalDate(end);

	            this._removeMoveHint();

	            if (!multiday && (getMilliseconds(end) === 0 || getMilliseconds(end) < getMilliseconds(this.startTime()))) {
	                if (ranges.length > 1) {
	                    ranges.pop();
	                }
	            }

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                var range = ranges[rangeIndex];
	                var startSlot = range.start;
	                var hint;
	                var css = {
	                    left: startSlot.offsetLeft + 2,
	                    top: startSlot.offsetTop
	                };

	                if (this._isGroupedByDate() && multiday) {               
	                    for (var slotIdx = startSlot.index; slotIdx <= range.end.index; slotIdx++) {
	                        var slot = range.collection._slots[slotIdx];

	                        css.left = this._isRtl ? slot.clientWidth * 0.1 + slot.offsetLeft + 2 : slot.offsetLeft + 2;                      
	                        css.height = slot.offsetHeight;
	                        css.width = slot.clientWidth * 0.9 - 4;

	                        hint = this._createEventElement(event.clone({ start: start, end: end }), !multiday);

	                        this._appendMoveHint(hint, css);
	                    }
	                } else {
	                    if (this._isRtl) {
	                       css.left = startSlot.clientWidth * 0.1 + startSlot.offsetLeft + 2;
	                    }

	                    if (multiday) {
	                        css.width = range.innerWidth() - 4;
	                    } else {
	                        var rect = range.outerRect(start, end, this.options.snap);
	                        css.top = rect.top;
	                        css.height = rect.bottom - rect.top;
	                        css.width = startSlot.clientWidth * 0.9 - 4;
	                    }

	                      hint = this._createEventElement(event.clone({ start: start, end: end }), !multiday);

	                      this._appendMoveHint(hint, css);
	                }
	            }

	            var content = this.content;

	            if (multiday) {
	                content = this.element.find(".k-scheduler-header-wrap:has(.k-scheduler-header-all-day) > div");
	                if (!content.length) {
	                    content = this.content;
	                }
	            }

	            this._moveHint.appendTo(content);
	        },

	        _appendMoveHint: function(hint, css) {
	            hint.addClass("k-event-drag-hint");
	            hint.css(css);

	            this._moveHint = this._moveHint.add(hint);
	       },

	       _slotByPosition: function(x, y) {
	           var slot, offset;

	           if (this._isVerticallyGrouped()) {
	               offset = this.content.offset();
	               y += this.content[0].scrollTop;
	               x += this.content[0].scrollLeft;
	           } else {
	               offset = this.element.find(".k-scheduler-header-wrap:has(.k-scheduler-header-all-day)").find(">div").offset();
	           }

	           if (offset) {
	               x -= offset.left;
	               y -= offset.top;
	           }

	           x = Math.ceil(x);
	           y = Math.ceil(y);

	           var group;
	           var groupIndex;

	           for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
	                group = this.groups[groupIndex];

	                slot = group.daySlotByPosition(x, y, this._isGroupedByDate());

	                if (slot) {
	                    return slot;
	                }
	           }

	           if (offset) {
	               x += offset.left;
	               y += offset.top;
	           }

	           offset = this.content.offset();

	           x -= offset.left;
	           y -= offset.top;

	           if (!this._isVerticallyGrouped()) {
	               y += this.content[0].scrollTop;
	               x += this.content[0].scrollLeft;
	           }

	           x = Math.ceil(x);
	           y = Math.ceil(y);

	           for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
	                group = this.groups[groupIndex];

	                slot = group.timeSlotByPosition(x, y);

	                if (slot) {
	                    return slot;
	                }
	           }

	           return null;
	       },

	       _groupCount: function() {
	            var resources = this.groupedResources;
	            var byDate = this._isGroupedByDate();

	            if (resources.length) {
	                if (this._groupOrientation() === "vertical") {
	                    if (byDate) {
	                        return this._columnCountForLevel(resources.length - 1);
	                    } else {
	                        return this._rowCountForLevel(resources.length - 1);
	                    }
	                } else {
	                    if (byDate) {
	                        return this._columnCountForLevel(resources.length) / this._columnCountForLevel(0);
	                    } else {
	                          return this._columnCountForLevel(resources.length) / this._columnOffsetForResource(resources.length);
	                    }
	                }
	            }
	            return 1;
	        },

	        _columnCountInResourceView: function() {
	            var resources = this.groupedResources;
	            var byDate = this._isGroupedByDate();

	            if (!resources.length || this._isVerticallyGrouped()) {
	                if (byDate) {
	                     return this._rowCountForLevel(0);
	                } else {
	                     return this._columnCountForLevel(0);
	                }
	            }

	            if (byDate) {
	                return this._columnCountForLevel(0);
	            } else {
	                return this._columnOffsetForResource(resources.length);
	            }
	        },

	        _timeSlotGroups: function(groupCount, columnCount) {
	            var interval = this._timeSlotInterval();
	            var verticalViews = groupCount;
	            var byDate = this._isGroupedByDate();
	            var tableRows = this.content.find("tr:not(.k-scheduler-header-all-day)");        
	            var group, time, rowIndex, cellIndex;

	            tableRows.attr("role", "row");

	            var rowCount = tableRows.length;

	            if (this._isVerticallyGrouped()) {
	                if (byDate) {
	                    verticalViews = columnCount;
	                }
	                rowCount = Math.floor(rowCount / verticalViews);
	            }                

	            for (var groupIndex = 0; groupIndex < verticalViews; groupIndex++) {   
	                var rowMultiplier = 0;
	                var cellMultiplier = 0;    

	                if (this._isVerticallyGrouped()) {
	                    rowMultiplier = groupIndex;
	                } else{
	                    cellMultiplier = groupIndex;
	                }

	                rowIndex = rowMultiplier * rowCount;         

	              while (rowIndex < (rowMultiplier + 1) * rowCount) {
	                    var cells = tableRows[rowIndex].children;                   

	                    if (rowIndex % rowCount === 0) {
	                        time = getMilliseconds(new Date(+this.startTime()));
	                    }

	                    var timeIndex = 0;
	                    if(byDate){                      
	                        if (this._isVerticallyGrouped()) {                           
	                            for (cellIndex = 0; cellIndex < groupCount; cellIndex++) {
	                                group = this.groups[cellIndex];
	                                this._addTimeSlotGroup(group, cells, cellIndex, time, interval, groupIndex);
	                            }
	                        } else {
	                            group = this.groups[groupIndex];
	                            for (cellIndex = cellMultiplier; cellIndex < groupCount * columnCount; cellIndex=cellIndex + groupCount) {
	                                this._addTimeSlotGroup(group, cells, cellIndex, time, interval, timeIndex);
	                                timeIndex++;
	                            }
	                        }                      
	                    } else {
	                        group = this.groups[groupIndex];
	                        for (cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {
	                          
	                            this._addTimeSlotGroup(group, cells, cellIndex, time, interval,  timeIndex);
	                             timeIndex++;
	                        }
	                    }            

	                    time += interval;
	                    rowIndex ++;
	                }
	            }
	        },

	        _addTimeSlotGroup: function(group, cells, cellIndex, time, interval, timeIndex) {
	              var cell = cells[cellIndex];                       
	              var collection = group.getTimeSlotCollection(timeIndex);
	              var currentDate = this._dates[timeIndex];
	              var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
	              var start = currentTime + time;
	              var end = start + interval;

	              cell.setAttribute("role", "gridcell");
	              cell.setAttribute("aria-selected", false);

	              collection.addTimeSlot(cell, start, end);
	        },

	         _addDaySlotGroup: function(collection, cells, cellIndex, columnCount, cellCount) {
	                var cell = cells[cellIndex];
	                var start = this._dates[cellCount];
	                var currentTime = Date.UTC(start.getFullYear(), start.getMonth(), start.getDate());  

	                cell.setAttribute("role", "gridcell");
	                cell.setAttribute("aria-selected", false);
	                collection.addDaySlot(cell, currentTime, currentTime + kendo.date.MS_PER_DAY);
	        },

	        _daySlotGroups: function(groupCount, columnCount) {
	            var tableRows, cellIndex;
	            var verticalViews = groupCount;
	            var byDate = this._isGroupedByDate();

	            if (this._isVerticallyGrouped()) {
	                if (byDate) {
	                    verticalViews = columnCount;
	                }
	                tableRows = this.element.find(".k-scheduler-header-all-day");
	            } else {
	                tableRows = this.element.find(".k-scheduler-header-all-day tr");
	            }

	            tableRows.attr("role", "row");

	            for (var groupIndex = 0; groupIndex < verticalViews; groupIndex++) {
	                var rowMultiplier = 0;
	                var group, collection;

	                if (this._isVerticallyGrouped()) {
	                    rowMultiplier = groupIndex;
	                }

	                var cells = tableRows[rowMultiplier].children;
	                var cellMultiplier = 0;

	                if (!this._isVerticallyGrouped()) {
	                    cellMultiplier = groupIndex;
	                }

	                var cellCount = 0;
	                if(byDate){
	                    if (this._isVerticallyGrouped()) {
	                        for (cellIndex = 0; cellIndex < groupCount; cellIndex++) {
	                            group = this.groups[cellIndex];
	                            collection = group.getDaySlotCollection(0);
	                            this._addDaySlotGroup(collection, cells, cellIndex, columnCount, groupIndex);
	                        }
	                    } else {
	                        group = this.groups[groupIndex];
	                        collection = group.getDaySlotCollection(0);
	                        for (cellIndex = cellMultiplier; cellIndex < groupCount * columnCount; cellIndex = cellIndex + groupCount) {
	                            this._addDaySlotGroup(collection, cells, cellIndex, columnCount, cellCount);
	                            cellCount++;
	                        }
	                    }
	                } else {
	                    group = this.groups[groupIndex];
	                    collection = group.getDaySlotCollection(0);
	                    for (cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {
	                          
	                        this._addDaySlotGroup(collection, cells, cellIndex, columnCount, cellCount);
	                        cellCount++;
	                    }
	                }
	            }
	        },

	        _groups: function() {
	            var groupCount = this._groupCount();
	            var columnCount = this._columnCountInResourceView();

	            this.groups = [];

	            for (var idx = 0; idx < groupCount; idx++) {
	                var view = this._addResourceView(idx);

	                for (var columnIndex = 0; columnIndex < columnCount; columnIndex++) {
	                    view.addTimeSlotCollection(this._dates[columnIndex], kendo.date.addDays(this._dates[columnIndex], 1));
	                }

	                if (this.options.allDaySlot) {
	                    view.addDaySlotCollection(this._dates[0], kendo.date.addDays(this._dates[this._dates.length - 1], 1));
	                }
	            }

	            this._timeSlotGroups(groupCount, columnCount);

	            if (this.options.allDaySlot) {
	                this._daySlotGroups(groupCount, columnCount);
	            }
	        },

	        options: {
	            name: "MultiDayView",
	            selectedDateFormat: "{0:D}",
	            selectedShortDateFormat: "{0:d}",
	            allDaySlot: true,
	            showWorkHours: false,
	            title: "",
	            startTime: kendo.date.today(),
	            endTime: kendo.date.today(),
	            minorTickCount: 2,
	            majorTick: 60,
	            majorTimeHeaderTemplate: "#=kendo.toString(date, 't')#",
	            minorTimeHeaderTemplate: "&nbsp;",
	            groupHeaderTemplate: "#=text#",
	            slotTemplate: "&nbsp;",
	            allDaySlotTemplate: "&nbsp;",
	            eventTemplate: DAY_VIEW_EVENT_TEMPLATE,
	            allDayEventTemplate: DAY_VIEW_ALL_DAY_EVENT_TEMPLATE,
	            dateHeaderTemplate: DATA_HEADER_TEMPLATE,
	            editable: true,
	            workDayStart: new Date(1980, 1, 1, 8, 0, 0),
	            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),
	            workWeekStart: 1,
	            workWeekEnd: 5,
	            footer: {
	                command: "workDay"
	            },
	            messages: {
	                allDay: "all day",
	                showFullDay: "Show full day",
	                showWorkDay: "Show business hours"
	            },
	            currentTimeMarker: {
	                 updateInterval: 10000,
	                 useLocalTimezone: true
	            }
	        },

	        events: ["remove", "add", "edit"],

	        _templates: function() {
	            var options = this.options,
	                settings = extend({}, kendo.Template, options.templateSettings);

	            this.eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_STRING);
	            this.allDayEventTemplate = this._eventTmpl(options.allDayEventTemplate, ALLDAY_EVENT_WRAPPER_STRING);

	            this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);
	            this.minorTimeHeaderTemplate = kendo.template(options.minorTimeHeaderTemplate, settings);
	            this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);
	            this.slotTemplate = kendo.template(options.slotTemplate, settings);
	            this.allDaySlotTemplate = kendo.template(options.allDaySlotTemplate, settings);
	            this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);
	        },

	        _editable: function() {
	            if (this.options.editable) {
	                if (this._isMobile()) {
	                    this._touchEditable();
	                } else {
	                    this._mouseEditable();
	                }
	            }
	        },

	        _mouseEditable: function() {
	            var that = this;
	            that.element.on("click" + NS, ".k-event a:has(.k-i-close)", function(e) {
	                that.trigger("remove", { uid: $(this).closest(".k-event").attr(kendo.attr("uid")) });
	                e.preventDefault();
	            });

	            if (that.options.editable.create !== false) {
	                that.element.on("dblclick" + NS, ".k-scheduler-content td", function(e) {
	                    if (!$(this).parent().hasClass("k-scheduler-header-all-day")) {
	                        var slot = that._slotByPosition(e.pageX, e.pageY);

	                        if (slot) {
	                            var resourceInfo = that._resourceBySlot(slot);
	                            that.trigger("add", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });
	                        }

	                        e.preventDefault();
	                    }
	                }).on("dblclick" + NS, ".k-scheduler-header-all-day td", function(e) {
	                    var slot = that._slotByPosition(e.pageX, e.pageY);
	                    if (slot) {
	                        var resourceInfo = that._resourceBySlot(slot);
	                        that.trigger("add", { eventInfo: extend({}, { isAllDay: true, start: kendo.date.getDate(slot.startDate()), end: kendo.date.getDate(slot.startDate()) }, resourceInfo) });
	                    }
	                    e.preventDefault();
	                });
	            }

	            if (that.options.editable.update !== false) {
	                that.element.on("dblclick" + NS, ".k-event", function(e) {
	                    that.trigger("edit", { uid: $(this).closest(".k-event").attr(kendo.attr("uid")) });
	                    e.preventDefault();
	                });
	            }
	        },

	        _touchEditable: function() {
	            var that = this;
	            var threshold = 0;

	            if (kendo.support.mobileOS.android) {
	                threshold = 5;
	            }

	            if (that.options.editable.create !== false) {
	                that._addUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter:  ".k-scheduler-content td",
	                    tap: function(e) {
	                        if (!$(e.target).parent().hasClass("k-scheduler-header-all-day")) {
	                            var x = e.x.location !== undefined ? e.x.location : e.x;
	                            var y = e.y.location !== undefined ? e.y.location : e.y;
	                            var slot = that._slotByPosition(x, y);

	                            if (slot) {
	                                var resourceInfo = that._resourceBySlot(slot);
	                                that.trigger("add", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });
	                            }

	                            e.preventDefault();
	                        }
	                    }
	                });

	                that._allDayUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter: ".k-scheduler-header-all-day td",
	                    tap: function(e) {
	                        var x = e.x.location !== undefined ? e.x.location : e.x;
	                        var y = e.y.location !== undefined ? e.y.location : e.y;
	                        var slot = that._slotByPosition(x, y);

	                        if (slot) {
	                            var resourceInfo = that._resourceBySlot(slot);
	                            that.trigger("add", { eventInfo: extend({}, { isAllDay: true, start: kendo.date.getDate(slot.startDate()), end: kendo.date.getDate(slot.startDate()) }, resourceInfo) });
	                        }

	                        e.preventDefault();
	                    }
	                });
	            }

	            if (that.options.editable.update !== false) {
	                that._editUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter: ".k-event",
	                    tap: function(e) {
	                        var eventElement = $(e.target).closest(".k-event");

	                        if (!eventElement.hasClass("k-event-active")) {
	                            that.trigger("edit", { uid: eventElement.attr(kendo.attr("uid")) });
	                        }

	                        e.preventDefault();
	                    }
	                });
	            }
	        },

	        _layout: function(dates) {
	            var columns = [];
	            var rows = [];
	            var options = this.options;
	            var that = this;
	            var byDate = that._isGroupedByDate();

	            for (var idx = 0; idx < dates.length; idx++) {
	                var column = {};

	                column.text = that.dateHeaderTemplate({ date: dates[idx] });

	                if (kendo.date.isToday(dates[idx])) {
	                    column.className = "k-today";
	                }

	                columns.push(column);
	            }

	            var resources = this.groupedResources;

	            if (options.allDaySlot) {
	                rows.push({
	                    text: options.messages.allDay, allDay: true,
	                    cellContent: function(idx) {
	                        var groupIndex = idx;

	                        idx = resources.length && that._groupOrientation() !== "vertical" ? idx % dates.length : idx;

	                        return that.allDaySlotTemplate({ date: dates[idx], resources: function() {
	                                return that._resourceBySlot({ groupIndex: groupIndex });
	                            }
	                        });
	                    }
	                });
	            }

	            this._forTimeRange(this.startTime(), this.endTime(), function(date, majorTick, middleRow, lastSlotRow) {
	                var template = majorTick ? that.majorTimeHeaderTemplate : that.minorTimeHeaderTemplate;

	                var row = {
	                    text: template({ date: date }),
	                    className: lastSlotRow ? "k-slot-cell" : ""
	                };

	                rows.push(row);
	            });


	            if (resources.length) {
	                if (this._groupOrientation() === "vertical") {
	                    if (byDate) {
	                        rows = this._createDateLayout(columns, rows);
	                        columns = this._createColumnsLayout(resources, null, this.groupHeaderTemplate);
	                    } else {
	                        rows = this._createRowsLayout(resources, rows, this.groupHeaderTemplate);
	                    }
	                } else {
	                      if (byDate) {
	                         columns = this._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);
	                      }else {
	                         columns = this._createColumnsLayout(resources, columns, this.groupHeaderTemplate);                      
	                      }
	                }
	            }

	            return {
	                columns: columns,
	                rows: rows
	            };
	        },

	        _footer: function() {
	            var options = this.options;

	            if (options.footer !== false) {
	                var html = '<div class="k-header k-scheduler-footer">';

	                var command = options.footer.command;

	                if (command && command === "workDay") {
	                    html += '<ul class="k-reset k-header">';

	                    html += '<li class="k-state-default k-scheduler-fullday"><a href="#" class="k-link"><span class="k-icon k-i-clock"></span>';
	                    html += (options.showWorkHours ? options.messages.showFullDay : options.messages.showWorkDay) + '</a></li>';

	                    html += '</ul>';

	                } else {
	                    html += "&nbsp;";
	                }

	                html += "</div>";

	                this.footer = $(html).appendTo(this.element);

	                var that = this;

	                this.footer.on("click" + NS, ".k-scheduler-fullday", function(e) {
	                    e.preventDefault();
	                    that.trigger("navigate", { view: that.name || options.name, date: that.startDate(), isWorkDay: !options.showWorkHours });
	                });
	            }
	        },

	        _forTimeRange: function(min, max, action, after) {
	            min = toInvariantTime(min); //convert the date to 1/2/1980 and sets the time
	            max = toInvariantTime(max);

	            var that = this,
	                msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                minorTickCount = that.options.minorTickCount,
	                msMajorInterval = that.options.majorTick * MS_PER_MINUTE,
	                msInterval = msMajorInterval / minorTickCount || 1,
	                start = new Date(+min),
	                startDay = start.getDate(),
	                msStart,
	                idx = 0, length,
	                html = "";

	            length = MS_PER_DAY / msInterval;

	            if (msMin != msMax) {
	                if (msMin > msMax) {
	                    msMax += MS_PER_DAY;
	                }

	                length = ((msMax - msMin) / msInterval);
	            }

	            length = Math.round(length);

	            for (; idx < length; idx++) {
	                var majorTickDivider = idx % (msMajorInterval/msInterval),
	                    isMajorTickRow = majorTickDivider === 0,
	                    isMiddleRow = majorTickDivider < minorTickCount - 1,
	                    isLastSlotRow = majorTickDivider === minorTickCount - 1;

	                html += action(start, isMajorTickRow, isMiddleRow, isLastSlotRow);

	                setTime(start, msInterval, false);
	            }

	            if (msMax) {
	                msStart = getMilliseconds(start);
	                if (startDay < start.getDate()) {
	                    msStart += MS_PER_DAY;
	                }

	                if (msStart > msMax) {
	                    start = new Date(+max);
	                }
	            }

	            if (after) {
	                html += after(start);
	            }

	            return html;
	        },

	        _content: function(dates) {
	            var that = this;
	            var options = that.options;
	            var start = that.startTime();
	            var end = this.endTime();
	            var groupsCount = 1;
	            var rowCount = 1;
	            var columnCount = dates.length;
	            var html = '';
	            var resources = this.groupedResources;
	            var allDaySlotTemplate = this.allDaySlotTemplate;
	            var isVerticalGroupped = false;
	            var allDayVerticalGroupRow;
	            var byDate = that._isGroupedByDate();
	            var dateID = 0;

	            if (resources.length) {
	                isVerticalGroupped = that._groupOrientation() === "vertical";

	                if (isVerticalGroupped) {
	                    rowCount = this._rowCountForLevel(this.rowLevels.length - 2);

	                    if (byDate) {
	                         groupsCount = this._columnCountForLevel(this.columnLevels.length - 1);
	                    }

	                    if (options.allDaySlot) {
	                        allDayVerticalGroupRow = function (groupIndex) {
	                            var result = '<tr class="k-scheduler-header-all-day">';
	                            var dateGroupIndex = byDate ? 0 : groupIndex;
	                            var resources = function() {
	                                return that._resourceBySlot({ groupIndex: dateGroupIndex });
	                            };        

	                            if (byDate) {                             
	                                for (; dateGroupIndex < groupsCount; dateGroupIndex++) {                                  
	                                    result += "<td>" + allDaySlotTemplate({ date: dates[dateID], resources: resources }) + "</td>";
	                                }
	                            } else {                             
	                                for (var idx = 0; idx < dates.length; idx++) {
	                                    result += "<td>" + allDaySlotTemplate({ date: dates[idx], resources: resources }) + "</td>";
	                                }
	                            }                        

	                            return result + "</tr>";
	                        };
	                    }                
	                } else {
	                    if (byDate) {
	                         groupsCount = this._columnCountForLevel(this.columnLevels.length - 1) / this._columnCountForLevel(0);
	                    } else {
	                         groupsCount = this._columnCountForLevel(this.columnLevels.length - 2);
	                    }
	                }
	            }

	            html += '<tbody>';

	            var appendRow = function(date, majorTick) {
	                var content = "";       
	                var groupIdx = 0;
	                var idx, length;

	                content = '<tr' + (majorTick ? ' class="k-middle-row"' : "") + '>';           

	                if (byDate) {
	                    for (idx = 0, length = columnCount; idx < length; idx++) {
	                        for (groupIdx = 0; groupIdx < groupsCount; groupIdx++) {
	                            var dateIndex = idx;
	                            if (isVerticalGroupped) {
	                                dateIndex = dateID;
	                            }
	                            content = that._addCellsToContent(content, dates, date, dateIndex, groupIdx, rowIdx);
	                             
	                        }
	                        if (isVerticalGroupped) {
	                                
	                            break;
	                        }
	                    }                                     
	                } else {
	                     for (; groupIdx < groupsCount; groupIdx++) {
	                        for (idx = 0, length = columnCount; idx < length; idx++) {
	                            content = that._addCellsToContent(content, dates, date, idx, groupIdx, rowIdx);
	                        }
	                     }
	                }             

	                content += "</tr>";

	                return content;
	            };

	            for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {
	                html += allDayVerticalGroupRow ? allDayVerticalGroupRow(rowIdx) : "";
	               
	                html += this._forTimeRange(start, end, appendRow);
	                if (isVerticalGroupped) {
	                        dateID++;
	                }
	            }

	            html += '</tbody>';

	            this.content.find("table").append(html);
	        },

	        _addCellsToContent: function(content, dates, date, idx, groupIdx, rowIdx) {
	            var that = this;
	            var classes = "";
	            var tmplDate;
	            var slotTemplate = this.slotTemplate;
	            var isVerticalGroupped = this._groupOrientation() === "vertical";
	            var resources = function(groupIndex) {
	                return function() {
	                    return that._resourceBySlot({ groupIndex: groupIndex });
	                };
	            };

	            if (kendo.date.isToday(dates[idx])) {
	                classes += "k-today";
	            }

	            if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(this.options.workDayStart) ||
	                kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(this.options.workDayEnd) ||
	                !this._isWorkDay(dates[idx])) {
	                classes += " k-nonwork-hour";
	            }

	            content += '<td' + (classes !== "" ? ' class="' + classes + '"' : "") + ">";
	            tmplDate = kendo.date.getDate(dates[idx]);
	            kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));

	            content += slotTemplate({ date: tmplDate, resources: resources(isVerticalGroupped && !that._isGroupedByDate()  ? rowIdx : groupIdx) });
	            content += "</td>";
	            return content;
	        },

	        _isWorkDay: function(date) {
	            var day = date.getDay();
	            var workDays =  this._workDays;

	            for (var i = 0; i < workDays.length; i++) {
	                if (workDays[i] === day) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        _render: function(dates) {
	            var that = this;

	            dates = dates || [];

	            this._dates = dates;

	            this._startDate = dates[0];

	            this._endDate = dates[(dates.length - 1) || 0];

	            this.createLayout(this._layout(dates));

	            this._content(dates);

	            this._footer();

	            this.refreshLayout();

	            var allDayHeader = this.element.find(".k-scheduler-header-all-day td");

	            if (allDayHeader.length) {
	                this._allDayHeaderHeight = allDayHeader.first()[0].clientHeight;
	            }

	            that.element.on("click" + NS, ".k-nav-day", function(e) {
	                var th = $(e.currentTarget).closest("th");
	                var offset = th.offset();
	                var additioanlWidth = 0;
	                var additionalHeight = outerHeight(th);

	                if (that._isGroupedByDate()) {
	                    if (that._isVerticallyGrouped()) {
	                        additioanlWidth = outerWidth(that.times);
	                        additionalHeight = 0;
	                    } else {
	                        additionalHeight = outerHeight(that.datesHeader);
	                    }
	                }

	                var slot = that._slotByPosition(offset.left + additioanlWidth, offset.top + additionalHeight);

	                that.trigger("navigate", { view: "day", date: slot.startDate() });
	            });
	        },

	        startTime: function() {
	            var options = this.options;
	            return options.showWorkHours ? options.workDayStart : options.startTime;
	        },

	        endTime: function() {
	            var options = this.options;
	            return options.showWorkHours ? options.workDayEnd : options.endTime;
	        },

	        startDate: function() {
	            return this._startDate;
	        },

	        endDate: function() {
	            return this._endDate;
	        },

	        _end: function(isAllDay) {
	            var time = getMilliseconds(this.endTime()) || MS_PER_DAY;

	            if (isAllDay) {
	                time = 0;
	            }

	            return new Date(this._endDate.getTime() + time);
	        },

	        nextDate: function() {
	            return kendo.date.nextDay(this.endDate());
	        },

	        previousDate: function() {
	            return kendo.date.previousDay(this.startDate());
	        },

	        calculateDateRange: function() {
	            this._render([this.options.date]);
	        },

	        destroy: function() {
	            var that = this;

	            if (that._currentTimeUpdateTimer) {
	                clearInterval(that._currentTimeUpdateTimer);
	            }

	            if (that.datesHeader) {
	                that.datesHeader.off(NS);
	            }

	            if (that.element) {
	                that.element.off(NS);
	            }

	            if (that.footer) {
	                that.footer.remove();
	            }

	            SchedulerView.fn.destroy.call(this);

	            if (this._isMobile() && that.options.editable) {
	                if (that.options.editable.create !== false) {
	                    that._addUserEvents.destroy();
	                    that._allDayUserEvents.destroy();
	                }

	                if (that.options.editable.update !== false) {
	                    that._editUserEvents.destroy();
	                }
	            }
	        },

	        inRange: function(options) {
	            var inRange = SchedulerView.fn.inRange.call(this, options);

	            if (options.isAllDay) {
	                return inRange;
	            }

	            var startTime = getMilliseconds(this.startTime());
	            var endTime = getMilliseconds(this.endTime()) || kendo.date.MS_PER_DAY;

	            var start = getMilliseconds(options.start);
	            var end = getMilliseconds(options.end) || kendo.date.MS_PER_DAY;

	            return inRange && startTime <= start && end <= endTime;
	        },

	        selectionByElement: function(cell) {
	            var offset = cell.offset();
	            return this._slotByPosition(offset.left, offset.top);
	        },

	        _timeSlotInterval: function() {
	            var options = this.options;
	            return (options.majorTick/options.minorTickCount) * MS_PER_MINUTE;
	        },

	        _timeSlotIndex: function(date) {
	            var options = this.options;
	            var eventStartTime = getMilliseconds(date);
	            var startTime = getMilliseconds(this.startTime());
	            var timeSlotInterval = ((options.majorTick/options.minorTickCount) * MS_PER_MINUTE);

	            return (eventStartTime - startTime) / (timeSlotInterval);
	        },

	        _slotIndex: function(date, multiday) {
	            if (multiday) {
	                return this._dateSlotIndex(date);
	            }

	            return this._timeSlotIndex(date);
	        },

	        _dateSlotIndex: function(date, overlaps) {
	            var idx;
	            var length;
	            var slots = this._dates || [];
	            var slotStart;
	            var slotEnd;
	            var offset = 1;

	            for (idx = 0, length = slots.length; idx < length; idx++) {
	                slotStart = kendo.date.getDate(slots[idx]);
	                slotEnd = new Date(kendo.date.getDate(slots[idx]).getTime() + MS_PER_DAY - (overlaps ? 0 : 1));

	                if (isInDateRange(date, slotStart, slotEnd)) {
	                    return idx * offset;
	                }
	            }
	            return -1;
	        },

	        _positionAllDayEvent: function(element, slotRange) {
	            var slotWidth = slotRange.innerWidth();
	            var startIndex = slotRange.start.index;
	            var endIndex = slotRange.end.index;

	            var allDayEvents = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);

	            var currentColumnCount = this._headerColumnCount || 0;

	            var leftOffset = 2;

	            var rightOffset = startIndex !== endIndex ? 5 : 4;

	            var eventHeight = this._allDayHeaderHeight;

	            var start = slotRange.startSlot();

	            element
	                .css({
	                    left: start.offsetLeft + leftOffset,
	                    width: slotWidth - rightOffset
	                });

	            slotRange.addEvent({ slotIndex: startIndex, start: startIndex, end: endIndex, element: element });

	            allDayEvents.push({ slotIndex: startIndex, start: startIndex, end: endIndex, element: element });

	            var rows = SchedulerView.createRows(allDayEvents);

	            if (rows.length && rows.length > currentColumnCount) {
	                this._headerColumnCount = rows.length;
	            }

	            var top = slotRange.start.offsetTop;

	            for (var idx = 0, length = rows.length; idx < length; idx++) {
	                var rowEvents = rows[idx].events;

	                for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
	                    $(rowEvents[j].element).css({
	                        top: top + idx * eventHeight
	                    });
	                }
	            }
	        },

	        _arrangeColumns: function(element, top, height, slotRange) {
	            var startSlot = slotRange.start;

	            element = { element: element, slotIndex: startSlot.index, start: top, end: top + height };

	            var columns,
	                slotWidth = startSlot.clientWidth,
	                eventRightOffset = slotWidth * 0.10,
	                columnEvents,
	                eventElements =  slotRange.events(),
	                slotEvents = SchedulerView.collidingEvents(eventElements, element.start, element.end);

	            slotRange.addEvent(element);

	            slotEvents.push(element);

	            columns = SchedulerView.createColumns(slotEvents);

	            var columnWidth = (slotWidth - eventRightOffset) / columns.length;

	            for (var idx = 0, length = columns.length; idx < length; idx++) {
	                columnEvents = columns[idx].events;

	                for (var j = 0, eventLength = columnEvents.length; j < eventLength; j++) {
	                    columnEvents[j].element[0].style.width = columnWidth - 4 + "px";
	                    columnEvents[j].element[0].style.left = (this._isRtl ? eventRightOffset : 0) + startSlot.offsetLeft + idx * columnWidth + 2 + "px";
	                }
	            }
	        },

	        _positionEvent: function(event, element, slotRange) {
	            var start = event._startTime || event.start;
	            var end = event._endTime || event.end;

	            var rect = slotRange.innerRect(start, end, false);

	            var height = rect.bottom - rect.top - 2; /* two times border width */

	            if (height < 0) {
	                height = 0;
	            }

	            element.css( {
	                top: rect.top,
	                height: height
	            } );

	            this._arrangeColumns(element, rect.top, element[0].clientHeight, slotRange);
	       },

	       _createEventElement: function(event, isOneDayEvent, head, tail) {
	            var template = isOneDayEvent ? this.eventTemplate : this.allDayEventTemplate;
	            var options = this.options;
	            var editable = options.editable;
	            var isMobile = this._isMobile();
	            var showDelete = editable && editable.destroy !== false && !isMobile;
	            var resizable = editable && editable.resize !== false;
	            var startDate = getDate(this.startDate());
	            var endDate = getDate(this.endDate());
	            var startTime = getMilliseconds(this.startTime());
	            var endTime = getMilliseconds(this.endTime());
	            var eventStartTime = event._time("start");
	            var eventEndTime = event._time("end");
	            var middle;

	            if (startTime >= endTime) {
	                endTime = getMilliseconds(new Date(this.endTime().getTime() + MS_PER_DAY - 1));
	            }

	            if (!isOneDayEvent && !event.isAllDay) {
	                endDate = new Date(endDate.getTime() + MS_PER_DAY);
	            }

	            var eventStartDate = event.start;
	            var eventEndDate = event.end;

	            if (event.isAllDay) {
	                eventEndDate = getDate(event.end);
	            }

	            if ((!isInDateRange(getDate(eventStartDate), startDate, endDate) &&
	                !isInDateRange(eventEndDate, startDate, endDate)) ||
	                (isOneDayEvent && eventStartTime < startTime && eventEndTime > endTime)) {

	                middle = true;
	            } else if (getDate(eventStartDate) < startDate || (isOneDayEvent && eventStartTime < startTime)) {
	                tail = true;
	            } else if ((eventEndDate > endDate && !isOneDayEvent) || (isOneDayEvent && eventEndTime > endTime)) {
	                head = true;
	            }

	            var resources = this.eventResources(event);

	           if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {
	                eventStartDate = new Date(eventStartTime);
	                eventStartDate = kendo.timezone.apply(eventStartDate, "Etc/UTC");
	            }

	           if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {
	                eventEndDate = new Date(eventEndTime);
	                eventEndDate = kendo.timezone.apply(eventEndDate, "Etc/UTC");
	            }

	            var data = extend({}, {
	                ns: kendo.ns,
	                resizable: resizable,
	                showDelete: showDelete,
	                middle: middle,
	                head: head,
	                tail: tail,
	                singleDay: this._dates.length == 1,
	                resources: resources,
	                inverseColor: resources && resources[0] ? this._shouldInverseResourceColor(resources[0]) : false
	            }, event, {
	                start: eventStartDate,
	                end: eventEndDate
	            });

	            var element = $(template(data));

	            this.angular("compile", function(){
	                return {
	                    elements: element,
	                    data: [ { dataItem: data } ]
	                };
	            });

	            return element;
	        },

	        _isInTimeSlot: function(event) {
	            var slotStartTime = this.startTime(),
	                slotEndTime = this.endTime(),
	                startTime = event._startTime || event.start,
	                endTime = event._endTime || event.end;

	            if (getMilliseconds(slotEndTime) === getMilliseconds(kendo.date.getDate(slotEndTime))) {
	                slotEndTime = kendo.date.getDate(slotEndTime);
	                setTime(slotEndTime, MS_PER_DAY - 1);
	            }

	            if (event._date("end") > event._date("start")) {
	               endTime = +event._date("end") + (MS_PER_DAY - 1);
	            }

	            endTime = endTime - event._date("end");
	            startTime = startTime - event._date("start");
	            slotEndTime = getMilliseconds(slotEndTime);
	            slotStartTime = getMilliseconds(slotStartTime);

	            if(slotStartTime === startTime && startTime === endTime) {
	                return true;
	            }

	            var overlaps = startTime !== slotEndTime;

	            return isInTimeRange(startTime, slotStartTime, slotEndTime, overlaps) ||
	                isInTimeRange(endTime, slotStartTime, slotEndTime, overlaps) ||
	                isInTimeRange(slotStartTime, startTime, endTime) ||
	                isInTimeRange(slotEndTime, startTime, endTime);
	        },

	        _isInDateSlot: function(event) {
	            var groups = this.groups[0];
	            var slotStart = groups.firstSlot().start;
	            var slotEnd = groups.lastSlot().end - 1;

	            var startTime = kendo.date.toUtcTime(event.start);
	            var endTime = kendo.date.toUtcTime(event.end);

	            return (isInDateRange(startTime, slotStart, slotEnd) ||
	                isInDateRange(endTime, slotStart, slotEnd) ||
	                isInDateRange(slotStart, startTime, endTime) ||
	                isInDateRange(slotEnd, startTime, endTime)) &&
	                (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay );
	        },

	        _updateAllDayHeaderHeight: function(height) {
	            if (this._height !== height) {
	                this._height = height;

	                var allDaySlots = this.element.find(".k-scheduler-header-all-day td");

	                if (allDaySlots.length) {
	                    allDaySlots.parent()
	                        .add(this.element.find(".k-scheduler-times-all-day").parent())
	                        .height(height);

	                    for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
	                        this.groups[groupIndex].refresh();
	                    }
	                }
	            }
	        },

	        _renderEvents: function(events, groupIndex) {
	            var allDayEventContainer = this.datesHeader.find(".k-scheduler-header-wrap > div");
	            var byDate = this._isGroupedByDate();
	            var event;

	            var idx;
	            var length;

	            for (idx = 0, length = events.length; idx < length; idx++) {
	                event = events[idx];

	                if (this._isInDateSlot(event)) {

	                    var isMultiDayEvent = event.isAllDay || event.end.getTime() - event.start.getTime() >= MS_PER_DAY;
	                    var container = isMultiDayEvent && !this._isVerticallyGrouped() ? allDayEventContainer : this.content;
	                    var element, ranges, range, start, end, group;

	                    if (!isMultiDayEvent) {

	                        if (this._isInTimeSlot(event)) {
	                            group = this.groups[groupIndex];

	                            if (!group._continuousEvents) {
	                                group._continuousEvents = [];
	                            }

	                            ranges = group.slotRanges(event);

	                            var rangeCount = ranges.length;

	                            for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {
	                                range = ranges[rangeIndex];
	                                start = event.start;
	                                end = event.end;

	                                if (rangeCount > 1) {
	                                    if (rangeIndex === 0) {
	                                        end = range.end.endDate();
	                                    } else if (rangeIndex == rangeCount - 1) {
	                                        start = range.start.startDate();
	                                    } else {
	                                        start = range.start.startDate();
	                                        end = range.end.endDate();
	                                    }
	                                }

	                                var occurrence = event.clone({ start: start, end: end, _startTime: event._startTime, _endTime: event.endTime });

	                                if (this._isInTimeSlot(occurrence)) {
	                                    var head = range.head;

	                                    element = this._createEventElement(event, !isMultiDayEvent, head, range.tail);

	                                    element.appendTo(container);

	                                    this._positionEvent(occurrence, element, range);

	                                    addContinuousEvent(group, range, element, false);
	                                }
	                            }
	                        }

	                    } else if (this.options.allDaySlot) {
	                       group = this.groups[groupIndex];

	                       if (!group._continuousEvents) {
	                           group._continuousEvents = [];
	                       }

	                        ranges = group.slotRanges(event);

	                        if (ranges.length) {
	                            range = ranges[0];
	                            var startIndex = range.start.index;
	                            var endIndex = range.end.index;                          

	                            if (byDate && startIndex !== endIndex) {
	                                start = range.start.start;
	                                end = range.end.end;
	                                var newStart = new Date(start);
	                                var newEnd = new Date(start);

	                                for (var i = range.start.index; i <= range.end.index; i++) {
	                                    element = this._createEventElement(event, !isMultiDayEvent, i !== endIndex, i !== startIndex);
	                                    
	                                    var dateRange = group.daySlotRanges(newStart, newEnd, true)[0];
	                                    newEnd.setDate(newEnd.getDate() + 1);
	                                    newStart.setDate(newStart.getDate() + 1);

	                                    this._positionAllDayEvent(element, dateRange);

	                                    addContinuousEvent(group, dateRange, element, true);

	                                    element.appendTo(container);
	                                }
	                               } else {                           
	                                       element = this._createEventElement(event, !isMultiDayEvent);

	                                       this._positionAllDayEvent(element, ranges[0]);

	                                       addContinuousEvent(group, ranges[0], element, true);

	                                       element.appendTo(container);
	                               }
	                       }
	                    }
	                }
	            }
	        },

	        render: function(events) {
	            this._headerColumnCount = 0;

	            this._groups();

	            this.element.find(".k-event").remove();

	            events = new kendo.data.Query(events)
	                .sort([{ field: "start", dir: "asc" },{ field: "end", dir: "desc" }])
	                .toArray();

	            var eventsByResource = [];

	            this._eventsByResource(events, this.groupedResources, eventsByResource);

	            var eventsPerDate = $.map(this._dates, function(date) {
	                return Math.max.apply(null,
	                    $.map(eventsByResource, function(events) {
	                        return $.grep(events, function(event) {
	                            return event.isMultiDay() && isInDateRange(date, getDate(event.start), getDate(event.end));
	                        }).length;
	                    })
	                );
	            });

	            var height = Math.max.apply(null, eventsPerDate);

	            this._updateAllDayHeaderHeight((height + 1) * this._allDayHeaderHeight);

	            for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {
	                this._renderEvents(eventsByResource[groupIndex], groupIndex);
	            }

	            this.refreshLayout();

	            this._currentTime(false);

	            this.trigger("activate");
	        },

	        _eventsByResource: function(events, resources, result) {
	            var resource = resources[0];

	            if (resource) {
	                var view = resource.dataSource.view();

	                for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {
	                    var value = this._resourceValue(resource, view[itemIdx]);

	                    var eventsFilteredByResource = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();

	                    if (resources.length > 1) {
	                        this._eventsByResource(eventsFilteredByResource, resources.slice(1), result);
	                    } else {
	                        result.push(eventsFilteredByResource);
	                    }
	                }
	            } else {
	                result.push(events);
	            }
	        },

	        _columnOffsetForResource: function(index) {
	            return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);
	        },

	        _columnCountForLevel: function(level) {
	            var columnLevel = this.columnLevels[level];
	            return columnLevel ? columnLevel.length : 0;
	        },

	        _rowCountForLevel: function(level) {
	            var rowLevel = this.rowLevels[level];
	            return rowLevel ? rowLevel.length : 0;
	        },

	        clearSelection: function() {

	            this.content.add(this.datesHeader)
	                .find(".k-state-selected")
	                .removeAttr("id")
	                .attr("aria-selected", false)
	                .removeClass("k-state-selected");
	        },

	        _updateDirection: function(selection, ranges, multiple, reverse, vertical) {
	            var isDaySlot = selection.isAllDay;
	            var startSlot = ranges[0].start;
	            var endSlot = ranges[ranges.length - 1].end;

	            if (multiple) {
	                if (vertical) {
	                    if (!isDaySlot &&
	                        startSlot.index === endSlot.index &&
	                        startSlot.collectionIndex === endSlot.collectionIndex) {
	                            selection.backward = reverse;
	                    }
	                } else {
	                    if ((isDaySlot && startSlot.index === endSlot.index) ||
	                        (!isDaySlot && startSlot.collectionIndex === endSlot.collectionIndex)) {
	                            selection.backward = reverse;
	                    }
	                }
	            }
	        },

	        _changeViewPeriod: function(selection, reverse, vertical) {
	            if (!vertical) {
	                var date = reverse ? this.previousDate() : this.nextDate();
	                var start = selection.start;
	                var end = selection.end;
	                var verticalByDate = this._isGroupedByDate()  && this._isVerticallyGrouped();
	                var group = this.groups[selection.groupIndex];
	                var collection = reverse ? group._timeSlotCollections : group._getCollections(group.daySlotCollectionCount());
	                var slots = collection[collection.length - 1]._slots;
	                var slotIndex = (!reverse && !group.daySlotCollectionCount()) ? 0 : slots.length - 1;   
	                var endMilliseconds;      

	                selection.start = new Date(date);
	                selection.end = new Date(date);

	                if (verticalByDate) { 
	                    var newStart =new Date(slots[slotIndex].startDate());
	                    var newEnd = new Date(slots[slotIndex].endDate());
	                    endMilliseconds = getMilliseconds(newEnd) ? getMilliseconds(newEnd) : MS_PER_DAY ;

	                        setTime(selection.start, getMilliseconds(newStart));
	                        setTime(selection.end, endMilliseconds);
	                        if(group.daySlotCollectionCount()){
	                            selection.isAllDay = !selection.isAllDay;
	                        }
	                } else {
	                    endMilliseconds = (selection.isAllDay || !getMilliseconds(end)) ? MS_PER_DAY : getMilliseconds(end);

	                    setTime(selection.start, getMilliseconds(start));
	                    setTime(selection.end, endMilliseconds);
	                }  

	                if (!this._isVerticallyGrouped()) {
	                    selection.groupIndex = reverse ? this.groups.length - 1 : 0;
	                }

	                selection.events = [];

	                return true;
	            }
	        }
	    });

	    extend(true, ui, {
	        MultiDayView: MultiDayView,
	        DayView: MultiDayView.extend({
	            options: {
	                name: "DayView",
	                title: "Day"
	            },
	            name: "day"
	        }),
	        WeekView: MultiDayView.extend({
	            options: {
	                name: "WeekView",
	                title: "Week",
	                selectedDateFormat: "{0:D} - {1:D}",
	                selectedShortDateFormat: "{0:d} - {1:d}"
	            },
	            name: "week",
	            calculateDateRange: function() {
	                var selectedDate = this.options.date,
	                    start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),
	                    idx, length,
	                    dates = [];

	                for (idx = 0, length = 7; idx < length; idx++) {
	                    dates.push(start);
	                    start = kendo.date.nextDay(start);
	                }
	                this._render(dates);
	            }
	        }),
	        WorkWeekView: MultiDayView.extend({
	            options: {
	                name: "WorkWeekView",
	                title: "Work Week",
	                selectedDateFormat: "{0:D} - {1:D}",
	                selectedShortDateFormat: "{0:d} - {1:d}"
	            },
	            name: "workWeek",
	            nextDate: function() {
	                var weekStart = kendo.date.dayOfWeek(kendo.date.nextDay(this.startDate()), this.calendarInfo().firstDay, 1);
	                return kendo.date.addDays(weekStart, this._workDays[0]);
	            },
	            previousDate: function() {
	                var weekStart = kendo.date.dayOfWeek(this.startDate(), this.calendarInfo().firstDay, -1);
	                var workDays = this._workDays;

	                return kendo.date.addDays(weekStart, workDays[workDays.length - 1] - 7);
	            },
	            calculateDateRange: function() {
	                var selectedDate = this.options.date,
	                    dayOfWeek = kendo.date.dayOfWeek,
	                    weekStart = dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),
	                    start = dayOfWeek(weekStart, this.options.workWeekStart, 1),
	                    end = dayOfWeek(start, this.options.workWeekEnd, 1),
	                    dates = [];

	                while (start <= end) {
	                    dates.push(start);
	                    start = kendo.date.nextDay(start);
	                }
	                this._render(dates);
	            }
	        })
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 135 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(819);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 578:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.dropdownlist */ 29);

/***/ },

/***/ 579:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.multiselect */ 61);

/***/ },

/***/ 692:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.window */ 65);

/***/ },

/***/ 736:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.pdf */ 63);

/***/ },

/***/ 740:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.datetimepicker */ 121);

/***/ },

/***/ 741:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.editable */ 57);

/***/ },

/***/ 750:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.actionsheet */ 60);

/***/ },

/***/ 751:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.mobile.pane */ 31);

/***/ },

/***/ 819:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(578), __webpack_require__(741), __webpack_require__(579), __webpack_require__(692), __webpack_require__(740), __webpack_require__(821), __webpack_require__(822), __webpack_require__(820), __webpack_require__(823), __webpack_require__(824), __webpack_require__(825), __webpack_require__(750), __webpack_require__(751), __webpack_require__(736) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "scheduler",
	    name: "Scheduler",
	    category: "web",
	    description: "The Scheduler is an event calendar.",
	    depends: [ "dropdownlist", "editable", "multiselect", "window", "datepicker", "datetimepicker", "scheduler.recurrence", "scheduler.view" ],
	    features: [ {
	        id: "scheduler-dayview",
	        name: "Scheduler Day View",
	        description: "Scheduler Day View",
	        depends: [ "scheduler.dayview" ]
	    }, {
	        id: "scheduler-agendaview",
	        name: "Scheduler Agenda View",
	        description: "Scheduler Agenda View",
	        depends: [ "scheduler.agendaview" ]
	    }, {
	        id: "scheduler-monthview",
	        name: "Scheduler Month View",
	        description: "Scheduler Month View",
	        depends: [ "scheduler.monthview" ]
	    }, {
	        id: "scheduler-timelineview",
	        name: "Scheduler Timeline View",
	        description: "Scheduler Timeline View",
	        depends: [ "scheduler.timelineview" ]
	    }, {
	        id: "scheduler-mobile",
	        name: "Scheduler adaptive rendering",
	        description: "Support for adaptive rendering",
	        depends: [ "mobile.actionsheet", "mobile.pane" ]
	    }, {
	        id: "scheduler-pdf-export",
	        name: "PDF export",
	        description: "Export the scheduler events as PDF",
	        depends: [ "pdf", "drawing" ]
	    }, {
	        id: "scheduler-timezones",
	        name: "Timezones",
	        description: "Allow selecting timezones different than Etc/UTC",
	        depends: [ "timezones" ]
	    } ]
	};

	/*jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        date = kendo.date,
	        input_support = kendo.support.input,
	        MS_PER_DAY = date.MS_PER_DAY,
	        getDate = date.getDate,
	        getMilliseconds = kendo.date.getMilliseconds,
	        recurrence = kendo.recurrence,
	        keys = kendo.keys,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        DataBoundWidget = ui.DataBoundWidget,
	        STRING = "string",
	        Popup = ui.Popup,
	        Calendar = ui.Calendar,
	        DataSource = kendo.data.DataSource,
	        isPlainObject = $.isPlainObject,
	        extend = $.extend,
	        proxy = $.proxy,
	        toString = Object.prototype.toString,
	        isArray = $.isArray,
	        NS = ".kendoScheduler",
	        CLICK = "click",
	        CHANGE = "change",
	        CANCEL = "cancel",
	        REMOVE = "remove",
	        SAVE = "save",
	        ADD = "add",
	        EDIT = "edit",
	        valueStartEndBoundRegex = /(?:value:start|value:end)(?:,|$)/,
	        TODAY = getDate(new Date()),
	        EXCEPTION_SEPARATOR = ",",
	        OLD_EXCEPTION_SEPARATOR_REGEXP = /\;/g,
	        RECURRENCE_EXCEPTION = "recurrenceException",
	        DELETECONFIRM = "Are you sure you want to delete this event?",
	        DELETERECURRING = "Do you want to delete only this event occurrence or the whole series?",
	        EDITRECURRING = "Do you want to edit only this event occurrence or the whole series?",
	        DELETERECURRINGCONFIRM = "Are you sure you want to delete this event occurrence?",
	        DELETESERIESCONFIRM = "Are you sure you want to delete the whole series?",
	        COMMANDBUTTONTMPL = '<a class="k-button #=className#" #=attr# href="\\#">#=text#</a>',
	        VIEWBUTTONTEMPLATE = kendo.template('<li class="k-current-view" data-#=ns#name="#=view#"><a role="button" href="\\#" class="k-link">${views[view].title}</a></li>'),
	        TOOLBARTEMPLATE = kendo.template('<div class="k-floatwrap k-header k-scheduler-toolbar">' +
	           '# if (pdf) { #' +
	           '<ul class="k-reset k-scheduler-tools">' +
	               '<li><a role="button" href="\\#" class="k-button k-pdf"><span class="k-icon k-i-file-pdf"></span>${messages.pdf}</a></li>' +
	           '</ul>' +
	           '# } #' +
	            '<ul class="k-reset k-scheduler-navigation">' +
	               '<li class="k-state-default k-header k-nav-today"><a role="button" href="\\#" class="k-link">${messages.today}</a></li>' +
	               '<li class="k-state-default k-header k-nav-prev"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-60-left"></span></a></li>' +
	               '<li class="k-state-default k-header k-nav-next"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-60-right"></span></a></li>' +
	               '<li class="k-state-default k-nav-current">' +
	                    '<a role="button" href="\\#" class="k-link">' +
	                        '<span class="k-icon k-i-calendar"></span>' +
	                        '<span class="k-sm-date-format" data-#=ns#bind="text: formattedShortDate"></span>' +
	                        '<span class="k-lg-date-format" data-#=ns#bind="text: formattedDate"></span>' +
	                    '</a>' +
	                '</li>' +
	            '</ul>' +
	            '#if(viewsCount === 1){#' +
	                '<a role="button" data-#=ns#name="#=view#" href="\\#" class="k-link k-scheduler-refresh">' +
	                    '<span class="k-icon k-i-reload"></span>' +
	                '</a>' +
	            '#}else{#' +
	                '<ul class="k-reset k-header k-scheduler-views">' +
	                    '#for(var view in views){#' +
	                        '<li class="k-state-default k-view-#= view.toLowerCase() #" data-#=ns#name="#=view#"><a role="button" href="\\#" class="k-link">${views[view].title}</a></li>' +
	                    '#}#'  +
	                '</ul>' +
	            '#}#' +
	            '</div>'),
	        MOBILETOOLBARTEMPLATE = kendo.template('<div class="k-floatwrap k-header k-scheduler-toolbar">' +
	            '<ul class="k-reset k-header k-scheduler-navigation">' +
	               '<li class="k-state-default k-nav-today"><a role="button" href="\\#" class="k-link">${messages.today}</a></li>' +
	            '</ul>' +
	            '#if(viewsCount === 1){#' +
	                '<a role="button" data-#=ns#name="#=view#" href="\\#" class="k-link k-scheduler-refresh">' +
	                    '<span class="k-icon k-i-reload"></span>' +
	                '</a>' +
	            '#}else{#' +
	                '<ul class="k-reset k-header k-scheduler-views">' +
	                    '#for(var view in views){#' +
	                        '<li class="k-state-default k-view-#= view.toLowerCase() #" data-#=ns#name="#=view#"><a role="button" href="\\#" class="k-link">${views[view].title}</a></li>' +
	                    '#}#'  +
	                '</ul>' +
	            '#}#' +
	            '</div>'+
	            '<div class="k-floatwrap k-header k-scheduler-toolbar">' +
	                '<ul class="k-reset k-header k-scheduler-navigation">' +
	                   '<li class="k-state-default k-nav-prev"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-60-left"></span></a></li>' +
	                   '<li class="k-state-default k-nav-current">' +
	                        '<span class="k-sm-date-format" data-#=ns#bind="text: formattedShortDate"></span>' +
	                        '<span class="k-lg-date-format" data-#=ns#bind="text: formattedDate"></span>' +
	                    '</li>' +
	                   '<li class="k-state-default k-nav-next"><a role="button" href="\\#" class="k-link"><span class="k-icon k-i-arrow-60-right"></span></a></li>' +
	                '</ul>' +
	            '</div>'),
	        MOBILEDATERANGEEDITOR = function(container, options) {
	            var attr = { name: options.field };
	            var datepicker_role = !input_support.date ? kendo.attr("role") + '="datepicker" ' : "";
	            var datetimepicker_role = kendo.attr("role") + '="datetimepicker" ';
	            var isAllDay = options.model.isAllDay;
	            var dateTimeValidate = kendo.attr("validate") + "='" + (!isAllDay) + "'";
	            var dateValidate = kendo.attr("validate") + "='" + isAllDay + "'";

	            appendTimezoneAttr(attr, options);
	            appendDateCompareValidator(attr, options);

	            $('<input type="datetime-local" required ' + kendo.attr("type") + '="date" ' + datetimepicker_role + kendo.attr("bind") + '="value:' + options.field +',invisible:isAllDay" ' +
	                dateTimeValidate + '/>')
	                .attr(attr).appendTo(container);

	            $('<input type="date" required ' + kendo.attr("type") + '="date" ' + datepicker_role + kendo.attr("bind") + '="value:' + options.field +',visible:isAllDay" ' +
	                dateValidate + '/>')
	                .attr(attr).appendTo(container);

	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        },
	        DATERANGEEDITOR = function(container, options) {
	            var attr = { name: options.field },
	                isAllDay = options.model.isAllDay,
	                dateTimeValidate = kendo.attr("validate") + "='" + (!isAllDay) + "' ",
	                dateValidate = kendo.attr("validate") + "='" + isAllDay + "' ";

	            appendTimezoneAttr(attr, options);
	            appendDateCompareValidator(attr, options);

	            $('<input type="text" required ' + kendo.attr("type") + '="date"' + ' ' + kendo.attr("role") + '="datetimepicker" ' + kendo.attr("bind") + '="value:' + options.field +',invisible:isAllDay" ' +
	                dateTimeValidate + '/>')
	            .attr(attr).appendTo(container);

	            $('<input type="text" required ' + kendo.attr("type") + '="date"' + ' '  + kendo.attr("role") + '="datepicker" ' + kendo.attr("bind") + '="value:' + options.field +',visible:isAllDay" ' +
	                dateValidate + '/>')
	            .attr(attr).appendTo(container);

	            $('<span ' + kendo.attr("bind") + '="text: ' + options.field + 'Timezone"></span>').appendTo(container);

	            if (options.field === "end") {
	                $('<span ' + kendo.attr("bind") + '="text: startTimezone, invisible: endTimezone"></span>').appendTo(container);
	            }

	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        },
	        RECURRENCEEDITOR = function(container, options) {
	            $('<div ' + kendo.attr("bind") + '="value:' + options.field +'" />')
	                .attr({
	                    name: options.field
	                })
	                .appendTo(container)
	                .kendoRecurrenceEditor({
	                    start: options.model.start,
	                    timezone: options.timezone,
	                    messages: options.messages
	                });
	        },
	        MOBILERECURRENCEEDITOR = function(container, options) {
	            $('<div ' + kendo.attr("bind") + '="value:' + options.field +'" />')
	                .attr({
	                    name: options.field
	                })
	                .appendTo(container)
	                .kendoMobileRecurrenceEditor({
	                    start: options.model.start,
	                    timezone: options.timezone,
	                    messages: options.messages,
	                    pane: options.pane,
	                    value: options.model[options.field]
	                });
	        },
	        MOBILETIMEZONEPOPUP = function(container, options) {
	            var text = timezoneButtonText(options.model, options.messages.noTimezone);

	            $('<a href="#" class="k-button k-timezone-button" data-bind="invisible:isAllDay">' + text + '</a>').click(options.click).appendTo(container);
	        },
	        TIMEZONEPOPUP = function(container, options) {
	            $('<a href="#" class="k-button" data-bind="invisible:isAllDay">' + options.messages.timezoneEditorButton + '</a>').click(options.click).appendTo(container);
	        },
	        MOBILETIMEZONEEDITOR = function(container, options) {
	            $('<div ' + kendo.attr("bind") + '="value:' + options.field +'" />')
	                .attr({
	                    name: options.field
	                })
	                .toggle(options.visible)
	                .appendTo(container)
	                .kendoMobileTimezoneEditor({
	                    optionLabel: options.noTimezone
	                });
	        },
	        TIMEZONEEDITOR = function(container, options) {
	            var visible = options.visible || options.visible === undefined;
	            $('<div ' + kendo.attr("bind") + '="value:' + options.field +'" />')
	                .attr({ name: options.field })
	                .toggle(visible)
	                .appendTo(container)
	                .kendoTimezoneEditor({
	                    optionLabel: options.noTimezone
	                });
	        };

	    function timezoneButtonText(model, message) {
	        message = message || "";

	        if (model.startTimezone) {
	            message = model.startTimezone;

	            if (model.endTimezone) {
	                message += " | " + model.endTimezone;
	            }
	        }

	        return message;
	    }

	    function appendTimezoneAttr(attrs, options) {
	        var timezone = options.timezone;

	        if (timezone) {
	            attrs[kendo.attr("timezone")] = timezone;
	        }
	    }

	    function appendDateCompareValidator(attrs, options) {
	        var validationRules = options.model.fields[options.field].validation;

	        if (validationRules) {
	            var dateCompareRule = validationRules.dateCompare;
	            if (dateCompareRule && isPlainObject(dateCompareRule) && dateCompareRule.message) {
	                attrs[kendo.attr("dateCompare-msg")] = dateCompareRule.message;
	            }
	        }
	    }

	    function wrapDataAccess(originalFunction, timezone) {
	        return function(data) {
	            data = originalFunction(data);

	            convertData(data, "apply",  timezone);

	            return data || [];
	        };
	    }

	    function wrapDataSerialization(originalFunction, timezone) {
	        return function(data) {

	            if (data) {
	                if (toString.call(data) !== "[object Array]" && !(data instanceof kendo.data.ObservableArray)) {
	                    data = [data];
	                }
	            }

	            convertData(data, "remove",  timezone, true);

	            data = originalFunction(data);

	            return data || [];
	        };
	    }

	    function convertData(data, method, timezone, removeUid) {
	        var event,
	            idx,
	            length;

	        data = data || [];

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            event = data[idx];

	            if (removeUid) {
	                if (event.startTimezone || event.endTimezone) {
	                    if (timezone) {
	                        event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);
	                        event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);

	                        event.start = kendo.timezone[method](event.start, timezone);
	                        event.end = kendo.timezone[method](event.end, timezone);
	                    } else {
	                        event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);
	                        event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);
	                    }

	                } else if (timezone) {
	                    event.start = kendo.timezone[method](event.start, timezone);
	                    event.end = kendo.timezone[method](event.end, timezone);
	                }
	            } else {
	                if (event.startTimezone || event.endTimezone) {
	                    event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);
	                    event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);

	                    if (timezone) {
	                        event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);
	                        event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);
	                    }

	                } else if (timezone) {
	                    event.start = kendo.timezone[method](event.start, timezone);
	                    event.end = kendo.timezone[method](event.end, timezone);
	                }
	            }

	            if (removeUid) {
	                delete event.uid;
	            }
	        }
	        return data;
	    }

	    function getOccurrenceByUid(data, uid) {
	        var length = data.length,
	            idx = 0,
	            event;

	        for (; idx < length; idx++) {
	            event = data[idx];

	            if (event.uid === uid) {
	                return event;
	            }
	        }
	    }

	    var SchedulerDataReader = kendo.Class.extend({
	        init: function(schema, reader) {
	            var timezone = schema.timezone;

	            this.reader = reader;

	            if (reader.model) {
	                this.model = reader.model;
	            }

	            this.timezone = timezone;
	            this.data = wrapDataAccess($.proxy(this.data, this), timezone);
	            this.serialize = wrapDataSerialization($.proxy(this.serialize, this), timezone);
	        },
	        errors: function(data) {
	            return this.reader.errors(data);
	        },
	        parse: function(data) {
	            return this.reader.parse(data);
	        },
	        data: function(data) {
	            return this.reader.data(data);
	        },
	        total: function(data) {
	            return this.reader.total(data);
	        },
	        groups: function(data) {
	            return this.reader.groups(data);
	        },
	        aggregates: function(data) {
	            return this.reader.aggregates(data);
	        },
	        serialize: function(data) {
	            return this.reader.serialize(data);
	        }
	    });

	    function applyZone(date, fromZone, toZone) {
	        if (toZone) {
	            date = kendo.timezone.convert(date, fromZone, toZone);
	        } else {
	            date = kendo.timezone.remove(date, fromZone);
	        }

	        return date;
	    }

	    function dateCompareValidator(input) {
	        if (input.filter("[name=end]").length) {
	            var container = input.closest(".k-scheduler-edit-form");
	            var startInput = container.find("[name=start]:visible");
	            var endInput = container.find("[name=end]:visible");

	            if (endInput[0] && startInput[0]) {
	                var start, end;
	                var startPicker = kendo.widgetInstance(startInput, kendo.ui);
	                var endPicker = kendo.widgetInstance(endInput, kendo.ui);

	                var editable = container.data("kendoEditable");
	                var model = editable ? editable.options.model : null;

	                if (startPicker && endPicker) {
	                    start = startPicker.value();
	                    end = endPicker.value();
	                } else {
	                    start = kendo.parseDate(startInput.val());
	                    end = kendo.parseDate(endInput.val());
	                }

	                if (start && end) {
	                    if (model) {
	                        var timezone = startInput.attr(kendo.attr("timezone"));
	                        var startTimezone = model.startTimezone;
	                        var endTimezone = model.endTimezone;

	                        startTimezone = startTimezone || endTimezone;
	                        endTimezone = endTimezone || startTimezone;

	                        if (startTimezone) {
	                            start = applyZone(start, startTimezone, timezone);
	                            end = applyZone(end, endTimezone, timezone);
	                        }
	                    }

	                    return start <= end;
	                }
	            }
	        }

	        return true;
	    }

	    var SchedulerEvent = kendo.data.Model.define({
	        init: function(value) {
	            var that = this;

	            kendo.data.Model.fn.init.call(that, value);

	            that._defaultId = that.defaults[that.idField];
	        },

	        _time: function(field) {
	            var date = this[field];
	            var fieldTime = "_" + field + "Time";

	            if (this[fieldTime]) {
	                return this[fieldTime] - kendo.date.toUtcTime(kendo.date.getDate(date));
	            }

	            return getMilliseconds(date);
	        },

	        _date: function(field) {
	            var fieldTime = "_" + field + "Time";

	            if (this[fieldTime]) {
	                return this[fieldTime] - this._time(field);
	            }

	            return kendo.date.getDate(this[field]);
	        },

	        clone: function(options, updateUid) {
	            var uid = this.uid,
	                event = new this.constructor($.extend({}, this.toJSON(), options));

	            if (!updateUid) {
	                event.uid = uid;
	            }

	            return event;
	        },

	        duration: function() {
	            var end = this.end;
	            var start = this.start;
	            var offset = (end.getTimezoneOffset() - start.getTimezoneOffset()) * kendo.date.MS_PER_MINUTE;

	            return end - start - offset;
	        },

	        expand: function(start, end, zone) {
	            return recurrence ? recurrence.expand(this, start, end, zone) : [this];
	        },

	        update: function(eventInfo) {
	            for (var field in eventInfo) {
	                this.set(field, eventInfo[field]);
	            }

	            if (this._startTime) {
	                this.set("_startTime", kendo.date.toUtcTime(this.start));
	            }

	            if (this._endTime) {
	                this.set("_endTime", kendo.date.toUtcTime(this.end));
	            }
	        },

	        isMultiDay: function() {
	            return this.isAllDay || this.duration() >= kendo.date.MS_PER_DAY;
	        },

	        isException: function() {
	            return !this.isNew() && this.recurrenceId;
	        },

	        isOccurrence: function() {
	            return this.isNew() && this.recurrenceId;
	        },

	        isRecurring: function() {
	            return !!(this.recurrenceRule || this.recurrenceId);
	        },

	        isRecurrenceHead: function() {
	            return !!(this.id && this.recurrenceRule);
	        },

	        toOccurrence: function(options) {
	            options = $.extend(options, {
	                recurrenceException: null,
	                recurrenceRule: null,
	                recurrenceId: this.id || this.recurrenceId
	            });

	            options[this.idField] = this.defaults[this.idField];

	            return this.clone(options, true);
	        },

	        toJSON: function() {
	            var obj = kendo.data.Model.fn.toJSON.call(this);
	            obj.uid = this.uid;

	            delete obj._startTime;
	            delete obj._endTime;

	            return obj;
	        },

	        shouldSerialize: function(field) {
	            return kendo.data.Model.fn.shouldSerialize.call(this, field) && field !== "_defaultId";
	        },

	        set: function(key, value) {
	            var isAllDay = this.isAllDay || false;

	            kendo.data.Model.fn.set.call(this, key, value);

	            if (key == "isAllDay" && value != isAllDay) {
	                var start = kendo.date.getDate(this.start);
	                var end = new Date(this.end);
	                var milliseconds = kendo.date.getMilliseconds(end);

	                if (milliseconds === 0 && value) {
	                    milliseconds = MS_PER_DAY;
	                }

	                this.set("start", start);

	                if (value === true) {
	                    kendo.date.setTime(end, -milliseconds);

	                    if (end < start) {
	                        end = start;
	                    }
	                } else {
	                    kendo.date.setTime(end, MS_PER_DAY - milliseconds);
	                }

	                this.set("end", end);
	            }
	        },
	        id: "id",
	        fields: {
	            id: { type: "number" },
	            title: { defaultValue: "", type: "string" },
	            start: { type: "date", validation: { required: true } },
	            startTimezone: { type: "string" },
	            end: { type: "date", validation: { required: true, dateCompare: { value: dateCompareValidator } } },
	            endTimezone: { type: "string" },
	            recurrenceRule: { defaultValue: "", type: "string" },
	            recurrenceException: { defaultValue: "", type: "string" },
	            isAllDay: { type: "boolean", defaultValue: false },
	            description: { type: "string" }
	        }
	    });

	    var SchedulerDataSource = DataSource.extend({
	        init: function(options) {

	            DataSource.fn.init.call(this, extend(true, {}, {
	                schema: {
	                    modelBase: SchedulerEvent,
	                    model: SchedulerEvent
	                }
	            }, options));

	            this.reader = new SchedulerDataReader(this.options.schema, this.reader);
	        },

	        expand: function(start, end) {
	            var data = this.view(),
	                filter = {};

	            if (start && end) {
	                end = new Date(end.getTime() + MS_PER_DAY - 1);

	                filter = {
	                    logic: "or",
	                    filters: [
	                        {
	                            logic: "and",
	                            filters: [
	                                { field: "start", operator: "gte", value: start },
	                                { field: "end", operator: "gte", value: start },
	                                { field: "start", operator: "lte", value: end }
	                            ]
	                        },
	                        {
	                            logic: "and",
	                            filters: [
	                                { field: "start", operator: "lte", value: new Date(start.getTime() + MS_PER_DAY - 1) },
	                                { field: "end", operator: "gte", value: start }
	                            ]
	                        }
	                    ]
	                };

	                data = new kendo.data.Query(expandAll(data, start, end, this.reader.timezone)).filter(filter).toArray();
	            }

	            return data;
	        },

	        cancelChanges: function(model) {
	            if (model && model.isOccurrence()) {
	                this._removeExceptionDate(model);
	            }

	            DataSource.fn.cancelChanges.call(this, model);
	        },

	        insert: function(index, model) {
	            if (!model) {
	                return;
	            }

	            if (!(model instanceof SchedulerEvent)) {
	                var eventInfo = model;

	                model = this._createNewModel();
	                model.accept(eventInfo);
	            }

	            if ((!this._pushCreated && model.isRecurrenceHead()) || model.recurrenceId) {
	                model = model.recurrenceId ? model : model.toOccurrence();
	                this._addExceptionDate(model);
	            }

	            return DataSource.fn.insert.call(this, index, model);
	        },

	        pushCreate: function(items) {
	            this._pushCreated = true;
	            DataSource.fn.pushCreate.call(this, items);
	            this._pushCreated = false;
	        },

	        remove: function(model) {
	            if (model.isRecurrenceHead()) {
	                this._removeExceptions(model);
	            } else if (model.isRecurring()) {
	                this._addExceptionDate(model);
	            }

	            return DataSource.fn.remove.call(this, model);
	        },

	        _removeExceptions: function(model) {
	            var data = this.data().slice(0),
	                item = data.shift(),
	                id = model.id;

	            while(item) {
	                if (item.recurrenceId === id) {
	                    DataSource.fn.remove.call(this, item);
	                }

	                item = data.shift();
	            }

	            model.set(RECURRENCE_EXCEPTION, "");
	        },

	        _removeExceptionDate: function(model) {
	            if (model.recurrenceId) {
	                var head = this.get(model.recurrenceId);

	                if (head) {
	                    var start = model.start;
	                    var replaceRegExp = new RegExp("(\\" + EXCEPTION_SEPARATOR + "?)" + recurrence.toExceptionString(start, this.reader.timezone));
	                    var recurrenceException = (head.recurrenceException || "").replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\,$/, "");

	                    head.set(RECURRENCE_EXCEPTION, recurrenceException.replace(replaceRegExp, ""));
	                }
	            }
	        },

	        _addExceptionDate: function(model) {
	            var start = model.start;
	            var zone = this.reader.timezone;
	            var head = this.get(model.recurrenceId);
	            var recurrenceException = (head.recurrenceException || "").replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\,$/, "");

	            if (!recurrence.isException(recurrenceException, start, zone)) {
	                var newException = recurrence.toExceptionString(start, zone);
	                head.set(RECURRENCE_EXCEPTION, recurrenceException + (recurrenceException && newException ? EXCEPTION_SEPARATOR : "") + newException);
	            }
	        }
	    });

	    function expandAll(events, start, end, zone) {
	        var length = events.length,
	            data = [],
	            idx = 0;

	        for (; idx < length; idx++) {
	            data = data.concat(events[idx].expand(start, end, zone));
	        }

	        return data;
	    }

	    SchedulerDataSource.create = function(options) {
	        if (isArray(options) || options instanceof kendo.data.ObservableArray) {
	            options = { data: options };
	        }

	        var dataSource = options || {},
	            data = dataSource.data;

	        dataSource.data = data;

	        if (!(dataSource instanceof SchedulerDataSource) && dataSource instanceof kendo.data.DataSource) {
	            throw new Error("Incorrect DataSource type. Only SchedulerDataSource instances are supported");
	        }

	        return dataSource instanceof SchedulerDataSource ? dataSource : new SchedulerDataSource(dataSource);
	    };

	    extend(true, kendo.data, {
	       SchedulerDataSource: SchedulerDataSource,
	       SchedulerDataReader: SchedulerDataReader,
	       SchedulerEvent: SchedulerEvent
	    });

	    var defaultCommands = {
	        update: {
	            text: "Save",
	            className: "k-primary k-scheduler-update"
	        },
	        canceledit: {
	            text: "Cancel",
	            className: "k-scheduler-cancel"
	        },
	        destroy: {
	            text: "Delete",
	            imageClass: "k-i-close",
	            className: "k-primary k-scheduler-delete",
	            iconClass: "k-icon"
	        }
	    };

	    function trimOptions(options) {
	        delete options.name;
	        delete options.prefix;

	        delete options.remove;
	        delete options.edit;
	        delete options.add;
	        delete options.navigate;

	        return options;
	    }

	    /*
	    function fieldType(field) {
	        field = field != null ? field : "";
	        return field.type || $.type(field) || "string";
	    }
	    */

	    function createValidationAttributes(model, field) {
	        var modelField = (model.fields || model)[field];
	        var specialRules = ["url", "email", "number", "date", "boolean"];
	        var validation = modelField ? modelField.validation : {};
	        // var type = fieldType(modelField);
	        var datatype = kendo.attr("type");
	        var inArray = $.inArray;
	        var ruleName;
	        var rule;

	        var attr = {};

	        for (ruleName in validation) {
	            rule = validation[ruleName];

	            if (inArray(ruleName, specialRules) >= 0) {
	                attr[datatype] = ruleName;
	            } else if (!kendo.isFunction(rule)) {
	                attr[ruleName] = isPlainObject(rule) ? (rule.value || ruleName) : rule;
	            }

	            attr[kendo.attr(ruleName + "-msg")] = rule.message;
	        }

	        return attr;
	    }

	    function dropDownResourceEditor(resource, model) {
	        var attr = createValidationAttributes(model, resource.field);

	        return function(container) {
	           $(kendo.format('<select data-{0}bind="value:{1}">', kendo.ns, resource.field))
	             .appendTo(container)
	             .attr(attr)
	             .kendoDropDownList({
	                 dataTextField: resource.dataTextField,
	                 dataValueField: resource.dataValueField,
	                 dataSource: resource.dataSource,
	                 valuePrimitive: resource.valuePrimitive,
	                 optionLabel: "None",
	                 template: kendo.format('<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#', resource.dataColorField, resource.dataTextField)
	             });
	       };
	    }

	    function descriptionEditor(options) {
	        var attr = createValidationAttributes(options.model, options.field);

	        return function(container) {
	            $('<textarea name="description" class="k-textbox"/>').attr(attr)
	                .appendTo(container);
	        };
	    }

	    function multiSelectResourceEditor(resource, model) {
	        var attr = createValidationAttributes(model, resource.field);

	        return function(container) {
	           $(kendo.format('<select data-{0}bind="value:{1}">', kendo.ns, resource.field))
	             .appendTo(container)
	             .attr(attr)
	             .kendoMultiSelect({
	                 dataTextField: resource.dataTextField,
	                 dataValueField: resource.dataValueField,
	                 dataSource: resource.dataSource,
	                 valuePrimitive: resource.valuePrimitive,
	                 itemTemplate: kendo.format('<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#', resource.dataColorField, resource.dataTextField),
	                 tagTemplate: kendo.format('<span class="k-scheduler-mark" style="background-color:#= data.{0}?{0}:"none" #"></span>#={1}#', resource.dataColorField, resource.dataTextField)
	             });
	       };
	    }

	    function multiSelectResourceEditorMobile(resource, model) {
	        var attr = createValidationAttributes(model, resource.field);

	        return function(container) {
	            var options = "";
	            var view = resource.dataSource.view();

	            for (var idx = 0, length = view.length; idx < length; idx++) {
	                options += kendo.format('<option value="{0}">{1}</option>',
	                    kendo.getter(resource.dataValueField)(view[idx]),
	                    kendo.getter(resource.dataTextField)(view[idx])
	                );
	            }

	            $(kendo.format('<select data-{0}bind="value:{1}" multiple="multiple" data-{0}value-primitive="{3}">{2}</select>',
	                kendo.ns,
	                resource.field,
	                options,
	                resource.valuePrimitive
	             ))
	             .appendTo(container)
	             .attr(attr);
	       };
	    }

	    function moveEventRange(event, distance) {
	        var duration = event.end.getTime() - event.start.getTime();

	        var start = new Date(event.start.getTime());

	        kendo.date.setTime(start, distance);

	        var end = new Date(start.getTime());

	        kendo.date.setTime(end, duration, true);

	        return {
	            start: start,
	            end: end
	        };
	    }

	    var editors = {
	        mobile: {
	            dateRange: MOBILEDATERANGEEDITOR,
	            timezonePopUp: MOBILETIMEZONEPOPUP,
	            timezone: MOBILETIMEZONEEDITOR,
	            recurrence: MOBILERECURRENCEEDITOR,
	            description: descriptionEditor,
	            multipleResources: multiSelectResourceEditorMobile,
	            resources: dropDownResourceEditor
	        },
	        desktop: {
	            dateRange: DATERANGEEDITOR,
	            timezonePopUp: TIMEZONEPOPUP,
	            timezone: TIMEZONEEDITOR,
	            recurrence: RECURRENCEEDITOR,
	            description: descriptionEditor,
	            multipleResources: multiSelectResourceEditor,
	            resources: dropDownResourceEditor
	        }
	    };

	    var Editor = kendo.Observable.extend({
	        init: function(element, options) {

	            kendo.Observable.fn.init.call(this);

	            this.element = element;
	            this.options = extend(true, {}, this.options, options);
	            this.createButton = this.options.createButton;

	            this.toggleDateValidationHandler = proxy(this._toggleDateValidation, this);
	        },

	        _toggleDateValidation: function(e) {
	            if (e.field == "isAllDay") {
	                var container = this.container,
	                    isAllDay = this.editable.options.model.isAllDay,
	                    bindAttribute = kendo.attr("bind"),
	                    element, isDateTimeInput, shouldValidate;
	                container.find("[" + bindAttribute+ "*=end],[" + bindAttribute + "*=start]").each(function() {
	                    element = $(this);
	                    if (valueStartEndBoundRegex.test(element.attr(bindAttribute))) {
	                        isDateTimeInput = element.is("[" + kendo.attr("role") + "=datetimepicker],[type*=datetime]");
	                        shouldValidate = isAllDay !== isDateTimeInput;
	                        element.attr(kendo.attr("validate"), shouldValidate);
	                    }
	                });
	            }
	        },

	        fields: function(editors, model) {
	            var that = this;

	            var messages = that.options.messages;
	            var timezone = that.options.timezone;

	            var click = function(e) {
	                e.preventDefault();
	                that._initTimezoneEditor(model, this);
	            };

	            var fields = [
	                { field: "title", title: messages.editor.title /*, format: field.format, editor: field.editor, values: field.values*/ },
	                { field: "start", title: messages.editor.start, editor: editors.dateRange, timezone: timezone },
	                { field: "end", title: messages.editor.end, editor: editors.dateRange, timezone: timezone },
	                { field: "isAllDay", title: messages.editor.allDayEvent }
	            ];

	            if (kendo.timezone.windows_zones) {
	                fields.push({ field: "timezone", title: messages.editor.timezone, editor: editors.timezonePopUp, click: click, messages: messages.editor, model: model });
	                fields.push({ field: "startTimezone", title: messages.editor.startTimezone, editor: editors.timezone, noTimezone: messages.editor.noTimezone });
	                fields.push({ field: "endTimezone", title: messages.editor.endTimezone, editor: editors.timezone, noTimezone: messages.editor.noTimezone });
	            }

	            if (!model.recurrenceId) {
	                fields.push({ field: "recurrenceRule", title: messages.editor.repeat, editor: editors.recurrence, timezone: timezone, messages: messages.recurrenceEditor, pane: this.pane });
	            }

	            if ("description" in model) {
	                fields.push({ field: "description", title: messages.editor.description, editor: editors.description({model: model, field: "description"}) });
	            }

	            for (var resourceIndex = 0; resourceIndex < this.options.resources.length; resourceIndex++) {
	                var resource = this.options.resources[resourceIndex];
	                fields.push({
	                    field: resource.field,
	                    title: resource.title,
	                    editor: resource.multiple? editors.multipleResources(resource, model) : editors.resources(resource, model)
	                });
	            }

	            return fields;
	        },

	        end: function() {
	            return this.editable.end();
	        },

	        _buildEditTemplate: function(model, fields, editableFields) {
	            var messages = this.options.messages;
	            var settings = extend({}, kendo.Template, this.options.templateSettings);
	            var paramName = settings.paramName;
	            var template = this.options.editable.template;

	            var html = "";

	            if (template) {
	                if (typeof template === STRING) {
	                    template = window.unescape(template);
	                }
	                html += (kendo.template(template, settings))(model);
	            } else {
	                for (var idx = 0, length = fields.length; idx < length; idx++) {
	                    var field = fields[idx];

	                    if (field.field === "startTimezone") {
	                        html += '<div class="k-popup-edit-form k-scheduler-edit-form k-scheduler-timezones" style="display:none">';
	                        html += '<div class="k-edit-form-container">';
	                        html += '<div class="k-edit-label"></div>';
	                        html += '<div class="k-edit-field"><label class="k-check"><input class="k-timezone-toggle" type="checkbox" />' + messages.editor.separateTimezones +'</label></div>';
	                    }

	                    html += '<div class="k-edit-label"><label for="' + field.field + '">' + (field.title || field.field || "") + '</label></div>';

	                    if ((!model.editable || model.editable(field.field))) {
	                        editableFields.push(field);
	                        html += '<div ' + kendo.attr("container-for") + '="' + field.field + '" class="k-edit-field"></div>';
	                    } else {
	                        var tmpl = "#:";

	                        if (field.field) {
	                            field = kendo.expr(field.field, paramName);
	                            tmpl += field + "==null?'':" + field;
	                        } else {
	                            tmpl += "''";
	                        }

	                        tmpl += "#";

	                        tmpl = kendo.template(tmpl, settings);

	                        html += '<div class="k-edit-field">' + tmpl(model) + '</div>';
	                    }

	                    if (field.field === "endTimezone") {
	                        html += this._createEndTimezoneButton();
	                    }
	                }
	            }

	            return html;
	        },

	        _createEndTimezoneButton: function() {
	            return '</div></div>';
	        },

	        _revertTimezones: function(model) {
	            model.set("startTimezone", this._startTimezone);
	            model.set("endTimezone", this._endTimezone);

	            delete this._startTimezone;
	            delete this._endTimezone;
	        }
	    });

	    var MobileEditor = Editor.extend({
	        init: function() {
	            Editor.fn.init.apply(this, arguments);

	            this.pane = kendo.mobile.ui.Pane.wrap(this.element);
	            this.pane.element.parent().css("height", this.options.height);
	            this.view = this.pane.view();
	            this._actionSheetButtonTemplate = kendo.template('<li><a #=attr# class="k-button #=className#" href="\\#">#:text#</a></li>');

	            this._actionSheetPopupOptions = $(document.documentElement).hasClass("km-root") ? { modal: false } : {
	                align: "bottom center",
	                position: "bottom center",
	                effect: "slideIn:up"
	            };
	        },

	        options: {
	            animations: {
	                left: "slide",
	                right: "slide:right"
	            }
	        },

	        destroy: function() {
	            this.close();
	            this.unbind();
	            this.pane.destroy();
	        },

	        _initTimezoneEditor: function(model) {
	            var that = this;
	            var pane = that.pane;
	            var messages = that.options.messages;
	            var timezoneView = that.timezoneView;
	            var container = that.container.find(".k-scheduler-timezones");
	            var checkbox = container.find(".k-timezone-toggle");
	            var endTimezoneRow = container.find(".k-edit-label:last").add(container.find(".k-edit-field:last"));
	            var startTimezoneChange = function(e) {
	                if (e.field === "startTimezone") {
	                    var value = model.startTimezone;

	                    checkbox.prop("disabled", !value);

	                    if (!value) {
	                        endTimezoneRow.hide();
	                        model.set("endTimezone", "");
	                        checkbox.prop("checked", false);
	                    }
	                }
	            };

	            that._startTimezone = model.startTimezone || "";
	            that._endTimezone = model.endTimezone || "";

	            if (!timezoneView) {
	                var html = '<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form k-mobile-list">' +
	                           '<div data-role="header" class="k-header"><a href="#" class="k-button k-scheduler-cancel">' + messages.cancel + '</a>' +
	                           messages.editor.timezoneTitle + '<a href="#" class="k-button k-scheduler-update">' + messages.save + '</a></div></div>';

	                this.timezoneView = timezoneView = pane.append(html);

	                timezoneView.contentElement().append(container.show());

	                timezoneView.element.on(CLICK + NS, ".k-scheduler-cancel, .k-scheduler-update", function(e) {
	                    e.preventDefault();
	                    e.stopPropagation();

	                    if ($(this).hasClass("k-scheduler-cancel")) {
	                        that._revertTimezones(model);
	                    }

	                    model.unbind("change", startTimezoneChange);

	                    var editView = pane.element.find("#edit").data("kendoMobileView");

	                    var text = timezoneButtonText(model, messages.editor.noTimezone);

	                    editView.contentElement().find(".k-timezone-button").text(text);

	                    pane.navigate(editView, that.options.animations.right);
	                });

	                checkbox.click(function() {
	                    endTimezoneRow.toggle(checkbox.prop("checked"));
	                    model.set("endTimezone", "");
	                });

	                model.bind("change", startTimezoneChange);
	            }

	            checkbox.prop("checked", model.endTimezone).prop("disabled", !model.startTimezone);

	            if (model.endTimezone) {
	                endTimezoneRow.show();
	            } else {
	                endTimezoneRow.hide();
	            }

	            pane.navigate(timezoneView, that.options.animations.left);
	        },

	        _createActionSheetButton: function(options) {
	            options.template = this._actionSheetButtonTemplate;
	            return  this.createButton(options);
	        },

	        showDialog: function(options) {
	            var type = "";
	            var html = "<ul><li class=\"km-actionsheet-title\">" + options.title + "</li>";

	            var target = this.element.find(".k-event[" + kendo.attr("uid") + "='" + options.model.uid + "']");

	            if (this.container) {
	                target = this.container.find(".k-scheduler-delete");

	                if (target[0]) {
	                    type = 'phone';
	                }
	            }

	            for (var buttonIndex = 0; buttonIndex < options.buttons.length; buttonIndex++) {
	                html+= this._createActionSheetButton(options.buttons[buttonIndex]);
	            }

	            html += "</ul>";

	            var actionSheet = $(html)
	                .appendTo(this.pane.view().element)
	                .kendoMobileActionSheet({
	                    type: type,
	                    cancel: this.options.messages.cancel,
	                    cancelTemplate: '<li class="km-actionsheet-cancel"><a class="k-button" href="\\#">#:cancel#</a></li>',
	                    close: function() {
	                        this.destroy();
	                    },
	                    command: function(e) {
	                        var buttonIndex = actionSheet.element.find("li:not(.km-actionsheet-cancel) > .k-button").index($(e.currentTarget));
	                        if (buttonIndex > -1) {
	                            actionSheet.close();
	                            options.buttons[buttonIndex].click();
	                        }
	                    },
	                    popup: this._actionSheetPopupOptions
	                })
	                .data("kendoMobileActionSheet");

	            actionSheet.open(target);
	        },

	        editEvent: function(model) {
	            var pane = this.pane;
	            var html = "";

	            var messages = this.options.messages;
	            var updateText = messages.save;
	            var removeText = messages.destroy;
	            var cancelText = messages.cancel;
	            var titleText = messages.editor.editorTitle;

	            html += '<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form k-mobile-list" id="edit" ' + kendo.attr("uid") + '="' + model.uid + '">' +
	                '<div data-role="header" class="k-header"><a href="#" class="k-button k-scheduler-cancel">' + cancelText + '</a>' +
	                titleText + '<a href="#" class="k-button k-scheduler-update">' + updateText + '</a></div>';

	            var fields = this.fields(editors.mobile, model);

	            var that = this;

	            var editableFields = [];

	            html += this._buildEditTemplate(model, fields, editableFields);

	            if (!model.isNew() && this.options.editable && this.options.editable.destroy !== false) {
	                html += '<div class="k-edit-buttons"><a href="#" class="k-scheduler-delete k-button">' + removeText + '</a></div>';
	            }

	            html += "</div>";

	            var view = pane.append(html);

	            var container = this.container = view.element;

	            this.editable = container.kendoEditable({
	                fields: editableFields,
	                model: model,
	                clearContainer: false,
	                target: that.options.target,

	                validateOnBlur: true
	            }).data("kendoEditable");

	            // TODO: Replace this code with labels and for="ID"
	            container.find("input[type=checkbox],input[type=radio]")
	                     .parent(".k-edit-field")
	                     .addClass("k-check")
	                     .prev(".k-edit-label")
	                     .addClass("k-check")
	                     .click(function() {
	                         $(this).next().children("input").click();
	                     });

	            if (!this.trigger("edit", { container: container, model: model })) {

	                container.on(CLICK + NS, "a.k-scheduler-edit, a.k-scheduler-cancel, a.k-scheduler-update, a.k-scheduler-delete", function(e) {
	                    e.preventDefault();
	                    e.stopPropagation();

	                    var button = $(this);

	                    if (!button.hasClass("k-scheduler-edit")) {

	                        var name = "cancel";

	                        if (button.hasClass("k-scheduler-update")) {
	                            name = "save";
	                        } else if (button.hasClass("k-scheduler-delete")) {
	                            name = "remove";
	                        }

	                        that.trigger(name, { container: container, model: model });
	                    } else {
	                        pane.navigate("#edit", that.options.animations.right);
	                    }
	                });

	                pane.navigate(view, that.options.animations.left);

	                model.bind("change", that.toggleDateValidationHandler);
	            } else {
	                this.trigger("cancel", { container: container, model: model });
	            }

	            return this.editable;
	        },

	        _views: function() {
	            return this.pane.element
	                    .find(kendo.roleSelector("view"))
	                    .not(this.view.element);
	        },

	        close: function() {
	            if (this.container) {
	                this.pane.navigate("", this.options.animations.right);

	                var views = this._views();
	                var view;

	                for (var idx = 0, length = views.length; idx < length; idx++) {
	                    view = views.eq(idx).data("kendoMobileView");
	                    if (view) {
	                       view.purge();
	                    }
	                }

	                views.remove();

	                this.container = null;
	                if (this.editable) {
	                    this.editable.options.model.unbind("change", this.toggleDateValidationHandler);
	                    this.editable.destroy();
	                    this.editable = null;
	                }
	                this.timezoneView = null;
	            }
	        }
	    });

	    var PopupEditor = Editor.extend({
	        destroy: function() {
	            this.close();
	            this.unbind();
	        },

	        editEvent: function(model) {
	            var that = this;
	            var editable = that.options.editable;
	            var html = '<div ' + kendo.attr("uid") + '="' + model.uid + '" class="k-popup-edit-form k-scheduler-edit-form"><div class="k-edit-form-container">';
	            var messages = that.options.messages;
	            var updateText = messages.save;
	            var cancelText = messages.cancel;
	            var deleteText = messages.destroy;

	            var fields = this.fields(editors.desktop, model);

	            var editableFields = [];

	            html += this._buildEditTemplate(model, fields, editableFields);

	            var attr;
	            var options = isPlainObject(editable) ? editable.window : {};

	            html += '<div class="k-edit-buttons k-state-default">';
	            html += this.createButton({ name: "update", text: updateText, attr: attr }) + this.createButton({ name: "canceledit", text: cancelText, attr: attr });

	            if (!model.isNew() && editable.destroy !== false) {
	                html += this.createButton({ name: "delete", text: deleteText, attr: attr });
	            }

	            html += '</div></div></div>';

	            var container = this.container = $(html)
	                .appendTo(that.element).eq(0)
	                .kendoWindow(extend({
	                    modal: true,
	                    resizable: false,
	                    draggable: true,
	                    title: messages.editor.editorTitle,
	                    visible: false,
	                    close: function(e) {
	                        if (e.userTriggered) {
	                            if (that.trigger(CANCEL, { container: container, model: model })) {
	                                e.preventDefault();
	                            }
	                        }
	                    }
	                }, options));

	            that.editable = container.kendoEditable({
	                fields: editableFields,
	                model: model,
	                clearContainer: false,
	                validateOnBlur: true,
	                target: that.options.target
	            }).data("kendoEditable");

	            if (!that.trigger(EDIT, { container: container, model: model })) {

	                container.data("kendoWindow").center().open();

	                container.on(CLICK + NS, "a.k-scheduler-cancel", function(e) {
	                    e.preventDefault();
	                    e.stopPropagation();

	                    that.trigger(CANCEL, { container: container, model: model });
	                });

	                container.on(CLICK + NS, "a.k-scheduler-update", function(e) {
	                    e.preventDefault();
	                    e.stopPropagation();

	                    that.trigger("save", { container: container, model: model });
	                });

	                container.on(CLICK + NS, "a.k-scheduler-delete", function(e) {
	                    e.preventDefault();
	                    e.stopPropagation();

	                    that.trigger(REMOVE, { container: container, model: model });
	                });

	                kendo.cycleForm(container);

	                model.bind("change", that.toggleDateValidationHandler);
	            } else {
	                that.trigger(CANCEL, { container: container, model: model });
	            }

	            return that.editable;
	        },

	        close: function() {
	            var that = this;

	            var destroy = function() {
	                if (that.editable) {
	                    that.editable.options.model.unbind("change", that.toggleDateValidationHandler);
	                    that.editable.destroy();
	                    that.editable = null;
	                    that.container = null;
	                }
	                if (that.popup) {
	                    that.popup.destroy();
	                    that.popup = null;
	                }
	            };

	            if (that.editable) {
	                if (that._timezonePopup && that._timezonePopup.data("kendoWindow")) {
	                    that._timezonePopup.data("kendoWindow").destroy();
	                    that._timezonePopup = null;
	                }

	                if (that.container.is(":visible")) {
	                    that.container.data("kendoWindow").bind("deactivate", destroy).close();
	                } else {
	                    destroy();
	                }
	            } else {
	                destroy();
	            }
	        },

	        _createEndTimezoneButton: function() {
	            var messages = this.options.messages;
	            var html = "";

	            html += '<div class="k-edit-buttons k-state-default">';
	            html += this.createButton({ name: "savetimezone", text: messages.save }) + this.createButton({ name: "canceltimezone", text: messages.cancel });
	            html += '</div></div></div>';

	            return html;
	        },

	        showDialog: function(options) {
	            var html = kendo.format("<div class='k-popup-edit-form'><div class='k-edit-form-container'><p class='k-popup-message'>{0}</p>", options.text);

	            html += '<div class="k-edit-buttons k-state-default">';

	            for (var buttonIndex = 0; buttonIndex < options.buttons.length; buttonIndex++) {
	                html+= this.createButton(options.buttons[buttonIndex]);
	            }

	            html += '</div></div></div>';

	            var wrapper = this.element;

	            if (this.popup) {
	                this.popup.destroy();
	            }

	            var popup = this.popup = $(html).appendTo(wrapper)
	                               .eq(0)
	                               .on("click", ".k-button", function(e) {
	                                    e.preventDefault();

	                                    popup.close();

	                                    var buttonIndex = $(e.currentTarget).index();

	                                    options.buttons[buttonIndex].click();
	                               })
	                               .kendoWindow({
	                                   modal: true,
	                                   resizable: false,
	                                   draggable: false,
	                                   title: options.title,
	                                   visible: false,
	                                   close: function() {
	                                       this.destroy();
	                                       wrapper.focus();
	                                   }
	                               })
	                               .getKendoWindow();

	            popup.center().open();
	        },

	        _initTimezoneEditor: function(model, activator) {
	            var that = this;
	            var container = that.container.find(".k-scheduler-timezones");
	            var checkbox = container.find(".k-timezone-toggle");
	            var endTimezoneRow = container.find(".k-edit-label:last").add(container.find(".k-edit-field:last"));
	            var saveButton = container.find(".k-scheduler-savetimezone");
	            var cancelButton = container.find(".k-scheduler-canceltimezone");
	            var timezonePopup = that._timezonePopup;
	            var startTimezoneChange = function(e) {
	                if (e.field === "startTimezone") {
	                    var value = model.startTimezone;

	                    checkbox.prop("disabled", !value);

	                    if (!value) {
	                        endTimezoneRow.hide();
	                        model.set("endTimezone", "");
	                        checkbox.prop("checked", false);
	                    }
	                }
	            };
	            var wnd;

	            that._startTimezone = model.startTimezone;
	            that._endTimezone = model.endTimezone;

	            if (!timezonePopup) {
	                that._timezonePopup = timezonePopup = container.kendoWindow({
	                    modal: true,
	                    resizable: false,
	                    draggable: true,
	                    title: that.options.messages.editor.timezoneEditorTitle,
	                    visible: false,
	                    close: function(e) {
	                        model.unbind("change", startTimezoneChange);

	                        if (e.userTriggered) {
	                            that._revertTimezones(model);
	                        }

	                        if (activator) {
	                            activator.focus();
	                        }
	                    }
	                });

	                checkbox.click(function() {
	                    endTimezoneRow.toggle(checkbox.prop("checked"));
	                    model.set("endTimezone", "");
	                });

	                saveButton.click(function(e) {
	                    e.preventDefault();
	                    wnd.close();
	                });

	                cancelButton.click(function(e) {
	                    e.preventDefault();
	                    that._revertTimezones(model);
	                    wnd.close();
	                });

	                model.bind("change", startTimezoneChange);
	            }

	            checkbox.prop("checked", model.endTimezone).prop("disabled", !model.startTimezone);

	            if (model.endTimezone) {
	                endTimezoneRow.show();
	            } else {
	                endTimezoneRow.hide();
	            }

	            wnd = timezonePopup.data("kendoWindow");
	            wnd.center().open();
	        }
	    });

	    var Scheduler = DataBoundWidget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            if (!that.options.views || !that.options.views.length) {
	                that.options.views = ["day", "week"];
	            }

	            that.resources = [];

	            that._initModel();

	            that._wrapper();

	            that._views();

	            that._toolbar();

	            that._dataSource();

	            that._resources();

	            that._resizeHandler = function() {
	                that.resize();
	            };

	            that.wrapper.on("mousedown" + NS + " selectstart" + NS, function(e) {
	                if (!$(e.target).is(":kendoFocusable")) {
	                    e.preventDefault();
	                }
	            });

	            if (that.options.editable && that.options.editable.resize !== false) {
	                that._resizable();
	            }

	            that._movable();

	            that._bindResize();

	            if(that.options.messages && that.options.messages.recurrence) {
	                recurrence.options = that.options.messages.recurrence;
	            }

	            that._selectable();

	            that._ariaId = kendo.guid();

	            that._createEditor();
	        },

	        _bindResize: function() {
	            $(window).on("resize" + NS, this._resizeHandler);
	        },

	        _unbindResize: function() {
	            $(window).off("resize" + NS, this._resizeHandler);
	        },

	        dataItems: function() {
	            var that = this;
	            var items = that.items();
	            var events = that._data;
	            var eventsUids = $.map(items, function(item) {
	                return $(item).attr("data-uid");
	            });
	            var i;
	            var key;

	            var dict = {};
	            var eventsUidsLength = eventsUids.length;
	            for (i = 0; i < eventsUidsLength; i++) {
	                dict[eventsUids[i]] = null;
	            }

	            var eventsCount = events.length;
	            for (i = 0; i < eventsCount; i++) {
	                var event = events[i];
	                if (dict[event.uid] !== undefined) {
	                    dict[event.uid] = event;
	                }
	            }

	            var sortedData = [];
	            for (key in dict) {
	                sortedData.push(dict[key]);
	            }

	            return sortedData;
	        },

	        _isMobile: function() {
	            var options = this.options;
	            return (options.mobile === true && kendo.support.mobileOS) || options.mobile === "phone" || options.mobile === "tablet";
	        },

	        _isMobilePhoneView: function() {
	            var options = this.options;
	            return (options.mobile === true && kendo.support.mobileOS && !kendo.support.mobileOS.tablet) || options.mobile === "phone";
	        },

	        _groupsByResource: function(resources, groupIndex, groupsArray, parentFieldValue, parentField) {
	            if (!groupsArray) {
	                groupsArray = [];
	            }

	            var resource = resources[0];
	            if (resource) {
	                var group;
	                var data = resource.dataSource.view();
	                var prevIndex = 0;

	                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
	                    var fieldValue = kendo.getter(resource.dataValueField)(data[dataIndex]);
	                    var currentGroupIndex = groupIndex + prevIndex + dataIndex;

	                    group = this._groupsByResource(resources.slice(1), currentGroupIndex, groupsArray, fieldValue, resource.field);
	                    group[resource.field] = fieldValue;
	                    prevIndex = group.groupIndex;

	                    if (parentField && parentFieldValue) {
	                        group[parentField] = parentFieldValue;
	                    }

	                    if (resources.length === 1) {
	                        group.groupIndex = groupIndex + dataIndex;
	                        groupsArray.push(group);
	                    }
	                }
	                return group;
	            } else {
	                return {};
	            }
	        },

	        data: function () {
	            return this._data;
	        },

	        select: function (options) {
	            var that = this;
	            var view = that.view();
	            var selection = that._selection;
	            var groups = view.groups;
	            var selectedGroups;

	            if (options === undefined) {
	                var selectedEvents;
	                var slots = view._selectedSlots;

	                if(!selection) {
	                    return [];
	                }

	                if (selection && selection.events) {
	                    selectedEvents = that._selectedEvents();
	                }

	                return {
	                    start: selection.start,
	                    end: selection.end,
	                    events: selectedEvents,
	                    slots: slots,
	                    resources: view._resourceBySlot(selection)
	                };
	            }

	            if (!options) {
	                that._selection = null;
	                that._old = null;
	                view.clearSelection();

	                return;
	            }

	            if ($.isArray(options)) {
	                options = {
	                    events: options.splice(0)
	                };
	            }

	            if (options.resources) {
	                var fieldName;
	                var filters = [];
	                var groupsByResource = [];

	                if (view.groupedResources) {
	                    that._groupsByResource(view.groupedResources, 0, groupsByResource);
	                }

	                for (fieldName in options.resources) {
	                    filters.push({ field: fieldName, operator: "eq", value: options.resources[fieldName]});
	                }

	                selectedGroups = new kendo.data.Query(groupsByResource)
	                    .filter(filters)
	                    .toArray();
	            }

	            if (options.events && options.events.length) {
	                that._selectEvents(options.events, selectedGroups);
	                that._select();

	                return;
	            }

	            if (groups && (options.start && options.end)) {
	                var rangeStart = getDate(view._startDate);
	                var rangeEnd = kendo.date.addDays(getDate(view._endDate),1);
	                var group;
	                var ranges;

	                if (options.start < rangeEnd && rangeStart <= options.end) {
	                    if (selectedGroups && selectedGroups.length) {
	                        group = groups[selectedGroups[0].groupIndex];
	                    } else {
	                        group = groups[0];
	                    }

	                    ranges = group.ranges(options.start, options.end, options.isAllDay, false);

	                    if (ranges.length) {
	                        that._selection = {
	                            start: kendo.timezone.toLocalDate(ranges[0].start.start),
	                            end: kendo.timezone.toLocalDate(ranges[ranges.length-1].end.end),
	                            groupIndex: ranges[0].start.groupIndex,
	                            index: ranges[0].start.index,
	                            isAllDay: ranges[0].start.isDaySlot,
	                            events: []
	                        };

	                        that._select();
	                    }
	                }
	            }
	        },

	        _selectEvents: function (eventsUids, selectedGroups) {
	            var that = this;
	            var idx;
	            var view = that.view();
	            var groups = view.groups;
	            var eventsLength = eventsUids.length;
	            var isGrouped = selectedGroups && selectedGroups.length;

	            for (idx = 0; idx < eventsLength; idx++) {
	                if (groups && isGrouped) {
	                    var currentGroup = groups[selectedGroups[0].groupIndex];
	                    var events = [];
	                    var timeSlotCollectionCount = currentGroup.timeSlotCollectionCount();
	                    var daySlotCollectionCount = currentGroup.daySlotCollectionCount();

	                    for (var collIdx = 0; collIdx < timeSlotCollectionCount; collIdx++) {
	                        events = events.concat(currentGroup.getTimeSlotCollection(collIdx).events());
	                    }

	                    for (var dayCollIdx = 0; dayCollIdx < daySlotCollectionCount; dayCollIdx++) {
	                        events = events.concat(currentGroup.getDaySlotCollection(dayCollIdx).events());
	                    }

	                    events = new kendo.data.Query(events)
	                        .filter({field: "element[0].getAttribute('data-uid')", operator: "eq", value: eventsUids[idx]})
	                        .toArray();

	                    if (events[0]) {
	                        that._createSelection(events[0].element);
	                    }
	                } else {
	                    var element = view.element.find(kendo.format(".k-event[data-uid={0}], .k-task[data-uid={0}]", eventsUids[idx]));

	                    if (element.length) {
	                        that._createSelection(element[0]);
	                    }
	                }
	            }
	        },

	        _selectable: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                selectEvent = kendo.support.mobileOS ? "touchend" : "mousedown";

	            if (!that.options.selectable) {
	                return;
	            }

	            that._tabindex();

	            wrapper.on(selectEvent + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event", function(e) {
	                var which = e.which;
	                var button = e.button;
	                var browser = kendo.support.browser;
	                var isRight = which && which === 3 || button && button == 2;

	                if (kendo.support.mobileOS && e.isDefaultPrevented()) {
	                    return;
	                }

	                if (!isRight) {
	                    that._createSelection(e.currentTarget);
	                }

	                wrapper.focus();

	                if (browser.msie && browser.version < 9) {
	                    setTimeout(function() {
	                        wrapper.focus();
	                    });
	                }
	            });

	            var mouseMoveHandler = $.proxy(that._mouseMove, that);

	            wrapper.on("mousedown" + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", function(e) {
	                var which = e.which;
	                var button = e.button;
	                var isRight = which && which === 3 || button && button == 2;

	                if (!isRight) {
	                    wrapper.on("mousemove" + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", mouseMoveHandler);
	                }
	            });

	            wrapper.on("mouseup" + NS + " mouseleave" + NS, function() {
	                wrapper.off("mousemove" + NS, ".k-scheduler-header-all-day td, .k-scheduler-content td", mouseMoveHandler);
	            });

	            wrapper.on("focus" + NS, function() {
	                if (!that._selection) {
	                    that._selectFirstSlot();
	                }

	                that._select();
	            });

	            wrapper.on("focusout" + NS, function() {
	                //that.view().clearSelection();
	                that._ctrlKey = that._shiftKey = false;
	            });

	            wrapper.on("keydown" + NS, proxy(that._keydown, that));

	            wrapper.on("keyup" + NS, function(e) {
	                that._ctrlKey = e.ctrlKey;
	                that._shiftKey = e.shiftKey;
	            });
	        },

	        _selectFirstSlot: function() {
	            this._createSelection(this.wrapper.find(".k-scheduler-content").find("td:first"));
	        },

	        _select: function() {
	            var that = this;
	            var view = that.view();
	            var wrapper = that.wrapper;
	            var current = view.current();
	            var selection = that._selection;

	           if (!selection) {
	               return;
	           }

	            if (current) {
	                current.removeAttribute("id");
	                current.removeAttribute("aria-label");
	                wrapper.removeAttr("aria-activedescendant");
	            }

	            view.select(selection);

	            current = view.current();

	            if (current && that._old !== current) {
	                var currentUid = $(current).data("uid");

	                if (that._old && currentUid &&
	                    currentUid === $(that._old).data("uid")) {
	                    return;
	                }

	                var labelFormat;
	                var data = selection;
	                var events = that._selectedEvents();
	                var slots = view._selectedSlots;

	                if (events[0]) {
	                    data = events[0] || selection;
	                    labelFormat = kendo.format(that.options.messages.ariaEventLabel, data.title, data.start, data.start);
	                } else {
	                    labelFormat = kendo.format(that.options.messages.ariaSlotLabel, data.start, data.end);
	                }

	                current.setAttribute("id", that._ariaId);
	                current.setAttribute("aria-label", labelFormat);
	                wrapper.attr("aria-activedescendant", that._ariaId);

	                that._old = current;

	                that.trigger("change", {
	                    start: selection.start,
	                    end: selection.end,
	                    events: events,
	                    slots: slots,
	                    resources: view._resourceBySlot(selection)
	                });
	            }
	        },

	        _selectedEvents: function() {
	            var uids = this._selection.events;
	            var length = uids.length;
	            var idx = 0;
	            var event;

	            var events = [];

	            for (; idx < length; idx++) {
	                event = this.occurrenceByUid(uids[idx]);
	                if (event) {
	                    events.push(event);
	                }
	            }

	            return events;
	        },

	        _mouseMove: function(e) {
	            var that = this;
	            clearTimeout(that._moveTimer);

	            that._moveTimer = setTimeout(function() {
	                var view = that.view();
	                var selection = that._selection;

	                if (selection) {
	                    var slot = view.selectionByElement($(e.currentTarget));

	                    if (slot && selection.groupIndex === slot.groupIndex) {
	                        var startDate = slot.startDate();
	                        var endDate = slot.endDate();

	                        if (startDate >= selection.end) {
	                            selection.backward = false;
	                        } else if (endDate <= selection.start) {
	                            selection.backward = true;
	                        }

	                        if (selection.backward) {
	                            selection.start = startDate;
	                        } else {
	                            selection.end = endDate;
	                        }

	                        that._select();
	                    }
	                }
	            }, 5);
	        },

	        _viewByIndex: function(index) {
	            var view, views = this.views;

	            for (view in views) {
	                if (!index) {
	                    return view;
	                }

	                index--;
	            }
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode,
	                view = that.view(),
	                editable = view.options.editable,
	                selection = that._selection,
	                shiftKey = e.shiftKey;

	            that._ctrlKey = e.ctrlKey;
	            that._shiftKey = e.shiftKey;

	            if (!selection) {
	                that._selectFirstSlot();
	                that._select();

	                return;
	            }

	            if (key === keys.TAB) {
	                if (view.moveToEvent(selection, shiftKey)) {
	                    that._select();

	                    e.preventDefault();
	                }
	            } else if (editable && key === keys.ENTER) {
	                // add/edit event
	                if (selection.events.length) {
	                    if (editable.update !== false) {
	                        that.editEvent(selection.events[0]);
	                    }
	                } else if (editable.create !== false) {
	                    if (selection.isAllDay) {
	                        selection = $.extend({}, selection, {
	                            end: kendo.date.addDays(selection.end, -1)
	                        });
	                    }

	                    that.addEvent(extend({}, selection, view._resourceBySlot(selection)));
	                }
	            } else if (key === keys.DELETE && editable !== false && editable.destroy !== false) {
	                that.removeEvent(selection.events[0]);
	            } else if (key >= 49 && key <= 57) {
	                // switch to view 1-9
	                that.view(that._viewByIndex(key - 49));
	            } else if (view.move(selection, key, shiftKey)) {
	                if (view.inRange(selection)) {
	                    that._select();
	                } else {
	                    that.date(selection.start);
	                }

	                e.preventDefault();
	            }

	            that._adjustSelectedDate();
	        },

	        _createSelection: function(item) {
	            var uid, slot, selection;

	            if (!this._selection || (!this._ctrlKey && !this._shiftKey)) {
	                this._selection = {
	                    events: [],
	                    groupIndex: 0
	                };
	            }

	            item = $(item);
	            selection = this._selection;

	            if (item.is(".k-event")) {
	                uid = item.attr(kendo.attr("uid"));
	            }

	            slot = this.view().selectionByElement(item);

	            if (slot) {
	                selection.groupIndex = slot.groupIndex || 0;
	            }

	            if (uid) {
	                slot = getOccurrenceByUid(this._data, uid);
	            }

	            if (slot && slot.uid) {
	                uid = [slot.uid];
	            }

	            this._updateSelection(slot, uid);
	            this._adjustSelectedDate();
	        },

	        _updateSelection: function(dataItem, events, groupIndex) {
	            var selection = this._selection;

	            if (dataItem && selection) {
	                var view =  this.view();

	                if (dataItem.uid) {
	                    dataItem = view._updateEventForSelection(dataItem);
	                }

	                if (this._shiftKey && selection.start && selection.end) {
	                    var backward = dataItem.end < selection.end;

	                    selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;

	                    if (backward && view._timeSlotInterval) {
	                        kendo.date.setTime(selection.end, -view._timeSlotInterval());
	                    }
	                } else {
	                    selection.start = dataItem.startDate ? dataItem.startDate() : dataItem.start;
	                    selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;
	                }

	                if ("isDaySlot" in dataItem) {
	                    selection.isAllDay = dataItem.isDaySlot;
	                } else {
	                    selection.isAllDay = dataItem.isAllDay;
	                }

	                if (groupIndex !== null && groupIndex !== undefined) {
	                    selection.groupIndex = groupIndex;
	                }

	                selection.index = dataItem.index;
	                if (this._ctrlKey) {
	                    selection.events = selection.events.concat(events || []);
	                } else {
	                    selection.events = events || [];

	                }
	            }
	        },

	        options: {
	            name: "Scheduler",
	            date: TODAY,
	            editable: true,
	            autoBind: true,
	            snap: true,
	            mobile: false,
	            timezone: "",
	            allDaySlot: true,
	            min: new Date(1900, 0, 1),
	            max: new Date(2099, 11, 31),
	            toolbar: null,
	            footer: {},
	            messages: {
	                today: "Today",
	                pdf: "Export to PDF",
	                save: "Save",
	                cancel: "Cancel",
	                destroy: "Delete",
	                deleteWindowTitle: "Delete event",
	                ariaSlotLabel: "Selected from {0:t} to {1:t}",
	                ariaEventLabel: "{0} on {1:D} at {2:t}",
	                views: {
	                    day: "Day",
	                    week: "Week",
	                    workWeek: "Work Week",
	                    agenda: "Agenda",
	                    month: "Month",
	                    timeline: "Timeline",
	                    timelineWeek: "Timeline Week",
	                    timelineWorkWeek: "Timeline Work Week",
	                    timelineMonth: "Timeline Month"
	                },
	                recurrenceMessages: {
	                    deleteWindowTitle: "Delete Recurring Item",
	                    deleteWindowOccurrence: "Delete current occurrence",
	                    deleteWindowSeries: "Delete the series",
	                    editWindowTitle: "Edit Recurring Item",
	                    editWindowOccurrence: "Edit current occurrence",
	                    editWindowSeries: "Edit the series"
	                },
	                editable: {
	                    confirmation: DELETECONFIRM
	                },
	                editor: {
	                    title: "Title",
	                    start: "Start",
	                    end: "End",
	                    allDayEvent: "All day event",
	                    description: "Description",
	                    repeat: "Repeat",
	                    timezone: " ",
	                    startTimezone: "Start timezone",
	                    endTimezone: "End timezone",
	                    separateTimezones: "Use separate start and end time zones",
	                    timezoneEditorTitle: "Timezones",
	                    timezoneEditorButton: "Time zone",
	                    timezoneTitle: "Time zones",
	                    noTimezone: "No timezone",
	                    editorTitle: "Event"
	                }
	            },
	            height: null,
	            width: null,
	            resources: [],
	            group: {
	                resources: [],
	                orientation: "horizontal"
	            },
	            views: [],
	            selectable: false
	        },

	        events: [
	            REMOVE,
	            EDIT,
	            CANCEL,
	            SAVE,
	            "add",
	            "dataBinding",
	            "dataBound",
	            "moveStart",
	            "move",
	            "moveEnd",
	            "resizeStart",
	            "resize",
	            "resizeEnd",
	            "navigate",
	            "change"
	        ],

	        destroy: function() {
	            var that = this,
	                element;

	            Widget.fn.destroy.call(that);

	            if (that.dataSource) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);
	                that.dataSource.unbind("progress", that._progressHandler);
	                that.dataSource.unbind("error", that._errorHandler);
	            }

	            if (that.calendar) {
	                that.calendar.destroy();
	                that.popup.destroy();
	            }

	            if (that.view()) {
	                that.view().destroy();
	            }

	            if (that._editor) {
	                that._editor.destroy();
	            }

	            if (this._moveDraggable) {
	                this._moveDraggable.destroy();
	            }

	            if (this._resizeDraggable) {
	                this._resizeDraggable.destroy();
	            }

	            element = that.element
	                .add(that.wrapper)
	                .add(that.toolbar)
	                .add(that.popup);

	            element.off(NS);

	            clearTimeout(that._moveTimer);

	            that._model = null;
	            that.toolbar = null;
	            that.element = null;

	            $(window).off("resize" + NS, that._resizeHandler);

	            kendo.destroy(that.wrapper);
	        },

	        setDataSource: function(dataSource) {
	            this.options.dataSource = dataSource;

	            this._dataSource();

	            if (this.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        items: function() {
	            var content = this.wrapper.find(".k-scheduler-content");
	            var view = this.view();

	            if (view && view.options.name === "agenda") {
	                return content.find(".k-task");
	            } else {
	                return content.find(".k-event")
	                              .add(this.wrapper.find(".k-scheduler-header-wrap")
	                                       .find(".k-scheduler-header-all-day").siblings());
	            }
	        },

	        _movable: function() {
	            var startSlot;
	            var endSlot;
	            var startTime;
	            var endTime;
	            var event;
	            var clonedEvent;
	            var that = this;
	            var originSlot;
	            var distance = 0;

	            var isMobile = that._isMobile();
	            var movable = that.options.editable && that.options.editable.move !== false;
	            var resizable = that.options.editable && that.options.editable.resize !== false;

	            if (movable || (resizable && isMobile)) {
	                if (isMobile && kendo.support.mobileOS.android) {
	                    distance = 5;
	                }

	                that._moveDraggable = new kendo.ui.Draggable(that.element, {
	                    distance: distance,
	                    filter: ".k-event",
	                    ignore: ".k-resize-handle",
	                    holdToDrag: isMobile,
	                    autoScroll: true
	                });

	                if (movable) {
	                    that._moveDraggable.bind("dragstart", function(e) {
	                        var view = that.view();
	                        var eventElement = e.currentTarget;

	                        if (!view.options.editable || view.options.editable.move === false) {
	                            e.preventDefault();
	                            return;
	                        }

	                        if (isMobile && !eventElement.hasClass("k-event-active")) {
	                            that.element.find(".k-event-active").removeClass("k-event-active");
	                            e.preventDefault();
	                            return;
	                        }

	                        event = that.occurrenceByUid(eventElement.attr(kendo.attr("uid")));

	                        clonedEvent = event.clone();

	                        clonedEvent.update(view._eventOptionsForMove(clonedEvent));

	                        startSlot = view._slotByPosition(e.x.startLocation, e.y.startLocation);

	                        startTime = startSlot.startOffset(e.x.startLocation, e.y.startLocation, that.options.snap);

	                        endSlot = startSlot;

	                        originSlot = startSlot;

	                        if (!startSlot || that.trigger("moveStart", { event: event })) {
	                            e.preventDefault();
	                        }
	                    })
	                    .bind("drag", function(e) {
	                        var view = that.view();
	                        var slot = view._slotByPosition(e.x.location, e.y.location);
	                        var distance;
	                        var range;

	                        if (!slot) {
	                            return;
	                        }

	                        endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);

	                        if (slot.isDaySlot !== startSlot.isDaySlot) {
	                            startSlot = view._slotByPosition(e.x.location, e.y.location);
	                            startTime = startSlot.startOffset(e.x.location, e.y.location, that.options.snap);

	                            distance = endTime - startTime;

	                            clonedEvent.isAllDay = slot.isDaySlot;
	                            clonedEvent.start = kendo.timezone.toLocalDate(startTime);
	                            clonedEvent.end = kendo.timezone.toLocalDate(endTime);

	                            view._updateMoveHint(clonedEvent, slot.groupIndex, distance);

	                            range = { start: clonedEvent.start, end: clonedEvent.end };
	                        } else {
	                            distance = endTime - startTime;

	                            view._updateMoveHint(clonedEvent, slot.groupIndex, distance);

	                            range = moveEventRange(clonedEvent, distance);
	                        }

	                        if (!that.trigger("move", {
	                            event: event,
	                            slot: { element: slot.element, start: slot.startDate(), end: slot.endDate(), isDaySlot: slot.isDaySlot },
	                            resources: view._resourceBySlot(slot),
	                            start: range.start,
	                            end: range.end
	                        })) {

	                            endSlot = slot;

	                        } else {
	                            view._updateMoveHint(clonedEvent, slot.groupIndex, distance);
	                        }
	                    })
	                    .bind("dragend", function(e) {
	                        that.view()._removeMoveHint();
	                        var distance = endTime - startTime;
	                        var range = moveEventRange(clonedEvent, distance);
	                        var start = range.start;
	                        var end = range.end;

	                        var endResources = that.view()._resourceBySlot(endSlot);
	                        var startResources = that.view()._resourceBySlot(startSlot);

	                        var prevented = that.trigger("moveEnd", {
	                            event: event,
	                            slot: { element: endSlot.element, start: endSlot.startDate(), end: endSlot.endDate() },
	                            start: start,
	                            end: end,
	                            resources: endResources
	                        });

	                        if (!prevented && (event.start.getTime() !== start.getTime() ||
	                        event.end.getTime() !== end.getTime() ||
	                        originSlot.isDaySlot !== endSlot.isDaySlot ||
	                        kendo.stringify(endResources) !== kendo.stringify(startResources))) {
	                            var updatedEventOptions = that.view()._eventOptionsForMove(event);
	                            var eventOptions;

	                            if (originSlot.isDaySlot !== endSlot.isDaySlot) {
	                                if (endSlot.isDaySlot) {
	                                    eventOptions = $.extend({ start: endSlot.startDate(), end: endSlot.startDate(), isAllDay: endSlot.isDaySlot }, updatedEventOptions, endResources);
	                                } else {
	                                    eventOptions = $.extend({ isAllDay: endSlot.isDaySlot, start: start, end: end }, updatedEventOptions, endResources);
	                                }
	                            } else {
	                                eventOptions = $.extend({ isAllDay: event.isAllDay, start: start, end: end }, updatedEventOptions, endResources);
	                            }

	                            that._updateEvent(null, event, eventOptions, endSlot.groupIndex);
	                        }

	                        e.currentTarget.removeClass("k-event-active");
	                        this.cancelHold();
	                    })
	                    .bind("dragcancel", function() {
	                        that.view()._removeMoveHint();
	                        this.cancelHold();
	                    });
	                }

	                if (isMobile) {
	                    that._moveDraggable.bind("hold", function(e) {
	                        if (that.element.find(".k-scheduler-monthview").length) {
	                            e.preventDefault();
	                        }
	                        that.element.find(".k-event-active").removeClass("k-event-active");
	                        e.currentTarget.addClass("k-event-active");
	                    });

	                    if (!kendo.support.mobileOS.android) {
	                        that._moveDraggable.userEvents.bind("press", function(e) {
	                            e.preventDefault();
	                        });
	                    }
	                }
	            }
	        },

	        _resizable: function() {
	            var startTime;
	            var endTime;
	            var event;
	            var clonedEvent;
	            var slot;
	            var that = this;
	            var distance = 0;

	            function direction(handle) {
	                var directions = {
	                    "k-resize-e": "east",
	                    "k-resize-w": "west",
	                    "k-resize-n": "north",
	                    "k-resize-s": "south"
	                };

	                for (var key in directions) {
	                    if (handle.hasClass(key)) {
	                        return directions[key];
	                    }
	                }
	            }

	            if (that._isMobile() && kendo.support.mobileOS.android) {
	                distance = 5;
	            }

	            that._resizeDraggable = new kendo.ui.Draggable(that.element, {
	                distance: distance,
	                filter: ".k-resize-handle",
	                autoScroll: true,
	                dragstart: function(e) {
	                    var dragHandle = $(e.currentTarget);

	                    var eventElement = dragHandle.closest(".k-event");

	                    var uid = eventElement.attr(kendo.attr("uid"));

	                    var view = that.view();

	                    event = that.occurrenceByUid(uid);

	                    clonedEvent = event.clone();

	                    view._updateEventForResize(clonedEvent);

	                    slot = view._slotByPosition(e.x.startLocation, e.y.startLocation);

	                    if (that.trigger("resizeStart", { event: event })) {
	                        e.preventDefault();
	                    }

	                    startTime = kendo.date.toUtcTime(clonedEvent.start);

	                    endTime = kendo.date.toUtcTime(clonedEvent.end);
	                },
	                drag: function(e) {
	                    if (!slot) {
	                        return;
	                    }

	                    var dragHandle = $(e.currentTarget);

	                    var dir = direction(dragHandle);

	                    var view = that.view();

	                    var currentSlot = view._slotByPosition(e.x.location, e.y.location);

	                    if (!currentSlot || slot.groupIndex != currentSlot.groupIndex) {
	                        return;
	                    }

	                    slot = currentSlot;

	                    var originalStart = startTime;

	                    var originalEnd = endTime;

	                    if (dir == "south") {
	                        if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {
	                            if (clonedEvent.isAllDay) {
	                                endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
	                            } else {
	                                endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);
	                            }
	                        }
	                    } else if (dir == "north") {
	                        if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {
	                            startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
	                        }
	                    } else if (dir == "east") {
	                        if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(slot.endDate())) >= kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.start))) {
	                            if (clonedEvent.isAllDay) {
	                                endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
	                            } else {
	                                endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);
	                            }
	                        } else if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {
	                            endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);
	                        }
	                    } else if (dir == "west") {
	                        if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.end)) >= kendo.date.toUtcTime(kendo.date.getDate(slot.startDate()))) {
	                            startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
	                        } else if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {
	                            startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);
	                        }
	                    }

	                    if (!that.trigger("resize", {
	                        event: event,
	                        slot: { element: slot.element, start: slot.startDate(), end: slot.endDate() },
	                        start: kendo.timezone.toLocalDate(startTime),
	                        end: kendo.timezone.toLocalDate(endTime),
	                        resources: view._resourceBySlot(slot)
	                    })) {
	                        view._updateResizeHint(clonedEvent, slot.groupIndex, startTime, endTime);
	                    } else {
	                        startTime = originalStart;
	                        endTime = originalEnd;
	                    }
	                },
	                dragend: function(e) {
	                    var dragHandle = $(e.currentTarget);
	                    var start = new Date(clonedEvent.start.getTime());
	                    var end = new Date(clonedEvent.end.getTime());
	                    var dir = direction(dragHandle);

	                    that.view()._removeResizeHint();

	                    if (dir == "south") {
	                        end = kendo.timezone.toLocalDate(endTime);
	                    } else if (dir == "north") {
	                        start = kendo.timezone.toLocalDate(startTime);
	                    } else if (dir == "east") {
	                        if (slot.isDaySlot) {
	                            end = kendo.date.getDate(kendo.timezone.toLocalDate(endTime));
	                        } else {
	                            end = kendo.timezone.toLocalDate(endTime);
	                        }
	                    } else if (dir == "west") {
	                        if (slot.isDaySlot) {
	                            start = new Date(kendo.timezone.toLocalDate(startTime));
	                            start.setHours(0);
	                            start.setMinutes(0);
	                        } else {
	                            start = kendo.timezone.toLocalDate(startTime);
	                        }
	                    }

	                    var prevented = that.trigger("resizeEnd", {
	                        event: event,
	                        slot: { element: slot.element, start: slot.startDate(), end: slot.endDate() },
	                        start: start,
	                        end: end,
	                        resources: that.view()._resourceBySlot(slot)
	                    });

	                    if (!prevented && end.getTime() >= start.getTime()) {
	                        if (clonedEvent.start.getTime() != start.getTime() || clonedEvent.end.getTime() != end.getTime()) {
	                            that.view()._updateEventForResize(event);
	                            that._updateEvent(dir, event, { start: start, end: end });
	                        }
	                    }

	                    slot = null;
	                    event = null;
	                },
	                dragcancel: function() {
	                    that.view()._removeResizeHint();

	                    slot = null;
	                    event = null;
	                }
	            });
	        },

	        _updateEvent: function(dir, event, eventInfo, groupIndex) {
	            var that = this;

	            var updateEvent = function(event, callback) {
	                try {
	                    that._preventRefresh = true;
	                    event.update(eventInfo);
	                    that._convertDates(event);
	                } finally {
	                    that._preventRefresh = false;
	                }

	                if (!that.trigger(SAVE, { event: event })) {
	                    if (callback) {
	                        callback();
	                    }

	                    that._updateSelection((event), [event.uid], groupIndex);
	                    that.dataSource.sync();
	                }
	            };

	            var recurrenceHead = function(event) {
	                if (event.recurrenceRule) {
	                    return that.dataSource.getByUid(event.uid);
	                } else {
	                    return that.dataSource.get(event.recurrenceId);
	                }
	            };

	            var updateSeries = function() {
	                var head = recurrenceHead(event);

	                if (dir == "south" || dir == "north") {
	                    if (eventInfo.start) {
	                        var start = kendo.date.getDate(head.start);
	                        kendo.date.setTime(start, getMilliseconds(eventInfo.start));
	                        eventInfo.start = start;
	                    }
	                    if (eventInfo.end) {
	                        var end = kendo.date.getDate(head.end);
	                        kendo.date.setTime(end, getMilliseconds(eventInfo.end));
	                        eventInfo.end = end;
	                    }
	                }

	                that.dataSource._removeExceptions(head);

	                updateEvent(head);
	            };

	            var updateOccurrence = function() {
	                var head = recurrenceHead(event);

	                var callback = function() {
	                    that._convertDates(head);
	                };

	                var exception = head.toOccurrence({ start: event.start, end: event.end });
	                updateEvent(that.dataSource.add(exception), callback);
	            };

	            if (event.recurrenceRule || event.isOccurrence()) {
	                var recurrenceMessages = that.options.messages.recurrenceMessages;

	                that._showRecurringDialog(event, updateOccurrence, updateSeries,{
	                    title: recurrenceMessages.editWindowTitle,
	                    text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,
	                    occurrenceText: recurrenceMessages.editWindowOccurrence,
	                    seriesText: recurrenceMessages.editWindowSeries
	                });
	            } else {
	                updateEvent(that.dataSource.getByUid(event.uid));
	            }
	        },

	        _modelForContainer: function(container) {
	            container = $(container).closest("[" + kendo.attr("uid") + "]");

	            return this.dataSource.getByUid(container.attr(kendo.attr("uid")));
	        },

	        showDialog: function(options) {
	            this._editor.showDialog(options);
	        },

	        focus: function() {
	            this.wrapper.focus();
	        },

	        _confirmation: function(callback, model) {
	            var editable = this.options.editable;

	            if (editable === true || editable.confirmation !== false) {
	                var messages = this.options.messages;
	                var title = messages.deleteWindowTitle;
	                var text = typeof editable.confirmation === STRING ? editable.confirmation : messages.editable.confirmation;

	                if (this._isEditorOpened() && model.isRecurring()) {
	                    var recurrenceMessages = this.options.messages.recurrenceMessages;
	                    title = recurrenceMessages.deleteWindowTitle;

	                    if (model.isException()) {
	                        text = recurrenceMessages.deleteRecurringConfirmation ? recurrenceMessages.deleteRecurringConfirmation : DELETERECURRINGCONFIRM;
	                    } else {
	                        text = recurrenceMessages.deleteSeriesConfirmation ? recurrenceMessages.deleteSeriesConfirmation : DELETESERIESCONFIRM;
	                    }
	                }

	                var buttons = [
	                    { name: "destroy", text: messages.destroy, click: function() { callback(); } }
	                ];

	                if (!(this._isMobile() && kendo.mobile.ui.Pane)) {
	                    buttons.push({ name: "canceledit", text: messages.cancel, click: function() { callback(true); } });
	                }

	                this._unbindResize();

	                this.showDialog({
	                    model: model,
	                    text: text,
	                    title: title,
	                    buttons: buttons
	                });

	                this._bindResize();
	            } else {
	                callback();
	            }
	        },

	        addEvent: function(eventInfo) {
	            var editable = this._editor.editable;
	            var dataSource = this.dataSource;
	            var event;

	            eventInfo = eventInfo || {};

	            var prevented = this.trigger("add", { event:  eventInfo });

	            if (!prevented && ((editable && editable.end()) || !editable)) {

	                this.cancelEvent();

	                if (eventInfo && eventInfo.toJSON) {
	                    eventInfo = eventInfo.toJSON();
	                }

	                event = dataSource.add(eventInfo);

	                if (event) {
	                    this.cancelEvent();
	                    this._editEvent(event);
	                }
	            }
	       },

	       saveEvent: function() {
	            var editor = this._editor;

	            if (!editor) {
	                return;
	            }

	            var editable = editor.editable;
	            var container = editor.container;
	            var model = this._modelForContainer(container);

	            if (container && editable && editable.end() &&
	                !this.trigger(SAVE, { container: container, event: model } )) {

	                if (model.isRecurrenceHead()) {
	                    this.dataSource._removeExceptions(model);
	                }

	                if (!model.dirty && !model.isOccurrence()) {
	                    this._convertDates(model, "remove");
	                }

	                this.dataSource.sync();
	            }
	        },

	        cancelEvent: function() {
	            var editor = this._editor;
	            var container = editor.container;
	            var model;

	            if (container) {
	                model = this._modelForContainer(container);

	                if (model && model.isOccurrence()) {
	                    this._convertDates(model, "remove");
	                    this._convertDates(this.dataSource.get(model.recurrenceId), "remove");
	                }

	                this.dataSource.cancelChanges(model);

	                //TODO: handle the cancel in UI

	                editor.close();
	            }
	        },

	        editEvent: function(uid) {
	            var model = typeof uid == "string" ? this.occurrenceByUid(uid) : uid;

	            if (!model) {
	                return;
	            }

	            this.cancelEvent();

	            if (model.isRecurring()) {
	                this._editRecurringDialog(model);
	            } else {
	                this._editEvent(model);
	            }
	        },

	        _editEvent: function(model) {
	            this._unbindResize();

	            this._createPopupEditor(model);

	            this._bindResize();
	        },

	        _editRecurringDialog: function(model) {
	            var that = this;

	            var editOccurrence = function() {
	                if (model.isException()) {
	                    that._editEvent(model);
	                } else {
	                    that.addEvent(model);
	                }
	            };

	            var editSeries = function() {
	                if (model.recurrenceId) {
	                    model = that.dataSource.get(model.recurrenceId);
	                }

	                that._editEvent(model);
	            };

	            var recurrenceMessages = that.options.messages.recurrenceMessages;
	            that._showRecurringDialog(model, editOccurrence, editSeries, {
	                title: recurrenceMessages.editWindowTitle,
	                text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,
	                occurrenceText: recurrenceMessages.editWindowOccurrence,
	                seriesText: recurrenceMessages.editWindowSeries
	            });
	         },

	         _showRecurringDialog: function(model, editOccurrence, editSeries, messages) {
	             var that = this;
	             var editable = that.options.editable;
	             var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : "dialog";

	             if (editRecurringMode === "series") {
	                 editSeries();
	             } else if (editRecurringMode ===  "occurrence") {
	                 editOccurrence();
	             } else {
	                 this._unbindResize();

	                 that.showDialog({
	                     model: model,
	                     title: messages.title,
	                     text: messages.text,
	                     buttons: [
	                         { text: messages.occurrenceText, click: editOccurrence },
	                         { text: messages.seriesText, click: editSeries }
	                     ]
	                 });

	                 this._bindResize();
	             }
	        },

	        _createButton: function(command) {
	            var template = command.template || COMMANDBUTTONTMPL,
	                commandName = typeof command === STRING ? command : command.name || command.text,
	                options = { className: "k-scheduler-" + (commandName || "").replace(/\s/g, ""), text: commandName, attr: "" };

	            if (!commandName && !(isPlainObject(command) && command.template))  {
	                throw new Error("Custom commands should have name specified");
	            }

	            if (isPlainObject(command)) {
	                if (command.className) {
	                    command.className += " " + options.className;
	                }

	                if (commandName === "edit" && isPlainObject(command.text)) {
	                    command = extend(true, {}, command);
	                    command.text = command.text.edit;
	                }

	                options = extend(true, options, defaultCommands[commandName], command);
	            } else {
	                options = extend(true, options, defaultCommands[commandName]);
	            }

	            return kendo.template(template)(options);
	        },

	        _convertDates: function(model, method) {
	            var timezone = this.dataSource.reader.timezone;
	            var startTimezone = model.startTimezone;
	            var endTimezone = model.endTimezone;
	            var start = model.start;
	            var end = model.start;

	            method = method || "apply";
	            startTimezone = startTimezone || endTimezone;
	            endTimezone = endTimezone || startTimezone;

	            if (startTimezone) {
	                if (timezone) {
	                    if (method === "apply") {
	                        start = kendo.timezone.convert(model.start, timezone, startTimezone);
	                        end = kendo.timezone.convert(model.end, timezone, endTimezone);
	                    } else {
	                        start = kendo.timezone.convert(model.start, startTimezone, timezone);
	                        end = kendo.timezone.convert(model.end, endTimezone, timezone);
	                    }
	                } else {
	                    start = kendo.timezone[method](model.start, startTimezone);
	                    end = kendo.timezone[method](model.end, endTimezone);
	                }

	                model._set("start", start);
	                model._set("end", end);
	            }
	        },

	        _createEditor: function() {
	            var that = this;

	            var editor;

	            if (this._isMobile() && kendo.mobile.ui.Pane) {
	                editor = that._editor = new MobileEditor(this.wrapper, extend({}, this.options, {
	                    target: this,
	                    timezone: that.dataSource.reader.timezone,
	                    resources: that.resources,
	                    createButton: proxy(this._createButton, this)
	                }));
	            } else {
	                editor = that._editor = new PopupEditor(this.wrapper, extend({}, this.options, {
	                    target: this,
	                    createButton: proxy(this._createButton, this),
	                    timezone: that.dataSource.reader.timezone,
	                    resources: that.resources
	                }));
	            }

	            editor.bind("cancel", function(e) {
	                if (that.trigger("cancel", { container: e.container, event: e.model })) {
	                    e.preventDefault();
	                    return;
	                }
	                that.cancelEvent();

	                that.focus();
	            });

	            editor.bind("edit", function(e) {
	                if (that.trigger(EDIT, { container: e.container, event: e.model })) {
	                    e.preventDefault();
	                }
	            });

	            editor.bind("save", function() {
	                that.saveEvent();
	            });

	            editor.bind("remove", function(e) {
	                that.removeEvent(e.model);
	            });
	        },

	        _createPopupEditor: function(model) {
	            var editor = this._editor;

	            if (!model.isNew() || model.isOccurrence()) {
	                if (model.isOccurrence()) {
	                    this._convertDates(model.recurrenceId ? this.dataSource.get(model.recurrenceId) : model);
	                }
	                this._convertDates(model);
	            }

	            this.editable = editor.editEvent(model);
	        },

	        removeEvent: function(uid) {
	            var that = this,
	                model = typeof uid == "string" ? that.occurrenceByUid(uid) : uid;

	            if (!model) {
	                return;
	            }

	            if (model.isRecurring()) {
	                that._deleteRecurringDialog(model);
	            } else {
	                that._confirmation(function(cancel) {
	                    if (!cancel) {
	                        that._removeEvent(model);
	                    }
	                }, model);
	            }
	        },

	        occurrenceByUid: function(uid) {
	            var occurrence = this.dataSource.getByUid(uid);
	            if (!occurrence) {
	                occurrence = getOccurrenceByUid(this._data, uid);
	            }

	            return occurrence;
	        },

	        occurrencesInRange: function(start, end) {
	            return new kendo.data.Query(this._data).filter({
	                logic: "or",
	                filters: [
	                    {
	                        logic: "and",
	                        filters: [
	                            { field: "start", operator: "gte", value: start },
	                            { field: "end", operator: "gte", value: start },
	                            { field: "start", operator: "lt", value: end }
	                        ]
	                    },
	                    {
	                        logic: "and",
	                        filters: [
	                            { field: "start", operator: "lte", value: start },
	                            { field: "end", operator: "gt", value: start }
	                        ]
	                    }
	                ]
	            }).toArray();
	        },

	        _removeEvent: function(model) {
	            if (!this.trigger(REMOVE, { event: model })) {
	                if (this.dataSource.remove(model)) {
	                    this.dataSource.sync();
	                }
	            }
	        },

	        _deleteRecurringDialog: function(model) {
	            var that = this;
	            var currentModel = model;
	            var editable = that.options.editable;
	            var deleteOccurrence;
	            var deleteSeries;
	            var deleteOccurrenceConfirmation;
	            var deleteSeriesConfirmation;
	            var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : "dialog";

	            deleteOccurrence = function() {
	                var occurrence = currentModel.recurrenceId ? currentModel : currentModel.toOccurrence();
	                var head = that.dataSource.get(occurrence.recurrenceId);

	                that._convertDates(head);
	                that._removeEvent(occurrence);
	            };

	            deleteSeries = function() {
	                if (currentModel.recurrenceId) {
	                    currentModel = that.dataSource.get(currentModel.recurrenceId);
	                }

	                that._removeEvent(currentModel);
	            };

	            if (editRecurringMode != "dialog" || that._isEditorOpened()) {
	                deleteOccurrenceConfirmation = function() {
	                    that._confirmation(function(cancel) {
	                        if (!cancel) {
	                            deleteOccurrence();
	                        }
	                    }, currentModel);
	                };

	                deleteSeriesConfirmation = function() {
	                    that._confirmation(function(cancel) {
	                        if (!cancel) {
	                            deleteSeries();
	                        }
	                    }, currentModel);
	                };
	            }

	            var seriesCallback = deleteSeriesConfirmation || deleteSeries;
	            var occurrenceCallback = deleteOccurrenceConfirmation || deleteOccurrence;

	            if (that._isEditorOpened()) {
	                if (model.isException()) {
	                    occurrenceCallback();
	                } else {
	                    seriesCallback();
	                }
	            } else {
	                var recurrenceMessages = that.options.messages.recurrenceMessages;
	                that._showRecurringDialog(model, occurrenceCallback, seriesCallback, {
	                    title: recurrenceMessages.deleteWindowTitle,
	                    text: recurrenceMessages.deleteRecurring ? recurrenceMessages.deleteRecurring : DELETERECURRING,
	                    occurrenceText: recurrenceMessages.deleteWindowOccurrence,
	                    seriesText: recurrenceMessages.deleteWindowSeries
	                });
	            }
	        },

	        _isEditorOpened: function() {
	            return !!this._editor.container;
	        },

	        _unbindView: function(view) {
	            var that = this;
	            that.angular("cleanup", function(){
	                return { elements: that.items() };
	            });

	            view.destroy();
	        },

	        _bindView: function(view) {
	            var that = this;

	            if (that.options.editable) {
	                if (that._viewRemoveHandler) {
	                    view.unbind(REMOVE, that._viewRemoveHandler);
	                }

	                that._viewRemoveHandler = function(e) {
	                    that.removeEvent(e.uid);
	                };

	                view.bind(REMOVE, that._viewRemoveHandler);

	                if (that._viewAddHandler) {
	                    view.unbind(ADD, that._viewAddHandler);
	                }

	                that._viewAddHandler = function(e) {
	                    that.addEvent(e.eventInfo);
	                };

	                view.bind(ADD, this._viewAddHandler);

	                if (that._viewEditHandler) {
	                    view.unbind(EDIT, that._viewEditHandler);
	                }

	                that._viewEditHandler = function(e) {
	                    that.editEvent(e.uid);
	                };

	                view.bind(EDIT, this._viewEditHandler);
	            }

	            if (that._viewNavigateHandler) {
	                view.unbind("navigate", that._viewNavigateHandler);
	            }

	            that._viewNavigateHandler = function(e) {
	                if (e.view) {
	                    var switchWorkDay = "isWorkDay" in e;
	                    var action = switchWorkDay ? "changeWorkDay" : "changeView";

	                    if (!that.trigger("navigate", { view: e.view, isWorkDay: e.isWorkDay, action: action, date: e.date })) {
	                        if (switchWorkDay) {
	                            that._workDayMode = e.isWorkDay;
	                        }

	                        that._selectView(e.view);
	                        that.date(e.date);
	                    }
	                }
	            };

	            view.bind("navigate", that._viewNavigateHandler);

	            if (that._viewActivateHandler) {
	                view.unbind("activate", that._viewActivateHandler);
	            }

	            that._viewActivateHandler = function() {
	                var view = this;
	                if (that._selection) {
	                    view.constrainSelection(that._selection);

	                    that._select();

	                    that._adjustSelectedDate();
	                }
	            };

	            view.bind("activate", that._viewActivateHandler);
	        },

	        _selectView: function(name) {
	            var that = this;

	            if (name && that.views[name]) {

	                if (that._selectedView) {
	                    that._unbindView(that._selectedView);
	                }

	                that._selectedView = that._renderView(name);
	                that._selectedViewName = name;

	                if (that._viewsCount > 1) {
	                    var viewButton = VIEWBUTTONTEMPLATE({views: that.views, view: name, ns: kendo.ns});
	                    var firstButton = that.toolbar.find(".k-scheduler-views li:first-child");

	                    if (firstButton.is(".k-current-view")) {
	                        firstButton.replaceWith(viewButton);
	                    } else {
	                        that.toolbar.find(".k-scheduler-views").prepend(viewButton);
	                    }

	                    var viewButtons =  that.toolbar.find(".k-scheduler-views li")
	                        .removeClass("k-state-selected");


	                    viewButtons.end().find(".k-view-" + name.replace(/\./g, "\\.").toLowerCase())
	                        .addClass("k-state-selected");
	                }
	            }
	        },

	        view: function(name) {
	            var that = this;

	            if (name) {

	                that._selectView(name);

	                that.rebind();

	                return;

	            }

	            return that._selectedView;
	        },

	        viewName: function() {
	            return this.view().name;
	        },

	        _renderView: function(name) {
	            var view = this._initializeView(name);
	          
	            this._bindView(view);

	            this._model.set("formattedDate", view.dateForTitle());
	            this._model.set("formattedShortDate", view.shortDateForTitle());

	            return view;
	        },

	        resize: function(force) {
	            var size = this.getSize();
	            var currentSize = this._size;
	            var view = this.view();

	            if (!view || !view.groups) {
	                return;
	            }

	            if (force || !currentSize || size.width !== currentSize.width || size.height !== currentSize.height) {
	                this.refresh({ action: "resize" });
	                this._size = size;
	            }
	        },

	        _adjustSelectedDate: function() {
	            var date = this._model.selectedDate,
	                selection = this._selection,
	                start = selection.start;

	            if (start && !kendo.date.isInDateRange(date, getDate(start), getDate(selection.end))) {
	                date.setFullYear(start.getFullYear(), start.getMonth(), start.getDate());
	            }
	        },

	        _initializeView: function(name) {
	            var view = this.views[name];

	            if (view) {
	                var isSettings = isPlainObject(view),
	                    type = view.type;

	                if (typeof type === STRING) {
	                    type = kendo.getter(view.type)(window);
	                }

	                if (type) {
	                    view = new type(this.wrapper, trimOptions(extend(true, {}, this.options, isSettings ? view : {}, { resources: this.resources, date: this.date(), showWorkHours: this._workDayMode })));
	                } else {
	                    throw new Error("There is no such view");
	                }
	            }

	            return view;
	        },

	        _views: function() {
	            var views = this.options.views;
	            var view;
	            var defaultView;
	            var selected;
	            var isSettings;
	            var name;
	            var type;
	            var idx;
	            var length;

	            this.views = {};
	            this._viewsCount = 0;

	            for (idx = 0, length = views.length; idx < length; idx++) {
	                var hasType = false;

	                view = views[idx];

	                isSettings = isPlainObject(view);

	                if (isSettings) {
	                    type = name = view.type ? view.type : view;
	                    if (typeof type !== STRING) {
	                        name = view.name || view.title;
	                        hasType = true;
	                    }
	                } else {
	                    type = name = view;
	                }

	                defaultView = defaultViews[name];

	                if (defaultView && !hasType) {

	                    view.type = defaultView.type;
	                    defaultView.title = this.options.messages.views[name];
	                    if (defaultView.type === "day") {
	                        defaultView.messages = { allDay: this.options.messages.allDay };
	                    } else if (defaultView.type === "agenda") {
	                        defaultView.messages = {
	                            event: this.options.messages.event,
	                            date: this.options.messages.date,
	                            time: this.options.messages.time
	                        };
	                    }
	                }

	                view = extend({ title: name }, defaultView, isSettings ? view : {});

	                if (name) {
	                    this.views[name] = view;
	                    this._viewsCount++;

	                    if (!selected || view.selected) {
	                        selected = name;
	                    }
	                }
	            }

	            if (selected) {
	                this._selectedViewName = selected; // toolbar is not rendered yet
	            }
	        },

	        rebind: function() {
	            this.dataSource.fetch();
	        },

	        _dataSource: function() {
	            var that = this,
	                options = that.options,
	                dataSource = options.dataSource;

	            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

	            if (options.timezone && !(dataSource instanceof SchedulerDataSource)) {
	                dataSource = extend(true, dataSource, { schema: { timezone: options.timezone } });
	            } else if(dataSource instanceof SchedulerDataSource) {
	                options.timezone = dataSource.options.schema ? dataSource.options.schema.timezone : "";
	            }

	            if (that.dataSource && that._refreshHandler) {
	                that.dataSource
	                    .unbind(CHANGE, that._refreshHandler)
	                    .unbind("progress", that._progressHandler)
	                    .unbind("error", that._errorHandler);
	            } else {
	                that._refreshHandler = proxy(that.refresh, that);
	                that._progressHandler = proxy(that._requestStart, that);
	                that._errorHandler = proxy(that._error, that);
	            }

	            that.dataSource = kendo.data.SchedulerDataSource.create(dataSource)
	                .bind(CHANGE, that._refreshHandler)
	                .bind("progress", that._progressHandler)
	                .bind("error", that._errorHandler);

	            that.options.dataSource = that.dataSource;
	        },

	        _error: function() {
	            this._progress(false);
	        },

	        _requestStart: function() {
	            this._progress(true);
	        },

	        _progress: function(toggle) {
	            var element = this.element.find(".k-scheduler-content");
	            kendo.ui.progress(element, toggle);
	        },

	        _resources: function() {
	            var that = this;
	            var resources = that.options.resources;

	            for (var idx = 0; idx < resources.length; idx++) {
	                var resource = resources[idx];
	                var field = resource.field;
	                var dataSource = resource.dataSource;

	                if (!field || !dataSource) {
	                    throw new Error('The "field" and "dataSource" options of the scheduler resource are mandatory.');
	                }

	                that.resources.push({
	                    field: field,
	                    name: resource.name || field,
	                    title: resource.title || field,
	                    dataTextField: resource.dataTextField || "text",
	                    dataValueField: resource.dataValueField || "value",
	                    dataColorField: resource.dataColorField || "color",
	                    valuePrimitive: resource.valuePrimitive != null ? resource.valuePrimitive : true,
	                    multiple: resource.multiple || false,
	                    dataSource: kendo.data.DataSource.create(dataSource)
	                });
	            }

	            var promises = $.map(that.resources, function(resource) {
	                return resource.dataSource.fetch();
	            });

	            $.when.apply(null, promises)
	                  .then(function() {
	                      if (that.options.autoBind) {
	                          that.view(that._selectedViewName);
	                      } else {
	                          that._selectView(that._selectedViewName);
	                      }
	                  });
	        },

	        _initModel: function() {
	            var that = this;
	            that._model = kendo.observable({
	               selectedDate: new Date(this.options.date),
	               formattedDate: "",
	               formattedShortDate: ""
	           });

	           that._model.bind("change", function(e) {
	                if (e.field === "selectedDate") {
	                    that.view(that._selectedViewName);
	                }
	           });
	        },

	        _wrapper: function() {
	            var that = this;
	            var options = that.options;
	            var height = options.height;
	            var width = options.width;

	            that.wrapper = that.element
	                               .addClass("k-widget k-scheduler k-floatwrap")
	                               .attr("role", "grid")
	                               .attr("aria-multiselectable", true);

	            if (that._isMobile()) {
	               that.wrapper.addClass("k-scheduler-mobile");
	            }

	            if (that._isMobilePhoneView()) {
	               that.wrapper.addClass("k-scheduler-phone");
	            }

	            if (height) {
	                that.wrapper.height(height);
	            }

	            if (width) {
	                that.wrapper.width(width);
	            }
	        },

	        date: function(value) {
	            if (value != null && getDate(value) >= getDate(this.options.min) && getDate(value) <= getDate(this.options.max)) {
	                this._model.set("selectedDate", value);
	            }
	            return getDate(this._model.get("selectedDate"));
	        },

	        _toolbar: function() {
	            var that = this;
	            var options = that.options;
	            var commands = [];

	            if (options.toolbar) {
	                commands = $.isArray(options.toolbar) ? options.toolbar : [options.toolbar];
	            }

	            var template = this._isMobilePhoneView() ? MOBILETOOLBARTEMPLATE : TOOLBARTEMPLATE;

	            var toolbar = $(template({
	                    messages: options.messages,
	                    pdf: $.grep(commands, function(item) {
	                            return item == "pdf" || item.name == "pdf";
	                        }).length > 0,
	                    ns: kendo.ns,
	                    views: that.views,
	                    viewsCount: that._viewsCount
	                }));

	            that.wrapper.append(toolbar);
	            that.toolbar = toolbar;

	            kendo.bind(that.toolbar, that._model);

	            toolbar.on(CLICK + NS, ".k-pdf", function(e) {
	                e.preventDefault();
	                that.saveAsPDF();
	            });

	            toolbar.on(CLICK + NS, ".k-scheduler-navigation li", function(e) {
	                var li = $(this);
	                var date = new Date(that.date());
	                var action = "";

	                e.preventDefault();

	                if (li.hasClass("k-nav-today")) {
	                    action = "today";
	                    date = new Date();
	                } else if (li.hasClass("k-nav-next")) {
	                    action = "next";
	                    date = that.view().nextDate();
	                } else if (li.hasClass("k-nav-prev")) {
	                    action = "previous";
	                    date = that.view().previousDate();
	                } else if (li.hasClass("k-nav-current") && !that._isMobilePhoneView()) {
	                    that._showCalendar();
	                    return; // TODO: Not good - refactor
	                }

	                if (!that.trigger("navigate", { view: that._selectedViewName, action: action, date: date })) {
	                    that.date(date);
	                }
	            });

	            toolbar.on(CLICK + NS, ".k-scheduler-views li, .k-scheduler-refresh", function(e) {
	                e.preventDefault();

	                var name = $(this).attr(kendo.attr("name"));

	                if (!that.trigger("navigate", { view: name, action: "changeView", date: that.date() })) {
	                    that.view(name);
	                    that.element.find(".k-state-expanded").removeClass("k-state-expanded");
	                }
	            });

	            toolbar.on(CLICK + NS, ".k-scheduler-views li.k-current-view", function() {
	                that.element.find(".k-scheduler-views").toggleClass("k-state-expanded");
	            });

	            toolbar.find("li").hover(function(){
	                    $(this).addClass("k-state-hover");
	                }, function(){
	                    $(this).removeClass("k-state-hover");
	                });
	        },

	        _showCalendar: function() {
	            var that = this,
	                target = that.toolbar.find(".k-nav-current"),
	                html = $('<div class="k-calendar-container"><div class="k-scheduler-calendar"/></div>');

	            if (!that.popup) {
	                that.popup = new Popup(html, {
	                    anchor: target,
	                    open: function() {
	                        if (!that.calendar) {
	                            that.calendar = new Calendar(this.element.find(".k-scheduler-calendar"),
	                            {
	                                change: function() {
	                                    var date = this.value();
	                                    if (!that.trigger("navigate", { view: that._selectedViewName, action: "changeDate", date: date })) {
	                                        that.date(date);
	                                        that.popup.close();
	                                    }
	                                },
	                                min: that.options.min,
	                                max: that.options.max
	                            });
	                        }
	                        that.calendar.value(that.date());
	                    },
	                    copyAnchorStyles: false
	                });
	            }

	            that.popup.open();
	        },

	        refresh: function(e) {
	            var that = this;
	            var view = this.view();

	            this._progress(false);

	            this.angular("cleanup", function(){
	                return { elements: that.items() };
	            });

	            e = e || {};

	            if (!view) {
	                return;
	            }

	            if (e && e.action === "itemchange" && (this._editor.editable || this._preventRefresh)) { // skip rebinding if editing is in progress
	                return;
	            }

	            if (this.trigger("dataBinding", { action: e.action || "rebind", index: e.index, items: e.items })) {
	                return;
	            }

	            if (!(e && e.action === "resize") && this._editor) {
	                this._editor.close();
	            }

	            this._data = this.dataSource.expand(view.startDate(), view.endDate());

	            view.refreshLayout();

	            view.render(this._data);

	            this.trigger("dataBound");
	        },

	        slotByPosition: function(x, y) {
	            var view = this.view();

	            if(!view._slotByPosition) {
	                return null;
	            }

	            var slot = view._slotByPosition(x, y);

	            if(!slot) {
	                return null;
	            }

	            return {
	                startDate: slot.startDate(),
	                endDate: slot.endDate(),
	                groupIndex: slot.groupIndex,
	                element: slot.element,
	                isDaySlot: slot.isDaySlot
	            };
	        },

	        slotByElement: function(element) {
	            var offset = $(element).offset();
	            return this.slotByPosition(offset.left, offset.top);
	        },

	        resourcesBySlot: function(slot) {
	            return this.view()._resourceBySlot(slot);
	        }
	    });

	    var defaultViews = {
	        day: {
	            type: "kendo.ui.DayView"
	        },
	        week: {
	            type: "kendo.ui.WeekView"
	        },
	        workWeek: {
	            type: "kendo.ui.WorkWeekView"
	        },
	        agenda: {
	            type: "kendo.ui.AgendaView"
	        },
	        month: {
	            type: "kendo.ui.MonthView"
	        },
	        timeline: {
	            type: "kendo.ui.TimelineView"
	        },
	        timelineWeek: {
	            type: "kendo.ui.TimelineWeekView"
	        },
	        timelineWorkWeek: {
	            type: "kendo.ui.TimelineWorkWeekView"
	        },
	        timelineMonth: {
	            type: "kendo.ui.TimelineMonthView"
	        }
	    };

	    ui.plugin(Scheduler);

	    if (kendo.PDFMixin) {
	        kendo.PDFMixin.extend(Scheduler.prototype);

	        var SCHEDULER_EXPORT = "k-scheduler-pdf-export";
	        Scheduler.fn._drawPDF = function(progress) {
	            var wrapper = this.wrapper;
	            var styles = wrapper[0].style.cssText;

	            wrapper.css({
	                width: wrapper.width(),
	                height: wrapper.height()
	            });

	            wrapper.addClass(SCHEDULER_EXPORT);

	            var scheduler = this;
	            var promise = new $.Deferred();
	            var table = wrapper.find(".k-scheduler-content").find("table").css("table-layout", "auto");

	            setTimeout(function() {
	                table.css("table-layout", "fixed");
	                scheduler.resize(true);

	                scheduler._drawPDFShadow({}, {
	                    avoidLinks: scheduler.options.pdf.avoidLinks
	                })
	                .done(function(group) {
	                    var args = {
	                        page: group,
	                        pageNumber: 1,
	                        progress: 1,
	                        totalPages: 1
	                    };

	                    progress.notify(args);
	                    promise.resolve(args.page);
	                })
	                .fail(function(err) {
	                    promise.reject(err);
	                })
	                .always(function() {
	                    wrapper[0].style.cssText = styles;
	                    wrapper.removeClass(SCHEDULER_EXPORT);
	                    scheduler.resize(true);

	                    //Required because slot.offsetLeft is incorrect after first resize
	                    scheduler.resize(true);
	                });
	            });

	            return promise;
	        };
	    }

	    var TimezoneEditor = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                zones = kendo.timezone.windows_zones;

	            if (!zones || !kendo.timezone.zones_titles) {
	                throw new Error('kendo.timezones.min.js is not included.');
	            }

	            Widget.fn.init.call(that, element, options);

	            that.wrapper = that.element;

	            that._zonesQuery = new kendo.data.Query(zones);
	            that._zoneTitleId = kendo.guid();
	            that._zoneTitlePicker();
	            that._zonePicker();

	            that._zoneTitle.bind("cascade", function() {
	                if (!this.value()) {
	                    that._zone.wrapper.hide();
	                }
	            });

	            that._zone.bind("cascade", function() {
	                that._value = this.value();
	                that.trigger("change");
	            });

	            that.value(that.options.value);
	        },
	        options: {
	            name: "TimezoneEditor",
	            value: "",
	            optionLabel: "No timezone"
	        },
	        events: [ "change" ],

	        _zoneTitlePicker: function() {
	            var that = this,
	                zoneTitle = $('<input id="' + that._zoneTitleId + '"/>').appendTo(that.wrapper);

	            that._zoneTitle = new kendo.ui.DropDownList(zoneTitle, {
	                dataSource: kendo.timezone.zones_titles,
	                dataValueField: "other_zone",
	                dataTextField: "name",
	                optionLabel: that.options.optionLabel
	            });
	        },

	        _zonePicker: function() {
	            var that = this,
	                zone = $('<input />').appendTo(this.wrapper);

	            that._zone = new kendo.ui.DropDownList(zone, {
	                dataValueField: "zone",
	                dataTextField: "territory",
	                dataSource: that._zonesQuery.data,
	                cascadeFrom: that._zoneTitleId,
	                dataBound: function() {
	                    that._value = this.value();
	                    this.wrapper.toggle(this.dataSource.view().length > 1);
	                }
	            });

	            that._zone.wrapper.hide();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            kendo.destroy(this.wrapper);
	        },

	        value: function(value) {
	            var that = this,
	                zone;

	            if (value === undefined) {
	                return that._value;
	            }

	            zone = that._zonesQuery.filter({ field: "zone", operator: "eq", value: value }).data[0];

	            if (zone) {
	                that._zoneTitle.value(zone.other_zone);
	                that._zone.value(zone.zone);
	            } else {
	                that._zoneTitle.select(0);
	            }

	        }
	    });

	    ui.plugin(TimezoneEditor);

	    var ZONETITLEOPTIONTEMPLATE = kendo.template('<option value="#=other_zone#">#=name#</option>');
	    var ZONEOPTIONTEMPLATE = kendo.template('<option value="#=zone#">#=territory#</option>');

	    var MobileTimezoneEditor = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                zones = kendo.timezone.windows_zones;

	            if (!zones || !kendo.timezone.zones_titles) {
	                throw new Error('kendo.timezones.min.js is not included.');
	            }

	            Widget.fn.init.call(that, element, options);

	            that.wrapper = that.element;

	            that._zonesQuery = new kendo.data.Query(zones);
	            that._zoneTitlePicker();
	            that._zonePicker();

	            that.value(that.options.value);
	        },

	        options: {
	            name: "MobileTimezoneEditor",
	            optionLabel: "No timezone",
	            value: ""
	        },

	        events: [ "change" ],

	        _bindZones: function(value) {
	            var data = value ? this._filter(value) : [];

	            this._zone.html(this._options(data, ZONEOPTIONTEMPLATE));
	        },

	        _filter: function(value) {
	            return this._zonesQuery.filter({ field: "other_zone", operator: "eq", value: value }).data;
	        },

	        _options: function(data, template, optionLabel) {
	            var idx = 0;
	            var html = "";
	            var length = data.length;

	            if (optionLabel) {
	                html += template({ other_zone: "", name: optionLabel });
	            }

	            for (; idx < length; idx++) {
	                html += template(data[idx]);
	            }

	            return html;
	        },

	        _zoneTitlePicker: function() {
	            var that = this;
	            var options = that._options(kendo.timezone.zones_titles, ZONETITLEOPTIONTEMPLATE, that.options.optionLabel);

	            that._zoneTitle = $('<select>' + options + '</select>')
	                                .appendTo(that.wrapper)
	                                .change(function() {
	                                    var value = this.value;
	                                    var zone = that._zone;

	                                    that._bindZones(value);

	                                    if (value && zone[0].children.length > 1) {
	                                        zone.show();
	                                    } else {
	                                        zone.hide();
	                                    }

	                                    that._value = zone[0].value;

	                                    that.trigger("change");
	                                });
	        },

	        _zonePicker: function() {
	            var that = this;

	            that._zone = $('<select style="display:none"></select>')
	                            .appendTo(this.wrapper)
	                            .change(function() {
	                                that._value = this.value;

	                                that.trigger("change");
	                            });

	            that._bindZones(that._zoneTitle.val());
	            that._value = that._zone[0].value;
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            kendo.destroy(this.wrapper);
	        },

	        value: function(value) {
	            var that = this;
	            var zonePicker = that._zone;
	            var other_zone = "";
	            var zone_value = "";
	            var zone;

	            if (value === undefined) {
	                return that._value;
	            }

	            zone = that._zonesQuery.filter({ field: "zone", operator: "eq", value: value }).data[0];

	            if (zone) {
	                zone_value = zone.zone;
	                other_zone = zone.other_zone;
	            }

	            that._zoneTitle.val(other_zone);
	            that._bindZones(other_zone);

	            zonePicker.val(zone_value);
	            zone_value = zonePicker[0].value;

	            if (zone_value && zonePicker[0].children.length > 1) {
	                zonePicker.show();
	            } else {
	                zonePicker.hide();
	            }

	            that._value = zone_value;
	        }
	    });

	    ui.plugin(MobileTimezoneEditor);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ },

/***/ 820:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.dayview */ 134);

/***/ },

/***/ 821:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.recurrence */ 137);

/***/ },

/***/ 822:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.view */ 10);

/***/ },

/***/ 823:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.agendaview */ 133);

/***/ },

/***/ 824:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.monthview */ 136);

/***/ },

/***/ 825:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.timelineview */ 138);

/***/ }

/******/ });

/***/ }),
/* 136 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.monthview.js ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(828);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 822:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.view */ 10);

/***/ },

/***/ 828:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(822) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "scheduler.monthview",
	    name: "Scheduler Month View",
	    category: "web",
	    description: "The Scheduler Month View",
	    depends: [ "scheduler.view" ],
	    hidden: true
	};

	(function($){
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        SchedulerView = ui.SchedulerView,
	        NS = ".kendoMonthView",
	        extend = $.extend,
	        getDate = kendo.date.getDate,
	        MS_PER_DAY = kendo.date.MS_PER_DAY,
	        NUMBER_OF_ROWS = 6,
	        NUMBER_OF_COLUMNS = 7,
	        DAY_TEMPLATE = kendo.template('<span class="k-link k-nav-day">#:kendo.toString(date, "dd")#</span>'),
	        EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" data-#=ns#uid="#=uid#"' +
	                '#if (resources[0]) { #' +
	                    'style="background-color:#=resources[0].color #; border-color: #=resources[0].color#"' +
	                    'class="k-event#=inverseColor ? " k-event-inverse" : ""#"' +
	                '#} else {#' +
	                    'class="k-event"' +
	                '#}#' +
	                '>' +
	                '<span class="k-event-actions">' +
	                    '# if(data.tail || data.middle) {#' +
	                        '<span class="k-icon k-i-arrow-60-left"></span>' +
	                    '#}#' +
	                    '# if(data.isException()) {#' +
	                        '<span class="k-icon k-i-warning"></span>' +
	                    '# } else if(data.isRecurring()) {#' +
	                        '<span class="k-icon k-i-reload"></span>' +
	                    '#}#' +
	                '</span>' +
	                '{0}' +
	                '<span class="k-event-actions">' +
	                    '#if (showDelete) {#' +
	                        '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-i-close"></span></a>' +
	                    '#}#' +
	                    '# if(data.head || data.middle) {#' +
	                        '<span class="k-icon k-i-arrow-60-right"></span>' +
	                    '#}#' +
	                '</span>' +
	                '# if(resizable && !data.tail && !data.middle) {#' +
	                '<span class="k-resize-handle k-resize-w"></span>' +
	                '#}#' +
	                '# if(resizable && !data.head && !data.middle) {#' +
	                '<span class="k-resize-handle k-resize-e"></span>' +
	                '#}#' +
	                '</div>',
	        EVENT_TEMPLATE = kendo.template('<div title="#=title.replace(/"/g,"&\\#34;")#">' +
	                    '<div class="k-event-template">#:title#</div>' +
	                '</div>');

	    var MORE_BUTTON_TEMPLATE = kendo.template(
	        '<div style="width:#=width#px;left:#=left#px;top:#=top#px" class="k-more-events k-button"><span>...</span></div>'
	    );

	       var MonthGroupedView = kendo.Class.extend({
	            init: function(view) {
	                this._view = view;
	            },

	            _verticalRowCountForLevel: function(level) {
	                var view = this._view;

	                return view._rowCountForLevel(level);
	            },

	            _horizontalGroupCountForLevel: function(level) {
	                var view = this._view;

	                return view._columnCountForLevel(level);
	            },

	            _getCalendarRowsLength: function(cellsPerRow, cellCount) {
	                return cellCount / cellsPerRow;
	            },

	            _createRows: function(start, startIdx, horizontalGroupCount, verticalGroupIndex) {
	                var view = this._view;
	                var cellsPerRow = NUMBER_OF_COLUMNS;
	                var isVerticallyGrouped = view._isVerticallyGrouped();
	                var html = "";

	                for (var groupIdx = 0; groupIdx < horizontalGroupCount; groupIdx++) {
	                    html += view._createRow(start, startIdx, cellsPerRow, isVerticallyGrouped ? verticalGroupIndex : groupIdx);
	                }

	                return html;
	            },

	            _adjustStartDate: function(start) {
	                return kendo.date.addDays(start, NUMBER_OF_COLUMNS);
	            },

	            _getContent: function(content, startDate, resources) {
	                return content({ date: startDate, resources: resources });
	            },

	            _getTimeSlotByPosition: function(x, y, groupIndex) {
	                var group = this._view.groups[groupIndex];

	                return group.daySlotByPosition(x, y);
	            },

	            _nextSlotStartDate: function(startDate) {
	                return kendo.date.nextDay(startDate);
	            },

	            _createRowsLayout: function(resources, rows, groupHeaderTemplate) {
	                var view = this._view;

	                return view._createRowsLayout(resources, rows, groupHeaderTemplate);
	            },

	            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {

	                return columns;
	            },

	            _createColumnsLayout: function(resources, columns, groupHeaderTemplate) {
	                var view = this._view;

	                return view._createColumnsLayout(resources, columns, groupHeaderTemplate);
	            },

	            _verticalGroupCount: function(level) {
	                var view = this._view;

	                return view._rowCountForLevel(level);
	            },

	            _horizontalGroupCount: function(level) {
	                var view = this._view;

	                return view._columnCountForLevel(level) / view._columnOffsetForResource(level);
	            },

	            _positionEvent: function(event, group, range, rangeCount, start, end, rangeIndex){
	                 var view = this._view;
	                 var isMobilePhoneView = view._isMobilePhoneView();

			    if (rangeCount > 1) {
			        if (rangeIndex === 0) {
			            end = range.end.endDate();
			        } else if (rangeIndex == rangeCount - 1) {
			            start = range.start.startDate();
			        } else {
			            start = range.start.startDate();
			            end = range.end.endDate();
			        }
			    }

			    var occurrence = event.clone({ start: start, end: end, head: range.head, tail: range.tail });

			    if (isMobilePhoneView) {
			        view._positionMobileEvent(range, view._createEventElement(occurrence), group);
			    } else {
			        view._positionEvent(range, view._createEventElement(occurrence), group);
			    }
	            },

	            _addDaySlotCollections: function(groupCount, tableRows, startDate) {
	                var view = this._view;
	                var columnCount = NUMBER_OF_COLUMNS;
	                var rowCount = NUMBER_OF_ROWS;

	                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
	                    var cellCount = 0;
	                    var rowMultiplier = 0;

	                    if (view._isVerticallyGrouped()) {
	                        rowMultiplier = groupIndex;
	                    }

	                    for (var rowIndex = rowMultiplier * rowCount; rowIndex < (rowMultiplier + 1) * rowCount; rowIndex++) {
	                        var group = view.groups[groupIndex];
	                        var collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));

	                        var tableRow = tableRows[rowIndex];
	                        var cells = tableRow.children;
	                        var cellMultiplier = 0;

	                        tableRow.setAttribute("role", "row");

	                        if (!view._isVerticallyGrouped()) {
	                            cellMultiplier = groupIndex;
	                        }

	                        for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {
	                            var cell = cells[cellIndex];

	                            view.addDaySlot(collection, cell, startDate, cellCount);
	                            cellCount++;
	                        }
	                    }
	                }
	            },

	            _changePeriodGroupIndex: function(reverse){
	                var view = this._view;

	                return reverse ? view.groups.length - 1 : 0;
	            },

	            _createResizeHint: function(range) {
	                 var view = this._view;
	                 var left = range.startSlot().offsetLeft;
	                 var top = range.start.offsetTop;
	                 var width = range.innerWidth();
	                 var height = range.start.clientHeight - 2;
	                 var hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);

	                 view._appendResizeHint(hint);
	            },

	           _createMoveHint: function(range, event) {
	                var view = this._view;
	                var startSlot = range.startSlot();
	                var endSlot = range.endSlot();
	                var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));

	                hint.css({
	                    left: startSlot.offsetLeft + 2,
	                    top: startSlot.offsetTop + startSlot.firstChildHeight,
	                    height: view.options.eventHeight,
	                    width: range.innerWidth() - (startSlot.index !== endSlot.index ? 5 : 4)
	                });

	                hint.addClass("k-event-drag-hint");

	                view._appendMoveHint(hint);
	            }
	        });

	        var MonthGroupedByDateView = kendo.Class.extend({
	            init: function(view) {
	                this._view = view;
	            },

	            _verticalRowCountForLevel: function() {
	                return 1;
	            },

	            _horizontalGroupCountForLevel: function(level) {
	                var view = this._view;

	                return view._columnCountForLevel(level + 1) / NUMBER_OF_COLUMNS;
	            },

	            _createRows: function(start, startIdx, horizontalGroupCount) {
	                var view = this._view;
	                var cellsPerRow = NUMBER_OF_COLUMNS;
	                var isVerticallyGrouped = view._isVerticallyGrouped();
	                var html = "";
	                var dateIdx = 0;

	                if (isVerticallyGrouped) {
	                    var verticalStart = new Date(start);
	                    var groupCount = view._groupCount();
	                    for (dateIdx; dateIdx < NUMBER_OF_ROWS; dateIdx++) {
	                        html += view._createRow(verticalStart, startIdx, groupCount, dateIdx);

	                        verticalStart = kendo.date.addDays(verticalStart, cellsPerRow);
	                    }
	                    start = kendo.date.nextDay(start);
	                } else {
	                    for (dateIdx; dateIdx < cellsPerRow; dateIdx++) {
	                        html += view._createRow(start, startIdx, horizontalGroupCount, dateIdx);
	                        start = kendo.date.nextDay(start);
	                    }
	                    start = kendo.date.addDays(start, cellsPerRow);
	                }

	                return html;
	            },

	            _adjustStartDate: function(start, isLastRow) {
	                var view = this._view;
	                var isVerticallyGrouped = view._isVerticallyGrouped();

	                if (isVerticallyGrouped) {
	                    if (isLastRow) {
	                        return kendo.date.addDays(start, NUMBER_OF_COLUMNS * (NUMBER_OF_ROWS - 1) + 1);
	                    } else {
	                        return kendo.date.nextDay(start);
	                    }
	                }

	                return kendo.date.addDays(start, NUMBER_OF_COLUMNS);
	            },

	            _getContent: function(content, startDate, resources, cellIdx) {
	                if (cellIdx === 0) {
	                    return content({ date: startDate, resources: resources });
	                }
	                return "";
	            },

	            _getTimeSlotByPosition: function(x, y, groupIndex) {
	                var group = this._view.groups[groupIndex];

	                return group.daySlotByPosition(x, y, true);
	            },

	            _nextSlotStartDate: function(startDate) {
	                return startDate;
	            },

	            _getCalendarRowsLength: function() {
	                var view = this._view;
	                var isVerticallyGrouped = view._isVerticallyGrouped();

	                return isVerticallyGrouped ? NUMBER_OF_COLUMNS : NUMBER_OF_ROWS;
	            },

	            _createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {
	                var view = this._view;

	                return view._createDateLayout(columns, null, false);
	            },

	            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {
	                var view = this._view;
	                var resource = resources[0];
	                var configuration = [];
	                var data = resource.dataSource.view();

	                for (var dataIndex = 0; dataIndex < data.length * NUMBER_OF_ROWS; dataIndex++) {
	                    var obj = {
	                        text: groupHeaderTemplate({
	                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex % data.length])),
	                            color: kendo.getter(resource.dataColorField)(data[dataIndex % data.length]),
	                            field: resource.field,
	                            title: resource.title,
	                            name: resource.name,
	                            value: kendo.getter(resource.dataValueField)(data[dataIndex % data.length])
	                        }),
	                        className: "k-slot-cell"
	                    };
	                    obj.columns = view._createColumnsLayout(resources.slice(1), null, groupHeaderTemplate);

	                    configuration.push(obj);
	                }

	                return configuration;
	            },

	            _createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {
	                var view = this._view;

	                return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);
	            },

	            _verticalGroupCount: function(level) {
	                var view = this._view;

	                return view._columnCountForLevel(level) / NUMBER_OF_ROWS;
	            },

	            _horizontalGroupCount: function(level) {
	                var view = this._view;
	                return view._columnCountForLevel(level) / NUMBER_OF_COLUMNS;
	            },

	            _positionEvent: function(event, group, range, rangeCount, start, end){
	                var view = this._view;
	                var startIndex = range.start.index;
	                var endIndex = range.end.index;
	                var isMobilePhoneView = view._isMobilePhoneView();

	                for (var i = range.start.index; i <= range.end.index; i++) {
	                    var currentSlot = range.collection._slots[i];
	                    var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];                                  

	                    var occurrence = event.clone({ 
	                        start: i === startIndex ? currentSlot.start : start,
	                        end: i === endIndex ? currentSlot.end : end,
	                        head: i !== endIndex || range.head,
	                        tail: i !== startIndex || range.tail });

	                    if (isMobilePhoneView) {
	                        view._positionMobileEvent(dateRange, view._createEventElement(occurrence), group);
	                    } else {
	                        view._positionEvent(dateRange, view._createEventElement(occurrence), group);
	                    }
	                }
	            },

	            _addDaySlotCollections: function(groupCount, tableRows, startDate) {
	                var view = this._view;
	                var columnCount = NUMBER_OF_COLUMNS;
	                var rowCount = NUMBER_OF_ROWS;
	                var isVerticallyGrouped = view._isVerticallyGrouped();

	                for (var dateIndex = 0; dateIndex < columnCount; dateIndex++) {
	                    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
	                        var groupIndex = 0;
	                        var currentTableIndex = isVerticallyGrouped ? dateIndex : rowIndex;
	                        var tableRow = tableRows[currentTableIndex];
	                        var cells = tableRow.children;
	                        var cellMultiplier = 0;

	                        tableRow.setAttribute("role", "row");

	                        if (!view._isVerticallyGrouped()) {
	                            cellMultiplier = dateIndex;
	                        }

	                        for (var cellIndex = cellMultiplier * groupCount; cellIndex < (cellMultiplier + 1) * groupCount; cellIndex++) {
	                            var cellCount = (rowIndex * columnCount) + dateIndex;
	                            var currentCellIndex = isVerticallyGrouped ? cellIndex + (rowIndex * groupCount) : cellIndex;
	                            var cell = cells[currentCellIndex];
	                            var currentGroupIndex = isVerticallyGrouped ? cellIndex : groupIndex;
	                            var group = view.groups[currentGroupIndex];
	                            var collection;
	                            if (dateIndex === 0) {
	                                collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));
	                            } else {
	                                collection = group._daySlotCollections[rowIndex];
	                            }

	                            view.addDaySlot(collection, cell, startDate, cellCount);
	                            groupIndex++;
	                        }
	                    }
	                }
	            },

	            _changePeriodGroupIndex: function(reverse, vertical, selectionGroupIndex){
	                var view = this._view;

	                if(vertical  &&  view._isVerticallyGrouped()){
	                         return reverse ? view.groups.length - 1 : 0;
	                }

	                return selectionGroupIndex;
	            },

	             _createResizeHint: function(range) {
	                 var view = this._view;
	                 var left, top, width, height, hint;

	                 if (view._isVerticallyGrouped()) {
	                    left = range.startSlot().offsetLeft;
	                    top = range.start.offsetTop;
	                    width = range.startSlot().offsetWidth;
	                    height = range.endSlot().offsetTop + range.startSlot().offsetHeight - range.startSlot().offsetTop - 2;
	                    hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);

	                    view._appendResizeHint(hint);
	                 } else {
	                    for (var slotIdx = range.startSlot().index; slotIdx <= range.endSlot().index; slotIdx++) {
	                       var slot = range.collection._slots[slotIdx];
	                        left = slot.offsetLeft;
	                        top = slot.offsetTop;
	                        width = slot.offsetWidth;
	                        height = slot.offsetHeight - 2;                  
	                        hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);

	                        view._appendResizeHint(hint);
	                    }
	                 }
	             },

	             _createMoveHint: function(range, event) {
	                 var view = this._view;
	                 var startSlot = range.startSlot();
	                 var endSlot = range.endSlot();

	                for (var slotIdx = startSlot.index; slotIdx <= endSlot.index; slotIdx++) {
	                    var slot = range.collection._slots[slotIdx];
	                    var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));

	                    hint.css({
	                        left: slot.offsetLeft,
	                        top: slot.offsetTop + slot.firstChildHeight,
	                        height: view.options.eventHeight,
	                        width: slot.offsetWidth - 2
	                    });

	                    hint.addClass("k-event-drag-hint");

	                    view._appendMoveHint(hint);
	                }
	             }
	        });

	        kendo.ui.scheduler.MonthGroupedView = MonthGroupedView;
	        kendo.ui.scheduler.MonthGroupedByDateView = MonthGroupedByDateView;

	    ui.MonthView = SchedulerView.extend({
	        init: function(element, options) {
	            var that = this;

	            SchedulerView.fn.init.call(that, element, options);
	            that._groupedView = that._getGroupedView();

	            that.title = that.options.title;

	            that._templates();

	            that._editable();

	            that._renderLayout(that.options.date);

	            that._groups();
	        },

	        name: "month",

	        _getGroupedView: function(){
	            if(this._isGroupedByDate()){
	                return new kendo.ui.scheduler.MonthGroupedByDateView(this);
	            } else{
	                return new kendo.ui.scheduler.MonthGroupedView(this);   
	            }
	        },

	        _updateDirection: function(selection, ranges, multiple, reverse, vertical) {
	            if (multiple) {
	                var startSlot = ranges[0].start;
	                var endSlot = ranges[ranges.length - 1].end;
	                var isSameSlot = startSlot.index === endSlot.index;
	                var isSameCollection = startSlot.collectionIndex === endSlot.collectionIndex;
	                var updateDirection;

	                if (vertical) {
	                    updateDirection = (isSameSlot && isSameCollection) || isSameCollection;
	                } else {
	                    updateDirection = isSameSlot && isSameCollection;
	                }

	                if (updateDirection) {
	                    selection.backward = reverse;
	                }
	            }
	        },

	        _changeDate: function(selection, slot, previous) {
	            var group = this.groups[selection.groupIndex];
	            var collections, index;

	            if (previous) {
	                  collections = group._getCollections(group.daySlotCollectionCount());
	                  index = slot.collectionIndex - 1;

	                  if (index >= 0) {
	                      return  collections[index]._slots[collections[index]._slots.length - 1];
	                  }
	              } else {
	                  collections = group._getCollections(group.daySlotCollectionCount());
	                  index = slot.collectionIndex + 1;
	                  var slotIndex = 0;
	                  
	                  if (collections[index] && collections[index]._slots[slotIndex]) {
	                      return  collections[index]._slots[slotIndex];
	                  }
	              }
	        },

	         _getNextHorizontalRange: function(group, method, horizontalRange){
	              var isVertical = this._isVerticallyGrouped();

	             horizontalRange.startSlot = group[method](horizontalRange.startSlot, isVertical);
	             horizontalRange.endSlot = group[method](horizontalRange.endSlot, isVertical);

	             return horizontalRange;
	        },
	        
	         _getNextVerticalRange: function(group, method, verticalRange, multiple){
	             var isVertical = this._isVerticallyGrouped() && this._isGroupedByDate();

	             verticalRange.startSlot = group[method](verticalRange.startSlot, multiple, isVertical);
	             verticalRange.endSlot = group[method](verticalRange.endSlot, multiple, isVertical);

	             return verticalRange;
	        },

	        _changeViewPeriod: function(selection, reverse, vertical) {
	            var pad = vertical ? 7 : 1;

	            if (reverse) {
	                pad *= -1;
	            }

	            selection.start = kendo.date.addDays(selection.start, pad);
	            selection.end = kendo.date.addDays(selection.end, pad);

	            if (!vertical || (vertical && this._isVerticallyGrouped())) {
	                selection.groupIndex = this._groupedView._changePeriodGroupIndex(reverse, vertical, selection.groupIndex);
	            }

	            selection.events = [];

	            return true;
	        },

	        _continuousSlot: function(selection, ranges, reverse) {
	            var index = selection.backward ? 0 : ranges.length - 1;
	            var group = this.groups[selection.groupIndex];

	            return group.continuousSlot(ranges[index].start, reverse);
	        },

	        _changeGroupContinuously: function(selection, continuousSlot, multiple, reverse) {
	            if (!multiple) {
	                var groupIndex = selection.groupIndex;
	                var lastGroupIndex = this.groups.length - 1;
	                var vertical = this._isVerticallyGrouped();
	                var group = this.groups[groupIndex];

	                if (!continuousSlot && vertical) {

	                    continuousSlot = group[reverse ? "lastSlot" : "firstSlot"]();

	                    groupIndex += (reverse ? -1 : 1);

	                } else if (continuousSlot && !vertical) {
	                    groupIndex = reverse ? lastGroupIndex : 0;
	                }

	                if (groupIndex < 0 || groupIndex > lastGroupIndex) {
	                    groupIndex = reverse ? lastGroupIndex : 0;
	                    continuousSlot = null;
	                }

	                selection.groupIndex = groupIndex;
	            }

	            return continuousSlot;
	        },

	        _normalizeHorizontalSelection: function(selection, ranges, reverse) {
	            var slot;

	            if (reverse) {
	                slot = ranges[0].start;
	            } else {
	                slot = ranges[ranges.length - 1].end;
	            }

	            return slot;
	        },

	        _normalizeVerticalSelection: function(selection, ranges) {
	            var slot;

	            if (selection.backward) {
	                slot = ranges[0].start;
	            } else {
	                slot = ranges[ranges.length - 1].end;
	            }

	            return slot;
	        },

	        _templates: function() {
	            var options = this.options,
	                settings = extend({}, kendo.Template, options.templateSettings);

	            this.eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_STRING);
	            this.dayTemplate = kendo.template(options.dayTemplate, settings);
	            this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);
	        },

	        dateForTitle: function() {
	            return kendo.format(this.options.selectedDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);
	        },

	        shortDateForTitle: function() {
	            return kendo.format(this.options.selectedShortDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);
	        },

	        nextDate: function() {
	            return kendo.date.nextDay(this._lastDayOfMonth);
	        },

	        previousDate: function() {
	            return kendo.date.previousDay(this._firstDayOfMonth);
	        },

	        startDate: function() {
	            return this._startDate;
	        },

	        endDate: function() {
	            return this._endDate;
	        },

	        _renderLayout: function(date) {
	            var that = this;

	            this._firstDayOfMonth = kendo.date.firstDayOfMonth(date);

	            this._lastDayOfMonth = kendo.date.lastDayOfMonth(date);

	            this._startDate = firstVisibleMonthDay(date, this.calendarInfo());

	            this.createLayout(this._layout());

	            this._content();

	            this.refreshLayout();

	            this.content.on("click" + NS, ".k-nav-day,.k-more-events", function(e) {
	               var offset = $(e.currentTarget).offset();
	               var slot = that._slotByPosition(offset.left, offset.top);

	               e.preventDefault();
	               that.trigger("navigate", { view: "day", date: slot.startDate() });
	            });
	        },

	        _editable: function() {
	            if (this.options.editable && !this._isMobilePhoneView()) {
	                if (this._isMobile()) {
	                    this._touchEditable();
	                } else {
	                    this._mouseEditable();
	                }

	            }
	        },

	        _mouseEditable: function() {
	            var that = this;
	            that.element.on("click" + NS, ".k-scheduler-monthview .k-event a:has(.k-i-close)", function(e) {
	                that.trigger("remove", { uid: $(this).closest(".k-event").attr(kendo.attr("uid")) });
	                e.preventDefault();
	            });

	            if (that.options.editable.create !== false) {
	                that.element.on("dblclick" + NS, ".k-scheduler-monthview .k-scheduler-content td", function(e) {
	                    var offset = $(e.currentTarget).offset();
	                    var slot = that._slotByPosition(offset.left, offset.top);

	                    if (slot) {
	                        var resourceInfo = that._resourceBySlot(slot);
	                        that.trigger("add", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });
	                    }

	                    e.preventDefault();
	                });
	            }

	            if (that.options.editable.update !== false) {
	                that.element.on("dblclick" + NS, ".k-scheduler-monthview .k-event", function(e) {
	                    that.trigger("edit", { uid: $(this).closest(".k-event").attr(kendo.attr("uid")) });
	                    e.preventDefault();
	                });
	            }
	        },

	        _touchEditable: function() {
	            var that = this;
	            var threshold = 0;

	            if (kendo.support.mobileOS.android) {
	                threshold = 5;
	            }

	            if (that.options.editable.create !== false) {
	                that._addUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter: ".k-scheduler-monthview .k-scheduler-content td",
	                    tap: function(e) {
	                        var offset = $(e.target).offset();
	                        var slot = that._slotByPosition(offset.left, offset.top);

	                        if (slot) {
	                            var resourceInfo = that._resourceBySlot(slot);
	                            that.trigger("add", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });
	                        }

	                        e.preventDefault();
	                    }
	                });
	            }

	            if (that.options.editable.update !== false) {
	                that._editUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter:  ".k-scheduler-monthview .k-event",
	                    tap: function(e) {
	                        if ($(e.event.target).closest("a:has(.k-i-close)").length === 0) {
	                            that.trigger("edit", { uid: $(e.target).closest(".k-event").attr(kendo.attr("uid")) });
	                            e.preventDefault();
	                        }
	                    }
	                });
	            }
	        },

	        selectionByElement: function(cell) {
	            var offset = $(cell).offset();
	            return this._slotByPosition(offset.left, offset.top);
	        },

	        _columnCountForLevel: function(level) {
	            var columnLevel = this.columnLevels[level];
	            return columnLevel ? columnLevel.length : 0;
	        },

	        _rowCountForLevel: function(level) {
	            var rowLevel = this.rowLevels[level];
	            return rowLevel ? rowLevel.length : 0;
	        },

	        _content: function() {
	            var html = '<tbody>';
	            var verticalGroupCount = 1;
	            var groupedView = this._groupedView;
	            var resources = this.groupedResources;

	            if (resources.length) {
	                if (this._isVerticallyGrouped()) {
	                    verticalGroupCount = groupedView._verticalRowCountForLevel(resources.length - 1);
	                }
	            }

	            for (var verticalGroupIdx = 0; verticalGroupIdx < verticalGroupCount; verticalGroupIdx++) {
	                html += this._createCalendar(verticalGroupIdx);
	            }

	            html += "</tbody>";

	            this.content.find("table").html(html);
	        },

	        _createCalendar: function(verticalGroupIndex) {
	            var start = this.startDate();
	            var cellCount = NUMBER_OF_COLUMNS*NUMBER_OF_ROWS;
	            var cellsPerRow = NUMBER_OF_COLUMNS;
	            var weekStartDates = [start];
	            var html = '';
	            var horizontalGroupCount = 1;
	            var isVerticallyGrouped = this._isVerticallyGrouped();
	            var groupedView = this._groupedView;

	            var resources = this.groupedResources;

	            if (resources.length) {
	                if (!isVerticallyGrouped) {
	                    horizontalGroupCount = groupedView._horizontalGroupCountForLevel(resources.length - 1);
	                }
	            }

	            this._slotIndices = {};

	            var calendarRowsLength = groupedView._getCalendarRowsLength(cellsPerRow, cellCount);

	            for (var rowIdx = 0; rowIdx < calendarRowsLength; rowIdx++) {
	                html += "<tr>";

	                weekStartDates.push(start);

	                var startIdx = rowIdx*cellsPerRow;

	               html += groupedView._createRows(start, startIdx, horizontalGroupCount, verticalGroupIndex);
	               start = groupedView._adjustStartDate(start, rowIdx === calendarRowsLength - 1); 

	                html += "</tr>";
	            }

	            this._weekStartDates = weekStartDates;
	            this._endDate = kendo.date.previousDay(start);

	            return html;
	        },

	        _createRow: function(startDate, startIdx, cellsPerRow, groupIndex) {
	            var that = this;
	            var min = that._firstDayOfMonth;
	            var max = that._lastDayOfMonth;
	            var content = that.dayTemplate;
	            var classes = "";
	            var html = "";
	            var groupedView = this._groupedView;

	            var resources = function() {
	                return that._resourceBySlot({ groupIndex: groupIndex });
	            };

	            for (var cellIdx = 0; cellIdx < cellsPerRow; cellIdx++) {
	                classes = "";

	                if (kendo.date.isToday(startDate)) {
	                    classes += "k-today";
	                }

	                if (!kendo.date.isInDateRange(startDate, min, max)) {
	                    classes += " k-other-month";
	                }

	                html += "<td ";

	                if (classes !== "") {
	                    html += 'class="' + classes + '"';
	                }

	                html += ">";
	                html += groupedView._getContent(content, startDate, resources, cellIdx);
	                html += "</td>";

	                that._slotIndices[getDate(startDate).getTime()] = startIdx + cellIdx;

	               startDate = groupedView._nextSlotStartDate(startDate);
	            }

	            return html;
	        },

	        _layout: function() {
	            var calendarInfo = this.calendarInfo();
	            var weekDayNames = this._isMobile() ? calendarInfo.days.namesShort : calendarInfo.days.names;
	            var names = shiftArray(weekDayNames, calendarInfo.firstDay);
	            var columns = $.map(names, function(value) { return { text: value }; });
	            var resources = this.groupedResources;
	            var rows;
	            var groupedView = this._groupedView;

	            if (resources.length) {
	                if (this._isVerticallyGrouped()) {
	                    var inner = []; //add hidden cells in order to sync the content rows
	                    for (var idx = 0; idx < 6; idx++) {
	                        inner.push({ text: "<div>&nbsp;</div>", className: "k-hidden k-slot-cell" });
	                    }
	                    rows =  groupedView._createRowsLayout(resources, inner, this.groupHeaderTemplate, columns); 
	                    columns =  groupedView._createVerticalColumnsLayout(resources, inner, this.groupHeaderTemplate, columns); 

	                } else {
	                    columns =  groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);
	                }
	            }

	            return {
	                columns: columns,
	                rows: rows
	            };
	        },

	       _createEventElement: function(event) {
	            var options = this.options;
	            var editable = options.editable;

	            var isMobile = this._isMobile();

	            event.showDelete = editable && editable.destroy !== false && !isMobile;
	            event.resizable = editable && editable.resize !== false && !isMobile;
	            event.ns = kendo.ns;
	            event.resources = this.eventResources(event);
	            event.inverseColor = event.resources && event.resources[0] ? this._shouldInverseResourceColor(event.resources[0]) : false;

	            var element = $(this.eventTemplate(event));

	            this.angular("compile", function(){
	                return {
	                    elements: element,
	                    data: [ { dataItem: event } ]
	                };
	            });

	            return element;
	        },
	       _isInDateSlot: function(event) {
	            var groups = this.groups[0];
	            var slotStart = groups.firstSlot().start;
	            var slotEnd = groups.lastSlot().end - 1;

	            var startTime = kendo.date.toUtcTime(event.start);
	            var endTime = kendo.date.toUtcTime(event.end);

	            return (isInDateRange(startTime, slotStart, slotEnd) ||
	                isInDateRange(endTime, slotStart, slotEnd) ||
	                isInDateRange(slotStart, startTime, endTime) ||
	                isInDateRange(slotEnd, startTime, endTime)) &&
	                (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay );
	        },

	        _slotIndex: function(date) {
	            return this._slotIndices[getDate(date).getTime()];
	        },

	        _positionMobileEvent: function(slotRange, element, group) {
	            var startSlot = slotRange.start;

	            if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {
	               startSlot = slotRange.end;
	            }

	            var startIndex = slotRange.start.index;
	            var endIndex = startIndex;

	            var eventCount = 3;
	            var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);

	            events.push({element: element, start: startIndex, end: endIndex });

	            var rows = SchedulerView.createRows(events);

	            var slot = slotRange.collection.at(startIndex);

	            var container = slot.container;

	            if (!container) {

	                 container = $(kendo.format('<div class="k-events-container" style="top:{0};left:{1};width:{2}"/>',
	                    startSlot.offsetTop + startSlot.firstChildTop + startSlot.firstChildHeight - 3 + "px",
	                    startSlot.offsetLeft + "px",
	                    startSlot.offsetWidth + "px"
	                ));

	                slot.container = container;

	                this.content[0].appendChild(container[0]);
	            }

	            if (rows.length <= eventCount) {
	                slotRange.addEvent({element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });

	                group._continuousEvents.push({
	                    element: element,
	                    uid: element.attr(kendo.attr("uid")),
	                    start: slotRange.start,
	                    end: slotRange.end
	                });

	                container[0].appendChild(element[0]);
	            }
	        },

	        _positionEvent: function(slotRange, element, group) {
	            var eventHeight = this.options.eventHeight;
	            var startSlot = slotRange.start;

	            if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {
	               startSlot = slotRange.end;
	            }

	            var startIndex = slotRange.start.index;
	            var endIndex = slotRange.end.index;
	            var eventCount = startSlot.eventCount;
	            var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);
	            var rightOffset = startIndex !== endIndex ? 5 : 4;

	            events.push({element: element, start: startIndex, end: endIndex });

	            var rows = SchedulerView.createRows(events);

	            for (var idx = 0, length = Math.min(rows.length, eventCount); idx < length; idx++) {
	                var rowEvents = rows[idx].events;
	                var eventTop = startSlot.offsetTop + startSlot.firstChildHeight + idx * eventHeight + 3 * idx + "px";

	                for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
	                    rowEvents[j].element[0].style.top = eventTop;
	                }
	            }

	            if (rows.length > eventCount) {
	                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {
	                    var collection = slotRange.collection;

	                    var slot = collection.at(slotIndex);

	                    if (slot.more) {
	                       return;
	                    }

	                    slot.more = $(MORE_BUTTON_TEMPLATE({
	                        ns: kendo.ns,
	                        start: slotIndex,
	                        end: slotIndex,
	                        width: slot.clientWidth - 2,
	                        left: slot.offsetLeft + 2,
	                        top: slot.offsetTop + slot.firstChildHeight + eventCount * eventHeight + 3 * eventCount
	                    }));

	                    this.content[0].appendChild(slot.more[0]);
	                }
	            } else {
	                slotRange.addEvent({element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });

	                element[0].style.width = slotRange.innerWidth() - rightOffset + "px";
	                element[0].style.left = startSlot.offsetLeft + 2 + "px";
	                element[0].style.height = eventHeight + "px";

	                group._continuousEvents.push({
	                    element: element,
	                    uid: element.attr(kendo.attr("uid")),
	                    start: slotRange.start,
	                    end: slotRange.end
	                });

	                element.appendTo(this.content);
	            }
	        },

	       _slotByPosition: function(x, y) {
	           var offset = this.content.offset();

	           x -= offset.left;
	           y -= offset.top;
	           y += this.content[0].scrollTop;
	           x += this.content[0].scrollLeft;

	           x = Math.ceil(x);
	           y = Math.ceil(y);

	           for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
	               var slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);

	               if (slot) {
	                   return slot;
	               }
	           }

	           return null;
	       },

	       _appendResizeHint: function(hint) {
	            hint.appendTo(this.content);

	            this._resizeHint = this._resizeHint.add(hint);
	       },

	        _updateResizeHint: function(event, groupIndex, startTime, endTime) {
	            this._removeResizeHint();

	            var group = this.groups[groupIndex];

	            var ranges = group.ranges(startTime, endTime, true, event.isAllDay);

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                this._groupedView._createResizeHint(ranges[rangeIndex]);
	            }

	            this._resizeHint.find(".k-label-top,.k-label-bottom").text("");

	            this._resizeHint.first().addClass("k-first").find(".k-label-top").text(kendo.toString(kendo.timezone.toLocalDate(startTime), "M/dd"));

	            this._resizeHint.last().addClass("k-last").find(".k-label-bottom").text(kendo.toString(kendo.timezone.toLocalDate(endTime), "M/dd"));
	        },

	       _updateMoveHint: function(event, groupIndex, distance) {
	            var start = kendo.date.toUtcTime(event.start) + distance;

	            var end = start + event.duration();

	            var group = this.groups[groupIndex];

	            var ranges = group.ranges(start, end, true, event.isAllDay);

	            this._removeMoveHint();

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                this._groupedView._createMoveHint(ranges[rangeIndex], event);
	            }
	       },

	       _appendMoveHint: function(hint) {
	            hint.appendTo(this.content);
	            this._moveHint = this._moveHint.add(hint);
	       },

	       _groups: function() {
	            var groupCount = this._groupCount();
	            var tableRows = this.content[0].getElementsByTagName("tr");
	            var startDate = this.startDate();
	            this.groups = [];

	            for (var idx = 0; idx < groupCount; idx++) {
	                this._addResourceView(idx);
	            }
	          
	            this._groupedView._addDaySlotCollections(groupCount, tableRows, startDate);
	        },


	       addDaySlot: function(collection, cell, startDate, cellCount){
	            var clientHeight = cell.clientHeight;
	            var firstChildHeight = cell.children.length ? cell.children[0].offsetHeight + 3 : 0;
	            var start = kendo.date.addDays(startDate, cellCount);
	            var end = kendo.date.MS_PER_DAY;

	            if (startDate.getHours() !== start.getHours()) {
	                end += (startDate.getHours() - start.getHours()) * kendo.date.MS_PER_HOUR;
	            }

	            start = kendo.date.toUtcTime(start);
	            end += start;     
	            var eventCount = Math.floor((clientHeight - firstChildHeight - this.options.moreButtonHeight) / (this.options.eventHeight + 3)) ;// add space for the more button

	            cell.setAttribute("role", "gridcell");
	            cell.setAttribute("aria-selected", false);

	            collection.addDaySlot(cell, start, end, eventCount);
	       },

	       render: function(events) {
	            this.content.children(".k-event,.k-more-events,.k-events-container").remove();

	            this._groups();

	            events = new kendo.data.Query(events).sort([{ field: "start", dir: "asc" },{ field: "end", dir: "desc" }]).toArray();

	            var resources = this.groupedResources;
	            if (resources.length) {
	               this._renderGroups(events, resources, 0, 1);
	            } else {
	               this._renderEvents(events, 0);
	            }

	            this.refreshLayout();
	            this.trigger("activate");
	       },

	       _renderEvents: function(events, groupIndex) {
	            var event;
	            var idx;
	            var length;           

	            for (idx = 0, length = events.length; idx < length; idx++) {
	                event = events[idx];

	                if (this._isInDateSlot(event)) {
	                    var group = this.groups[groupIndex];

	                    if (!group._continuousEvents) {
	                        group._continuousEvents = [];
	                    }

	                    var ranges = group.slotRanges(event, true);

	                    var rangeCount = ranges.length;

	                    for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {
	                        var range = ranges[rangeIndex];
	                        var start = event.start;
	                        var end = event.end;

	                        this._groupedView._positionEvent(event, group, range, rangeCount, start, end, rangeIndex);                                    
	                    }
	                }
	            }
	        },

	        _renderGroups: function(events, resources, offset, columnLevel) {
	            var resource = resources[0];

	            if (resource) {
	                var view = resource.dataSource.view();

	                for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {
	                    var value = this._resourceValue(resource, view[itemIdx]);

	                    var tmp = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();

	                    if (resources.length > 1) {
	                        offset = this._renderGroups(tmp, resources.slice(1), offset++, columnLevel + 1);
	                    } else {
	                        this._renderEvents(tmp, offset++);
	                    }
	                }
	            }
	            return offset;
	        },

	        _groupCount: function() {
	            var resources = this.groupedResources;
	            var groupedView = this._groupedView;

	            if (resources.length) {
	                if (this._isVerticallyGrouped()) {
	                    return groupedView._verticalGroupCount(resources.length - 1);
	                } else {
	                   return groupedView._horizontalGroupCount(resources.length);
	                }
	            }
	            return 1;
	        },

	        _columnOffsetForResource: function(index) {
	            return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);
	        },

	        destroy: function(){
	            if (this.table) {
	                this.table.removeClass("k-scheduler-monthview");
	            }

	            if (this.content) {
	                this.content.off(NS);
	            }

	            if (this.element) {
	                this.element.off(NS);
	            }

	            SchedulerView.fn.destroy.call(this);

	            if (this._isMobile() && !this._isMobilePhoneView() && this.options.editable) {
	                if (this.options.editable.create !== false) {
	                    this._addUserEvents.destroy();
	                }

	                if (this.options.editable.update !== false) {
	                    this._editUserEvents.destroy();
	                }
	            }
	        },

	        events: ["remove", "add", "edit", "navigate"],

	        options: {
	            title: "Month",
	            name: "month",
	            eventHeight: 25,
	            moreButtonHeight: 13,
	            editable: true,
	            selectedDateFormat: "{0:y}",
	            selectedShortDateFormat: "{0:y}",
	            groupHeaderTemplate: "#=text#",
	            dayTemplate: DAY_TEMPLATE,
	            eventTemplate: EVENT_TEMPLATE
	        }
	    });


	    function shiftArray(array, idx) {
	        return array.slice(idx).concat(array.slice(0, idx));
	    }

	    function firstVisibleMonthDay(date, calendarInfo) {
	        var firstDay = calendarInfo.firstDay,
	            firstVisibleDay = new Date(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());

	        while (firstVisibleDay.getDay() != firstDay) {
	            kendo.date.setTime(firstVisibleDay, -1 * MS_PER_DAY);
	        }

	        return firstVisibleDay;
	    }

	    function isInDateRange(value, min, max) {
	        var msMin = min,
	            msMax = max,
	            msValue;

	        msValue = value;

	        return msValue >= msMin && msValue <= msMax;
	    }
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 137 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.recurrence.js ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(829);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 578:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.dropdownlist */ 29);

/***/ },

/***/ 675:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.datepicker */ 8);

/***/ },

/***/ 688:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.numerictextbox */ 32);

/***/ },

/***/ 829:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(578), __webpack_require__(675), __webpack_require__(688) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "scheduler.recurrence",
	    name: "Recurrence",
	    category: "web",
	    depends: [ "dropdownlist", "datepicker", "numerictextbox" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        timezone = kendo.timezone,
	        Class = kendo.Class,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        DropDownList = ui.DropDownList,
	        kendoDate = kendo.date,
	        setTime = kendoDate.setTime,
	        setDayOfWeek = kendoDate.setDayOfWeek,
	        adjustDST = kendoDate.adjustDST,
	        firstDayOfMonth = kendoDate.firstDayOfMonth,
	        getMilliseconds = kendoDate.getMilliseconds,
	        DAYS_IN_LEAPYEAR = [0,31,60,91,121,152,182,213,244,274,305,335,366],
	        DAYS_IN_YEAR = [0,31,59,90,120,151,181,212,243,273,304,334,365],
	        MONTHS = [31, 28, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31],
	        WEEK_DAYS = {
	            0: "SU",
	            1: "MO",
	            2: "TU",
	            3: "WE",
	            4: "TH",
	            5: "FR",
	            6: "SA"
	        },
	        WEEK_DAYS_IDX = {
	            "SU": 0,
	            "MO": 1,
	            "TU": 2,
	            "WE": 3,
	            "TH": 4,
	            "FR": 5,
	            "SA": 6
	        },
	        DATE_FORMATS = [
	            "yyyy-MM-ddTHH:mm:ss.fffzzz",
	            "yyyy-MM-ddTHH:mm:sszzz",
	            "yyyy-MM-ddTHH:mm:ss",
	            "yyyy-MM-ddTHH:mm",
	            "yyyy-MM-ddTHH",
	            "yyyy-MM-dd",
	            "yyyyMMddTHHmmssfffzzz",
	            "yyyyMMddTHHmmsszzz",
	            "yyyyMMddTHHmmss",
	            "yyyyMMddTHHmm",
	            "yyyyMMddTHH",
	            "yyyyMMdd"
	        ],
	        RULE_NAMES = ["months", "weeks", "yearDays", "monthDays", "weekDays", "hours", "minutes", "seconds"],
	        RULE_NAMES_LENGTH = RULE_NAMES.length,
	        RECURRENCE_DATE_FORMAT = "yyyyMMddTHHmmssZ",
	        limitation = {
	            months: function(date, end, rule) {
	                var monthRules = rule.months,
	                    months = ruleValues(monthRules, date.getMonth() + 1),
	                    changed = false;

	                if (months !== null) {
	                    if (months.length) {
	                        date.setMonth(months[0] - 1, 1);
	                    } else {
	                        date.setFullYear(date.getFullYear() + 1, monthRules[0] - 1, 1);
	                    }

	                    changed = true;
	                }

	                return changed;
	            },

	            monthDays: function(date, end, rule) {
	                var monthLength, month, days,
	                    changed = false,
	                    hours = date.getHours(),
	                    normalize = function(monthDay) {
	                        if (monthDay < 0) {
	                            monthDay = monthLength + monthDay;
	                        }
	                        return monthDay;
	                    };

	                while (date <= end) {
	                    month = date.getMonth();
	                    monthLength = getMonthLength(date);
	                    days = ruleValues(rule.monthDays, date.getDate(), normalize);

	                    if (days === null) {
	                        return changed;
	                    }

	                    changed = true;

	                    if (days.length) {
	                        date.setMonth(month, days.sort(numberSortPredicate)[0]);
	                        adjustDST(date, hours);

	                        if (month === date.getMonth()) {
	                            break;
	                        }
	                    } else {
	                        date.setMonth(month + 1, 1);
	                    }
	                }

	                return changed;
	            },

	            yearDays: function(date, end, rule) {
	                var year, yearDays,
	                    changed = false,
	                    hours = date.getHours(),
	                    normalize = function(yearDay) {
	                        if (yearDay < 0) {
	                            yearDay = year + yearDay;
	                        }
	                        return yearDay;
	                    };

	                while (date < end) {
	                    year = leapYear(date) ? 366 : 365;
	                    yearDays = ruleValues(rule.yearDays, dayInYear(date), normalize);

	                    if (yearDays === null) {
	                        return changed;
	                    }

	                    changed = true;
	                    year = date.getFullYear();

	                    if (yearDays.length) {
	                        date.setFullYear(year, 0, yearDays.sort(numberSortPredicate)[0]);
	                        adjustDST(date, hours);
	                        break;
	                    } else {
	                        date.setFullYear(year + 1, 0, 1);
	                    }
	                }

	                return changed;
	            },

	            weeks: function(date, end, rule) {
	                var weekStart = rule.weekStart,
	                    year, weeks, day,
	                    changed = false,
	                    hours = date.getHours(),
	                    normalize = function(week) {
	                        if (week < 0) {
	                            week = 53 + week;
	                        }
	                        return week;
	                    };

	                while (date < end) {
	                    weeks = ruleValues(rule.weeks, weekInYear(date, weekStart), normalize);

	                    if (weeks === null) {
	                        return changed;
	                    }

	                    changed = true;
	                    year = date.getFullYear();

	                    if (weeks.length) {
	                        day = (weeks.sort(numberSortPredicate)[0] * 7) - 1;

	                        date.setFullYear(year, 0, day);
	                        setDayOfWeek(date, weekStart, -1);

	                        adjustDST(date, hours);
	                        break;
	                    } else {
	                        date.setFullYear(year + 1, 0, 1);
	                    }
	                }

	                return changed;
	            },

	            weekDays: function(date, end, rule) {
	                var weekDays = rule.weekDays;
	                var weekStart = rule.weekStart;
	                var weekDayRules = ruleWeekValues(weekDays, date, weekStart);
	                var hours = date.getHours();
	                var weekDayRule, day;

	                if (weekDayRules === null) {
	                    return false;
	                }

	                weekDayRule = weekDayRules[0];
	                if (!weekDayRule) {
	                    weekDayRule = weekDays[0];
	                    setDayOfWeek(date, weekStart);
	                }

	                day = weekDayRule.day;

	                if (weekDayRule.offset) {
	                    while (date <= end && !isInWeek(date, weekDayRule, weekStart)) {
	                        if (weekInMonth(date, weekStart) === numberOfWeeks(date, weekStart)) {
	                            date.setMonth(date.getMonth() + 1, 1);
	                            adjustDST(date, hours);
	                        } else {
	                            date.setDate(date.getDate() + 7);
	                            adjustDST(date, hours);

	                            setDayOfWeek(date, weekStart, -1);
	                        }
	                    }
	                }

	                if (date.getDay() !== day) {
	                    setDayOfWeek(date, day);
	                }

	                return true;
	            },

	            hours: function(date, end, rule) {
	                var hourRules = rule.hours,
	                    startTime = rule._startTime,
	                    startHours = startTime.getHours(),
	                    hours = ruleValues(hourRules, startHours),
	                    changed = false;

	                if (hours !== null) {
	                    changed = true;

	                    date.setHours(startHours);
	                    adjustDST(date, startHours);

	                    if (hours.length) {
	                        hours = hours[0];
	                        date.setHours(hours);
	                    } else {
	                        hours = date.getHours();
	                        date.setDate(date.getDate() + 1);
	                        adjustDST(date, hours);

	                        hours = hourRules[0];
	                        date.setHours(hours);
	                        adjustDST(date, hours);
	                    }

	                    if (rule.minutes) {
	                        date.setMinutes(0);
	                    }

	                    startTime.setHours(hours, date.getMinutes());
	                }

	                return changed;
	            },

	            minutes: function(date, end, rule) {
	                var minuteRules = rule.minutes,
	                    currentMinutes = date.getMinutes(),
	                    minutes = ruleValues(minuteRules, currentMinutes),
	                    hours = rule._startTime.getHours(),
	                    changed = false;

	                if (minutes !== null) {
	                    changed = true;

	                    if (minutes.length) {
	                        minutes = minutes[0];
	                    } else {
	                        hours += 1;
	                        minutes = minuteRules[0];
	                    }

	                    if (rule.seconds) {
	                        date.setSeconds(0);
	                    }

	                    date.setHours(hours, minutes);

	                    hours = hours % 24;
	                    adjustDST(date, hours);
	                    rule._startTime.setHours(hours, minutes, date.getSeconds());
	                }

	                return changed;
	            },

	            seconds: function(date, end, rule) {
	                var secondRules = rule.seconds,
	                    hours = rule._startTime.getHours(),
	                    seconds = ruleValues(secondRules, date.getSeconds()),
	                    minutes = date.getMinutes(),
	                    changed = false;

	                if (seconds !== null) {
	                    changed = true;

	                    if (seconds.length) {
	                        date.setSeconds(seconds[0]);
	                    } else {
	                        minutes += 1;
	                        date.setMinutes(minutes, secondRules[0]);

	                        if (minutes > 59) {
	                            minutes = minutes % 60;
	                            hours = (hours + 1) % 24;
	                        }
	                    }

	                    rule._startTime.setHours(hours, minutes, date.getSeconds());
	                }

	                return changed;
	            }
	        },
	        BaseFrequency = Class.extend({
	            next: function(date, rule) {
	                var startTime = rule._startTime,
	                    day = startTime.getDate(),
	                    minutes, seconds;

	                if (rule.seconds) {
	                    seconds = date.getSeconds() + 1;

	                    date.setSeconds(seconds);
	                    startTime.setSeconds(seconds);
	                    startTime.setDate(day);

	                } else if (rule.minutes) {
	                    minutes = date.getMinutes() + 1;

	                    date.setMinutes(minutes);
	                    startTime.setMinutes(minutes);
	                    startTime.setDate(day);
	                } else {
	                    return false;
	                }

	                return true;
	            },

	            normalize: function(options) {
	                var rule = options.rule;

	                if (options.idx === 4 && rule.hours) {
	                    rule._startTime.setHours(0);
	                    this._hour(options.date, rule);
	                }
	            },

	            limit: function(date, end, rule) {
	                var interval = rule.interval,
	                    ruleName, firstRule,
	                    modified,
	                    idx, day;

	                while (date <= end) {
	                    modified = firstRule = undefined;
	                    day = date.getDate();

	                    for (idx = 0; idx < RULE_NAMES_LENGTH; idx++) {
	                        ruleName = RULE_NAMES[idx];

	                        if (rule[ruleName]) {
	                            modified = limitation[ruleName](date, end, rule);
	                            if (firstRule !== undefined && modified) {
	                                break;
	                            } else {
	                                firstRule = modified;
	                            }
	                        }

	                        if (modified) {
	                            this.normalize({ date: date, rule: rule, day: day, idx: idx });
	                        }
	                    }

	                    if ((interval === 1 || !this.interval(rule, date)) && idx === RULE_NAMES_LENGTH) {
	                        break;
	                    }
	                }
	            },

	            interval: function (rule, current) {
	                var start = new Date(rule._startPeriod);
	                var date = new Date(current);
	                var hours = current.getHours();
	                var weekStart = rule.weekStart;
	                var interval = rule.interval;
	                var frequency = rule.freq;
	                var modified = false;
	                var excess = 0;
	                var month = 0;
	                var day = 1;
	                var diff;

	                var startTimeHours;

	                if (frequency === "hourly") {
	                    diff = date.getTimezoneOffset() - start.getTimezoneOffset();
	                    startTimeHours = rule._startTime.getHours();

	                    date = date.getTime();
	                    if (hours !== startTimeHours) {
	                        date += (startTimeHours - hours) * kendoDate.MS_PER_HOUR;
	                    }
	                    date -= start;

	                    if (diff) {
	                        date -= diff * kendoDate.MS_PER_MINUTE;
	                    }

	                    diff = Math.floor(date / kendoDate.MS_PER_HOUR);
	                    excess = intervalExcess(diff, interval);

	                    if (excess !== 0) {
	                        this._hour(current, rule, excess);
	                        modified = true;
	                    }
	                } else if (frequency === "daily") {
	                    kendoDate.setTime(date, -start, true);

	                    diff = Math.ceil(date / kendoDate.MS_PER_DAY);
	                    excess = intervalExcess(diff, interval);

	                    if (excess !== 0) {
	                        this._date(current, rule, excess);
	                        modified = true;
	                    }

	                } else if (frequency === "weekly") {
	                    excess = this._getNumberOfWeeksBetweenDates(start, current);

	                    var normalizedCurrentIndex = normalizeDayIndex(current.getDay(), weekStart);
	                    var normalizedStartIndex = normalizeDayIndex(start.getDay(), weekStart);

	                    if (normalizedCurrentIndex < normalizedStartIndex) {
	                        excess += 1;
	                    }

	                    excess = intervalExcess(excess, interval);
	                    if (excess !== 0) {
	                        kendoDate.setDayOfWeek(current, rule.weekStart, -1);

	                        current.setDate(current.getDate() + (excess * 7));
	                        adjustDST(current, hours);

	                        modified = true;
	                    }
	                } else if (frequency === "monthly") {
	                    diff = current.getFullYear() - start.getFullYear();
	                    diff = current.getMonth() - start.getMonth() + (diff * 12);

	                    excess = intervalExcess(diff, interval);

	                    if (excess !== 0) {
	                        day = rule._hasRuleValue ? 1 : current.getDate();

	                        current.setFullYear(current.getFullYear(), current.getMonth() + excess, day);
	                        adjustDST(current, hours);

	                        modified = true;
	                    }
	                } else if (frequency === "yearly") {
	                    diff = current.getFullYear() - start.getFullYear();
	                    excess = intervalExcess(diff, interval);

	                    if (!rule.months) {
	                        month = current.getMonth();
	                    }

	                    if (!rule.yearDays && !rule.monthDays && !rule.weekDays) {
	                        day = current.getDate();
	                    }

	                    if (excess !== 0) {
	                        current.setFullYear(current.getFullYear() + excess, month, day);
	                        adjustDST(current, hours);

	                        modified = true;
	                    }
	                }

	                return modified;
	            },

	            _getNumberOfWeeksBetweenDates: function(first, second){
	                 var weeks = (second - first) / 604800000;                  
	                 var exactWeeks = Math.floor(weeks);

	                //this is happening when weeks pass DST change
	                if (weeks - exactWeeks > 0.99) {
	                    exactWeeks = Math.round(weeks);
	                }
	                return exactWeeks;
	            },

	            _hour: function(date, rule, interval) {
	                var startTime = rule._startTime,
	                    hours = startTime.getHours();

	                if (interval) {
	                    hours += interval;
	                }

	                date.setHours(hours);

	                hours = hours % 24;
	                startTime.setHours(hours);
	                adjustDST(date, hours);
	            },

	            _date: function(date, rule, interval) {
	                var hours = date.getHours();

	                date.setDate(date.getDate() + interval);
	                if (!adjustDST(date, hours)) {
	                    this._hour(date, rule);
	                }
	            }
	        }),
	        HourlyFrequency = BaseFrequency.extend({
	            next: function(date, rule) {
	                if (!BaseFrequency.fn.next(date, rule)) {
	                    this._hour(date, rule, 1);
	                }
	            },

	            normalize: function(options) {
	                var rule = options.rule;

	                if (options.idx === 4) {
	                    rule._startTime.setHours(0);
	                    this._hour(options.date, rule);
	                }
	            }
	        }),
	        DailyFrequency = BaseFrequency.extend({
	            next: function(date, rule) {
	                if (!BaseFrequency.fn.next(date, rule)) {
	                    this[rule.hours ? "_hour" : "_date"](date, rule, 1);
	                }
	            }
	        }),
	        WeeklyFrequency = DailyFrequency.extend({
	            setup: function(rule, eventStartDate) {
	                if (!rule.weekDays) {
	                    rule.weekDays = [{
	                        day: eventStartDate.getDay(),
	                        offset: 0
	                    }];
	                }
	            }
	        }),
	        MonthlyFrequency = BaseFrequency.extend({
	            next: function(date, rule) {
	                var day, hours;
	                if (!BaseFrequency.fn.next(date, rule)) {
	                    if (rule.hours) {
	                        this._hour(date, rule, 1);
	                    } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {
	                        this._date(date, rule, 1);
	                    } else {
	                        day = date.getDate();
	                        hours = date.getHours();

	                        date.setMonth(date.getMonth() + 1);
	                        adjustDST(date, hours);

	                        while(date.getDate() !== day) {
	                            date.setDate(day);
	                            adjustDST(date, hours);
	                        }

	                        this._hour(date, rule);
	                    }
	                }
	            },
	            normalize: function(options) {
	                var rule = options.rule,
	                    date = options.date,
	                    hours = date.getHours();

	                if (options.idx === 0 && !rule.monthDays && !rule.weekDays) {
	                    date.setDate(options.day);
	                    adjustDST(date, hours);
	                } else {
	                    BaseFrequency.fn.normalize(options);
	                }
	            },
	            setup: function(rule, eventStartDate, date) {
	                if (!rule.monthDays && !rule.weekDays) {
	                    date.setDate(eventStartDate.getDate());
	                }
	            }
	        }),
	        YearlyFrequency = MonthlyFrequency.extend({
	            next: function(date, rule) {
	                var day,
	                    hours = date.getHours();

	                if (!BaseFrequency.fn.next(date, rule)) {
	                    if (rule.hours) {
	                        this._hour(date, rule, 1);
	                    } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {
	                        this._date(date, rule, 1);
	                    } else if (rule.months) {
	                        day = date.getDate();

	                        date.setMonth(date.getMonth() + 1);
	                        adjustDST(date, hours);

	                        while(date.getDate() !== day) {
	                            date.setDate(day);
	                            adjustDST(date, hours);
	                        }

	                        this._hour(date, rule);
	                    } else {
	                        date.setFullYear(date.getFullYear() + 1);
	                        adjustDST(date, hours);

	                        this._hour(date, rule);
	                    }
	                }
	            },
	            setup: function() {}
	        }),
	        frequencies = {
	            "hourly" : new HourlyFrequency(),
	            "daily" : new DailyFrequency(),
	            "weekly" : new WeeklyFrequency(),
	            "monthly" : new MonthlyFrequency(),
	            "yearly" : new YearlyFrequency()
	        },
	        CLICK = "click";

	    function intervalExcess(diff, interval) {
	        var excess;
	        if (diff !== 0 && diff < interval) {
	            excess = interval - diff;
	        } else {
	            excess = diff % interval;
	            if (excess) {
	                excess = interval - excess;
	            }
	        }

	        return excess;
	    }

	    function dayInYear(date) {
	        var month = date.getMonth();
	        var days = leapYear(date) ? DAYS_IN_LEAPYEAR[month] : DAYS_IN_YEAR[month];

	        return days + date.getDate();
	    }

	    function weekInYear(date, weekStart){
	        var year, days;

	        date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
	        adjustDST(date, 0);

	        year = date.getFullYear();

	        if (weekStart !== undefined) {
	            setDayOfWeek(date, weekStart, -1);
	            date.setDate(date.getDate() + 4);
	        } else {
	            date.setDate(date.getDate() + (4 - (date.getDay() || 7)));
	        }

	        adjustDST(date, 0);
	        days = Math.floor((date.getTime() - new Date(year, 0, 1, -6)) / 86400000);

	        return 1 + Math.floor(days / 7);
	    }

	    function weekInMonth(date, weekStart) {
	        var firstWeekDay = firstDayOfMonth(date).getDay();
	        var firstWeekLength = 7 - (firstWeekDay + 7 - (weekStart || 7)) || 7;

	        if (firstWeekLength < 0) {
	            firstWeekLength += 7;
	        }

	        return Math.ceil((date.getDate() - firstWeekLength) / 7) + 1;
	    }

	    function normalizeDayIndex(weekDay, weekStart) {
	        return weekDay + (weekDay < weekStart ? 7 : 0);
	    }

	    function normalizeOffset(date, rule, weekStart) {
	        var offset = rule.offset;

	        if (!offset) {
	            return weekInMonth(date, weekStart);
	        }

	        var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
	        var weeksInMonth = weekInMonth(lastDate, weekStart);

	        var day = normalizeDayIndex(rule.day, weekStart);

	        var skipFirst = day < normalizeDayIndex(new Date(date.getFullYear(), date.getMonth(), 1).getDay(), weekStart);
	        var skipLast = day > normalizeDayIndex(lastDate.getDay(), weekStart);

	        if (offset < 0) {
	            offset = weeksInMonth + (offset + 1 - (skipLast ? 1 : 0));
	        } else if (skipFirst) {
	            offset += 1;
	        }

	        weeksInMonth -= (skipLast ? 1 : 0);

	        if (offset < (skipFirst ? 1 : 0) || offset > weeksInMonth) {
	            return null;
	        }

	        return offset;
	    }

	    function numberOfWeeks(date, weekStart) {
	        return weekInMonth(new Date(date.getFullYear(), date.getMonth() + 1, 0), weekStart);
	    }

	    function isInWeek(date, rule, weekStart) {
	        return weekInMonth(date, weekStart) === normalizeOffset(date, rule, weekStart);
	    }

	    function ruleWeekValues(weekDays, date, weekStart) {
	        var currentDay = normalizeDayIndex(date.getDay(), weekStart);
	        var length = weekDays.length;
	        var ruleWeekOffset;
	        var weekDay, day;
	        var weekNumber;
	        var result = [];
	        var idx = 0;

	        for (;idx < length; idx++) {
	            weekDay = weekDays[idx];

	            weekNumber = weekInMonth(date, weekStart);
	            ruleWeekOffset = normalizeOffset(date, weekDay, weekStart);

	            if (ruleWeekOffset === null) {
	                continue;
	            }

	            if (weekNumber < ruleWeekOffset) {
	                result.push(weekDay);
	            } else if (weekNumber === ruleWeekOffset) {
	                day = normalizeDayIndex(weekDay.day, weekStart);

	                if (currentDay < day) {
	                    result.push(weekDay);
	                } else if (currentDay === day) {
	                    return null;
	                }
	            }
	        }

	        return result;
	    }

	    function ruleValues(rules, value, normalize) {
	        var idx = 0,
	            length = rules.length,
	            availableRules = [],
	            ruleValue;

	        for (; idx < length; idx++) {
	            ruleValue = rules[idx];

	            if (normalize) {
	                ruleValue = normalize(ruleValue);
	            }

	            if (value === ruleValue) {
	                return null;
	            }  else if (value < ruleValue) {
	                availableRules.push(ruleValue);
	            }
	        }

	        return availableRules;
	    }

	    function parseArray(list, range) {
	        var idx = 0,
	            length = list.length,
	            value;

	        for (; idx < length; idx++) {
	            value = parseInt(list[idx], 10);
	            if (isNaN(value) || value < range.start || value > range.end || (value === 0 && range.start < 0)) {
	                return null;
	            }

	            list[idx] = value;
	        }

	        return list.sort(numberSortPredicate);
	    }

	    function parseWeekDayList(list) {
	        var idx = 0, length = list.length,
	            value, valueLength, day;

	        for (; idx < length; idx++) {
	            value = list[idx];
	            valueLength = value.length;
	            day = value.substring(valueLength - 2).toUpperCase();

	            day = WEEK_DAYS_IDX[day];
	            if (day === undefined) {
	                return null;
	            }

	            list[idx] = {
	                offset: parseInt(value.substring(0, valueLength - 2), 10) || 0,
	                day: day
	            };
	        }
	        return list;
	    }

	    function serializeWeekDayList(list) {
	        var idx = 0, length = list.length,
	            value, valueString, result = [];

	        for (; idx < length; idx++) {
	            value = list[idx];
	            if (typeof value === "string") {
	                valueString = value;
	            } else {
	                valueString = "" + WEEK_DAYS[value.day];

	                if (value.offset) {
	                    valueString = value.offset + valueString;
	                }
	            }

	            result.push(valueString);
	        }
	        return result.toString();
	    }

	    function getMonthLength(date) {
	        var month = date.getMonth();

	        if (month === 1) {
	            if (new Date(date.getFullYear(), 1, 29).getMonth() === 1) {
	                return 29;
	            }
	            return 28;
	        }
	        return MONTHS[month];
	    }

	    function leapYear(year) {
	        year = year.getFullYear();
	        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
	    }

	    function numberSortPredicate(a, b) {
	        return a - b;
	    }

	    function parseExceptions(exceptions, zone) {
	        var idx = 0, length, date,
	            dates = [];

	        if (exceptions) {
	            exceptions = exceptions.split(exceptions.indexOf(";") !== -1 ? ";" : ",");
	            length = exceptions.length;

	            for (; idx < length; idx++) {
	                date = parseUTCDate(exceptions[idx], zone);

	                if (date) {
	                    dates.push(date);
	                }
	            }
	        }

	        return dates;
	    }

	    function isException(exceptions, date, zone) {
	        var dates = $.isArray(exceptions) ? exceptions : parseExceptions(exceptions, zone),
	            dateTime = date.getTime() - date.getMilliseconds(),
	            idx = 0, length = dates.length;

	        for (; idx < length; idx++) {
	            if (dates[idx].getTime() === dateTime) {
	                return true;
	            }
	        }

	        return false;
	    }

	    function toExceptionString(dates, zone) {
	        var idx = 0;
	        var length;
	        var date;
	        var result = [].concat(dates);

	        for (length = result.length; idx < length; idx++) {
	            date = result[idx];
	            date = kendo.timezone.convert(date, zone || date.getTimezoneOffset(), "Etc/UTC");
	            result[idx] = kendo.toString(date, RECURRENCE_DATE_FORMAT);
	        }

	        return result.join(",");
	    }

	    function startPeriodByFreq(start, rule) {
	        var date = new Date(start);

	        switch (rule.freq) {
	            case "yearly":
	                date.setFullYear(date.getFullYear(), 0, 1);
	                break;

	            case "monthly":
	                date.setFullYear(date.getFullYear(), date.getMonth(), 1);
	                break;

	            case "weekly":
	                setDayOfWeek(date, rule.weekStart, -1);
	                break;

	            default:
	                break;
	        }

	        if (rule.hours) {
	            date.setHours(0);
	        }

	        if (rule.minutes) {
	            date.setMinutes(0);
	        }

	        if (rule.seconds) {
	            date.setSeconds(0);
	        }

	        return date;
	    }

	    function endPeriodByFreq(start, rule) {
	        var date = new Date(start);

	        switch (rule.freq) {
	            case "yearly":
	                date.setFullYear(date.getFullYear(), 11, 31);
	                break;

	            case "monthly":
	                date.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);
	                break;

	            case "weekly":
	                setDayOfWeek(date, rule.weekStart, -1);
	                date.setDate(date.getDate() + 6);
	                break;

	            default:
	                break;
	        }

	        if (rule.hours) {
	            date.setHours(23);
	        }

	        if (rule.minutes) {
	            date.setMinutes(59);
	        }

	        if (rule.seconds) {
	            date.setSeconds(59);
	        }

	        return date;
	    }

	    function eventsByPosition(periodEvents, start, positions) {
	        var periodEventsLength = periodEvents.length;
	        var events = [];
	        var position;
	        var event;

	        for (var idx = 0, length = positions.length; idx < length; idx++) {
	            position = positions[idx];

	            if (position < 0) {
	                position = periodEventsLength + position;
	            } else {
	                position -= 1; //convert to zero based index
	            }

	            event = periodEvents[position];

	            if (event && event.start >= start) {
	                events.push(event);
	            }
	        }

	        return events;
	    }

	    function removeExceptionDates(periodEvents, exceptionDates, zone) {
	        var events = [];
	        var event;

	        for (var idx = 0; idx < periodEvents.length; idx++) {
	            event = periodEvents[idx];
	            if (!isException(exceptionDates, event.start, zone)) {
	                events.push(event);
	            }
	        }

	        return events;
	    }

	    function expand(event, start, end, zone) {
	        var rule = parseRule(event.recurrenceRule, zone),
	            startTime, endTime, endDate,
	            hours, minutes, seconds,
	            durationMS, startPeriod, inPeriod,
	            ruleStart, ruleEnd,
	            useEventStart, freqName,
	            exceptionDates,
	            eventStartTime,
	            eventStartMS,
	            eventStart,
	            count, freq,
	            positions,
	            currentIdx,
	            periodEvents,
	            events = [];

	        if (!rule) {
	            return [event];
	        }

	        positions = rule.positions;
	        currentIdx = positions ? 0 : 1;

	        ruleStart = rule.start;
	        ruleEnd = rule.end;

	        if (ruleStart || ruleEnd) {
	            event = event.clone({
	                start: ruleStart ? new Date(ruleStart.value[0]) : undefined,
	                end: ruleEnd ? new Date(ruleEnd.value[0]) : undefined
	            });
	        }

	        eventStart = event.start;
	        eventStartMS = eventStart.getTime();
	        eventStartTime = getMilliseconds(eventStart);

	        exceptionDates = parseExceptions(event.recurrenceException, zone);

	        if (!exceptionDates[0] && rule.exdates) {
	            exceptionDates = rule.exdates.value;
	            event.set("recurrenceException", toExceptionString(exceptionDates, zone));
	        }

	        startPeriod = start = new Date(start);
	        end = new Date(end);

	        freqName = rule.freq;
	        freq = frequencies[freqName];
	        count = rule.count;

	        if (rule.until && rule.until < end) {
	            end = new Date(rule.until);
	        }

	        useEventStart = freqName === "yearly" || freqName === "monthly" || freqName === "weekly";

	        if (start < eventStartMS || count || rule.interval > 1 || useEventStart) {
	            start = new Date(eventStartMS);
	        } else {
	            hours = start.getHours();
	            minutes = start.getMinutes();
	            seconds = start.getSeconds();

	            if (!rule.hours) {
	                hours = eventStart.getHours();
	            }

	            if (!rule.minutes) {
	                minutes = eventStart.getMinutes();
	            }

	            if (!rule.seconds) {
	                seconds = eventStart.getSeconds();
	            }

	            start.setHours(hours, minutes, seconds, eventStart.getMilliseconds());
	        }

	        rule._startPeriod = new Date(start);

	        if (positions) {
	            start = startPeriodByFreq(start, rule);
	            end = endPeriodByFreq(end, rule);

	            var diff = getMilliseconds(end) - getMilliseconds(start);
	            if (diff < 0) {
	                hours = start.getHours();
	                end.setHours(hours, start.getMinutes(), start.getSeconds(), start.getMilliseconds());
	                kendoDate.adjustDST(end, hours);
	            }

	            rule._startPeriod = new Date(start);
	            rule._endPeriod = endPeriodByFreq(start, rule);
	        }

	        durationMS = event.duration();
	        rule._startTime = startTime = kendoDate.toInvariantTime(start);

	        if (freq.setup) {
	            freq.setup(rule, eventStart, start);
	        }

	        freq.limit(start, end, rule);

	        while (start <= end) {
	            endDate = new Date(start);
	            setTime(endDate, durationMS);

	            inPeriod = start >= startPeriod || endDate > startPeriod;

	            if (inPeriod && !isException(exceptionDates, start, zone) || positions) {
	                startTime = kendoDate.toUtcTime(kendoDate.getDate(start)) + getMilliseconds(rule._startTime);
	                endTime = startTime + durationMS;

	                if (eventStartMS !== start.getTime() || eventStartTime !== getMilliseconds(rule._startTime)) {
	                    events.push(event.toOccurrence({
	                        start: new Date(start),
	                        end: endDate,
	                        _startTime: startTime,
	                        _endTime: endTime
	                    }));
	                } else {
	                    event._startTime = startTime;
	                    event._endTime = endTime;
	                    events.push(event);
	                }
	            }

	            if (positions) {
	                freq.next(start, rule);
	                freq.limit(start, end, rule);

	                if (start > rule._endPeriod) {
	                    periodEvents = eventsByPosition(events.slice(currentIdx), eventStart, positions);
	                    periodEvents = removeExceptionDates(periodEvents, exceptionDates, zone);
	                    events = events.slice(0, currentIdx).concat(periodEvents);

	                    rule._endPeriod = endPeriodByFreq(start, rule);

	                    currentIdx = events.length;
	                }

	                if (count && count === currentIdx) {
	                    break;
	                }

	            } else {
	                if (count && count === currentIdx) {
	                    break;
	                }

	                currentIdx += 1;
	                freq.next(start, rule);
	                freq.limit(start, end, rule);
	            }
	        }

	        return events;
	    }

	    function parseUTCDate(value, zone) {
	        value = kendo.parseDate(value, DATE_FORMATS); //Parse UTC to local time

	        if (value && zone) {
	            value = timezone.convert(value, value.getTimezoneOffset(), zone);
	        }

	        return value;
	    }

	    function parseDateRule(dateRule, zone) {
	        var pairs = dateRule.split(";");
	        var pair;
	        var property;
	        var value;
	        var tzid;
	        var valueIdx, valueLength;

	        for (var idx = 0, length = pairs.length; idx < length; idx++) {
	            pair = pairs[idx].split(":");
	            property = pair[0];
	            value = pair[1];

	            if (property.indexOf("TZID") !== -1) {
	                tzid = property.substring(property.indexOf("TZID")).split("=")[1];
	            }

	            if (value) {
	                value = value.split(",");

	                for (valueIdx = 0, valueLength = value.length; valueIdx < valueLength; valueIdx++) {
	                    value[valueIdx] = parseUTCDate(value[valueIdx], tzid || zone);
	                }
	            }
	        }

	        if (value) {
	            return {
	                value: value,
	                tzid: tzid
	            };
	        }
	    }

	    function parseRule(recur, zone) {
	        var instance = {};
	        var splits, value;
	        var idx = 0, length;
	        var ruleValue = false;
	        var rule, part, parts;
	        var property, weekStart, weekDays;
	        var predicate = function(a, b) {
	            var day1 = a.day,
	                day2 = b.day;

	            if (day1 < weekStart) {
	               day1 += 7;
	            }

	            if (day2 < weekStart) {
	                day2 += 7;
	            }

	            return day1 - day2;
	        };

	        if (!recur) {
	            return null;
	        }

	        parts = recur.split("\n");

	        if (!parts[1] && (recur.indexOf("DTSTART") !== -1 || recur.indexOf("DTEND") !== -1 || recur.indexOf("EXDATE") !== -1)) {
	            parts = recur.split(" ");
	        }

	        for (idx = 0, length = parts.length; idx < length; idx++) {
	            part = $.trim(parts[idx]);

	            if (part.indexOf("DTSTART") !== -1) {
	                instance.start = parseDateRule(part, zone);
	            } else if (part.indexOf("DTEND") !== -1) {
	                instance.end = parseDateRule(part, zone);
	            } else if (part.indexOf("EXDATE") !== -1) {
	                instance.exdates = parseDateRule(part, zone);
	            } else if (part.indexOf("RRULE") !== -1) {
	                rule = part.substring(6);
	            } else if ($.trim(part)) {
	                rule = part;
	            }
	        }

	        rule = rule.split(";");

	        for (idx = 0, length = rule.length; idx < length; idx++) {
	            property = rule[idx];
	            splits = property.split("=");
	            value = $.trim(splits[1]).split(",");

	            switch ($.trim(splits[0]).toUpperCase()) {
	                case "FREQ":
	                    instance.freq = value[0].toLowerCase();
	                    break;
	                case "UNTIL":
	                    instance.until = parseUTCDate(value[0], zone);
	                    break;
	                case "COUNT":
	                    instance.count = parseInt(value[0], 10);
	                    break;
	                case "INTERVAL":
	                    instance.interval = parseInt(value[0], 10);
	                    break;
	                case "BYSECOND":
	                    instance.seconds = parseArray(value, { start: 0, end: 60 });
	                    ruleValue = true;
	                    break;
	                case "BYMINUTE":
	                    instance.minutes = parseArray(value, { start: 0, end: 59 });
	                    ruleValue = true;
	                    break;
	                case "BYHOUR":
	                    instance.hours = parseArray(value, { start: 0, end: 23 });
	                    ruleValue = true;
	                    break;
	                case "BYMONTHDAY":
	                    instance.monthDays = parseArray(value, { start: -31, end: 31 });
	                    ruleValue = true;
	                    break;
	                case "BYYEARDAY":
	                    instance.yearDays = parseArray(value, { start: -366, end: 366 });
	                    ruleValue = true;
	                    break;
	                case "BYMONTH":
	                    instance.months = parseArray(value, { start: 1, end: 12 });
	                    ruleValue = true;
	                    break;
	                case "BYDAY":
	                    instance.weekDays = weekDays = parseWeekDayList(value);
	                    ruleValue = true;
	                    break;
	                case "BYWEEKNO":
	                    instance.weeks = parseArray(value, { start: -53, end: 53 });
	                    ruleValue = true;
	                    break;
	                case "BYSETPOS":
	                    instance.positions = parseArray(value, { start: -366, end: 366 });
	                    break;
	                case "WKST":
	                    instance.weekStart = weekStart = WEEK_DAYS_IDX[value[0]];
	                    break;
	            }
	        }

	        if (instance.freq === undefined || (instance.count !== undefined && instance.until)) {
	            return null;
	        }

	        if (!instance.interval) {
	            instance.interval = 1;
	        }

	        if (weekStart === undefined) {
	            instance.weekStart = weekStart = kendo.culture().calendar.firstDay;
	        }

	        if (weekDays) {
	            instance.weekDays = weekDays.sort(predicate);
	        }

	        if (instance.positions && !ruleValue) {
	            instance.positions = null;
	        }

	        instance._hasRuleValue = ruleValue;

	        return instance;
	    }

	    function serializeDateRule(dateRule, zone) {
	        var value = dateRule.value;
	        var tzid = dateRule.tzid || "";
	        var length = value.length;
	        var idx = 0;
	        var val;

	        for (; idx < length; idx++) {
	            val = value[idx];
	            val = timezone.convert(val, tzid || zone || val.getTimezoneOffset(), "Etc/UTC");
	            value[idx] = kendo.toString(val, "yyyyMMddTHHmmssZ");
	        }

	        if (tzid) {
	            tzid = ";TZID=" + tzid;
	        }

	        return tzid + ":" + value.join(",") + " ";
	    }

	    function serialize(rule, zone) {
	        var weekStart = rule.weekStart;
	        var ruleString = "FREQ=" + rule.freq.toUpperCase();
	        var exdates = rule.exdates || "";
	        var start = rule.start || "";
	        var end = rule.end || "";
	        var until = rule.until;

	        if (rule.interval > 1) {
	            ruleString += ";INTERVAL=" + rule.interval;
	        }

	        if (rule.count) {
	            ruleString += ";COUNT=" + rule.count;
	        }

	        if (until) {
	            until = timezone.convert(until, zone || until.getTimezoneOffset(), "Etc/UTC");

	            ruleString += ";UNTIL=" + kendo.toString(until, "yyyyMMddTHHmmssZ");
	        }

	        if (rule.months) {
	            ruleString += ";BYMONTH=" + rule.months;
	        }

	        if (rule.weeks) {
	            ruleString += ";BYWEEKNO=" + rule.weeks;
	        }

	        if (rule.yearDays) {
	            ruleString += ";BYYEARDAY=" + rule.yearDays;
	        }

	        if (rule.monthDays) {
	            ruleString += ";BYMONTHDAY=" + rule.monthDays;
	        }

	        if (rule.weekDays) {
	            ruleString += ";BYDAY=" + serializeWeekDayList(rule.weekDays);
	        }

	        if (rule.hours) {
	            ruleString += ";BYHOUR=" + rule.hours;
	        }

	        if (rule.minutes) {
	            ruleString += ";BYMINUTE=" + rule.minutes;
	        }

	        if (rule.seconds) {
	            ruleString += ";BYSECOND=" + rule.seconds;
	        }

	        if (rule.positions) {
	            ruleString += ";BYSETPOS=" + rule.positions;
	        }

	        if (weekStart !== undefined) {
	            ruleString += ";WKST=" + WEEK_DAYS[weekStart];
	        }

	        if (start) {
	            start = "DTSTART" + serializeDateRule(start, zone);
	        }

	        if (end) {
	            end = "DTEND" + serializeDateRule(end, zone);
	        }

	        if (exdates) {
	            exdates = "EXDATE" + serializeDateRule(exdates, zone);
	        }

	        if (start || end || exdates) {
	            ruleString = start + end + exdates + "RRULE:" + ruleString;
	        }

	        return ruleString;
	    }

	    kendo.recurrence = {
	        rule: {
	            parse: parseRule,
	            serialize: serialize
	        },
	        expand: expand,
	        dayInYear: dayInYear,
	        weekInYear: weekInYear,
	        weekInMonth: weekInMonth,
	        numberOfWeeks: numberOfWeeks,
	        isException: isException,
	        toExceptionString: toExceptionString
	    };

	    var weekDayCheckBoxes = function(firstDay) {
	        var shortNames = kendo.culture().calendar.days.namesShort,
	            length = shortNames.length,
	            result = "",
	            idx = 0,
	            values = [];

	        for (; idx < length; idx++) {
	            values.push(idx);
	        }

	        shortNames = shortNames.slice(firstDay).concat(shortNames.slice(0, firstDay));
	        values = values.slice(firstDay).concat(values.slice(0, firstDay));

	        for (idx = 0; idx < length; idx++) {
	            result += '<label class="k-check"><input class="k-recur-weekday-checkbox" type="checkbox" value="' + values[idx] + '" /> ' + shortNames[idx] + "</label>";
	        }

	        return result;
	    };

	    var RECURRENCE_VIEW_TEMPLATE = kendo.template(
	       '# if (frequency !== "never") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatEvery#</label></div>' +
	           '<div class="k-edit-field"><input class="k-recur-interval"/>#:messages.interval#</div>' +
	       '# } #' +
	       '# if (frequency === "weekly") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' +
	           '<div class="k-edit-field">#=weekDayCheckBoxes(firstWeekDay)#</div>' +
	       '# } else if (frequency === "monthly") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' +
	           '<div class="k-edit-field">' +
	               '<ul class="k-reset">' +
	                   '<li>' +
	                       '<label><input class="k-recur-month-radio" type="radio" name="month" value="monthday" />#:messages.day#</label>' +
	                       '<input class="k-recur-monthday" />' +
	                   '</li>' +
	                   '<li>' +
	                        '<input class="k-recur-month-radio" type="radio" name="month" value="weekday" />' +
	                        '<input class="k-recur-weekday-offset" /><input class="k-recur-weekday" />' +
	                   '</li>' +
	               '</ul>' +
	           '</div>' +
	       '# } else if (frequency === "yearly") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' +
	           '<div class="k-edit-field">' +
	               '<ul class="k-reset">' +
	                   '<li>' +
	                       '<input class="k-recur-year-radio" type="radio" name="year" value="monthday" />' +
	                       '<input class="k-recur-month" /><input class="k-recur-monthday" />' +
	                   '</li>' +
	                   '<li>' +
	                       '<input class="k-recur-year-radio" type="radio" name="year" value="weekday" />' +
	                       '<input class="k-recur-weekday-offset" /><input class="k-recur-weekday" />#:messages.of#<input class="k-recur-month" />' +
	                   '</li>' +
	               '</ul>' +
	           '</div>' +
	       '# } #' +
	       '# if (frequency !== "never") { #' +
	           '<div class="k-edit-label"><label>#:end.label#</label></div>' +
	           '<div class="k-edit-field">' +
	               '<ul class="k-reset">' +
	                   '<li>' +
	                       '<label><input class="k-recur-end-never" type="radio" name="end" value="never" />#:end.never#</label>' +
	                   '</li>' +
	                   '<li>' +
	                       '<label><input class="k-recur-end-count" type="radio" name="end" value="count" />#:end.after#</label>' +
	                       '<input class="k-recur-count" />#:end.occurrence#' +
	                   '</li>' +
	                   '<li>' +
	                       '<label><input class="k-recur-end-until" type="radio" name="end" value="until" />#:end.on#</label>' +
	                       '<input class="k-recur-until" />' +
	                   '</li>' +
	               '</ul>' +
	           '</div>' +
	       '# } #'
	    );

	    var DAY_RULE = [
	        { day: 0, offset: 0 },
	        { day: 1, offset: 0 },
	        { day: 2, offset: 0 },
	        { day: 3, offset: 0 },
	        { day: 4, offset: 0 },
	        { day: 5, offset: 0 },
	        { day: 6, offset: 0 }
	    ];

	    var WEEKDAY_RULE = [
	        { day: 1, offset: 0 },
	        { day: 2, offset: 0 },
	        { day: 3, offset: 0 },
	        { day: 4, offset: 0 },
	        { day: 5, offset: 0 }
	    ];

	    var WEEKEND_RULE = [
	        { day: 0, offset: 0 },
	        { day: 6, offset: 0 }
	    ];

	    var BaseRecurrenceEditor = Widget.extend({
	        init: function(element, options) {
	            var start;
	            var that = this;
	            var frequencies = options && options.frequencies;

	            Widget.fn.init.call(that, element, options);

	            that.wrapper = that.element;

	            options = that.options;
	            options.start = start = options.start || kendoDate.today();

	            if (frequencies) {
	                options.frequencies = frequencies;
	            }

	            if (typeof start === "string") {
	                options.start = kendo.parseDate(start, "yyyyMMddTHHmmss");
	            }

	            if (options.firstWeekDay === null) {
	                options.firstWeekDay = kendo.culture().calendar.firstDay;
	            }

	            that._namespace = "." + options.name;
	        },

	        options: {
	            value: "",
	            start: "",
	            timezone: "",
	            spinners: true,
	            firstWeekDay: null,
	            frequencies: [
	                "never",
	                "daily",
	                "weekly",
	                "monthly",
	                "yearly"
	            ],
	            mobile: false,
	            messages: {
	                frequencies: {
	                    never: "Never",
	                    hourly: "Hourly",
	                    daily: "Daily",
	                    weekly: "Weekly",
	                    monthly: "Monthly",
	                    yearly: "Yearly"
	                },
	                hourly: {
	                    repeatEvery: "Repeat every: ",
	                    interval: " hour(s)"
	                },
	                daily: {
	                    repeatEvery: "Repeat every: ",
	                    interval: " day(s)"
	                },
	                weekly: {
	                    interval: " week(s)",
	                    repeatEvery: "Repeat every: ",
	                    repeatOn: "Repeat on: "
	                },
	                monthly: {
	                    repeatEvery: "Repeat every: ",
	                    repeatOn: "Repeat on: ",
	                    interval: " month(s)",
	                    day: "Day "
	                },
	                yearly: {
	                    repeatEvery: "Repeat every: ",
	                    repeatOn: "Repeat on: ",
	                    interval: " year(s)",
	                    of: " of "
	                },
	                end: {
	                    label: "End:",
	                    mobileLabel: "Ends",
	                    never: "Never",
	                    after: "After ",
	                    occurrence: " occurrence(s)",
	                    on: "On "
	                },
	                offsetPositions: {
	                    first: "first",
	                    second: "second",
	                    third: "third",
	                    fourth: "fourth",
	                    last: "last"
	                },
	                weekdays: {
	                    day: "day",
	                    weekday: "weekday",
	                    weekend: "weekend day"
	                }
	            }
	        },

	        events: ["change"],

	        _initInterval: function() {
	            var that = this;
	            var rule = that._value;

	            that._container
	                .find(".k-recur-interval")
	                .kendoNumericTextBox({
	                    spinners: that.options.spinners,
	                    value: rule.interval || 1,
	                    decimals: 0,
	                    format: "#",
	                    min: 1,
	                    change: function() {
	                        rule.interval = this.value();
	                        that._trigger();
	                    }
	                });
	        },

	        _weekDayRule: function(clear) {
	            var that = this;
	            var weekday = (that._weekDay.element || that._weekDay).val();
	            var offset = Number((that._weekDayOffset.element || that._weekDayOffset).val());
	            var weekDays = null;
	            var positions = null;

	            if (!clear) {
	                if (weekday === "day") {
	                    weekDays = DAY_RULE;
	                    positions = offset;
	                } else if (weekday === "weekday") {
	                    weekDays = WEEKDAY_RULE;
	                    positions = offset;
	                } else if (weekday === "weekend") {
	                    weekDays = WEEKEND_RULE;
	                    positions = offset;
	                } else {
	                    weekDays = [{
	                        offset: offset,
	                        day: Number(weekday)
	                    }];
	                }
	            }

	            that._value.weekDays = weekDays;
	            that._value.positions = positions;
	        },

	        _weekDayView: function() {
	            var that = this;
	            var weekDays = that._value.weekDays;
	            var positions = that._value.positions;
	            var weekDayOffsetWidget = that._weekDayOffset;
	            var weekDayOffset;
	            var weekDayValue;
	            var length;
	            var method;

	            if (weekDays) {
	                length = weekDays.length;

	                if (positions) {
	                    if (length === 7) {
	                        weekDayValue = "day";
	                        weekDayOffset = positions;
	                    } else if (length === 5) {
	                        weekDayValue = "weekday";
	                        weekDayOffset = positions;
	                    } else if (length === 2) {
	                        weekDayValue = "weekend";
	                        weekDayOffset = positions;
	                    }
	                }

	                if (!weekDayValue) {
	                    weekDays = weekDays[0];
	                    weekDayValue = weekDays.day;
	                    weekDayOffset = weekDays.offset || "";
	                }

	                method = weekDayOffsetWidget.value ? "value" : "val";

	                weekDayOffsetWidget[method](weekDayOffset);
	                that._weekDay[method](weekDayValue);
	            }
	        },

	        _initWeekDay: function() {
	            var that = this, data;

	            var weekdayMessage = that.options.messages.weekdays;
	            var offsetMessage = that.options.messages.offsetPositions;

	            var weekDayInput = that._container.find(".k-recur-weekday");

	            var change = function() {
	                that._weekDayRule();
	                that._trigger();
	            };

	            if (weekDayInput[0]) {
	                that._weekDayOffset = new DropDownList(that._container.find(".k-recur-weekday-offset"), {
	                    change: change,
	                    dataTextField: "text",
	                    dataValueField: "value",
	                    dataSource: [
	                        { text: offsetMessage.first, value: "1" },
	                        { text: offsetMessage.second, value: "2" },
	                        { text: offsetMessage.third, value: "3" },
	                        { text: offsetMessage.fourth, value: "4" },
	                        { text: offsetMessage.last, value: "-1" }
	                    ]
	                });

	                data = [
	                    { text: weekdayMessage.day, value: "day" },
	                    { text: weekdayMessage.weekday, value: "weekday" },
	                    { text: weekdayMessage.weekend, value: "weekend" }
	                ];

	                that._weekDay = new DropDownList(weekDayInput, {
	                    value: that.options.start.getDay(),
	                    change: change,
	                    dataTextField: "text",
	                    dataValueField: "value",
	                    dataSource: data.concat($.map(kendo.culture().calendar.days.names, function(dayName, idx) {
	                        return {
	                            text: dayName,
	                            value: idx
	                        };
	                    }))
	                });

	                that._weekDayView();
	            }
	        },

	        _initWeekDays: function() {
	            var that = this;
	            var rule = that._value;
	            var weekDays = that._container.find(".k-recur-weekday-checkbox");

	            if (weekDays[0]) {
	                weekDays.on(CLICK + that._namespace, function() {
	                    rule.weekDays = $.map(weekDays.filter(":checked"), function(checkbox) {
	                        return {
	                            day: Number(checkbox.value),
	                            offset: 0
	                        };
	                    });

	                    if (!that.options.mobile) {
	                        that._trigger();
	                    }
	                });

	                if (rule.weekDays) {
	                    var idx, weekDay;
	                    var i = 0, l = weekDays.length;
	                    var length = rule.weekDays.length;

	                    for (; i < l; i++) {
	                        weekDay = weekDays[i];
	                        for (idx = 0; idx < length; idx ++) {
	                            if (weekDay.value == rule.weekDays[idx].day) {
	                                weekDay.checked = true;
	                            }
	                        }
	                    }
	                }
	            }
	        },

	        _initMonthDay: function() {
	            var that = this;
	            var rule = that._value;
	            var monthDayInput = that._container.find(".k-recur-monthday");

	            if (monthDayInput[0]) {
	                that._monthDay = new kendo.ui.NumericTextBox(monthDayInput, {
	                    spinners: that.options.spinners,
	                    min: 1,
	                    max: 31,
	                    decimals: 0,
	                    format: "#",
	                    value: rule.monthDays ? rule.monthDays[0] : that.options.start.getDate(),
	                    change: function() {
	                        var value = this.value();

	                        rule.monthDays = value ? [value] : value;
	                        that._trigger();
	                    }
	                });
	            }
	        },

	        _initCount: function() {
	            var that = this,
	                input = that._container.find(".k-recur-count"),
	                rule = that._value;

	            that._count = input.kendoNumericTextBox({
	                spinners: that.options.spinners,
	                value: rule.count || 1,
	                decimals: 0,
	                format: "#",
	                min: 1,
	                change: function() {
	                    rule.count = this.value();
	                    that._trigger();
	                }
	            }).data("kendoNumericTextBox");
	        },

	        _initUntil: function() {
	            var that = this,
	                input = that._container.find(".k-recur-until"),
	                start = that.options.start,
	                rule = that._value,
	                until = rule.until;

	            that._until = input.kendoDatePicker({
	                min: until && until < start ? until : start,
	                value: until || new Date(start.getFullYear(), start.getMonth(), start.getDate(), 23, 59, 59),
	                change: function() {
	                    var date  = this.value();

	                    rule.until =  new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
	                    that._trigger();
	                }
	            }).data("kendoDatePicker");
	        },

	        _trigger: function() {
	            if (!this.options.mobile) {
	                this.trigger("change");
	            }
	        }
	    });

	    var RecurrenceEditor = BaseRecurrenceEditor.extend({
	        init: function(element, options) {
	            var that = this;

	            BaseRecurrenceEditor.fn.init.call(that, element, options);

	            that._initFrequency();

	            that._initContainer();

	            that.value(that.options.value);
	        },

	        options: {
	            name: "RecurrenceEditor"
	        },

	        events: [ "change" ],

	        destroy: function() {
	            var that = this;

	            that._frequency.destroy();
	            that._container.find("input[type=radio],input[type=checkbox]").off(CLICK + that._namespace);

	            kendo.destroy(that._container);

	            BaseRecurrenceEditor.fn.destroy.call(that);
	        },

	        value: function(value) {
	            var that = this;
	            var timezone = that.options.timezone;
	            var freq;

	            if (value === undefined) {
	                if (!that._value.freq) {
	                    return "";
	                }

	                return serialize(that._value, timezone);
	            }

	            that._value = parseRule(value, timezone) || {};

	            freq = that._value.freq;

	            if (freq) {
	                that._frequency.value(freq);
	            } else {
	                that._frequency.select(0);
	            }

	            that._initView(that._frequency.value());
	        },

	        _initContainer: function() {
	            var element = this.element,
	                container = $('<div class="k-recur-view" />'),
	                editContainer = element.parent(".k-edit-field");

	            if (editContainer[0]) {
	                container.insertAfter(editContainer);
	            } else {
	                element.append(container);
	            }

	            this._container = container;
	        },

	        _initFrequency: function() {
	            var that = this,
	                options = that.options,
	                frequencies = options.frequencies,
	                messages = options.messages.frequencies,
	                ddl = $('<input />'),
	                frequency;

	            frequencies = $.map(frequencies, function(frequency) {
	                return {
	                    text: messages[frequency],
	                    value: frequency
	                };
	            });

	            frequency = frequencies[0];
	            if (frequency && frequency.value === "never") {
	                frequency.value = "";
	            }

	            that.element.append(ddl);
	            that._frequency = new DropDownList(ddl, {
	                dataTextField: "text",
	                dataValueField: "value",
	                dataSource: frequencies,
	                change: function() {
	                    that._value = {};
	                    that._initView(that._frequency.value());
	                    that.trigger("change");
	                }
	            });
	        },

	        _initView: function(frequency) {
	            var that = this;
	            var rule = that._value;
	            var options = that.options;

	            var data = {
	                 frequency: frequency || "never",
	                 weekDayCheckBoxes: weekDayCheckBoxes,
	                 firstWeekDay: options.firstWeekDay,
	                 messages: options.messages[frequency],
	                 end: options.messages.end
	            };

	            kendo.destroy(that._container);
	            that._container.html(RECURRENCE_VIEW_TEMPLATE(data));

	            if (!frequency) {
	                that._value = {};
	                return;
	            }

	            rule.freq = frequency;

	            if (frequency === "weekly" && !rule.weekDays) {
	                rule.weekDays = [{
	                    day: options.start.getDay(),
	                    offset: 0
	                }];
	            }

	            that._initInterval();
	            that._initWeekDays();
	            that._initMonthDay();
	            that._initWeekDay();
	            that._initMonth();
	            that._initCount();
	            that._initUntil();

	            that._period();
	            that._end();
	        },

	        _initMonth: function() {
	            var that = this;
	            var rule = that._value;
	            var month = rule.months || [that.options.start.getMonth() + 1];
	            var monthInputs = that._container.find(".k-recur-month");
	            var options;

	            if (monthInputs[0]) {
	                options = {
	                    change:  function() {
	                        rule.months = [Number(this.value())];
	                        that.trigger("change");
	                    },
	                    dataTextField: "text",
	                    dataValueField: "value",
	                    dataSource: $.map(kendo.culture().calendar.months.names, function(monthName, idx) {
	                        return {
	                            text: monthName,
	                            value: idx + 1
	                        };
	                    })
	                };

	                that._month1 = new DropDownList(monthInputs[0], options);
	                that._month2 = new DropDownList(monthInputs[1], options);

	                if (month) {
	                    month = month[0];
	                    that._month1.value(month);
	                    that._month2.value(month);
	                }
	            }

	        },

	        _end: function() {
	            var that = this;
	            var rule = that._value;
	            var container = that._container;
	            var namespace = that._namespace;
	            var click = function(e) {
	                that._toggleEnd(e.currentTarget.value);
	                that.trigger("change");
	            };
	            var endRule;

	            that._buttonNever = container.find(".k-recur-end-never").on(CLICK + namespace, click);
	            that._buttonCount = container.find(".k-recur-end-count").on(CLICK + namespace, click);
	            that._buttonUntil = container.find(".k-recur-end-until").on(CLICK + namespace, click);

	            if (rule.count) {
	                endRule = "count";
	            } else if (rule.until) {
	                endRule = "until";
	            }

	            that._toggleEnd(endRule);
	        },

	        _period: function() {
	            var that = this;
	            var rule = that._value;
	            var monthly = rule.freq === "monthly";

	            var toggleRule = monthly ? that._toggleMonthDay : that._toggleYear;

	            var selector = ".k-recur-" + (monthly ? "month" : "year") + "-radio";
	            var radioButtons = that._container.find(selector);

	            if (!monthly && rule.freq !== "yearly") {
	                return;
	            }

	            radioButtons.on(CLICK + that._namespace, function(e) {
	                toggleRule.call(that, e.currentTarget.value);
	                that.trigger("change");
	            });

	            that._buttonMonthDay = radioButtons.eq(0);
	            that._buttonWeekDay = radioButtons.eq(1);

	            toggleRule.call(that, rule.weekDays ? "weekday" : "monthday");
	        },

	        _toggleEnd: function(endRule) {
	            var that = this;
	            var count, until;
	            var enableCount, enableUntil;

	            if (endRule === "count") {
	                that._buttonCount.prop("checked", true);

	                enableCount = true;
	                enableUntil = false;

	                count = that._count.value();
	                until = null;
	            } else if (endRule === "until") {
	                that._buttonUntil.prop("checked", true);

	                enableCount = false;
	                enableUntil = true;

	                count = null;
	                until = that._until.value();
	            } else {
	                that._buttonNever.prop("checked", true);

	                enableCount = enableUntil = false;
	                count = until = null;
	            }

	            that._count.enable(enableCount);
	            that._until.enable(enableUntil);

	            that._value.count = count;
	            that._value.until = until;
	        },

	        _toggleMonthDay: function(monthRule) {
	            var that = this;
	            var enableMonthDay = false;
	            var enableWeekDay = true;
	            var clear = false;
	            var monthDays;

	            if (monthRule === "monthday") {
	                that._buttonMonthDay.prop("checked", true);

	                monthDays = [that._monthDay.value()];

	                enableMonthDay = true;
	                enableWeekDay = false;
	                clear = true;
	            } else {
	                that._buttonWeekDay.prop("checked", true);
	                monthDays = null;
	            }

	            that._weekDay.enable(enableWeekDay);
	            that._weekDayOffset.enable(enableWeekDay);
	            that._monthDay.enable(enableMonthDay);

	            that._value.monthDays = monthDays;

	            that._weekDayRule(clear);
	        },

	        _toggleYear: function(yearRule) {
	            var that = this;
	            var enableMonth1 = false;
	            var enableMonth2 = true;
	            var month;

	            if (yearRule === "monthday") {
	                enableMonth1 = true;
	                enableMonth2 = false;

	                month = that._month1.value();
	            } else {
	                month = that._month2.value();
	            }

	            that._month1.enable(enableMonth1);
	            that._month2.enable(enableMonth2);

	            that._value.months = [month];
	            that._toggleMonthDay(yearRule);
	        }
	    });

	    ui.plugin(RecurrenceEditor);


	    var RECURRENCE_HEADER_TEMPLATE = kendo.template('<div class="k-edit-label"><label>#:headerTitle#</label></div>' +
	      '<div class="k-edit-field k-recur-pattern k-scheduler-toolbar"></div>' +
	      '<div class="k-recur-view"></div>'
	    );

	    var RECURRENCE_REPEAT_PATTERN_TEMPLATE = kendo.template(
	       '# if (frequency !== "never") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatEvery#</label></div>' +
	           '<div class="k-edit-field"><input class="k-recur-interval" pattern="\\\\d*"/>#:messages.interval#</div>' +
	       '# } #' +
	       '# if (frequency === "weekly") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatOn#</label></div>' +
	           '<div class="k-edit-field">#=weekDayCheckBoxes(firstWeekDay)#</div>' +
	       '# } else if (frequency === "monthly") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatBy#</label></div>' +
	           '<div class="k-edit-field k-scheduler-toolbar k-repeat-rule"></div>' +
	           '<div class="k-monthday-view" style="display:none">' +
	               '<div class="k-edit-label"><label>#:messages.day#</label></div>' +
	               '<div class="k-edit-field"><input class="k-recur-monthday" pattern="\\\\d*"/></div>' +
	           '</div>' +
	           '<div class="k-weekday-view" style="display:none">' +
	               '<div class="k-edit-label"><label>#:messages.every#</label></div>' +
	               '<div class="k-edit-field"><select class="k-recur-weekday-offset"></select></div>' +
	               '<div class="k-edit-label"><label>#:messages.day#</label></div>' +
	               '<div class="k-edit-field"><select class="k-recur-weekday"></select></div>' +
	           '</div>' +
	       '# } else if (frequency === "yearly") { #' +
	           '<div class="k-edit-label"><label>#:messages.repeatBy#</label></div>' +
	           '<div class="k-edit-field k-scheduler-toolbar k-repeat-rule"></div>' +
	           '<div class="k-monthday-view" style="display:none">' +
	               '<div class="k-edit-label"><label>#:messages.day#</label></div>' +
	               '<div class="k-edit-field"><input class="k-recur-monthday" pattern="\\\\d*"/></div>' +
	           '</div>' +
	           '<div class="k-weekday-view" style="display:none">' +
	               '<div class="k-edit-label"><label>#:messages.every#</label></div>' +
	               '<div class="k-edit-field"><select class="k-recur-weekday-offset"></select></div>' +
	               '<div class="k-edit-label"><label>#:messages.day#</label></div>' +
	               '<div class="k-edit-field"><select class="k-recur-weekday"></select></div>' +
	           '</div>' +
	           '<div class="k-edit-label"><label>#:messages.month#</label></div>' +
	           '<div class="k-edit-field"><select class="k-recur-month"></select></div>' +
	       '# } #'
	    );

	    var RECURRENCE_END_PATTERN_TEMPLATE = kendo.template(
	        '# if (endPattern === "count") { #' +
	           '<div class="k-edit-label"><label>#:messages.after#</label></div>' +
	           '<div class="k-edit-field"><input class="k-recur-count" pattern="\\\\d*" /></div>' +
	        '# } else if (endPattern === "until") { #' +
	           '<div class="k-edit-label"><label>#:messages.on#</label></div>' +
	           '<div class="k-edit-field"><input type="date" class="k-recur-until" /></div>' +
	        '# } #'
	    );

	    var RECURRENCE_GROUP_BUTTON_TEMPLATE = kendo.template(
	        '<ul class="k-reset k-header k-scheduler-navigation">' +
	            '#for (var i = 0, length = dataSource.length; i < length; i++) {#' +
	                '<li class="k-state-default #= value === dataSource[i].value ? \"k-state-selected\" : \"\" #">' +
	                    '<a role="button" href="\\#" class="k-link" data-#=ns#value="#=dataSource[i].value#">#:dataSource[i].text#</a>' +
	                '</li>' +
	            '#}#'  +
	        '</ul>'
	    );

	    var MobileRecurrenceEditor = BaseRecurrenceEditor.extend({
	        init: function(element, options) {
	            var that = this;

	            BaseRecurrenceEditor.fn.init.call(that, element, options);

	            options = that.options;

	            that._optionTemplate = kendo.template('<option value="#:value#">#:text#</option>');

	            that.value(options.value);

	            that._pane = options.pane;

	            that._initRepeatButton();

	            that._initRepeatEnd();

	            that._defaultValue = that._value;
	        },

	        options: {
	            name: "MobileRecurrenceEditor",
	            animations: {
	                left: "slide",
	                right: "slide:right"
	            },
	            mobile: true,
	            messages: {
	                cancel: "Cancel",
	                update: "Save",
	                endTitle: "Repeat ends",
	                repeatTitle: "Repeat pattern",
	                headerTitle: "Repeat event",
	                end: {
	                    patterns: {
	                        never: "Never",
	                        after: "After...",
	                        on: "On..."
	                    },
	                    never: "Never",
	                    after: "End repeat after",
	                    on: "End repeat on"
	                },
	                daily: {
	                    interval: ""
	                },
	                hourly: {
	                    interval: ""
	                },
	                weekly: {
	                    interval: ""
	                },
	                monthly: {
	                    interval: "",
	                    repeatBy: "Repeat by: ",
	                    dayOfMonth: "Day of the month",
	                    dayOfWeek: "Day of the week",
	                    repeatEvery: "Repeat every",
	                    every: "Every",
	                    day: "Day "
	                },
	                yearly: {
	                    interval: "",
	                    repeatBy: "Repeat by: ",
	                    dayOfMonth: "Day of the month",
	                    dayOfWeek: "Day of the week",
	                    repeatEvery: "Repeat every: ",
	                    every: "Every",
	                    month: "Month",
	                    day: "Day"
	                }
	            }
	        },

	        events: [ "change" ],

	        value: function(value) {
	            var that = this;
	            var timezone = that.options.timezone;

	            if (value === undefined) {
	                if (!that._value.freq) {
	                    return "";
	                }

	                return serialize(that._value, timezone);
	            }

	            that._value = parseRule(value, timezone) || {};
	        },

	        destroy: function() {
	            this._destroyView();

	            kendo.destroy(this._endFields);

	            this._repeatButton.off(CLICK + this._namespace);

	            BaseRecurrenceEditor.fn.destroy.call(this);
	        },

	        _initRepeatButton: function() {
	            var that = this;
	            var freq = that.options.messages.frequencies[this._value.freq || "never"];

	            that._repeatButton = $('<a href="#" class="k-button k-scheduler-recur">' + freq + '</a>')
	                                    .on(CLICK + that._namespace, function(e) {
	                                        e.preventDefault();
	                                        that._createView("repeat");
	                                        that._pane.navigate("recurrence", that.options.animations.left);
	                                    });

	            that.element.append(that._repeatButton);
	        },

	        _initRepeatEnd: function() {
	            var that = this;

	            var endLabelField = $('<div class="k-edit-label"><label>' + that.options.messages.end.mobileLabel + '</label></div>').insertAfter(that.element.parent(".k-edit-field"));

	            var endEditField = $('<div class="k-edit-field"><a href="#" class="k-button k-scheduler-recur-end"></a></div>')
	                .on(CLICK + that._namespace, function(e) {
	                    e.preventDefault();

	                    if (!that._value.freq) {
	                        return;
	                    }

	                    that._createView("end");
	                    that._pane.navigate("recurrence", that.options.animations.left);
	                })
	                .insertAfter(endLabelField);

	            that._endFields = endLabelField.add(endEditField).toggleClass("k-state-disabled", !that._value.freq);
	            that._endButton = endEditField.find(".k-scheduler-recur-end").text(that._endText());
	        },

	        _endText: function() {
	            var rule = this._value;
	            var messages = this.options.messages.end;

	            var text = messages.never;

	            if (rule.count) {
	                text = kendo.format("{0} {1}", messages.after, rule.count);
	            } else if (rule.until) {
	                text = kendo.format("{0} {1:d}", messages.on, rule.until);
	            }

	            return text;
	        },

	        _initFrequency: function() {
	            var that = this;
	            var frequencyMessages = that.options.messages.frequencies;

	            var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({
	                dataSource: $.map(this.options.frequencies, function(frequency) {
	                    return {
	                        text: frequencyMessages[frequency],
	                        value: frequency !== "never" ? frequency : ""
	                    };
	                }),
	                value: that._value.freq || "",
	                ns: kendo.ns
	            });

	            that._view.element
	                .find(".k-recur-pattern")
	                .append(html)
	                .on(CLICK + that._namespace, ".k-scheduler-navigation li", function(e) {
	                    var li = $(this);

	                    e.preventDefault();

	                    li.addClass("k-state-selected")
	                      .siblings().removeClass("k-state-selected");

	                    that._value = { freq: li.children("a").attr(kendo.attr("value")) };

	                    that._initRepeatView();
	                });
	        },

	        _initEndNavigation: function() {
	            var that = this;
	            var endMessages = that.options.messages.end.patterns;
	            var rule = that._value;
	            var value = "";

	            if (rule.count) {
	                value = "count";
	            } else if (rule.until) {
	                value = "until";
	            }

	            var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({
	                dataSource: [
	                    { text: endMessages.never, value: "" },
	                    { text: endMessages.after, value: "count" },
	                    { text: endMessages.on, value: "until" }
	                ],
	                value: value,
	                ns: kendo.ns
	            });

	            that._view.element
	                .find(".k-recur-pattern")
	                .append(html)
	                .on(CLICK + that._namespace, ".k-scheduler-navigation li", function(e) {
	                    var li = $(this);
	                    var count = null;
	                    var until = null;

	                    e.preventDefault();

	                    li.addClass("k-state-selected")
	                      .siblings().removeClass("k-state-selected");

	                    that._initEndView(li.children("a").attr(kendo.attr("value")));

	                    if (that._count) {
	                        count = that._count.value();
	                        until = null;
	                    } else if (that._until) {
	                        count = null;
	                        until = that._until.val ? kendo.parseDate(that._until.val(), "yyyy-MM-dd") : that._until.value();
	                    }

	                    rule.count = count;
	                    rule.until = until;
	                });
	        },

	        _createView: function(viewType) {
	            var that = this;
	            var options = that.options;
	            var messages = options.messages;
	            var headerTitle = messages[viewType === "repeat" ? "repeatTitle" : "endTitle"];

	            var html = '<div data-role="view" class="k-popup-edit-form k-scheduler-edit-form k-mobile-list" id="recurrence">' +
	                       '<div data-role="header" class="k-header">' +
	                           '<a href="#" class="k-button k-scheduler-cancel">' + messages.cancel + '</a>' +
	                               messages.headerTitle +
	                           '<a href="#" class="k-button k-scheduler-update">' + messages.update + '</a>' +
	                       '</div>';

	            var returnViewId = that._pane.view().id;

	            that._view = that._pane.append(html + RECURRENCE_HEADER_TEMPLATE({ headerTitle: headerTitle }));

	            that._view.element.on(CLICK + that._namespace, "a.k-scheduler-cancel, a.k-scheduler-update", function(e) {
	                e.preventDefault();
	                e.stopPropagation();

	                if ($(this).hasClass("k-scheduler-update")) {
	                    that.trigger("change");
	                    that._defaultValue = $.extend({}, that._value);
	                } else {
	                    that._value = that._defaultValue;
	                }

	                var frequency = that._value.freq;

	                that._endButton.text(that._endText());
	                that._endFields.toggleClass("k-state-disabled", !frequency);
	                that._repeatButton.text(messages.frequencies[frequency || "never"]);

	                that._pane.one("viewShow", function() {
	                    that._destroyView();
	                });

	                that._pane.navigate(returnViewId, that.options.animations.right);
	            });

	            that._container = that._view.element.find(".k-recur-view");

	            if (viewType === "repeat") {
	                that._initFrequency();
	                that._initRepeatView();
	            } else {
	                that._initEndNavigation();
	                that._initEndView();
	            }
	        },

	        _destroyView: function() {
	            if (this._view) {
	                this._view.destroy();
	                this._view.element.remove();
	            }

	            this._view = null;
	        },

	        _initRepeatView: function() {
	            var that = this;
	            var frequency = that._value.freq || "never";

	            var data = {
	                 frequency: frequency,
	                 weekDayCheckBoxes: weekDayCheckBoxes,
	                 firstWeekDay: that.options.firstWeekDay,
	                 messages: that.options.messages[frequency]
	            };

	            var html = RECURRENCE_REPEAT_PATTERN_TEMPLATE(data);
	            var container = that._container;
	            var rule = that._value;

	            kendo.destroy(container);
	            container.html(html);

	            if (!html) {
	                that._value = {};
	                return;
	            }

	            if (frequency === "weekly" && !rule.weekDays) {
	                 rule.weekDays = [{
	                    day: that.options.start.getDay(),
	                    offset: 0
	                 }];
	            }

	            that._initInterval();
	            that._initMonthDay();
	            that._initWeekDays();
	            that._initWeekDay();
	            that._initMonth();

	            that._period();
	        },

	        _initEndView: function (endPattern) {
	            var that = this;
	            var rule = that._value;

	            if (endPattern === undefined) {
	                if (rule.count) {
	                    endPattern = "count";
	                } else if (rule.until) {
	                    endPattern = "until";
	                }
	            }

	            var data = {
	                 endPattern: endPattern,
	                 messages: that.options.messages.end
	            };

	            kendo.destroy(that._container);
	            that._container.html(RECURRENCE_END_PATTERN_TEMPLATE(data));

	            that._initCount();
	            that._initUntil();
	        },

	        _initWeekDay: function() {
	            var that = this, data;

	            var weekdayMessage = that.options.messages.weekdays;
	            var offsetMessage = that.options.messages.offsetPositions;

	            var weekDaySelect = that._container.find(".k-recur-weekday");

	            var change = function() {
	                that._weekDayRule();
	                that.trigger("change");
	            };

	            if (weekDaySelect[0]) {
	                that._weekDayOffset = that._container.find(".k-recur-weekday-offset")
	                                          .html(that._options([
	                                            { text: offsetMessage.first, value: "1" },
	                                            { text: offsetMessage.second, value: "2" },
	                                            { text: offsetMessage.third, value: "3" },
	                                            { text: offsetMessage.fourth, value: "4" },
	                                            { text: offsetMessage.last, value: "-1" }
	                                          ]))
	                                          .change(change);

	                data = [
	                    { text: weekdayMessage.day, value: "day" },
	                    { text: weekdayMessage.weekday, value: "weekday" },
	                    { text: weekdayMessage.weekend, value: "weekend" }
	                ];

	                data = data.concat($.map(kendo.culture().calendar.days.names, function(dayName, idx) {
	                    return {
	                        text: dayName,
	                        value: idx
	                    };
	                }));

	                that._weekDay = weekDaySelect.html(that._options(data))
	                                             .change(change)
	                                             .val(that.options.start.getDay());

	                that._weekDayView();
	            }
	        },

	        _initMonth: function() {
	            var that = this;
	            var rule = that._value;
	            var start = that.options.start;
	            var month = rule.months || [start.getMonth() + 1];
	            var monthSelect = that._container.find(".k-recur-month");
	            var monthNames = kendo.culture().calendar.months.names;

	            if (monthSelect[0]) {
	                var data = $.map(monthNames, function(monthName, idx) {
	                    return {
	                        text: monthName,
	                        value: idx + 1
	                    };
	                });

	                monthSelect.html(that._options(data))
	                           .change(function() {
	                               rule.months = [Number(this.value)];
	                           });

	                that._monthSelect = monthSelect;

	                if (month) {
	                    monthSelect.val(month[0]);
	                }
	            }

	        },

	        _period: function() {
	            var that = this;
	            var rule = that._value;
	            var container = that._container;
	            var messages = that.options.messages[rule.freq];
	            var repeatRuleGroupButton = container.find(".k-repeat-rule");
	            var weekDayView = container.find(".k-weekday-view");
	            var monthDayView = container.find(".k-monthday-view");

	            if (repeatRuleGroupButton[0]) {
	                var currentValue = rule.weekDays ? "weekday" : "monthday";

	                var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({
	                    value : currentValue,
	                    dataSource: [
	                        { text: messages.dayOfMonth, value: "monthday" },
	                        { text: messages.dayOfWeek, value: "weekday" }
	                    ],
	                    ns: kendo.ns
	                });

	                var init = function(val) {
	                    var weekDayName = that._weekDay.val();
	                    var weekDayOffset = that._weekDayOffset.val();
	                    var monthDay = that._monthDay.value();
	                    var month = that._monthSelect ? that._monthSelect.val() : null;

	                    if (val === "monthday") {
	                        rule.weekDays = null;
	                        rule.monthDays = monthDay ? [monthDay] : monthDay;
	                        rule.months = month ? [Number(month)] : month;

	                        weekDayView.hide();
	                        monthDayView.show();
	                    } else {
	                        rule.monthDays = null;
	                        rule.months = month ? [Number(month)] : month;

	                        rule.weekDays = [{
	                            offset: Number(weekDayOffset),
	                            day: Number(weekDayName)
	                        }];

	                        weekDayView.show();
	                        monthDayView.hide();
	                    }
	                };

	                repeatRuleGroupButton
	                    .append(html)
	                    .on(CLICK + that._namespace, ".k-scheduler-navigation li", function(e) {
	                        var li = $(this).addClass("k-state-selected");

	                        e.preventDefault();

	                        li.siblings().removeClass("k-state-selected");

	                        var value = li.children("a").attr(kendo.attr("value"));

	                        init(value);
	                    });

	                init(currentValue);
	            }
	        },

	        _initUntil: function() {
	            var that = this;
	            var input = that._container.find(".k-recur-until");
	            var start = that.options.start;
	            var rule = that._value;
	            var until = rule.until;
	            var min = until && until < start ? until : start;

	            if (kendo.support.input.date) {
	                that._until = input.attr("min", kendo.toString(min, "yyyy-MM-dd"))
	                                   .val(kendo.toString(until || start, "yyyy-MM-dd"))
	                                   .on("change", function() {
	                                       rule.until = kendo.parseDate(this.value, "yyyy-MM-dd");
	                                   });
	            } else {
	                that._until = input.kendoDatePicker({
	                    min: min,
	                    value: until || start,
	                    change: function() {
	                        rule.until = this.value();
	                    }
	                }).data("kendoDatePicker");
	            }
	        },

	        _options: function(data, optionLabel) {
	            var idx = 0;
	            var html = "";
	            var length = data.length;
	            var template = this._optionTemplate;

	            if (optionLabel) {
	                html += template({ value: "", text: optionLabel });
	            }

	            for (; idx < length; idx++) {
	                html += template(data[idx]);
	            }

	            return html;
	        }
	    });

	    ui.plugin(MobileRecurrenceEditor);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 138 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.scheduler.timelineview.js ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(830);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 822:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.scheduler.view */ 10);

/***/ },

/***/ 830:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(822) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "scheduler.timelineview",
	    name: "Scheduler Timeline View",
	    category: "web",
	    description: "The Scheduler Timeline View",
	    depends: [ "scheduler.view" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        setTime = kendo.date.setTime,
	        SchedulerView = ui.SchedulerView,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        extend = $.extend,
	        proxy = $.proxy,
	        getDate = kendo.date.getDate,
	        getMilliseconds = kendo.date.getMilliseconds,
	        MS_PER_DAY = kendo.date.MS_PER_DAY,
	        MS_PER_MINUTE = kendo.date.MS_PER_MINUTE,
	        CURRENT_TIME_MARKER_CLASS = "k-current-time",
	        CURRENT_TIME_MARKER_ARROW_CLASS = "k-current-time-arrow",
	        SCHEDULER_HEADER_WRAP_CLASS = "k-scheduler-header-wrap",
	        BORDER_SIZE_COEFF = 0.8666,
	        NS = ".kendoTimelineView";

	    var EVENT_TEMPLATE = kendo.template('<div>' +
	        '<div class="k-event-template k-event-time">#:kendo.format("{0:t} - {1:t}", start, end)#</div>' +
	        '<div class="k-event-template">${title}</div></div>'),
	        DATA_HEADER_TEMPLATE = kendo.template("<span class='k-link k-nav-day'>#=kendo.format('{0:m}', date)#</span>"),
	        EVENT_WRAPPER_STRING = '<div role="gridcell" aria-selected="false" ' +
	                'data-#=ns#uid="#=uid#"' +
	                '#if (resources[0]) { #' +
	                    'style="background-color:#=resources[0].color#; border-color: #=resources[0].color#"' +
	                    'class="k-event#=inverseColor ? " k-event-inverse" : ""#" ' +
	                '#} else {#' +
	                    'class="k-event"' +
	                '#}#' +
	                '>' +
	                '<span class="k-event-actions">' +
	                    '# if(data.tail) {#' +
	                        '<span class="k-icon k-i-arrow-60-left"></span>' +
	                    '#}#' +
	                    '# if(data.isException()) {#' +
	                        '<span class="k-icon k-i-warning"></span>' +
	                    '# } else if(data.isRecurring()) {#' +
	                        '<span class="k-icon k-i-reload"></span>' +
	                    '# } #' +
	                '</span>' +
	                '{0}' +
	                '<span class="k-event-actions">' +
	                    '#if (showDelete) {#' +
	                        '<a href="\\#" class="k-link k-event-delete"><span class="k-icon k-i-close"></span></a>' +
	                    '#}#' +
	                    '# if(data.head) {#' +
	                        '<span class="k-icon k-i-arrow-60-right"></span>' +
	                    '#}#' +
	                '</span>' +
	                '#if(resizable && !data.tail){#' +
	                '<span class="k-resize-handle k-resize-w"></span>' +
	                '#}#' +
	                '#if(resizable && !data.head){#' +
	                '<span class="k-resize-handle k-resize-e"></span>' +
	                '#}#' +
	                '</div>';

	    function toInvariantTime(date) {
	        var staticDate = new Date(1980, 1, 1, 0, 0, 0);
	        setTime(staticDate, getMilliseconds(date));
	        return staticDate;
	    }

	    function getWorkDays(options) {
	        var workDays = [];
	        var dayIndex = options.workWeekStart;

	        workDays.push(dayIndex);

	        while(options.workWeekEnd != dayIndex) {
	            if(dayIndex > 6 ) {
	                dayIndex -= 7;
	            } else {
	                dayIndex++;
	            }
	            workDays.push(dayIndex);
	        }
	        return workDays;
	    }

	   function setColspan(columnLevel) {
	        var count = 0;
	        if (columnLevel.columns) {
	            for (var i = 0; i < columnLevel.columns.length; i++) {
	                count += setColspan(columnLevel.columns[i]);
	            }
	            columnLevel.colspan = count;
	            return count;
	        } else {
	            columnLevel.colspan = 1;
	            return 1;
	        }
	    }

	    function collidingEvents(elements, left, right) {
	        var idx,
	            startPosition,
	            overlaps,
	            endPosition;

	        for (idx = elements.length-1; idx >= 0; idx--) {
	            startPosition = elements[idx].rectLeft;
	            endPosition = elements[idx].rectRight;

	            overlaps = startPosition <= left && endPosition >= left;

	            if (overlaps || (startPosition >= left && endPosition <= right) || (left <= startPosition && right >= startPosition)) {
	                if (startPosition < left) {
	                    left = startPosition;
	                }

	                if (endPosition > right) {
	                    right = endPosition;
	                }
	            }
	        }

	        return eventsForSlot(elements, left, right);
	    }

	    function eventsForSlot(elements, left, right) {
	        var events = [];

	        for (var idx = 0; idx < elements.length; idx++) {
	            var event = {
	                rectLeft: elements[idx].rectLeft,
	                rectRight: elements[idx].rectRight
	            };

	            if ((event.rectLeft < left && event.rectRight > left) || (event.rectLeft >= left && event.rectRight <= right)) {
	                events.push(elements[idx]);
	            }
	        }

	        return events;
	    }

	        var TimelineGroupedView = kendo.Class.extend({
	    	init: function(view) {
	    		this._view = view;
	    	},

	    	_getTimeSlotByPosition: function(x, y, groupIndex) {
	    		var group = this._view.groups[groupIndex];

				return group.timeSlotByPosition(x, y);
	    	},

	    	_hideHeaders: function() {
	    		var view = this._view;

				view.timesHeader.find("table tr:last").hide(); /*Chrome fix, use CSS selector*/
	            view.datesHeader.find("table tr:last").hide();
	    	},

			_setColspan: function(timeColumn) {
				setColspan(timeColumn);
			},

			_createRowsLayout: function(resources, rows, groupHeaderTemplate) {
	    		var view = this._view;

	    		return view._createRowsLayout(resources, rows, groupHeaderTemplate);
			},

			_createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {

	    		return columns;
			},

			_createColumnsLayout: function(resources, columns, groupHeaderTemplate) {
	    		var view = this._view;

	    		return view._createColumnsLayout(resources, columns, groupHeaderTemplate);
			},

			_getRowCount: function() {
	    		var view = this._view;

				return view._groupCount();
			},

			_getGroupsCount: function() {
	    		return 1;
			},

			_addContent: function(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {
				var view = this._view;
				var html = '';
				var options = view.options;
				
				var appendRow = function(date) {
	                var content = "";
	                var classes = "";
	                var tmplDate;

	                var resources = function(groupIndex) {
	                    return function() {
	                        return view._resourceBySlot({ groupIndex: groupIndex });
	                    };
	                };

	                if (kendo.date.isToday(dates[idx])) {
	                    classes += "k-today";
	                }

	                if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) ||
	                    kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) ||
	                    !view._isWorkDay(dates[idx])) {
	                    classes += " k-nonwork-hour";
	                }

	                content += '<td' + (classes !== "" ? ' class="' + classes + '"' : "") + ">";
	                tmplDate = kendo.date.getDate(dates[idx]);
	                kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));

	                content += slotTemplate({ date: tmplDate, resources: resources(isVerticalGrouped ? rowIdx : groupIdx) });
	                content += "</td>";

	                return content;
	            };

				for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {
	                html += '<tr>';
					for (var groupIdx = 0 ; groupIdx < groupsCount; groupIdx++) {
						for (var idx = 0, length = columnCount; idx < length; idx++) {
							html += view._forTimeRange(start, end, appendRow);
						}
					}
				    html += "</tr>";
	            }
	    		return html;
			},

			_addTimeSlotsCollections: function(groupCount, datesCount, tableRows, interval, isVerticallyGrouped) {
				var view = this._view;
				var rowCount = tableRows.length;
		
	    		if (isVerticallyGrouped) {
	                rowCount = Math.floor(rowCount / groupCount);
	            }

	            for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {
					var rowMultiplier = 0;
					var group = view.groups[groupIndex];
					var time;

					if (isVerticallyGrouped) {
						rowMultiplier = groupIndex;
					}

					var rowIndex = rowMultiplier * rowCount;
					var cellMultiplier = 0;

					if (!isVerticallyGrouped) {
						cellMultiplier = groupIndex;
					}

					var cells = tableRows[rowIndex].children;
					var cellsPerGroup = cells.length / (!isVerticallyGrouped ? groupCount : 1);
					var cellsPerDay = cellsPerGroup / datesCount;

					for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {
						var cellOffset = dateIndex * cellsPerDay + (cellsPerGroup * cellMultiplier);
						time = getMilliseconds(new Date(+view.startTime()));

						for (var cellIndex = 0; cellIndex < cellsPerDay ; cellIndex++) {

							view._addTimeSlotToCollection(group, cells, cellIndex, cellOffset, dateIndex, time, interval);
							time += interval;
						}
					}
				}
			},

			_getVerticalGroupCount: function(groupsCount) {

	    		return groupsCount;
			},

			_getVerticalRowCount: function(eventGroups, groupIndex, maxRowCount) {
				var view = this._view;

	    		return view._isVerticallyGrouped() ? eventGroups[groupIndex].maxRowCount : maxRowCount;
			},

			_renderEvent: function(eventGroup, event, adjustedEvent, group, range, container) {
				var view = this._view;
				var element; 

	            element = view._createEventElement(adjustedEvent.occurrence, event, range.head || adjustedEvent.head, range.tail || adjustedEvent.tail);
	            element.appendTo(container).css({top: 0, height: view.options.eventHeight});

	            var eventObject = {
	                start: adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start,
	                end: adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end,
	                element: element,
	                uid: event.uid,
	                slotRange: range,
	                rowIndex: 0,
	                offsetTop: 0
	            };

	            eventGroup.events[event.uid] = eventObject;

	            view.addContinuousEvent(group, range, element, event.isAllDay);
	            view._arrangeRows(eventObject, range, eventGroup);
			},
			
			_verticalCountForLevel: function(level) {
				var view = this._view;
				
				return view._rowCountForLevel(level);
			},

			_horizontalCountForLevel: function(level) {
				var view = this._view;
				
				return view._columnCountForLevel(level);
			},

	        _updateCurrentVerticalTimeMarker: function(ranges, currentTime) {
				var view = this._view;		
			    var elementHtml = "<div class='" + CURRENT_TIME_MARKER_CLASS + "'></div>";
	            var headerWrap = view.datesHeader.find("." + SCHEDULER_HEADER_WRAP_CLASS);
	            var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);
	            var timesTableMarker = $(elementHtml)
	                    .prependTo(headerWrap)
	                    .addClass(CURRENT_TIME_MARKER_ARROW_CLASS + "-down");

	            timesTableMarker.css({
	                left: view._adjustLeftPosition(left - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2)),
	                top: headerWrap.find("tr:last").prev().position().top
	            });

	            $(elementHtml).prependTo(view.content).css({
	                left: view._adjustLeftPosition(left),
	                width: "1px",
	                height: view.content[0].scrollHeight - 1,
	                top: 0
	            });
	        },

	        _changeGroup: function() {
	            return undefined;
	        },

	        _prevGroupSlot: function(slot, group, isDay) {
	            var view = this._view;

	            if (view._isVerticallyGrouped()) {
	                return slot;
	            } else {
	                var collection = group._collection(0, isDay);
	                return collection.last();
	            }
	        },

	        _nextGroupSlot: function(slot, group, isDay) {
	            var view = this._view;

	            if (view._isVerticallyGrouped()) {
	                return slot;
	            } else {
	                var collection = group._collection(0, isDay);
	                return collection.first();
	            }
	        },

	        _verticalSlots: function(selection, reverse) {
	             var view = this._view;

	             return view._changeGroup(selection, reverse);
	        },

			 _verticalMethod: function(reverse) {

	              return  reverse ? "leftSlot" : "rightSlot"; 
			 },

			 _normalizeVerticalSelection: function() {
			     return undefined;
			 },

			 _horizontalSlots: function(selection, group, method, startSlot, endSlot, multiple, reverse) {
	            var view = this._view;
	            var result = {};

	            result.startSlot = group[method](startSlot);
	            result.endSlot = group[method](endSlot);

	            if (!multiple && view._isHorizontallyGrouped() && (!result.startSlot || !result.endSlot)) {
	                result.startSlot = result.endSlot = view._changeGroup(selection, reverse);
	            }

	            return result;
	        },
	        
	        _changeVerticalViewPeriod: function() {
	            return false;
	        },

	        _changeHorizontalViewPeriod: function(slots, shift, selection, reverse) {
	            var view = this._view;

	            if ((!slots.startSlot ||!slots.endSlot ) && !shift && view._changeViewPeriod(selection, reverse, false)) {
	                return true;
	            }
	            return false;
	        },

	        _updateDirection: function(selection, ranges, shift, reverse) {
	            var view = this._view;

	            view._updateDirection(selection, ranges, shift, reverse, true);
	        },

	         _createMoveHint: function(range, adjustedEvent) {
	                var view = this._view;
	                var startSlot = range.start;

	                var hint = view._createEventElement(adjustedEvent.occurrence ,adjustedEvent.occurrence, false, false);

	                hint.addClass("k-event-drag-hint");

	                var rect = range.innerRect(adjustedEvent.occurrence.start, adjustedEvent.occurrence.end, view.options.snap);
	                var width = rect.right - rect.left - 2;

	                if (width < 0) {
	                   width = 0;
	                }

	                var left = view._adjustLeftPosition(rect.left);

	                var css = {
	                    left: left,
	                    top: startSlot.offsetTop,
	                    height: startSlot.offsetHeight - 2,
	                    width: width
	                };

	                hint.css(css);

	                view._moveHint = view._moveHint.add(hint);
	         },

	         _adjustLeftPosition: function(left) {
	            var view = this._view;

	            if (view._isRtl) {
	                left -= (view.content[0].scrollWidth - view.content[0].offsetWidth);
	            }

	            return left;
	         }
	    });

		 var TimelineGroupedByDateView = kendo.Class.extend({
	    	init: function(view) {
	    		this._view = view;
	    	},

			_getTimeSlotByPosition: function(x, y, groupIndex) {
	    		var group = this._view.groups[groupIndex];

				return group.timeSlotByPosition(x, y, true);
			},

			_hideHeaders: function() {
	    		var view = this._view;

	    		if (!view._isVerticallyGrouped()) {
					view.timesHeader.find("table tr").eq(2).hide();
	       		 view.datesHeader.find("table tr").eq(2).hide();  
	    		} else {
	               		 view.times.find(".k-last").hide();
	    		}
			},
			_setColspan: function() {},

			_createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {
				var view = this._view;

	    		return view._createDateLayout(columns, null, true);
			},	

			_createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {
				var view = this._view;

	    		return view._createColumnsLayout(resources, null, groupHeaderTemplate);
			},	

			_createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {
	    		var view = this._view;

	    		return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);
			},

			_getRowCount: function(level) {
	    		var view = this._view;
		
	    		return view._rowCountForLevel(level);
			},

			_getGroupsCount: function() {
	    		var view = this._view;
		
	    		return view._groupCount();
			},

			_addContent: function(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {
				var view = this._view;
				var html = '';
				var options = view.options;
				
				var appendRow = function(date, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns, groupIdx) {
	                var content = "";
	                var classes = "";
	                var tmplDate;
	                var workDateIndex = view._isVerticallyGrouped() ? dateIndex : idx;

	                var resources = function(groupIndex) {
	                    return function() {
	                        return view._resourceBySlot({ groupIndex: groupIndex });
	                    };
	                };

	                if (kendo.date.isToday(dates[idx])) {
	                    classes += "k-today";
	                }

	                if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) ||
	                    kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) ||
	                    !view._isWorkDay(dates[workDateIndex])) {
	                    classes += " k-nonwork-hour";
	                }

	                content += '<td' + (classes !== "" ? ' class="' + classes + '"' : "") + ">";
	                tmplDate = kendo.date.getDate(dates[idx]);
	                kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));

	                content += slotTemplate({ date: tmplDate, resources: resources(groupIdx)});
	                content += "</td>";

	                return content;
	            };

	            var tempStart = new Date(start),
	                minorTickCount = view.options.minorTickCount,
	                msMajorInterval = view.options.majorTick * MS_PER_MINUTE,
	                msInterval = msMajorInterval / minorTickCount || 1,
	                dateIndex;
	              
				for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {
	                html += '<tr>';

	                 if((rowIdx % (rowCount / view._dates.length)) === 0){
	                   dateIndex = (rowIdx / (rowCount / view._dates.length));
	                   tempStart = new Date(view._dates[dateIndex]);
	                   kendo.date.setTime(tempStart, kendo.date.getMilliseconds(start));
	                  }

					for (var idx = 0, length = columnCount; idx < length; idx++) {      
	               
						html += view._forTimeRange(tempStart, end, appendRow, isVerticalGrouped, groupsCount);

						if (isVerticalGrouped){
						setTime(tempStart, msInterval, false);
							break;
						} 
					}
				   html += "</tr>";
	            }
		
	    		return html;
			},

			_addTimeSlotsCollections: function(groupCount, datesCount, tableRows, interval, isVerticallyGrouped) {
				var view = this._view;
				var rowCount = tableRows.length;
		
	    		 if (isVerticallyGrouped) {                
	                rowCount = rowCount/datesCount;
	    		 }

				for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {
					var rowMultiplier = 0;
					var time;

					if (isVerticallyGrouped) {
						rowMultiplier = dateIndex;
					}

					var rowIndex = rowMultiplier * rowCount;
					var cellMultiplier = 0;            
					var cells = tableRows[rowIndex].children;
					var cellsPerGroup = isVerticallyGrouped ? rowCount : cells.length / (datesCount * groupCount);
					var cellsPerDay = cells.length / datesCount;
					var cellOffset;

					time = getMilliseconds(new Date(+view.startTime()));

					for (var cellIndex = 0; cellIndex < cellsPerGroup; cellIndex++) {                       
						if (!isVerticallyGrouped) {
							cellOffset = (dateIndex * cellsPerDay) + (groupCount * cellIndex);                
							cellMultiplier++;                           
						} else{
							cellOffset = 0; 
							cells = tableRows[cellIndex + (cellsPerGroup*dateIndex)].children;
						}

						for (var groupIndex = 0; groupIndex < groupCount ; groupIndex++) {
							var group = view.groups[groupIndex];

							view._addTimeSlotToCollection(group, cells, groupIndex, cellOffset, dateIndex, time, interval);                      
						}
						time += interval;                       
					}                  
				 }
			},

			_getVerticalGroupCount: function() {
				var view = this._view;

	    		return view.content.find("tr").length;
			},

			_getVerticalRowCount: function(eventGroups, groupIndex, maxRowCount) {

				return maxRowCount;
			},

			_renderEvent: function(eventGroup, event, adjustedEvent, group, range, container, startIndex, endIndex) {
				var view = this._view;
				var element; 
	    		var eventObjects = [];

	            for (var i = range.start.index; i <= range.end.index; i++) {
	                element = view._createEventElement(adjustedEvent.occurrence, event, i !== endIndex, i !== startIndex);
	                element.appendTo(container).css({top: 0, height: view.options.eventHeight});
	                var currentSlot = group._timeSlotCollections[0]._slots[i];
	                var dateRange = group.timeSlotRanges(currentSlot.start, currentSlot.end, false)[0];                                  
	                   
	                    var eventObject = {
	                    start: i === startIndex ? adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start : currentSlot.start,
	                    end: i === endIndex ? adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end : currentSlot.end,
	                    element: element,
	                    uid: event.uid,
	                    slotRange: dateRange,
	                    rowIndex: 0,
	                    offsetTop: 0
	                };

	                eventGroup.events[event.uid] = eventObject;
	                eventObjects.push(eventObject);

	                view.addContinuousEvent(group, dateRange, element, event.isAllDay);
	                view._arrangeRows(eventObject, dateRange, eventGroup);
	            }
	            eventGroup.events[event.uid] = eventObjects;
			},
			
			_verticalCountForLevel: function(level) {
				var view = this._view;
				
				return view._columnCountForLevel(level);
			},
			
			_horizontalCountForLevel: function(level, columnLevel) {
				var view = this._view;
				
				return view._columnCountForLevel(columnLevel) / view._columnCountForLevel(2);
			},

	        _updateCurrentVerticalTimeMarker: function(ranges,currentTime) {
			    var view = this._view;		
			    var firstTimesCell = view.times.find("tr:first th:first");
	            var lastTimesCell = view.times.find("tr:first th:last");
	            var elementHtml = "<div class='" + CURRENT_TIME_MARKER_CLASS + "'></div>";
	            var timesTableMarker = $(elementHtml).prependTo(view.times);
	            var markerTopPosition = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).top);
	            var timesTableMarkerCss = {};

	            if (this._isRtl) {
	                timesTableMarkerCss.right = firstTimesCell.position().left + outerHeight(firstTimesCell) - outerHeight(lastTimesCell);
	                timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + "-left");
	            } else {
	                timesTableMarkerCss.left = lastTimesCell.position().left;
	                timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + "-right");
	            }

	            timesTableMarkerCss.top = markerTopPosition - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2);

	            timesTableMarker.css(timesTableMarkerCss);

	            $(elementHtml).prependTo(view.content).css({
	                top: markerTopPosition,
	                height: "1px",
	                right: "1px",
	                width: view.content[0].scrollWidth,
	                left: 0
	            });
	        },

	        _changeGroup: function(selection, previous, slot) {
	             var view = this._view;

	             if (!slot) {
	                selection.groupIndex = previous ? view.groups.length - 1 : 0;
	             }
	        },

	         _prevGroupSlot: function(slot) {
	              return slot;
	        },

	        _nextGroupSlot: function(slot) {
	              return slot;
	        },

	        _changeDate: function(selection, reverse, slot) {
	            var view = this._view;
	            var group = view.groups[selection.groupIndex];
	            var collections, index;

	            if (reverse) {
	                  collections = group._getCollections(false);
	                  index = slot.index - 1;

	                  if (index >= 0) {
	                      return  collections[0]._slots[index];
	                  }
	              } else {
	                  collections = group._getCollections(false);
	                  index = slot.index + 1;

	                  if (collections[0] && collections[0]._slots[index]) {
	                      return  collections[0]._slots[index];
	                  }
	               }
	        },

	        _verticalSlots: function (selection, reverse, slot) {
	            return this._changeDate(selection, reverse, slot);
	        },

	        _verticalMethod: function(reverse, multiple) {
	            if (multiple) {
	               return reverse ? "upSlot" : "downSlot";
	            } else {
	               return  reverse ? "leftSlot" : "rightSlot"; 
	            }
	        },

	        _normalizeVerticalSelection: function(selection, ranges, reverse, multiple) {
	            var view = this._view;

	            if (!multiple) {
	                return view._normalizeVerticalSelection(selection, ranges, reverse);          
	            }

	            return undefined;
	        },

	        _horizontalSlots: function(selection, group, method, startSlot, endSlot, multiple, reverse) {
	             var view = this._view;
	             var tempSlot = view._changeGroup(selection, reverse);
	             var result = {};

	            if (!tempSlot) {
	                if (!view._isVerticallyGrouped()) {
	                    result.startSlot = group[method](startSlot);
	                    result.endSlot = group[method](endSlot);
	                }

	            } else {
	                result.startSlot = result.endSlot = tempSlot;
	            }
	            
	            return result;
	        },

	        _changeVerticalViewPeriod: function(slots, shift, selection, reverse) {
	            var view = this._view;

	            if ((!slots.startSlot || !slots.endSlot) && !shift &&
	                view._changeViewPeriod(selection, reverse, view._isVerticallyGrouped())) {
	                return true;
	            }
	            return false;
	        },

	        _changeHorizontalViewPeriod: function(slots, shift, selection, reverse) {
	           var view = this._view;

	           if ( view._isVerticallyGrouped()) {
	               return false;
	           }

	           if ((!slots.startSlot ||!slots.endSlot ) && !shift && view._changeViewPeriod(selection, reverse, false)) {
	                return true;
	            }
	            return false;
	        },

	        _updateDirection: function(selection, ranges, shift, reverse) {
	            var view = this._view;

	            view._updateDirection(selection, ranges, shift, reverse, !view._isVerticallyGrouped());
	        },

	         _createMoveHint: function(range, adjustedEvent) {
	                var view = this._view;
	                var startSlot = range.start;
	                var startEnd = range.end;

	                for (var slotIdx = startSlot.index; slotIdx <= startEnd.index; slotIdx++) {
	                    var slot = range.collection._slots[slotIdx];
	                    var hint = view._createEventElement(adjustedEvent.occurrence ,adjustedEvent.occurrence, false, false);

	                    hint.addClass("k-event-drag-hint");

	                    var css = {
	                        left: slot.offsetLeft + 2,
	                        top: slot.offsetTop,
	                        height: view.options.eventHeight,
	                        width: slot.offsetWidth
	                    };

	                    hint.css(css);

	                    view._moveHint = view._moveHint.add(hint);
	                }
	         },

	         _adjustLeftPosition: function(left) {
	             var view = this._view;

	            if (view._isRtl && !view._isVerticallyGrouped()) {
	                left -= (view.content[0].scrollWidth - view.content[0].offsetWidth);
	            }

	            return left;
	         }
	 });

		 kendo.ui.scheduler.TimelineGroupedView = TimelineGroupedView;
		 kendo.ui.scheduler.TimelineGroupedByDateView = TimelineGroupedByDateView;

	    var TimelineView = SchedulerView.extend({
	        init: function(element, options) {
	            var that = this;

	            SchedulerView.fn.init.call(that, element, options);

	            that._groupedView = that._getGroupedView();

	            that.title = that.options.title || that.options.name;

	            that._workDays = getWorkDays(that.options);

	            that._templates();

	            that._editable();

	            that.calculateDateRange();

	            that._groups();

	            that._currentTime(true);
	        },
	        name: "timeline",

	        _getGroupedView: function() {
	           
	            if (this._isGroupedByDate()) {
	                   return new kendo.ui.scheduler.TimelineGroupedByDateView(this);
	            } else {
	                   return new kendo.ui.scheduler.TimelineGroupedView(this);
	            }
	        },

	        _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex){
	           if(this._isVerticallyGrouped()){
	               return kendo.ui.SchedulerView.fn._getNextEventIndexBySlot.call(this, slot, sortedEvents, groupIndex);
	           } 

	            var tempIndex = 0;

	            for (var i = 0; i < sortedEvents.length; i++) {
	                if (slot.startDate()> sortedEvents[i].start.startDate()) {
	                    tempIndex++;
	                    continue;
	                }

	                if (slot.startDate().getTime() === sortedEvents[i].start.startDate().getTime() &&
	                 groupIndex > sortedEvents[i].start.groupIndex) {
	                      tempIndex++;
	                      continue;
	                }

	                 break;

	            }
	            return tempIndex;
	        },

			_getSelectedSlot: function (slot, sortedEvents, event, idx, pad, prev) {
	            if(this._isVerticallyGrouped()){
	               return kendo.ui.SchedulerView.fn._getSelectedSlot.call(this, slot, sortedEvents, event, idx, pad, prev);
	            } 

			    return slot;
			},

			_getSortedEvents: function (uniqueAllEvents) {
	            if(this._isVerticallyGrouped()){
	               return kendo.ui.SchedulerView.fn._getSortedEvents.call(this, uniqueAllEvents);
	            } 

	            return uniqueAllEvents.sort(function(first, second) {
	                var result = first.start.startDate().getTime() - second.start.startDate().getTime();

	                if (result === 0) {
	                    if (first.start.isDaySlot && !second.start.isDaySlot) {
	                            result = -1;
	                    }

	                    if (!first.start.isDaySlot && second.start.isDaySlot) {
	                            result = 1;
	                    }
	                }

	                if (result === 0) {
	                    result = first.start.groupIndex - second.start.groupIndex;
	                }

	                if (result === 0) {
	                    result = $(first.element).index() - $(second.element).index();
	                }

	                return result;
	            });
			},

	        _currentTimeMarkerUpdater: function() {
	            this._updateCurrentTimeMarker(new Date());
	        },

	        _updateCurrentTimeMarker: function(currentTime) {
	            var options = this.options;

	            this.datesHeader.find("." + CURRENT_TIME_MARKER_CLASS).remove();
	            this.times.find("." + CURRENT_TIME_MARKER_CLASS).remove();
	            this.content.find("." + CURRENT_TIME_MARKER_CLASS).remove();

	            if (!this._isInDateSlot({start: currentTime, end:currentTime })) {
	                return;
	            }

	            if(options.currentTimeMarker.useLocalTimezone === false) {
	                var timezone = options.dataSource.options.schema.timezone;

	                if(options.dataSource && timezone) {
	                    var timezoneOffset = kendo.timezone.offset(currentTime, timezone);
	                    currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);
	                }
	            }

	            var groupsCount = !options.group || options.group.orientation == "vertical" ? 1 : this.groups.length;

	            for(var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
	                var currentGroup = this.groups[groupIndex];

	                if (!currentGroup) {
	                    return;
	                }

	                var utcCurrentTime = kendo.date.toUtcTime(currentTime);
	                var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);

	                if(ranges.length === 0) {
	                    return;
	                }

	                var collection = ranges[0].collection;
	                var slotElement = collection.slotByStartDate(currentTime);

	                if(slotElement) {

	                    if(this._isVerticallyGrouped()){
	                        this._groupedView._updateCurrentVerticalTimeMarker(ranges,currentTime);
	                    } else{
	                        var elementHtml = "<div class='" + CURRENT_TIME_MARKER_CLASS + "'></div>";
	                        var headerWrap = this.datesHeader.find("." + SCHEDULER_HEADER_WRAP_CLASS);
	                        var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);
	                        var timesTableMarker = $(elementHtml)
	                                .prependTo(headerWrap)
	                                .addClass(CURRENT_TIME_MARKER_ARROW_CLASS + "-down");

	                        timesTableMarker.css({
	                            left: this._adjustLeftPosition(left - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2)),
	                            top: headerWrap.find("tr:last").prev().position().top
	                        });

	                        $(elementHtml).prependTo(this.content).css({
	                            left: this._adjustLeftPosition(left),
	                            width: "1px",
	                            height: this.content[0].scrollHeight - 1,
	                            top: 0
	                        });
	                    }                 
	                }
	            }
	        },

	        _adjustLeftPosition: function(left) {
	            return this._groupedView._adjustLeftPosition(left);
	        },

	        _currentTime: function(setUpdateTimer) {
	            var that = this;
	            var markerOptions = that.options.currentTimeMarker;

	            if (markerOptions !== false && markerOptions.updateInterval !== undefined) {
	                that._currentTimeMarkerUpdater();

	                if (setUpdateTimer) {
	                    that._currentTimeUpdateTimer = setInterval(proxy(this._currentTimeMarkerUpdater, that), markerOptions.updateInterval);
	                }
	            }
	        },

	        _editable: function() {
	            if (this.options.editable) {
	                if (this._isMobile()) {
	                    this._touchEditable();
	                } else {
	                    this._mouseEditable();
	                }
	            }
	        },

	        _mouseEditable: function() {
	            var that = this;
	            that.element.on("click" + NS, ".k-event a:has(.k-i-close)", function(e) {
	                that.trigger("remove", { uid: $(this).closest(".k-event").attr(kendo.attr("uid")) });
	                e.preventDefault();
	            });

	            if (that.options.editable.create !== false) {
	                that.element.on("dblclick" + NS, ".k-scheduler-content td", function(e) {
	                    var slot = that._slotByPosition(e.pageX, e.pageY);

	                    if (slot) {
	                        var resourceInfo = that._resourceBySlot(slot);
	                        that.trigger("add", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });
	                    }

	                    e.preventDefault();
	                });
	            }

	            if (that.options.editable.update !== false) {
	                that.element.on("dblclick" + NS, ".k-event", function(e) {
	                    that.trigger("edit", { uid: $(this).closest(".k-event").attr(kendo.attr("uid")) });
	                    e.preventDefault();
	                });
	            }
	        },

	        _touchEditable: function() {
	            var that = this;
	            var threshold = 0;

	            if (kendo.support.mobileOS.android) {
	                threshold = 5;
	            }

	            if (that.options.editable.create !== false) {
	                that._addUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter:  ".k-scheduler-content td",
	                    tap: function(e) {
	                        var x = e.x.location !== undefined ? e.x.location : e.x;
	                        var y = e.y.location !== undefined ? e.y.location : e.y;
	                        var slot = that._slotByPosition(x, y);

	                        if (slot) {
	                            var resourceInfo = that._resourceBySlot(slot);
	                            that.trigger("add", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });
	                        }

	                        e.preventDefault();
	                    }
	                });
	            }

	            if (that.options.editable.update !== false) {
	                that._editUserEvents = new kendo.UserEvents(that.element, {
	                    threshold: threshold,
	                    filter: ".k-event",
	                    tap: function(e) {
	                        var eventElement = $(e.target).closest(".k-event");

	                        if (!eventElement.hasClass("k-event-active")) {
	                            that.trigger("edit", { uid: eventElement.attr(kendo.attr("uid")) });
	                        }

	                        e.preventDefault();
	                    }
	                });
	            }
	        },

	        _slotByPosition: function(x, y) {
	            var slot;
	            var content = this.content;
	            var offset = content.offset();
	            var groupIndex;

	            x -= offset.left;
	            y -= offset.top;

	            if (this._isRtl) {
	                var browser = kendo.support.browser;

	                if (browser.mozilla) {
	                     x += (content[0].scrollWidth - content[0].offsetWidth);
	                     x += content[0].scrollLeft;
	                } else if (browser.msie) {
	                     x -= content.scrollLeft();
	                     x += content[0].scrollWidth - content[0].offsetWidth;
	                } else if (browser.webkit) {
	                     x += content[0].scrollLeft;
	                }
	            } else {
	                x += content[0].scrollLeft;
	            }

	            y += content[0].scrollTop;

	            x = Math.ceil(x);
	            y = Math.ceil(y);

	            for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
	               
	                 slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);

	                 if (slot) {
	                     return slot;
	                 }
	            }

	            return null;
	        },

	        options: {
	            name: "TimelineView",
	            title: "Timeline",
	            selectedDateFormat: "{0:D}",
	            selectedShortDateFormat: "{0:d}",
	            date: kendo.date.today(),
	            startTime: kendo.date.today(),
	            endTime: kendo.date.today(),
	            showWorkHours: false,
	            minorTickCount: 2,
	            editable: true,
	            workDayStart: new Date(1980, 1, 1, 8, 0, 0),
	            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),
	            workWeekStart: 1,
	            workWeekEnd: 5,
	            majorTick: 60,
	            eventHeight: 25,
	            eventMinWidth: 0,
	            columnWidth: 100,
	            groupHeaderTemplate: "#=text#",
	            majorTimeHeaderTemplate: "#=kendo.toString(date, 't')#",
	            slotTemplate: "&nbsp;",
	            eventTemplate: EVENT_TEMPLATE,
	            dateHeaderTemplate: DATA_HEADER_TEMPLATE,
	            footer: {
	                command: "workDay"
	            },
	            currentTimeMarker: {
	                updateInterval: 10000,
	                useLocalTimezone: true
	            },
	            messages: {
	                defaultRowText: "All events",
	                showFullDay: "Show full day",
	                showWorkDay: "Show business hours"
	            }
	        },

	        events: ["remove", "add", "edit"],

	        _templates: function() {
	            var options = this.options,
	                settings = extend({}, kendo.Template, options.templateSettings);

	            this.eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_STRING);
	            this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);
	            this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);
	            this.slotTemplate = kendo.template(options.slotTemplate, settings);
	            this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);
	        },

	        _render: function(dates) {
	            var that = this;
	            dates = dates || [];

	            that._dates = dates;

	            that._startDate = dates[0];

	            that._endDate = dates[(dates.length - 1) || 0];

	            that._calculateSlotRanges();

	            that.createLayout(that._layout(dates));

	            that._content(dates);

	            that._footer();

	            that._setContentWidth();

	            that.refreshLayout();

	            that.datesHeader.on("click" + NS, ".k-nav-day", function(e) {
	                var th = $(e.currentTarget).closest("th");

	                var slot = that._slotByPosition(th.offset().left, that.content.offset().top);

	                that.trigger("navigate", { view: "timeline", date: slot.startDate() });
	            });
	       
	            that._groupedView._hideHeaders();
	        },

	        _setContentWidth: function() {
	            var content = this.content;
	            var contentWidth = content.width();
	            var contentTable = this.content.find("table");
	            var columnCount = contentTable.find("tr:first").children().length;

	            var minWidth = 100;
	            var calculatedWidth = columnCount * this.options.columnWidth;

	            if (contentWidth < calculatedWidth) {
	                minWidth = Math.ceil((calculatedWidth / contentWidth) * 100);
	            }

	            contentTable.add(this.datesHeader.find("table"))
	                .css("width", minWidth + "%");
	        },

	        _calculateSlotRanges: function () {
	            var dates = this._dates;
	            var slotStartTime = this.startTime();
	            var slotEndTime = this.endTime();

	            if (getMilliseconds(slotEndTime) === getMilliseconds(kendo.date.getDate(slotEndTime))) {
	                slotEndTime = kendo.date.getDate(slotEndTime);
	                setTime(slotEndTime, MS_PER_DAY - 1);
	            }

	            slotEndTime = getMilliseconds(slotEndTime);
	            slotStartTime = getMilliseconds(slotStartTime);

	            var slotRanges = [];
	            for (var i = 0; i < dates.length; i++) {
	                var rangeStart = getDate(dates[i]);
	                setTime(rangeStart, slotStartTime);

	                var rangeEnd = getDate(dates[i]);
	                setTime(rangeEnd, slotEndTime);

	                slotRanges.push({
	                    start: kendo.date.toUtcTime(rangeStart),
	                    end: kendo.date.toUtcTime(rangeEnd)
	                });
	            }

	            this._slotRanges = slotRanges;
	        },

	        _forTimeRange: function(min, max, action, verticalByDate, groupsCount) {
	            min = toInvariantTime(min); //convert the date to 1/2/1980 and sets the time
	            max = toInvariantTime(max);

	            var that = this,
	                msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                minorTickCount = that.options.minorTickCount,
	                msMajorInterval = that.options.majorTick * MS_PER_MINUTE,
	                msInterval = msMajorInterval / minorTickCount || 1,
	                start = new Date(+min),
	                startDay = start.getDate(),
	                msStart,
	                idx = 0, length,
	                html = "";

	            length = MS_PER_DAY / msInterval;

	            if (msMin != msMax) {
	                if (msMin > msMax) {
	                    msMax += MS_PER_DAY;
	                }

	                length = ((msMax - msMin) / msInterval);
	            }

	            length = verticalByDate ? 1 : Math.round(length);

	            if (groupsCount) {
	                length = length * groupsCount;
	            }

	            for (; idx < length; idx++) {
	                var majorTickDivider = idx % (msMajorInterval/msInterval);
	                var isMajorTickColumn = majorTickDivider === 0;
	                var isMiddleColumn = majorTickDivider < minorTickCount - 1;
	                var isLastSlotColumn = majorTickDivider === minorTickCount - 1;
	                var minorTickColumns = minorTickCount;

	                if (length % minorTickCount !== 0) {
	                    var isLastMajorSlot = (length - (idx + 1)) < minorTickCount;
	                    if (isMajorTickColumn && isLastMajorSlot) {
	                        minorTickColumns = length % minorTickCount;
	                    }
	                }

	                html += action(start, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns, idx % groupsCount);

	                if (!verticalByDate) {
	                    if (groupsCount) {
	                        if ((idx % groupsCount) === groupsCount - 1) {
	                            setTime(start, msInterval, false);
	                        }
	                    } else {
	                        setTime(start, msInterval, false);
	                    }
	                }
	            }

	            if (msMax) {
	                msStart = getMilliseconds(start);
	                if (startDay < start.getDate()) {
	                    msStart += MS_PER_DAY;
	                }

	                if (msStart > msMax) {
	                    start = new Date(+max);
	                }
	            }


	            return html;
	        },

	        _layout: function(dates) {
	            var timeColumns = [];
	            var columns = [];
	            var that = this;
	            var rows = [{ text: that.options.messages.defaultRowText }];
	            var groupedView = that._groupedView;

	            var minorTickSlots = [];
	            for (var minorTickIndex = 0; minorTickIndex < that.options.minorTickCount; minorTickIndex++) {
	                minorTickSlots.push({
	                    text: "",
	                    className: "k-last",
	                    minorTicks: true
	                });
	            }

	            this._forTimeRange(that.startTime(), that.endTime(), function(date, majorTick, middleColumn, lastSlotColumn, minorSlotsCount) {
	                var template = that.majorTimeHeaderTemplate;

	                if (majorTick) {
	                    var timeColumn = {
	                        text: template({ date: date }),
	                        className: lastSlotColumn ? "k-slot-cell" : "",
	                        columns: minorTickSlots.slice(0, minorSlotsCount)
	                    };
	                    
	                    groupedView._setColspan(timeColumn); 

	                    timeColumns.push(timeColumn);
	                }
	            });

	            for (var idx = 0; idx < dates.length; idx++) {
	                columns.push({
	                    text: that.dateHeaderTemplate({ date: dates[idx] }),
	                    className:  "k-slot-cell",
	                    columns: timeColumns.slice(0)
	                });
	            }

	            var resources = this.groupedResources;
	            if (resources.length) {
	                if (this._groupOrientation() === "vertical") {
	                    rows =  groupedView._createRowsLayout(resources, null, this.groupHeaderTemplate, columns); 
	                    columns =  groupedView._createVerticalColumnsLayout(resources, null, this.groupHeaderTemplate, columns);            
	                               
	                } else {
	                    columns =  groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns); 
	                }
	            }

	            return {
	                columns: columns,
	                rows: rows
	            };
	        },

	        _footer: function() {
	            var options = this.options;

	            if (options.footer !== false) {
	                var html = '<div class="k-header k-scheduler-footer">';

	                var command = options.footer.command;

	                if (command && command === "workDay") {
	                    html += '<ul class="k-reset k-header">';

	                    html += '<li class="k-state-default k-scheduler-fullday"><a href="#" class="k-link"><span class="k-icon k-i-clock"></span>';
	                    html += (options.showWorkHours ? options.messages.showFullDay : options.messages.showWorkDay) + '</a></li>';

	                    html += '</ul>';

	                } else {
	                    html += "&nbsp;";
	                }

	                html += "</div>";

	                this.footer = $(html).appendTo(this.element);

	                var that = this;

	                this.footer.on("click" + NS, ".k-scheduler-fullday", function(e) {
	                    e.preventDefault();
	                    that.trigger("navigate", { view: that.name || options.name, date: that.startDate(), isWorkDay: !options.showWorkHours });
	                });
	            }
	        },

	        _columnCountForLevel: function(level) {
	            var columnLevel = this.columnLevels[level];
	            return columnLevel ? columnLevel.length : 0;
	        },

	        _rowCountForLevel: function(level) {
	            var rowLevel = this.rowLevels[level];
	            return rowLevel ? rowLevel.length : 0;
	        },

	        _isWorkDay: function(date) {
	            var day = date.getDay();
	            var workDays =  this._workDays;

	            for (var i = 0; i < workDays.length; i++) {
	                if (workDays[i] === day) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        _content: function(dates) {
	            var that = this;
	            var start = that.startTime();
	            var end = this.endTime();
	            var groupsCount = 1;
	            var rowCount = 1;
	            var columnCount = dates.length;
	            var html = '';
	            var resources = this.groupedResources;
	            var slotTemplate = this.slotTemplate;
	            var isVerticalGrouped = false;

	            if (resources.length) {
	                isVerticalGrouped = that._groupOrientation() === "vertical";
	                
	                if (isVerticalGrouped) {   
	                    rowCount = that._groupedView._getRowCount(this.rowLevels.length - 1);   
	                    groupsCount = that._groupedView._getGroupsCount();               
	                } else {
	                    groupsCount = that._groupCount();
	                }
	            }

	            html += '<tbody>'; 
	            html += that._groupedView._addContent(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped);
	            html += '</tbody>';

	            this.content.find("table").append(html);
	        },

	        _groups: function() {
	            var groupCount = this._groupCount();
	            var dates = this._dates;
	            var columnCount = dates.length;

	            this.groups = [];

	            for (var idx = 0; idx < groupCount; idx++) {
	                var view = this._addResourceView(idx);

	                var start = dates[0];
	                var end = dates[(dates.length - 1) || 0];
	                view.addTimeSlotCollection(start, kendo.date.addDays(end, 1));
	            }

	            this._timeSlotGroups(groupCount, columnCount);
	        },

	        _isHorizontallyGrouped: function() {
	            return this.groupedResources.length && this._groupOrientation() === "horizontal";
	        },

	        _timeSlotGroups: function (groupCount, datesCount) {
	            var interval = this._timeSlotInterval();
	            var isVerticallyGrouped = this._isVerticallyGrouped();
	            var tableRows = this.content.find("tr");

	            tableRows.attr("role", "row");       
	          
	            this._groupedView._addTimeSlotsCollections(groupCount, datesCount, tableRows, interval, isVerticallyGrouped);

	        },

	        _addTimeSlotToCollection: function(group, cells, cellIndex, cellOffset, dateIndex, time, interval){
	              var cell = cells[cellIndex+cellOffset];
	              var collection = group.getTimeSlotCollection(0);
	              var currentDate = this._dates[dateIndex];            
	              var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
	              var start = currentTime + time;     
	              var end = start + interval;
	              cell.setAttribute("role", "gridcell");
	              cell.setAttribute("aria-selected", false);

	              collection.addTimeSlot(cell, start, end, true);
	        },

	        startDate: function() {
	            return this._startDate;
	        },

	        endDate: function() {
	            return this._endDate;
	        },

	        startTime: function() {
	            var options = this.options;
	            return options.showWorkHours ? options.workDayStart : options.startTime;
	        },

	        endTime: function() {
	            var options = this.options;
	            return options.showWorkHours ? options.workDayEnd : options.endTime;
	        },

	        _timeSlotInterval: function() {
	            var options = this.options;
	            return (options.majorTick/options.minorTickCount) * MS_PER_MINUTE;
	        },

	        nextDate: function () {
	            return kendo.date.nextDay(this.endDate());
	        },
	        previousDate: function () {
	            return kendo.date.previousDay(this.startDate());
	        },

	        calculateDateRange: function() {
	            this._render([this.options.date]);
	        },

	        render: function(events) {
	            this._headerColumnCount = 0;

	            this._groups();

	            this.element.find(".k-event").remove();

	            events = new kendo.data.Query(events)
	                .sort([{ field: "start", dir: "asc" },{ field: "end", dir: "desc" }])
	                .toArray();

	            var eventsByResource = [];

	            this._eventsByResource(events, this.groupedResources, eventsByResource);

	            var eventGroups = [];
	            var maxRowCount = 0;

	            for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {
	                var eventGroup = {
	                    groupIndex: groupIndex,
	                    maxRowCount: 0,
	                    events: {}
	                };

	                eventGroups.push(eventGroup);

	                this._renderEvents(eventsByResource[groupIndex], groupIndex, eventGroup);

	                if (maxRowCount < eventGroup.maxRowCount) {
	                    maxRowCount = eventGroup.maxRowCount;
	                }
	            }

	            this._setRowsHeight(eventGroups, eventsByResource.length, maxRowCount);

	            this._positionEvents(eventGroups, eventsByResource.length);

	            this._currentTime(false);

	            this.trigger("activate");
	        },

	        _positionEvents: function(eventGroups, groupsCount) {
	            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
	                var eventsForGroup = eventGroups[groupIndex].events;
	                for (var eventUid in eventsForGroup) {
	                    var eventObject = eventsForGroup[eventUid];                   
	                    if($.isArray(eventObject)){                       
	                        for(var eventIndex = 0; eventIndex<eventObject.length; eventIndex++){
	                            this._positionEvent(eventObject[eventIndex]);
	                        }
	                    } else{
	                        this._positionEvent(eventObject);                  
	                    }
	                }
	            }
	        },

	        _setRowsHeight: function(eventGroups, groupsCount, maxRowCount) {
	            var eventHeight = this.options.eventHeight + 2;/* two times border width */
	            var eventBottomOffset = this._getBottomRowOffset();
	            var groupedView = this._groupedView;
	            var verticalGroupCount = groupedView._getVerticalGroupCount(groupsCount);

	            groupsCount = this._isVerticallyGrouped() ? verticalGroupCount : 1;

	            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
	                var rowsCount = groupedView._getVerticalRowCount(eventGroups, groupIndex, maxRowCount);

	                rowsCount = rowsCount ? rowsCount : 1;

	                var rowHeight = ((eventHeight + 2) * rowsCount) + eventBottomOffset;
	                var timesRow = $(this.times.find("tr")[groupIndex]);
	                var row = $(this.content.find("tr")[groupIndex]);

	                timesRow.height(rowHeight);
	                row.height(rowHeight);
	            }

	            this._setContentWidth();
	            this.refreshLayout();
	            this._refreshSlots();
	        },

	        _getBottomRowOffset: function() {
	            var eventBottomOffset = this.options.eventHeight * 0.50;
	            var isMobile = this._isMobile();
	            var minOffset;
	            var maxOffset;

	            if (isMobile) {
	                minOffset = 30;
	                maxOffset = 60;
	            } else {
	                minOffset = 15;
	                maxOffset = 30;
	            }

	            if (eventBottomOffset > maxOffset) {
	                eventBottomOffset = maxOffset;
	            } else if (eventBottomOffset < minOffset) {
	                eventBottomOffset = minOffset;
	            }

	            return eventBottomOffset;
	        },

	        _positionEvent: function(eventObject) {
	            var eventHeight = this.options.eventHeight + 2;

	            var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);

	            var left = this._adjustLeftPosition(rect.left);

	            var width = rect.right - rect.left - 2;

	            if (width < 0) {
	                width = 0;
	            }

	            if (width < this.options.eventMinWidth) {
	                var slotsCollection = eventObject.slotRange.collection;
	                var lastSlot = slotsCollection._slots[slotsCollection._slots.length-1];
	                var offsetRight = lastSlot.offsetLeft + lastSlot.offsetWidth;

	                width = this.options.eventMinWidth;

	                if (offsetRight < left + width) {
	                    width = offsetRight - rect.left - 2;
	                }
	            }

	            eventObject.element.css({
	                top:  eventObject.slotRange.start.offsetTop + eventObject.rowIndex * (eventHeight + 2) + "px",
	                left: left,
	                width: width
	            });
	        },

	        _refreshSlots: function() {
	            for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {
	                this.groups[groupIndex].refresh();
	            }
	        },

	        _eventsByResource: function(events, resources, result) {
	            var resource = resources[0];

	            if (resource) {
	                var view = resource.dataSource.view();

	                for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {
	                    var value = this._resourceValue(resource, view[itemIdx]);

	                    var eventsFilteredByResource = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();

	                    if (resources.length > 1) {
	                        this._eventsByResource(eventsFilteredByResource, resources.slice(1), result);
	                    } else {
	                        result.push(eventsFilteredByResource);
	                    }
	                }
	            } else {
	                result.push(events);
	            }
	        },

	        _isInDateSlot: function(event) {
	            var startTime = event.start;
	            var endTime = event.end;
	            var rangeStart = getDate(this._startDate);
	            var rangeEnd = kendo.date.addDays(getDate(this._endDate),1);

	            if (startTime < rangeEnd && rangeStart <= endTime) {
	                return true;
	            }
	            return false;
	        },

	        _isInTimeSlot: function(event) {
	            var startTime = event._startTime || kendo.date.toUtcTime(event.start);
	            var endTime = event._endTime || kendo.date.toUtcTime(event.end);

	            var slotRanges = this._slotRanges;

	            if (startTime === endTime) {
	                endTime = endTime+1;
	            }

	            for (var slotIndex = 0; slotIndex < slotRanges.length; slotIndex++) {
	                if (startTime < slotRanges[slotIndex].end && slotRanges[slotIndex].start < endTime) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        _adjustEvent: function(event) {
	            var start = event.start;
	            var end = event.end;
	            var eventStartTime = event._time("start");
	            var eventEndTime = event._time("end");
	            var startTime = getMilliseconds(this.startTime());
	            var endTime = getMilliseconds(this.endTime());
	            var adjustedStartDate = null;
	            var adjustedEndDate = null;
	            var occurrence;
	            var head = false;
	            var tail = false;

	            if (event.isAllDay) {
	                adjustedStartDate = getDate(start);
	                if (startTime > eventStartTime) {
	                    setTime(adjustedStartDate, startTime);
	                    tail = true;
	                }

	                adjustedEndDate = getDate(end);
	                if (endTime === getMilliseconds(getDate(this.endTime()))) {
	                    adjustedEndDate = kendo.date.addDays(adjustedEndDate, 1);
	                } else {
	                    setTime(adjustedEndDate, endTime);
	                    head = true;
	                }
	            } else {
	                endTime = endTime === 0 ? MS_PER_DAY : endTime;

	                if (startTime > eventStartTime) {
	                    adjustedStartDate = getDate(start);
	                    setTime(adjustedStartDate, startTime);
	                    tail = true;
	                } else if (endTime < eventStartTime) {
	                    adjustedStartDate = getDate(start);
	                    adjustedStartDate = kendo.date.addDays(adjustedStartDate, 1);
	                    setTime(adjustedStartDate, startTime);
	                    tail = true;
	                }

	                if (endTime < eventEndTime) {
	                    adjustedEndDate = getDate(end);
	                    setTime(adjustedEndDate, endTime);
	                    head = true;
	                } else if (startTime > eventEndTime) {
	                    adjustedEndDate = getDate(end);
	                    adjustedEndDate = kendo.date.addDays(adjustedEndDate,-1);
	                    setTime(adjustedEndDate, endTime);
	                    head = true;
	                }
	            }

	            occurrence = event.clone({
	                start: adjustedStartDate ? adjustedStartDate : start,
	                end: adjustedEndDate ? adjustedEndDate : end,
	                _startTime: adjustedStartDate ? kendo.date.toUtcTime(adjustedStartDate) : event._startTime,
	                _endTime:  adjustedEndDate ? kendo.date.toUtcTime(adjustedEndDate) : event._endTime,
	                isAllDay: false
	            });

	            return {
	                occurrence: occurrence,
	                head: head,
	                tail: tail
	            };
	        },

	        _renderEvents: function(events, groupIndex, eventGroup) {
	            var event;
	            var idx;
	            var length;

	            for (idx = 0, length = events.length; idx < length; idx++) {
	                event = events[idx];

	                if (this._isInDateSlot(event)) {
	                    var isMultiDayEvent = event.isAllDay || event.end.getTime() - event.start.getTime() >= MS_PER_DAY;
	                    var container = this.content;

	                    if (isMultiDayEvent || this._isInTimeSlot(event)) {
	                        var adjustedEvent = this._adjustEvent(event);
	                        var group = this.groups[groupIndex];

	                        if (!group._continuousEvents) {
	                            group._continuousEvents = [];
	                        }

	                        var ranges = group.slotRanges(adjustedEvent.occurrence, false);
	                        var range = ranges[0];
	                        var startIndex = range.start.index;
	                        var endIndex = range.end.index;
	                        if (this._isInTimeSlot(adjustedEvent.occurrence)) {
	                            this._groupedView._renderEvent(eventGroup, event, adjustedEvent, group, range, container, startIndex, endIndex);
	                        }
	                    }
	                }
	            }
	        },

	        addContinuousEvent: function(group, range, element, isAllDay) {
	            var events = group._continuousEvents;

	            events.push({
	                element: element,
	                isAllDay: isAllDay,
	                uid: element.attr(kendo.attr("uid")),
	                start: range.start,
	                end: range.end
	            });
	        },

	        _createEventElement: function(occurrence, event, head, tail) {
	            var template = this.eventTemplate;
	            var editable = this.options.editable;
	            var isMobile = this._isMobile();
	            var showDelete = editable && editable.destroy !== false && !isMobile;
	            var resizable = editable && editable.resize !== false;
	            var eventStartTime = event._time("start");
	            var eventEndTime = event._time("end");
	            var eventStartDate = event.start;
	            var eventEndDate = event.end;

	            var resources = this.eventResources(event);

	            if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {
	                eventStartDate = new Date(eventStartTime);
	                eventStartDate = kendo.timezone.apply(eventStartDate, "Etc/UTC");
	            }

	            if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {
	                eventEndDate = new Date(eventEndTime);
	                eventEndDate = kendo.timezone.apply(eventEndDate, "Etc/UTC");
	            }

	            var data = extend({}, {
	                ns: kendo.ns,
	                resizable: resizable,
	                showDelete: showDelete,
	                head: head,
	                tail: tail,
	                singleDay: this._dates.length == 1,
	                resources: resources,
	                inverseColor: resources && resources[0] ? this._shouldInverseResourceColor(resources[0]) : false
	            }, event, {
	                start: eventStartDate,
	                end: eventEndDate
	            });

	            var element = $(template(data));

	            this.angular("compile", function(){
	                return {
	                    elements: element,
	                    data: [ { dataItem: data } ]
	                };
	            });

	            return element;
	        },

	        _arrangeRows: function (eventObject, slotRange, eventGroup) {
	            var startIndex = slotRange.start.index;
	            var endIndex = slotRange.end.index;

	            var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);
	            var rectRight = rect.right + this.options.eventMinWidth;

	            var events = collidingEvents(slotRange.events(), rect.left, rectRight);

	            slotRange.addEvent({
	                slotIndex: startIndex,
	                start: startIndex,
	                end: endIndex,
	                rectLeft: rect.left,
	                rectRight: rectRight,
	                element: eventObject.element,
	                uid: eventObject.uid
	            });

	            events.push({
	                start: startIndex,
	                end: endIndex,
	                uid: eventObject.uid
	            });

	            var rows = SchedulerView.createRows(events);

	            if (eventGroup.maxRowCount < rows.length) {
	                eventGroup.maxRowCount = rows.length;
	            }

	            for (var idx = 0, length = rows.length; idx < length; idx++) {
	                var rowEvents = rows[idx].events;
	                for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {
	                    eventGroup.events[rowEvents[j].uid].rowIndex = idx;
	                }
	            }
	        },

	        _groupCount: function() {
	            var resources = this.groupedResources;
	            var groupedView = this._groupedView;

	            if (resources.length) {
	                if (this._groupOrientation() === "vertical") {
	                    return groupedView._verticalCountForLevel(resources.length - 1);
	                } else {
	                    return groupedView._horizontalCountForLevel(resources.length - 1, this.columnLevels.length - 1);
	                }
	            }
	            return 1;
	        },

	        _updateEventForSelection: function(event) {
	            var adjustedEvent = this._adjustEvent(event.clone());
	            return adjustedEvent.occurrence;
	        },

	        _eventOptionsForMove: function(event) {
	           if (event.isAllDay) {
	               return { isAllDay: false };
	           }

	            return {};
	        },

	        _updateEventForResize: function(event) {
	            if (event.isAllDay) {
	                event.set("isAllDay", false);
	            }
	        },

	        _updateMoveHint: function(event, groupIndex, distance) {
	            var group = this.groups[groupIndex];

	            var clonedEvent = event.clone({ start: event.start, end: event.end});

	            var eventDuraton =  clonedEvent.duration();
	            clonedEvent.start = new Date(clonedEvent.start.getTime() + distance);
	            clonedEvent.end = new Date(+clonedEvent.start + eventDuraton);

	            var adjustedEvent = this._adjustEvent(clonedEvent);

	            var ranges = group.slotRanges(adjustedEvent.occurrence, false);

	            this._removeMoveHint();

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                this._groupedView._createMoveHint(ranges[rangeIndex], adjustedEvent);
	            }

	            var content = this.content;

	            this._moveHint.appendTo(content);
	        },

	        _updateResizeHint: function(event, groupIndex, startTime, endTime) {
	            var group = this.groups[groupIndex];
	            var ranges = group.ranges(startTime, endTime, false, false);

	            this._removeResizeHint();

	            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {
	                var range = ranges[rangeIndex];
	                var start = range.startSlot();

	                var startRect = range.innerRect(startTime, endTime, false);
	                startRect.top = start.offsetTop;

	                var width = startRect.right - startRect.left;
	                var height = range.endSlot().offsetTop + start.offsetHeight - startRect.top;

	                var left = this._adjustLeftPosition(startRect.left);

	                var hint = SchedulerView.fn._createResizeHint.call(this,
	                    left,
	                    startRect.top,
	                    width,
	                    height
	                );

	                this._resizeHint = this._resizeHint.add(hint);
	            }

	            var format = "t";
	            var container = this.content;

	            this._resizeHint.appendTo(container);

	            this._resizeHint.find(".k-label-top,.k-label-bottom").text("");

	            this._resizeHint.first().addClass("k-first").find(".k-label-top").text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));

	            this._resizeHint.last().addClass("k-last").find(".k-label-bottom").text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));
	        },

	        selectionByElement: function(cell) {
	            var offset = cell.offset();
	            return this._slotByPosition(offset.left, offset.top);
	        },

	        _updateDirection: function(selection, ranges, multiple, reverse, vertical) {

	            var startSlot = ranges[0].start;
	            var endSlot = ranges[ranges.length - 1].end;
	            if (multiple && !vertical) {
	                if (startSlot.index === endSlot.index &&
	                    startSlot.collectionIndex === endSlot.collectionIndex) {
	                    selection.backward = reverse;
	                }
	            }
	        },

	        _changeGroup: function(selection, previous) {
	            var method = previous ? "prevGroupSlot" : "nextGroupSlot";

	            var slot = this[method](selection.start, selection.groupIndex, false);

	            if (slot) {
	                selection.groupIndex += previous ? -1 : 1;
	            }

	            this._groupedView._changeGroup(selection, previous, slot);
	            return slot;
	        },

	        prevGroupSlot: function(date, groupIndex, isDay) {
	            var group = this.groups[groupIndex];
	            var slot = group.ranges(date, date, isDay, false)[0].start;

	            if (groupIndex <= 0) {
	                return;
	            }

	            return this._groupedView._prevGroupSlot(slot, group, isDay);
	        },

	        nextGroupSlot: function(date, groupIndex, isDay) {
	            var group = this.groups[groupIndex];
	            var slot = group.ranges(date, date, isDay, false)[0].start;

	            if (groupIndex >= this.groups.length - 1) {
	                return;
	            }

	            return this._groupedView._nextGroupSlot(slot, group, isDay);
	        },

	        _verticalSlots: function (selection, ranges, multiple, reverse) {
	            var groupedView = this._groupedView;
	            var method = groupedView._verticalMethod(reverse, multiple);
	            var startSlot = ranges[0].start;
	            var endSlot = ranges[ranges.length - 1].end;
	            var group = this.groups[selection.groupIndex];
	            var slot = groupedView._normalizeVerticalSelection(selection, ranges, reverse, multiple);

	            if (slot) {
	                startSlot = endSlot = slot;
	            }

	            startSlot = group[method](startSlot);
	            endSlot = group[method](endSlot);

	            if (!multiple && this._isVerticallyGrouped() && (!startSlot || !endSlot)) {
	                startSlot = endSlot = groupedView._verticalSlots(selection, reverse, slot);
	            }

	            return {
	                startSlot: startSlot,
	                endSlot: endSlot
	            };
	        },

	        _horizontalSlots: function (selection, ranges, multiple, reverse) {
	            var method = reverse ? "upSlot" : "downSlot";
	            var startSlot = ranges[0].start;
	            var endSlot = ranges[ranges.length - 1].end;
	            var group = this.groups[selection.groupIndex];
	            var result = {};

	            if (!multiple) {
	                result = this._groupedView._horizontalSlots(selection, group, method, startSlot, endSlot, multiple, reverse);
	            } else {
	                result.startSlot = group[method](startSlot);
	                result.endSlot = group[method](endSlot);

	                if (!multiple && this._isHorizontallyGrouped() && (!startSlot || !endSlot)) {
	                    result.startSlot = result.endSlot = this._changeGroup(selection, reverse);
	                }
	            }
	            
	            return result;
	        },

	        _changeViewPeriod: function(selection, reverse) {
	            var date = reverse ? this.previousDate() : this.nextDate();
	            var start = selection.start;
	            var end = selection.end;

	            selection.start = new Date(date);
	            selection.end = new Date(date);

	            if (this._isHorizontallyGrouped()) {
	               selection.groupIndex = reverse ? this.groups.length - 1 : 0;
	            }

	            var duration = end - start;

	            if (reverse) {
	                end = getMilliseconds(this.endTime());
	                end = end === 0 ? MS_PER_DAY : end;

	                setTime(selection.start, end-duration);
	                setTime(selection.end,  end);
	            } else {
	                start = getMilliseconds(this.startTime());

	                setTime(selection.start, start);
	                setTime(selection.end, start + duration);
	            }

	            selection.events = [];

	            return true;
	        },

	        move: function(selection, key, shift) {
	            var handled = false;
	            var group = this.groups[selection.groupIndex];
	            var keys = kendo.keys;
	            var groupedView = this._groupedView;
	            var ranges = group.ranges(selection.start, selection.end, false, false);
	            var startSlot, endSlot, reverse, slots;

	            if (key === keys.DOWN || key === keys.UP) {
	                handled = true;
	                reverse = key === keys.UP;

	                groupedView._updateDirection(selection, ranges, shift, reverse);

	                slots = this._verticalSlots(selection, ranges, shift, reverse);

	                if(groupedView._changeVerticalViewPeriod(slots, shift, selection, reverse)){
	                    return handled;
	                }
	            } else if (key === keys.LEFT || key === keys.RIGHT) {
	                handled = true;
	                reverse = key === keys.LEFT;

	                this._updateDirection(selection, ranges, shift, reverse, false);

	                slots = this._horizontalSlots(selection, ranges, shift, reverse);               

	                if(groupedView._changeHorizontalViewPeriod(slots, shift, selection, reverse)){
	                     return handled;
	                }
	            }

	           if (handled) {
	               startSlot = slots.startSlot;
	               endSlot = slots.endSlot;

	               if (shift) {
	                   var backward = selection.backward;

	                   if (backward && startSlot) {
	                       selection.start = startSlot.startDate();
	                   } else if (!backward && endSlot) {
	                       selection.end = endSlot.endDate();
	                   }
	               } else if (startSlot && endSlot) {
	                   selection.start = startSlot.startDate();
	                   selection.end = endSlot.endDate();
	               }

	               selection.events = [];
	           }

	            return handled;
	        },

	        destroy: function() {
	            var that = this;

	            if (that.element) {
	                that.element.off(NS);
	            }

	            if (that.footer) {
	                that.footer.remove();
	            }

	            if (that._currentTimeUpdateTimer) {
	                clearInterval(that._currentTimeUpdateTimer);
	            }

	            SchedulerView.fn.destroy.call(this);

	            if (this._isMobile() && that.options.editable) {
	                if (that.options.editable.create !== false) {
	                    that._addUserEvents.destroy();
	                }

	                if (that.options.editable.update !== false) {
	                    that._editUserEvents.destroy();
	                }
	            }
	        }
	    });

	    extend(true, ui, {
	        TimelineView: TimelineView,
	        TimelineWeekView: TimelineView.extend({
	            options: {
	                name: "TimelineWeekView",
	                title: "Timeline Week",
	                selectedDateFormat: "{0:D} - {1:D}",
	                selectedShortDateFormat: "{0:d} - {1:d}",
	                majorTick: 120
	            },
	            name: "timelineWeek",
	            calculateDateRange: function() {
	                var selectedDate = this.options.date,
	                    start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),
	                    idx, length,
	                    dates = [];

	                for (idx = 0, length = 7; idx < length; idx++) {
	                    dates.push(start);
	                    start = kendo.date.nextDay(start);
	                }
	                this._render(dates);
	            }
	        }),
	        TimelineWorkWeekView: TimelineView.extend({
	            options: {
	                name: "TimelineWorkWeekView",
	                title: "Timeline Work Week",
	                selectedDateFormat: "{0:D} - {1:D}",
	                selectedShortDateFormat: "{0:d} - {1:d}",
	                majorTick: 120
	            },
	            name: "timelineWorkWeek",
	            nextDate: function() {
	                var weekStart = kendo.date.dayOfWeek(kendo.date.nextDay(this.endDate()), this.calendarInfo().firstDay, 1);

			return kendo.date.addDays(weekStart, this._workDays[0]);
	            },
	            previousDate: function() {
	                var weekStart = kendo.date.dayOfWeek(this.startDate(), this.calendarInfo().firstDay, -1);
		        var workDays = this._workDays;

	 		return kendo.date.addDays(weekStart, workDays[workDays.length - 1] - 7);
	            },
	            calculateDateRange: function() {
	                var selectedDate = this.options.date,
	                    start = kendo.date.dayOfWeek(selectedDate, this.options.workWeekStart, -1),
	                    end = kendo.date.dayOfWeek(start, this.options.workWeekEnd, 1),
	                    dates = [];

	                while (start <= end) {
	                    dates.push(start);
	                    start = kendo.date.nextDay(start);
	                }
	                this._render(dates);
	            }
	        }),
	        TimelineMonthView: TimelineView.extend({
	            options: {
	                name: "TimelineMonthView",
	                title: "Timeline Month",
	                selectedDateFormat: "{0:D} - {1:D}",
	                selectedShortDateFormat: "{0:d} - {1:d}",
	                workDayStart: new Date(1980, 1, 1, 0, 0, 0),
	                workDayEnd: new Date(1980, 1, 1, 23, 59, 59),
	                footer: false,
	                majorTick: 1440,
	                minorTickCount: 1
	            },
	            name: "timelineMonth",
	            calculateDateRange: function() {
	                var selectedDate = this.options.date,
	                    start = kendo.date.firstDayOfMonth(selectedDate),
	                    end = kendo.date.lastDayOfMonth(selectedDate),
	                    idx, length,
	                    dates = [];

	                for (idx = 0, length = end.getDate(); idx < length; idx++) {
	                    dates.push(start);
	                    start = kendo.date.nextDay(start);
	                }
	                this._render(dates);
	            }
	        })
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 139 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.selectable.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(832);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 598:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.userevents */ 33);

/***/ },

/***/ 832:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(598) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "selectable",
	    name: "Selectable",
	    category: "framework",
	    depends: [ "core", "userevents" ],
	    advanced: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        proxy = $.proxy,
	        abs = Math.abs,
	        ARIASELECTED = "aria-selected",
	        SELECTED = "k-state-selected",
	        ACTIVE = "k-state-selecting",
	        SELECTABLE = "k-selectable",
	        CHANGE = "change",
	        NS = ".kendoSelectable",
	        UNSELECTING = "k-state-unselecting",
	        INPUTSELECTOR = "input,a,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up",
	        msie = kendo.support.browser.msie,
	        supportEventDelegation = false;

	        (function($) {
	            (function() {
	                $('<div class="parent"><span /></div>')
	                .on("click", ">*", function() {
	                    supportEventDelegation = true;
	                })
	                .find("span")
	                .click()
	                .end()
	                .off();
	            })();
	        })($);

	    var Selectable = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                multiple;

	            Widget.fn.init.call(that, element, options);

	            that._marquee = $("<div class='k-marquee'><div class='k-marquee-color'></div></div>");
	            that._lastActive = null;
	            that.element.addClass(SELECTABLE);

	            that.relatedTarget = that.options.relatedTarget;

	            multiple = that.options.multiple;

	            if (this.options.aria && multiple) {
	                that.element.attr("aria-multiselectable", true);
	            }

	            that.userEvents = new kendo.UserEvents(that.element, {
	                global: true,
	                allowSelection: true,
	                filter: (!supportEventDelegation ? "." + SELECTABLE + " " : "") + that.options.filter,
	                tap: proxy(that._tap, that)
	            });

	            if (multiple) {
	                that.userEvents
	                   .bind("start", proxy(that._start, that))
	                   .bind("move", proxy(that._move, that))
	                   .bind("end", proxy(that._end, that))
	                   .bind("select", proxy(that._select, that));
	            }
	        },

	        events: [CHANGE],

	        options: {
	            name: "Selectable",
	            filter: ">*",
	            multiple: false,
	            relatedTarget: $.noop
	        },

	        _isElement: function(target) {
	            var elements = this.element;
	            var idx, length = elements.length, result = false;

	            target = target[0];

	            for (idx = 0; idx < length; idx ++) {
	                if (elements[idx] === target) {
	                    result = true;
	                    break;
	                }
	            }

	            return result;
	        },

	        _tap: function(e) {
	            var target = $(e.target),
	                that = this,
	                ctrlKey = e.event.ctrlKey || e.event.metaKey,
	                multiple = that.options.multiple,
	                shiftKey = multiple && e.event.shiftKey,
	                selected,
	                whichCode = e.event.which,
	                buttonCode = e.event.button;

	            //in case of hierarchy or right-click
	            if (!that._isElement(target.closest("." + SELECTABLE)) || whichCode && whichCode == 3 || buttonCode && buttonCode == 2) {
	                return;
	            }

	            if (!this._allowSelection(e.event.target)) {
	                return;
	            }

	            selected = target.hasClass(SELECTED);
	            if (!multiple || !ctrlKey) {
	                that.clear();
	            }

	            target = target.add(that.relatedTarget(target));

	            if (shiftKey) {
	                that.selectRange(that._firstSelectee(), target);
	            } else {
	                if (selected && ctrlKey) {
	                    that._unselect(target);
	                    that._notify(CHANGE);
	                } else {
	                    that.value(target);
	                }

	                that._lastActive = that._downTarget = target;
	            }
	        },

	        _start: function(e) {
	            var that = this,
	                target = $(e.target),
	                selected = target.hasClass(SELECTED),
	                currentElement,
	                ctrlKey = e.event.ctrlKey || e.event.metaKey;

	            if (!this._allowSelection(e.event.target)) {
	                return;
	            }

	            that._downTarget = target;

	            //in case of hierarchy
	            if (!that._isElement(target.closest("." + SELECTABLE))) {
	                that.userEvents.cancel();
	                return;
	            }

	            if (that.options.useAllItems) {
	                that._items = that.element.find(that.options.filter);
	            } else {
	                currentElement = target.closest(that.element);
	                that._items = currentElement.find(that.options.filter);
	            }

	            e.sender.capture();

	            that._marquee
	                .appendTo(document.body)
	                .css({
	                    left: e.x.client + 1,
	                    top: e.y.client + 1,
	                    width: 0,
	                    height: 0
	                });

	            if (!ctrlKey) {
	                that.clear();
	            }

	            target = target.add(that.relatedTarget(target));
	            if (selected) {
	                that._selectElement(target, true);
	                if (ctrlKey) {
	                    target.addClass(UNSELECTING);
	                }
	            }
	        },

	        _move: function(e) {
	            var that = this,
	                position = {
	                    left: e.x.startLocation > e.x.location ? e.x.location : e.x.startLocation,
	                    top: e.y.startLocation > e.y.location ? e.y.location : e.y.startLocation,
	                    width: abs(e.x.initialDelta),
	                    height: abs(e.y.initialDelta)
	                };

	            that._marquee.css(position);

	            that._invalidateSelectables(position, (e.event.ctrlKey || e.event.metaKey));

	            e.preventDefault();
	        },

	        _end: function() {
	            var that = this;

	            that._marquee.remove();

	            that._unselect(that.element
	                .find(that.options.filter + "." + UNSELECTING))
	                .removeClass(UNSELECTING);


	            var target = that.element.find(that.options.filter + "." + ACTIVE);
	            target = target.add(that.relatedTarget(target));

	            that.value(target);
	            that._lastActive = that._downTarget;
	            that._items = null;
	        },

	        _invalidateSelectables: function(position, ctrlKey) {
	            var idx,
	                length,
	                target = this._downTarget[0],
	                items = this._items,
	                related,
	                toSelect;

	            for (idx = 0, length = items.length; idx < length; idx ++) {
	                toSelect = items.eq(idx);
	                related = toSelect.add(this.relatedTarget(toSelect));

	                if (collision(toSelect, position)) {
	                    if(toSelect.hasClass(SELECTED)) {
	                        if(ctrlKey && target !== toSelect[0]) {
	                            related.removeClass(SELECTED).addClass(UNSELECTING);
	                        }
	                    } else if (!toSelect.hasClass(ACTIVE) && !toSelect.hasClass(UNSELECTING)) {
	                        related.addClass(ACTIVE);
	                    }
	                } else {
	                    if (toSelect.hasClass(ACTIVE)) {
	                        related.removeClass(ACTIVE);
	                    } else if(ctrlKey && toSelect.hasClass(UNSELECTING)) {
	                        related.removeClass(UNSELECTING).addClass(SELECTED);
	                    }
	                }
	            }
	        },

	        value: function(val) {
	            var that = this,
	                selectElement = proxy(that._selectElement, that);

	            if(val) {
	                val.each(function() {
	                    selectElement(this);
	                });

	                that._notify(CHANGE);
	                return;
	            }

	            return that.element.find(that.options.filter + "." + SELECTED);
	        },

	        _firstSelectee: function() {
	            var that = this,
	                selected;

	            if(that._lastActive !== null) {
	                return that._lastActive;
	            }

	            selected = that.value();
	            return selected.length > 0 ?
	                    selected[0] :
	                    that.element.find(that.options.filter)[0];
	        },

	        _selectElement: function(element, preventNotify) {
	            var toSelect = $(element),
	                isPrevented =  !preventNotify && this._notify("select", { element: element });

	            toSelect.removeClass(ACTIVE);
	            if(!isPrevented) {
	                 toSelect.addClass(SELECTED);

	                if (this.options.aria) {
	                    toSelect.attr(ARIASELECTED, true);
	                }
	            }
	        },

	        _notify: function(name, args) {
	            args = args || { };
	            return this.trigger(name, args);
	        },

	        _unselect: function(element) {
	            element.removeClass(SELECTED);

	            if (this.options.aria) {
	                element.attr(ARIASELECTED, false);
	            }

	            return element;
	        },

	        _select: function(e) {
	            if (this._allowSelection(e.event.target)) {
	                if (!msie || (msie && !$(kendo._activeElement()).is(INPUTSELECTOR))) {
	                    e.preventDefault();
	                }
	            }
	        },

	        _allowSelection: function(target) {
	            if ($(target).is(INPUTSELECTOR)) {
	                this.userEvents.cancel();
	                this._downTarget = null;
	                return false;
	            }

	            return true;
	        },

	        resetTouchEvents: function() {
	            this.userEvents.cancel();
	        },

	        clear: function() {
	            var items = this.element.find(this.options.filter + "." + SELECTED);
	            this._unselect(items);
	        },

	        selectRange: function(start, end) {
	            var that = this,
	                idx,
	                tmp,
	                items;

	            that.clear();

	            if (that.element.length > 1) {
	                items = that.options.continuousItems();
	            }

	            if (!items || !items.length) {
	                items = that.element.find(that.options.filter);
	            }

	            start = $.inArray($(start)[0], items);
	            end = $.inArray($(end)[0], items);

	            if (start > end) {
	                tmp = start;
	                start = end;
	                end = tmp;
	            }

	            if (!that.options.useAllItems) {
	                end += that.element.length - 1;
	            }

	            for (idx = start; idx <= end; idx ++ ) {
	                that._selectElement(items[idx]);
	            }

	            that._notify(CHANGE);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.element.off(NS);

	            that.userEvents.destroy();

	            that._marquee = that._lastActive = that.element = that.userEvents = null;
	        }
	    });

	    Selectable.parseOptions = function(selectable) {
	        var asLowerString = typeof selectable === "string" && selectable.toLowerCase();

	        return {
	            multiple: asLowerString && asLowerString.indexOf("multiple") > -1,
	            cell: asLowerString && asLowerString.indexOf("cell") > -1
	        };
	    };

	    function collision(element, position) {
	        if (!element.is(":visible")) {
	            return false;
	        }

	        var elementPosition = kendo.getOffset(element),
	            right = position.left + position.width,
	            bottom = position.top + position.height;

	        elementPosition.right = elementPosition.left + kendo._outerWidth(element);
	        elementPosition.bottom = elementPosition.top + kendo._outerHeight(element);

	        return !(elementPosition.left > right||
	            elementPosition.right < position.left ||
	            elementPosition.top > bottom ||
	            elementPosition.bottom < position.top);
	    }

	    kendo.ui.plugin(Selectable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 140 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.sortable.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(834);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 573:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! jquery */ 3);

/***/ },

/***/ 619:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.draganddrop */ 7);

/***/ },

/***/ 834:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {/* jshint eqnull: true */
	(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(619) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "sortable",
	    name: "Sortable",
	    category: "framework",
	    depends: [ "draganddrop" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,

	        START = "start",
	        BEFORE_MOVE = "beforeMove",
	        MOVE = "move",
	        END = "end",
	        CHANGE = "change",
	        CANCEL = "cancel",

	        ACTION_SORT = "sort",
	        ACTION_REMOVE = "remove",
	        ACTION_RECEIVE = "receive",

	        DEFAULT_FILTER = ">*",
	        MISSING_INDEX = -1;

	    function containsOrEqualTo(parent, child) {
	        try {
	            return $.contains(parent, child) || parent == child;
	        } catch (e) {
	            return false;
	        }
	    }

	    function defaultHint(element) {
	        return element.clone();
	    }

	    function defaultPlaceholder(element) {
	        return element.clone().removeAttr("id").css("visibility", "hidden");
	    }

	    var Sortable = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            if(!that.options.placeholder) {
	                that.options.placeholder = defaultPlaceholder;
	            }

	            if(!that.options.hint) {
	                that.options.hint = defaultHint;
	            }

	            that.draggable = that._createDraggable();
	        },

	        events: [
	            START,
	            BEFORE_MOVE,
	            MOVE,
	            END,
	            CHANGE,
	            CANCEL
	        ],

	        options: {
	            name: "Sortable",
	            hint: null,
	            placeholder: null,
	            filter: DEFAULT_FILTER,
	            holdToDrag: false,
	            disabled: null,
	            container: null,
	            connectWith: null,
	            handler: null,
	            cursorOffset: null,
	            axis: null,
	            ignore: null,
	            autoScroll: false,
	            cursor: "auto",
	            moveOnDragEnter: false
	        },

	        destroy: function() {
	            this.draggable.destroy();
	            Widget.fn.destroy.call(this);
	        },

	        _createDraggable: function() {
	            var that = this,
	                element = that.element,
	                options = that.options;

	            return new kendo.ui.Draggable(element, {
	                filter: options.filter,
	                hint: kendo.isFunction(options.hint) ? options.hint : $(options.hint),
	                holdToDrag: options.holdToDrag,
	                container: options.container ? $(options.container) : null,
	                cursorOffset: options.cursorOffset,
	                axis: options.axis,
	                ignore: options.ignore,
	                autoScroll: options.autoScroll,
	                dragstart: $.proxy(that._dragstart, that),
	                dragcancel: $.proxy(that._dragcancel, that),
	                drag: $.proxy(that._drag, that),
	                dragend: $.proxy(that._dragend, that)
	            });
	        },

	        _dragstart: function(e) {
	            var draggedElement = this.draggedElement = e.currentTarget,
	                disabled = this.options.disabled,
	                handler = this.options.handler,
	                _placeholder = this.options.placeholder,
	                placeholder = this.placeholder = kendo.isFunction(_placeholder) ? $(_placeholder.call(this, draggedElement)) : $(_placeholder);

	            if(disabled && draggedElement.is(disabled)) {
	                e.preventDefault();
	            } else if(handler && !$(e.initialTarget).is(handler)) {
	                e.preventDefault();
	            } else {

	                if(this.trigger(START, { item: draggedElement, draggableEvent: e })) {
	                    e.preventDefault();
	                } else {
	                    draggedElement.css("display", "none");
	                    draggedElement.before(placeholder);

	                    this._setCursor();
	                }

	            }
	        },

	        _dragcancel: function() {
	            this._cancel();
	            this.trigger(CANCEL, { item: this.draggedElement });

	            this._resetCursor();
	        },

	        _drag: function(e) {
	            var draggedElement = this.draggedElement,
	                target = this._findTarget(e),
	                targetCenter,
	                cursorOffset = { left: e.x.location, top: e.y.location },
	                offsetDelta,
	                axisDelta = { x: e.x.delta, y: e.y.delta },
	                direction,
	                sibling,
	                getSibling,
	                axis = this.options.axis,
	                moveOnDragEnter= this.options.moveOnDragEnter,
	                eventData = { item: draggedElement, list: this, draggableEvent: e };

	            if(axis === "x" || axis === "y") {
	                this._movementByAxis(axis, cursorOffset, axisDelta[axis], eventData);
	                return;
	            }

	            if(target) {
	                targetCenter = this._getElementCenter(target.element);

	                offsetDelta = {
	                    left: Math.round(cursorOffset.left - targetCenter.left),
	                    top: Math.round(cursorOffset.top - targetCenter.top)
	                };

	                $.extend(eventData, { target: target.element });

	                if(target.appendToBottom) {
	                    this._movePlaceholder(target, null, eventData);
	                    return;
	                }

	                if(target.appendAfterHidden) {
	                    this._movePlaceholder(target, "next", eventData);
	                }

	                if(this._isFloating(target.element)) { //horizontal
	                    if((axisDelta.x < 0 && moveOnDragEnter) || (!moveOnDragEnter && offsetDelta.left < 0)) {
	                        direction = "prev";
	                    } else if((axisDelta.x > 0 && moveOnDragEnter) || (!moveOnDragEnter &&  offsetDelta.left > 0)) {
	                        direction = "next";
	                    }
	                } else { //vertical
	                    if((axisDelta.y < 0  && moveOnDragEnter) || (!moveOnDragEnter &&  offsetDelta.top < 0)) {
	                        direction = "prev";
	                    } else if((axisDelta.y > 0  && moveOnDragEnter) || (!moveOnDragEnter &&  offsetDelta.top > 0)) {
	                        direction = "next";
	                    }
	                }

	                if(direction) {
	                    getSibling = (direction === "prev") ? jQuery.fn.prev : jQuery.fn.next;

	                    sibling = getSibling.call(target.element);

	                    //find the prev/next visible sibling
	                    while(sibling.length && !sibling.is(":visible")) {
	                        sibling = getSibling.call(sibling);
	                    }

	                    if(sibling[0] != this.placeholder[0]) {
	                        this._movePlaceholder(target, direction, eventData);
	                    }
	                }
	            }
	        },

	        _dragend: function(e) {
	            var placeholder = this.placeholder,
	                draggedElement = this.draggedElement,
	                draggedIndex = this.indexOf(draggedElement),
	                placeholderIndex = this.indexOf(placeholder),
	                connectWith = this.options.connectWith,
	                connectedList,
	                isDefaultPrevented,
	                eventData,
	                connectedListEventData;

	            this._resetCursor();

	            eventData = {
	                action: ACTION_SORT,
	                item: draggedElement,
	                oldIndex: draggedIndex,
	                newIndex: placeholderIndex,
	                draggableEvent: e
	            };

	            if(placeholderIndex >= 0) {
	                isDefaultPrevented = this.trigger(END, eventData);
	            } else {
	                connectedList = placeholder.parents(connectWith).getKendoSortable();

	                eventData.action = ACTION_REMOVE;
	                connectedListEventData = $.extend({}, eventData, {
	                    action: ACTION_RECEIVE,
	                    oldIndex: MISSING_INDEX,
	                    newIndex: connectedList.indexOf(placeholder)
	                });

	                isDefaultPrevented = !(!this.trigger(END, eventData) && !connectedList.trigger(END, connectedListEventData));
	            }

	            if(isDefaultPrevented || placeholderIndex === draggedIndex) {
	                this._cancel();
	                return;
	            }

	            placeholder.replaceWith(draggedElement);

	            draggedElement.show();
	            this.draggable.dropped = true;

	            eventData = {
	                action: this.indexOf(draggedElement) != MISSING_INDEX ? ACTION_SORT : ACTION_REMOVE,
	                item: draggedElement,
	                oldIndex: draggedIndex,
	                newIndex: this.indexOf(draggedElement),
	                draggableEvent: e
	            };

	            this.trigger(CHANGE, eventData);

	            if(connectedList) {
	                connectedListEventData = $.extend({}, eventData, {
	                    action: ACTION_RECEIVE,
	                    oldIndex: MISSING_INDEX,
	                    newIndex: connectedList.indexOf(draggedElement)
	                });

	                connectedList.trigger(CHANGE, connectedListEventData);
	            }

	        },

	        _findTarget: function(e) {
	            var element = this._findElementUnderCursor(e),
	                items,
	                connectWith = this.options.connectWith,
	                node;

	            if($.contains(this.element[0], element)) { //the element is part of the sortable container
	                items = this.items();
	                node = items.filter(element)[0] || items.has(element)[0];

	                return node ? { element: $(node), sortable: this } : null;
	            } else if (this.element[0] == element && this._isEmpty()) {
	                return { element: this.element, sortable: this, appendToBottom: true };
	            } else if (this.element[0] == element && this._isLastHidden()) {
	                node = this.items().eq(0);
	                return { element: node , sortable: this, appendAfterHidden: true };
	            } else if (connectWith) { //connected lists are present
	                return this._searchConnectedTargets(element, e);
	            }
	        },

	        _findElementUnderCursor: function(e) {
	            var elementUnderCursor = kendo.elementUnderCursor(e),
	                draggable = e.sender;

	            if(containsOrEqualTo(draggable.hint[0], elementUnderCursor)) {
	                draggable.hint.hide();
	                elementUnderCursor = kendo.elementUnderCursor(e);
	                // IE8 does not return the element in iframe from first attempt
	                if (!elementUnderCursor) {
	                    elementUnderCursor = kendo.elementUnderCursor(e);
	                }
	                draggable.hint.show();
	            }

	            return elementUnderCursor;
	        },

	        _searchConnectedTargets: function(element, e) {
	            var connected = $(this.options.connectWith),
	                sortableInstance,
	                items,
	                node;

	            for (var i = 0; i < connected.length; i++) {
	                sortableInstance = connected.eq(i).getKendoSortable();

	                if($.contains(connected[i], element)) {
	                    if(sortableInstance) {
	                        items = sortableInstance.items();
	                        node = items.filter(element)[0] || items.has(element)[0];

	                        if(node) {
	                            sortableInstance.placeholder = this.placeholder;
	                            return { element: $(node), sortable: sortableInstance };
	                        } else {
	                            return null;
	                        }
	                    }
	                } else if(connected[i] == element) {
	                    if(sortableInstance && sortableInstance._isEmpty()) {
	                        return { element: connected.eq(i), sortable: sortableInstance, appendToBottom: true };
	                    } else if (this._isCursorAfterLast(sortableInstance, e)) {
	                        node = sortableInstance.items().last();
	                        return { element: node, sortable: sortableInstance };
	                    }
	                }
	            }

	        },

	        _isCursorAfterLast: function(sortable, e) {
	            var lastItem = sortable.items().last(),
	                cursorOffset = { left: e.x.location, top: e.y.location },
	                lastItemOffset,
	                delta;

	            lastItemOffset = kendo.getOffset(lastItem);
	            lastItemOffset.top += outerHeight(lastItem);
	            lastItemOffset.left += outerWidth(lastItem);

	            if(this._isFloating(lastItem)) { //horizontal
	                delta = lastItemOffset.left - cursorOffset.left;
	            } else { //vertical
	                delta = lastItemOffset.top - cursorOffset.top;
	            }

	            return delta < 0 ? true : false;
	        },

	        _movementByAxis: function(axis, cursorOffset, delta, eventData) {
	            var cursorPosition = (axis === "x") ? cursorOffset.left : cursorOffset.top,
	                target = (delta < 0) ? this.placeholder.prev() : this.placeholder.next(),
	                targetCenter;

	            if (target.length && !target.is(":visible")) {
	                target = (delta <0) ? target.prev() : target.next();
	            }

	            $.extend(eventData, { target: target });
	            targetCenter = this._getElementCenter(target);

	            if (targetCenter) {
	                targetCenter = (axis === "x") ? targetCenter.left : targetCenter.top;
	            }

	            if (target.length && delta < 0 && cursorPosition - targetCenter < 0) { //prev
	                this._movePlaceholder({ element: target, sortable: this }, "prev", eventData);
	            } else if (target.length && delta > 0 && cursorPosition - targetCenter > 0) { //next
	                this._movePlaceholder({ element: target, sortable: this }, "next", eventData);
	            }
	        },

	        _movePlaceholder: function(target, direction, eventData) {
	            var placeholder = this.placeholder;

	            if (!target.sortable.trigger(BEFORE_MOVE, eventData)) {

	                if (!direction) {
	                    target.element.append(placeholder);
	                } else if (direction === "prev") {
	                    target.element.before(placeholder);
	                } else if (direction === "next") {
	                    target.element.after(placeholder);
	                }

	                target.sortable.trigger(MOVE, eventData);
	            }
	        },

	        _setCursor: function() {
	            var cursor = this.options.cursor,
	                body;

	            if(cursor && cursor !== "auto") {
	                body = $(document.body);

	                this._originalCursorType = body.css("cursor");
	                body.css({ "cursor": cursor });

	                if(!this._cursorStylesheet) {
	                    this._cursorStylesheet = $("<style>* { cursor: " + cursor + " !important; }</style>");
	                }

	                this._cursorStylesheet.appendTo(body);
	            }
	        },

	        _resetCursor: function() {
	            if(this._originalCursorType) {
	                $(document.body).css("cursor", this._originalCursorType);
	                this._originalCursorType = null;

	                this._cursorStylesheet.remove();
	            }
	        },

	        _getElementCenter: function(element) {
	            var center = element.length ? kendo.getOffset(element) : null;
	            if(center) {
	                center.top += outerHeight(element) / 2;
	                center.left += outerWidth(element) / 2;
	            }

	            return center;
	        },

	        _isFloating: function(item) {
	            return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	        },

	        _cancel: function() {
	            this.draggedElement.show();
	            this.placeholder.remove();
	        },

	        _items: function() {
	            var filter = this.options.filter,
	                items;

	            if(filter) {
	                items = this.element.find(filter);
	            } else {
	                items = this.element.children();
	            }

	            return items;
	        },

	        indexOf: function(element) {
	            var items = this._items(),
	                placeholder = this.placeholder,
	                draggedElement = this.draggedElement;

	            if(placeholder && element[0] == placeholder[0]) {
	                return items.not(draggedElement).index(element);
	            } else {
	                return items.not(placeholder).index(element);
	            }
	        },

	        items: function() {
	            var placeholder = this.placeholder,
	                items = this._items();

	            if(placeholder) {
	                items = items.not(placeholder);
	            }

	            return items;
	        },

	        _isEmpty: function() {
	            return !this.items().length;
	        },

	        _isLastHidden: function() {
	            return this.items().length === 1 && this.items().is(":hidden");
	        }

	    });

	    kendo.ui.plugin(Sortable);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(573)))

/***/ }

/******/ });

/***/ }),
/* 141 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.timepicker.js ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(876);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 876:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(596) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "timepicker",
	    name: "TimePicker",
	    category: "web",
	    description: "The TimePicker widget allows the end user to select a value from a list of predefined values or to type a new value.",
	    depends: [ "popup" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        keys = kendo.keys,
	        parse = kendo.parseDate,
	        activeElement = kendo._activeElement,
	        extractFormat = kendo._extractFormat,
	        support = kendo.support,
	        browser = support.browser,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        OPEN = "open",
	        CLOSE = "close",
	        CHANGE = "change",
	        ns = ".kendoTimePicker",
	        CLICK = "click" + ns,
	        DEFAULT = "k-state-default",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        LI = "li",
	        SPAN = "<span/>",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        MOUSEDOWN = "mousedown" + ns,
	        MS_PER_MINUTE = 60000,
	        MS_PER_DAY = 86400000,
	        SELECTED = "k-state-selected",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_SELECTED = "aria-selected",
	        ARIA_EXPANDED = "aria-expanded",
	        ARIA_HIDDEN = "aria-hidden",
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
	        ID = "id",
	        isArray = $.isArray,
	        extend = $.extend,
	        proxy = $.proxy,
	        DATE = Date,
	        TODAY = new DATE();

	    TODAY = new DATE(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate(), 0, 0, 0);

	    var TimeView = function(options) {
	        var that = this,
	            id = options.id;

	        that.options = options;
	        that._dates = [];

	        that.ul = $('<ul tabindex="-1" role="listbox" aria-hidden="true" unselectable="on" class="k-list k-reset"/>')
	                    .css({ overflow: support.kineticScrollNeeded ? "": "auto" })
	                    .on(CLICK, LI, proxy(that._click, that))
	                    .on("mouseenter" + ns, LI, function() { $(this).addClass(HOVER); })
	                    .on("mouseleave" + ns, LI, function() { $(this).removeClass(HOVER); });

	        that.list = $("<div class='k-list-container k-list-scroller' unselectable='on'/>")
	                    .append(that.ul)
	                    .on(MOUSEDOWN, preventDefault);

	        if (id) {
	            that._timeViewID = id + "_timeview";
	            that._optionID = id + "_option_selected";

	            that.ul.attr(ID, that._timeViewID);
	        }

	        that._popup();
	        that._heightHandler = proxy(that._height, that);

	        that.template = kendo.template('<li tabindex="-1" role="option" class="k-item" unselectable="on">#=data#</li>', { useWithBlock: false });
	    };

	    TimeView.prototype = {
	        current: function(candidate) {
	            var that = this,
	                active = that.options.active;

	            if (candidate !== undefined) {
	                if (that._current) {
	                    that._current
	                        .removeClass(SELECTED)
	                        .removeAttr(ARIA_SELECTED)
	                        .removeAttr(ID);
	                }

	                if (candidate) {
	                    candidate = $(candidate).addClass(SELECTED)
	                                            .attr(ID, that._optionID)
	                                            .attr(ARIA_SELECTED, true);

	                    that.scroll(candidate[0]);
	                }

	                that._current = candidate;

	                if (active) {
	                    active(candidate);
	                }
	            } else {
	                return that._current;
	            }
	        },

	        close: function() {
	            this.popup.close();
	        },

	        destroy: function() {
	            var that = this;

	            that.ul.off(ns);
	            that.list.off(ns);
	            that.popup.destroy();
	        },

	        open: function() {
	            var that = this;

	            if (!that.ul[0].firstChild) {
	                that.bind();
	            }

	            that.popup.open();
	            if (that._current) {
	                that.scroll(that._current[0]);
	            }
	        },

	        dataBind: function(dates) {
	            var that = this,
	                options = that.options,
	                format = options.format,
	                toString = kendo.toString,
	                template = that.template,
	                length = dates.length,
	                idx = 0,
	                date,
	                html = "";

	            for (; idx < length; idx++) {
	                date = dates[idx];

	                if (isInRange(date, options.min, options.max)) {
	                    html += template(toString(date, format, options.culture));
	                }
	            }

	            that._html(html);
	        },

	        refresh: function() {
	            var that = this,
	                options = that.options,
	                format = options.format,
	                offset = dst(),
	                ignoreDST = offset < 0,
	                min = options.min,
	                max = options.max,
	                msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                msInterval = options.interval * MS_PER_MINUTE,
	                toString = kendo.toString,
	                template = that.template,
	                start = new DATE(+min),
	                startDay = start.getDate(),
	                msStart, lastIdx,
	                idx = 0, length,
	                html = "";

	            if (ignoreDST) {
	                length = (MS_PER_DAY + (offset * MS_PER_MINUTE)) / msInterval;
	            } else {
	                length = MS_PER_DAY / msInterval;
	            }


	            if (msMin != msMax) {
	                if (msMin > msMax) {
	                    msMax += MS_PER_DAY;
	                }

	                length = ((msMax - msMin) / msInterval) + 1;
	            }

	            lastIdx = parseInt(length, 10);

	            for (; idx < length; idx++) {
	                if (idx) {
	                    setTime(start, msInterval, ignoreDST);
	                }

	                if (msMax && lastIdx == idx) {
	                    msStart = getMilliseconds(start);
	                    if (startDay < start.getDate()) {
	                        msStart += MS_PER_DAY;
	                    }

	                    if (msStart > msMax) {
	                        start = new DATE(+max);
	                    }
	                }

	                that._dates.push(getMilliseconds(start));
	                html += template(toString(start, format, options.culture));
	            }

	            that._html(html);
	        },

	        bind: function() {
	            var that = this,
	                dates = that.options.dates;

	            if (dates && dates[0]) {
	                that.dataBind(dates);
	            } else {
	                that.refresh();
	            }
	        },

	        _html: function(html) {
	            var that = this;

	            that.ul[0].innerHTML = html;

	            that.popup.unbind(OPEN, that._heightHandler);
	            that.popup.one(OPEN, that._heightHandler);

	            that.current(null);
	            that.select(that._value);
	        },

	        scroll: function(item) {
	            if (!item) {
	                return;
	            }

	            var content = this.list[0],
	                itemOffsetTop = item.offsetTop,
	                itemOffsetHeight = item.offsetHeight,
	                contentScrollTop = content.scrollTop,
	                contentOffsetHeight = content.clientHeight,
	                bottomDistance = itemOffsetTop + itemOffsetHeight;

	                if (contentScrollTop > itemOffsetTop) {
	                    contentScrollTop = itemOffsetTop;
	                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
	                    contentScrollTop = (bottomDistance - contentOffsetHeight);
	                }

	                content.scrollTop = contentScrollTop;
	        },

	        select: function(li) {
	            var that = this,
	                options = that.options,
	                current = that._current,
	                selection;

	            if (li instanceof Date) {
	                li = kendo.toString(li, options.format, options.culture);
	            }

	            if (typeof li === "string") {
	                if (!current || current.text() !== li) {
	                    li = $.grep(that.ul[0].childNodes, function(node) {
	                        return (node.textContent || node.innerText) == li;
	                    });

	                    li = li[0] ? li : null;
	                } else {
	                    li = current;
	                }
	            }
	            selection = that._distinctSelection(li);
	            that.current(selection);
	        },

	        _distinctSelection: function(selection) {
	            var that = this,
	                currentValue,
	                selectionIndex;

	            if (selection && selection.length > 1) {
	                currentValue = getMilliseconds(that._value);
	                selectionIndex = $.inArray(currentValue, that._dates);
	                selection = that.ul.children()[selectionIndex];
	            }

	            return selection;
	        },

	        setOptions: function(options) {
	            var old = this.options;

	            options.min = parse(options.min);
	            options.max = parse(options.max);

	            this.options = extend(old, options, {
	                active: old.active,
	                change: old.change,
	                close: old.close,
	                open: old.open
	            });

	            this.bind();
	        },

	        toggle: function() {
	            var that = this;

	            if (that.popup.visible()) {
	                that.close();
	            } else {
	                that.open();
	            }
	        },

	        value: function(value) {
	            var that = this;

	            that._value = value;
	            if (that.ul[0].firstChild) {
	                that.select(value);
	            }
	        },

	        _click: function(e) {
	            var that = this,
	                li = $(e.currentTarget),
	                date = li.text(),
	                dates = that.options.dates;

	            if (dates && dates.length > 0) {
	                date = dates[li.index()];
	            }

	            if (!e.isDefaultPrevented()) {
	                that.select(li);
	                that.options.change(date, true);
	                that.close();
	            }
	        },

	        _height: function() {
	            var that = this;
	            var list = that.list;
	            var parent = list.parent(".k-animation-container");
	            var height = that.options.height;

	            if (that.ul[0].children.length) {
	                list.add(parent)
	                    .show()
	                    .height(that.ul[0].scrollHeight > height ? height : "auto")
	                    .hide();
	            }
	        },

	        _parse: function(value) {
	            var that = this,
	                options = that.options,
	                current = that._value || TODAY;

	            if (value instanceof DATE) {
	                return value;
	            }

	            value = parse(value, options.parseFormats, options.culture);

	            if (value) {
	                value = new DATE(current.getFullYear(),
	                                 current.getMonth(),
	                                 current.getDate(),
	                                 value.getHours(),
	                                 value.getMinutes(),
	                                 value.getSeconds(),
	                                 value.getMilliseconds());
	            }

	            return value;
	        },

	        _adjustListWidth: function() {
	            var list = this.list,
	                width = list[0].style.width,
	                wrapper = this.options.anchor,
	                computedStyle, computedWidth,
	                outerWidth = kendo._outerWidth;

	            if (!list.data("width") && width) {
	                return;
	            }

	            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
	            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);

	            if (computedStyle && (browser.mozilla || browser.msie)) { // getComputedStyle returns different box in FF and IE.
	                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
	            }

	            width = computedWidth - (outerWidth(list) - list.width());

	            list.css({
	                fontFamily: wrapper.css("font-family"),
	                width: width
	            })
	            .data("width", width);
	        },

	        _popup: function() {
	            var that = this,
	                list = that.list,
	                options = that.options,
	                anchor = options.anchor;

	            that.popup = new ui.Popup(list, extend(options.popup, {
	                anchor: anchor,
	                open: options.open,
	                close: options.close,
	                animation: options.animation,
	                isRtl: support.isRtl(options.anchor)
	            }));
	        },

	        move: function(e) {
	            var that = this,
	                key = e.keyCode,
	                ul = that.ul[0],
	                current = that._current,
	                down = key === keys.DOWN;

	            if (key === keys.UP || down) {
	                if (e.altKey) {
	                    that.toggle(down);
	                    return;
	                } else if (down) {
	                    current = current ? current[0].nextSibling : ul.firstChild;
	                } else {
	                    current = current ? current[0].previousSibling : ul.lastChild;
	                }

	                if (current) {
	                    that.select(current);
	                }

	                that.options.change(that._current.text());
	                e.preventDefault();

	            } else if (key === keys.ENTER || key === keys.TAB || key === keys.ESC) {
	                e.preventDefault();
	                if (current) {
	                    that.options.change(current.text(), true);
	                }
	                that.close();
	            }
	        }
	    };

	    function setTime(date, time, ignoreDST) {
	        var offset = date.getTimezoneOffset(),
	            offsetDiff;

	        date.setTime(date.getTime() + time);

	        if (!ignoreDST) {
	            offsetDiff = date.getTimezoneOffset() - offset;
	            date.setTime(date.getTime() + offsetDiff * MS_PER_MINUTE);
	        }
	    }

	    function dst() {
	        var today = new DATE(),
	            midnight = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),
	            noon = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);

	        return -1 * (midnight.getTimezoneOffset() - noon.getTimezoneOffset());
	    }

	    function getMilliseconds(date) {
	        return date.getHours() * 60 * MS_PER_MINUTE + date.getMinutes() * MS_PER_MINUTE + date.getSeconds() * 1000 + date.getMilliseconds();
	    }

	    function isInRange(value, min, max) {
	        var msMin = getMilliseconds(min),
	            msMax = getMilliseconds(max),
	            msValue;

	        if (!value || msMin == msMax) {
	            return true;
	        }

	        msValue = getMilliseconds(value);

	        if (msMin > msValue) {
	            msValue += MS_PER_DAY;
	        }

	        if (msMax < msMin) {
	            msMax += MS_PER_DAY;
	        }

	        return msValue >= msMin && msValue <= msMax;
	    }

	    TimeView.getMilliseconds = getMilliseconds;

	    kendo.TimeView = TimeView;

	    var TimePicker = Widget.extend({
	        init: function(element, options) {
	            var that = this, ul, timeView, disabled;

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            options.min = parse(element.attr("min")) || parse(options.min);
	            options.max = parse(element.attr("max")) || parse(options.max);

	            normalize(options);

	            that._initialOptions = extend({}, options);

	            that._wrapper();

	            that.timeView = timeView = new TimeView(extend({}, options, {
	                id: element.attr(ID),
	                anchor: that.wrapper,
	                format: options.format,
	                change: function(value, trigger) {
	                    if (trigger) {
	                        that._change(value);
	                    } else {
	                        element.val(value);
	                    }
	                },
	                open: function(e) {
	                    that.timeView._adjustListWidth();

	                    if (that.trigger(OPEN)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, true);
	                        ul.attr(ARIA_HIDDEN, false);
	                    }
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, false);
	                        ul.attr(ARIA_HIDDEN, true);
	                    }
	                },
	                active: function(current) {
	                    element.removeAttr(ARIA_ACTIVEDESCENDANT);
	                    if (current) {
	                        element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
	                    }
	                }
	            }));
	            ul = timeView.ul;

	            that._icon();
	            that._reset();

	            try {
	                element[0].setAttribute("type", "text");
	            } catch(e) {
	                element[0].type = "text";
	            }

	            element.addClass("k-input")
	                   .attr({
	                        "role": "combobox",
	                        "aria-expanded": false,
	                        "aria-owns": timeView._timeViewID
	                   });

	            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }

	            that._old = that._update(options.value || that.element.val());
	            that._oldText = element.val();

	            kendo.notify(that);
	        },

	        options: {
	            name: "TimePicker",
	            min: TODAY,
	            max: TODAY,
	            format: "",
	            dates: [],
	            parseFormats: [],
	            value: null,
	            interval: 30,
	            height: 200,
	            animation: {}
	        },

	        events: [
	         OPEN,
	         CLOSE,
	         CHANGE
	        ],

	        setOptions: function(options) {
	            var that = this;
	            var value = that._value;

	            Widget.fn.setOptions.call(that, options);
	            options = that.options;

	            normalize(options);

	            that.timeView.setOptions(options);

	            if (value) {
	                that.element.val(kendo.toString(value, options.format, options.culture));
	            }
	        },

	        dataBind: function(dates) {
	            if (isArray(dates)) {
	                this.timeView.dataBind(dates);
	            }
	        },

	        _editable: function(options) {
	            var that = this,
	                disable = options.disable,
	                readonly = options.readonly,
	                arrow = that._arrow.off(ns),
	                element = that.element.off(ns),
	                wrapper = that._inputWrapper.off(ns);

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .on("keydown" + ns, proxy(that._keydown, that))
	                       .on("focusout" + ns, proxy(that._blur, that))
	                       .on("focus" + ns, function() {
	                           that._inputWrapper.addClass(FOCUSED);
	                       });

	               arrow.on(CLICK, proxy(that._click, that))
	                   .on(MOUSEDOWN, preventDefault);
	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.timeView.destroy();

	            that.element.off(ns);
	            that._arrow.off(ns);
	            that._inputWrapper.off(ns);

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        close: function() {
	            this.timeView.close();
	        },

	        open: function() {
	            this.timeView.open();
	        },

	        min: function (value) {
	            return this._option("min", value);
	        },

	        max: function (value) {
	            return this._option("max", value);
	        },

	        value: function(value) {
	            var that = this;

	            if (value === undefined) {
	                return that._value;
	            }

	            that._old = that._update(value);

	            if (that._old === null) {
	                that.element.val("");
	            }

	            that._oldText = that.element.val();
	        },

	        _blur: function() {
	            var that = this,
	                value = that.element.val();

	            that.close();
	            if (value !== that._oldText) {
	                that._change(value);
	            }
	            that._inputWrapper.removeClass(FOCUSED);
	        },

	        _click: function() {
	            var that = this,
	                element = that.element;

	            that.timeView.toggle();

	            if (!support.touch && element[0] !== activeElement()) {
	                element.focus();
	            }
	        },

	        _change: function(value) {
	            var that = this;

	            value = that._update(value);

	            if (+that._old != +value) {
	                that._old = value;
	                that._oldText = that.element.val();

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _icon: function() {
	            var that = this,
	                element = that.element,
	                arrow;

	            arrow = element.next("span.k-select");

	            if (!arrow[0]) {
	                arrow = $('<span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-clock"></span></span>').insertAfter(element);
	            }

	            that._arrow = arrow.attr({
	                "role": "button",
	                "aria-controls": that.timeView._timeViewID
	            });
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode,
	                timeView = that.timeView,
	                value = that.element.val();

	            if (timeView.popup.visible() || e.altKey) {
	                timeView.move(e);
	            } else if (key === keys.ENTER && value !== that._oldText) {
	                that._change(value);
	            } else {
	                that._typing = true;
	            }
	        },

	        _option: function(option, value) {
	            var that = this,
	                options = that.options;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = that.timeView._parse(value);

	            if (!value) {
	                return;
	            }

	            value = new DATE(+value);

	            options[option] = value;
	            that.timeView.options[option] = value;
	            that.timeView.bind();
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                timeView = that.timeView,
	                date = timeView._parse(value);

	            if (!isInRange(date, options.min, options.max)) {
	                date = null;
	            }

	            that._value = date;
	            that.element.val(kendo.toString(date || value, options.format, options.culture));
	            timeView.value(date);

	            return date;
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper;

	            wrapper = element.parents(".k-timepicker");

	            if (!wrapper[0]) {
	                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
	                wrapper = wrapper.wrap(SPAN).parent();
	            }

	            wrapper[0].style.cssText = element[0].style.cssText;
	            that.wrapper = wrapper.addClass("k-widget k-timepicker k-header")
	                                  .addClass(element[0].className);

	            element.css({
	                width: "100%",
	                height: element[0].style.height
	            });

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    that.value(element[0].defaultValue);
	                    that.max(that._initialOptions.max);
	                    that.min(that._initialOptions.min);
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        }
	    });

	    function normalize(options) {
	        var parseFormats = options.parseFormats;

	        options.format = extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.t);

	        parseFormats = isArray(parseFormats) ? parseFormats : [parseFormats];
	        parseFormats.splice(0, 0, options.format);
	        options.parseFormats = parseFormats;
	    }

	    function preventDefault(e) {
	        e.preventDefault();
	    }

	    ui.plugin(TimePicker);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 142 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.tooltip.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(879);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 573:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! jquery */ 3);

/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 596:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.popup */ 4);

/***/ },

/***/ 879:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(596) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "tooltip",
	    name: "Tooltip",
	    category: "web",
	    description: "The Tooltip widget displays a popup hint for a given html element.",
	    depends: [ "core", "popup" ],
	    features: [ {
	        id: "tooltip-fx",
	        name: "Animation",
	        description: "Support for animation",
	        depends: [ "fx" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        Popup = kendo.ui.Popup,
	        isFunction = kendo.isFunction,
	        isPlainObject = $.isPlainObject,
	        extend = $.extend,
	        proxy = $.proxy,
	        DOCUMENT = $(document),
	        isLocalUrl = kendo.isLocalUrl,
	        ARIAIDSUFFIX = "_tt_active",
	        DESCRIBEDBY = "aria-describedby",
	        SHOW = "show",
	        HIDE = "hide",
	        ERROR = "error",
	        CONTENTLOAD = "contentLoad",
	        REQUESTSTART = "requestStart",
	        KCONTENTFRAME = "k-content-frame",
	        TEMPLATE = '<div role="tooltip" class="k-widget k-tooltip#if (!autoHide) {# k-tooltip-closable#}#">#if (!autoHide) {# <div class="k-tooltip-button"><a href="\\#" class="k-icon k-i-close" title="Close"></a></div> #}#' +
	                '<div class="k-tooltip-content"></div>' +
	                '#if (callout){ #<div class="k-callout k-callout-#=dir#"></div>#}#' +
	            '</div>',
	        IFRAMETEMPLATE = kendo.template(
	        "<iframe frameborder='0' class='" + KCONTENTFRAME + "' " +
	                "src='#= content.url #'>" +
	                    "This page requires frames in order to show content" +
	        "</iframe>"),
	        NS = ".kendoTooltip",
	        POSITIONS = {
	            bottom: {
	                origin: "bottom center",
	                position: "top center"
	            },
	            top: {
	                origin: "top center",
	                position: "bottom center"
	            },
	            left: {
	                origin: "center left",
	                position: "center right",
	                collision: "fit flip"
	            },
	            right: {
	                origin: "center right",
	                position: "center left",
	                collision: "fit flip"
	            },
	            center: {
	                position: "center center",
	                origin: "center center"
	            }
	        },
	        REVERSE = {
	            "top": "bottom",
	            "bottom": "top",
	            "left": "right",
	            "right": "left",
	            "center": "center"
	        },
	        DIRCLASSES = {
	            bottom: "n",
	            top: "s",
	            left: "e",
	            right: "w",
	            center: "n"
	        },
	        DIMENSIONS = {
	            "horizontal": { offset: "top", size: "outerHeight" },
	            "vertical": { offset: "left", size: "outerWidth" }
	        },
	        DEFAULTCONTENT = function(e) {
	            return e.target.data(kendo.ns + "title");
	        };

	    function restoreTitle(element) {
	        while(element.length) {
	            restoreTitleAttributeForElement(element);
	            element = element.parent();
	        }
	    }

	    function restoreTitleAttributeForElement(element) {
	        var title = element.data(kendo.ns + "title");
	        if (title) {
	            element.attr("title", title);
	            element.removeData(kendo.ns + "title");
	        }
	    }

	    function saveTitleAttributeForElement(element) {
	        var title = element.attr("title");
	        if (title) {
	            element.data(kendo.ns + "title", title);
	            element.attr("title", "");
	        }
	    }

	    function saveTitleAttributes(element) {
	        while(element.length && !element.is("body")) {
	            saveTitleAttributeForElement(element);
	            element = element.parent();
	        }
	    }

	    var Tooltip = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                axis;

	            Widget.fn.init.call(that, element, options);

	            axis = that.options.position.match(/left|right/) ? "horizontal" : "vertical";

	            that.dimensions = DIMENSIONS[axis];

	            that._documentKeyDownHandler = proxy(that._documentKeyDown, that);

	            that.element
	                .on(that.options.showOn + NS, that.options.filter, proxy(that._showOn, that))
	                .on("mouseenter" + NS, that.options.filter, proxy(that._mouseenter, that));

	            if (this.options.autoHide) {
	                that.element.on("mouseleave" + NS, that.options.filter, proxy(that._mouseleave, that));
	            }
	        },

	        options: {
	            name: "Tooltip",
	            filter: "",
	            content: DEFAULTCONTENT,
	            showAfter: 100,
	            callout: true,
	            position: "bottom",
	            showOn: "mouseenter",
	            autoHide: true,
	            width: null,
	            height: null,
	            animation: {
	                open: {
	                    effects: "fade:in",
	                    duration: 0
	                },
	                close: {
	                    effects: "fade:out",
	                    duration: 40,
	                    hide: true
	                }
	            }
	        },

	        events: [ SHOW, HIDE, CONTENTLOAD, ERROR, REQUESTSTART ],

	        _mouseenter: function(e) {
	            saveTitleAttributes($(e.currentTarget));
	        },

	        _showOn: function(e) {
	            var that = this;

	            var currentTarget = $(e.currentTarget);
	            if (that.options.showOn && that.options.showOn.match(/click|focus/)) {
	                that._show(currentTarget);
	            } else {
	                clearTimeout(that.timeout);

	                that.timeout = setTimeout(function() {
	                    that._show(currentTarget);
	                }, that.options.showAfter);
	            }
	        },

	        _appendContent: function(target) {
	            var that = this,
	                contentOptions = that.options.content,
	                element = that.content,
	                showIframe = that.options.iframe,
	                iframe;

	            if (isPlainObject(contentOptions) && contentOptions.url) {
	                if (!("iframe" in that.options)) {
	                    showIframe = !isLocalUrl(contentOptions.url);
	                }

	                that.trigger(REQUESTSTART, { options: contentOptions, target: target });

	                if (!showIframe) {
	                    element.empty();
	                    kendo.ui.progress(element, true);

	                    // perform AJAX request
	                    that._ajaxRequest(contentOptions);
	                } else {
	                    element.hide();

	                    iframe = element.find("." + KCONTENTFRAME)[0];

	                    if (iframe) {
	                        // refresh existing iframe
	                        iframe.src = contentOptions.url || iframe.src;
	                    } else {
	                        element.html(IFRAMETEMPLATE({ content: contentOptions }));
	                    }

	                    element.find("." + KCONTENTFRAME)
	                        .off("load" + NS)
	                        .on("load" + NS, function(){
	                            that.trigger(CONTENTLOAD);
	                            element.show();
	                        });
	                }
	            } else if (contentOptions && isFunction(contentOptions)) {
	                contentOptions = contentOptions({ sender: this, target: target });
	                element.html(contentOptions || "");
	            } else {
	                element.html(contentOptions);
	            }

	            that.angular("compile", function(){
	                return { elements: element };
	            });
	        },

	        _ajaxRequest: function(options) {
	            var that = this;

	            jQuery.ajax(extend({
	                type: "GET",
	                dataType: "html",
	                cache: false,
	                error: function (xhr, status) {
	                    kendo.ui.progress(that.content, false);

	                    that.trigger(ERROR, { status: status, xhr: xhr });
	                },
	                success: proxy(function (data) {
	                    kendo.ui.progress(that.content, false);

	                    that.content.html(data);

	                    that.trigger(CONTENTLOAD);
	                }, that)
	            }, options));
	        },

	        _documentKeyDown: function(e) {
	            if (e.keyCode === kendo.keys.ESC) {
	                this.hide();
	            }
	        },

	        refresh: function() {
	            var that = this,
	                popup = that.popup;

	            if (popup && popup.options.anchor) {
	                that._appendContent(popup.options.anchor);
	            }
	        },

	        hide: function() {
	            if (this.popup) {
	                this.popup.close();
	            }
	        },

	        show: function(target) {
	            target = target || this.element;

	            saveTitleAttributes(target);
	            this._show(target);
	        },

	        _show: function(target) {
	            var that = this,
	                current = that.target();

	            if (!that.popup) {
	                that._initPopup();
	            }

	            if (current && current[0] != target[0]) {
	                that.popup.close();
	                that.popup.element.kendoStop(true, true);// animation can be too long to hide the element before it is shown again
	            }

	            if (!current || current[0] != target[0]) {
	                that._appendContent(target);
	                that.popup.options.anchor = target;
	            }

	            that.popup.one("deactivate", function() {
	                restoreTitle(target);
	                target.removeAttr(DESCRIBEDBY);

	                this.element
	                    .removeAttr("id")
	                    .attr("aria-hidden", true);

	                DOCUMENT.off("keydown" + NS, that._documentKeyDownHandler);
	            });

	            that.popup.open();
	        },

	        _initPopup: function() {
	            var that = this,
	                options = that.options,
	                wrapper = $(kendo.template(TEMPLATE)({
	                    callout: options.callout && options.position !== "center",
	                    dir: DIRCLASSES[options.position],
	                    autoHide: options.autoHide
	                }));

	            that.popup = new Popup(wrapper, extend({
	                activate: function() {
	                    var anchor = this.options.anchor,
	                        ariaId = anchor[0].id || that.element[0].id;

	                    if (ariaId) {
	                        anchor.attr(DESCRIBEDBY, ariaId + ARIAIDSUFFIX);
	                        this.element.attr("id", ariaId + ARIAIDSUFFIX);
	                    }

	                    if (options.callout) {
	                        that._positionCallout();
	                    }

	                    this.element.removeAttr("aria-hidden");

	                    DOCUMENT.on("keydown" + NS, that._documentKeyDownHandler);

	                    that.trigger(SHOW);
	                },
	                close: function() {
	                    that.trigger(HIDE);
	                },
	                copyAnchorStyles: false,
	                animation: options.animation
	            }, POSITIONS[options.position]));

	            wrapper.css({
	                width: options.width,
	                height: options.height
	            });

	            that.content = wrapper.find(".k-tooltip-content");
	            that.arrow = wrapper.find(".k-callout");

	            if (options.autoHide) {
	                wrapper.on("mouseleave" + NS, proxy(that._mouseleave, that));
	            } else {
	                wrapper.on("click" + NS, ".k-tooltip-button", proxy(that._closeButtonClick, that));
	            }
	        },

	        _closeButtonClick: function(e) {
	            e.preventDefault();
	            this.hide();
	        },

	        _mouseleave: function(e) {
	            if (this.popup) {
	                var element = $(e.currentTarget),
	                    offset = element.offset(),
	                    pageX = e.pageX,
	                    pageY = e.pageY;

	                offset.right = offset.left + kendo._outerWidth(element);
	                offset.bottom = offset.top + kendo._outerHeight(element);

	                if (pageX > offset.left && pageX < offset.right && pageY > offset.top && pageY < offset.bottom) {
	                    return;
	                }

	                this.popup.close();
	            } else {
	                restoreTitle($(e.currentTarget));
	            }
	            clearTimeout(this.timeout);
	        },

	        _positionCallout: function() {
	            var that = this,
	                position = that.options.position,
	                dimensions = that.dimensions,
	                offset = dimensions.offset,
	                popup = that.popup,
	                anchor = popup.options.anchor,
	                anchorOffset = $(anchor).offset(),
	                arrowBorder = parseInt(that.arrow.css("border-top-width"), 10),
	                elementOffset = $(popup.element).offset(),
	                cssClass = DIRCLASSES[popup.flipped ? REVERSE[position] : position],
	                offsetAmount = anchorOffset[offset] - elementOffset[offset] + ($(anchor)[dimensions.size]() / 2) - arrowBorder;

	           that.arrow
	               .removeClass("k-callout-n k-callout-s k-callout-w k-callout-e")
	               .addClass("k-callout-" + cssClass)
	               .css(offset, offsetAmount);
	        },

	        target: function() {
	            if (this.popup) {
	                return this.popup.options.anchor;
	            }
	            return null;
	        },

	        destroy: function() {
	            var popup = this.popup;

	            if (popup) {
	                popup.element.off(NS);
	                popup.destroy();
	            }

	            clearTimeout(this.timeout);

	            this.element.off(NS);

	            DOCUMENT.off("keydown" + NS, this._documentKeyDownHandler);

	            Widget.fn.destroy.call(this);
	        }
	    });

	    kendo.ui.plugin(Tooltip);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(573)))

/***/ }

/******/ });

/***/ }),
/* 143 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/kendo.view.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(896);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 574:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.core */ 0);

/***/ },

/***/ 614:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.fx */ 30);

/***/ },

/***/ 618:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./kendo.binder */ 28);

/***/ },

/***/ 896:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(574), __webpack_require__(618), __webpack_require__(614) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "view",
	    name: "View",
	    category: "framework",
	    description: "The View class instantiates and handles the events of a certain screen from the application.",
	    depends: [ "core", "binder", "fx" ],
	    hidden: false
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Observable = kendo.Observable,
	        SCRIPT = "SCRIPT",
	        INIT = "init",
	        SHOW = "show",
	        HIDE = "hide",
	        TRANSITION_START = "transitionStart",
	        TRANSITION_END = "transitionEnd",

	        ATTACH = "attach",
	        DETACH = "detach",
	        sizzleErrorRegExp = /unrecognized expression/;

	    var View = Observable.extend({
	        init: function(content, options) {
	            var that = this;
	            options = options || {};

	            Observable.fn.init.call(that);
	            that.content = content;
	            that.id = kendo.guid();
	            that.tagName = options.tagName || "div";
	            that.model = options.model;
	            that._wrap = options.wrap !== false;
	            this._evalTemplate = options.evalTemplate || false;
	            that._fragments = {};

	            that.bind([ INIT, SHOW, HIDE, TRANSITION_START, TRANSITION_END ], options);
	        },

	        render: function(container) {
	            var that = this,
	                notInitialized = !that.element;

	            // The order below matters - kendo.bind should happen when the element is in the DOM, and show should be triggered after init.

	            if (notInitialized) {
	                that.element = that._createElement();
	            }

	            if (container) {
	                $(container).append(that.element);
	            }

	            if (notInitialized) {
	                kendo.bind(that.element, that.model);
	                that.trigger(INIT);
	            }

	            if (container) {
	                that._eachFragment(ATTACH);
	                that.trigger(SHOW);
	            }

	            return that.element;
	        },

	        clone: function() {
	            return new ViewClone(this);
	        },

	        triggerBeforeShow: function() {
	            return true;
	        },

	        triggerBeforeHide: function() {
	            return true;
	        },

	        showStart: function() {
	            this.element.css("display", "");
	        },

	        showEnd: function() {
	        },

	        hideEnd: function() {
	            this.hide();
	        },

	        beforeTransition: function(type){
	            this.trigger(TRANSITION_START, { type: type });
	        },

	        afterTransition: function(type){
	            this.trigger(TRANSITION_END, { type: type });
	        },

	        hide: function() {
	            this._eachFragment(DETACH);
	            this.element.detach();
	            this.trigger(HIDE);
	        },

	        destroy: function() {
	            var element = this.element;

	            if (element) {
	                kendo.unbind(element);
	                kendo.destroy(element);
	                element.remove();
	            }
	        },

	        fragments: function(fragments) {
	            $.extend(this._fragments, fragments);
	        },

	        _eachFragment: function(methodName) {
	            for (var placeholder in this._fragments) {
	                this._fragments[placeholder][methodName](this, placeholder);
	            }
	        },

	        _createElement: function() {
	            var that = this,
	                wrapper = "<" + that.tagName + " />",
	                element,
	                content;

	            try {
	                content = $(document.getElementById(that.content) || that.content); // support passing id without #

	                if (content[0].tagName === SCRIPT) {
	                    content = content.html();
	                }
	            } catch(e) {
	                if (sizzleErrorRegExp.test(e.message)) {
	                    content = that.content;
	                }
	            }

	            if (typeof content === "string") {
	                content = content.replace(/^\s+|\s+$/g, '');
	                if (that._evalTemplate) {
	                    content = kendo.template(content)(that.model || {});
	                }

	                element = $(wrapper).append(content);
	                // drop the wrapper if asked - this seems like the easiest (although not very intuitive) way to avoid messing up templates with questionable content, like this one for instance:
	                // <script id="my-template">
	                // foo
	                // <span> Span </span>
	                // </script>
	                if (!that._wrap) {
	                   element = element.contents();
	                }
	            } else {
	                element = content;
	                if (that._evalTemplate) {
	                    var result = $(kendo.template($("<div />").append(element.clone(true)).html())(that.model || {}));

	                    // template uses DOM
	                    if ($.contains(document, element[0])) {
	                        element.replaceWith(result);
	                    }

	                    element = result;
	                }
	                if (that._wrap) {
	                    element = element.wrapAll(wrapper).parent();
	                }
	            }

	            return element;
	        }
	    });

	    var ViewClone = kendo.Class.extend({
	        init: function(view) {
	            $.extend(this, {
	                element: view.element.clone(true),
	                transition: view.transition,
	                id: view.id
	            });

	            view.element.parent().append(this.element);
	        },

	        hideEnd: function() {
	            this.element.remove();
	        },

	        beforeTransition: $.noop,
	        afterTransition: $.noop
	    });

	    var Layout = View.extend({
	        init: function(content, options) {
	            View.fn.init.call(this, content, options);
	            this.containers = {};
	        },

	        container: function(selector) {
	            var container = this.containers[selector];

	            if (!container) {
	                container = this._createContainer(selector);
	                this.containers[selector] = container;
	            }

	            return container;
	        },

	        showIn: function(selector, view, transition) {
	            this.container(selector).show(view, transition);
	        },

	        _createContainer: function(selector) {
	            var root = this.render(),
	                element = root.find(selector),
	                container;

	            if (!element.length && root.is(selector)) {
	                if (root.is(selector)) {
	                    element = root;
	                } else {

	                    throw new Error("can't find a container with the specified " + selector + " selector");
	                }
	            }

	            container = new ViewContainer(element);

	            container.bind("accepted", function(e) {
	                e.view.render(element);
	            });

	            return container;
	        }
	    });

	    var Fragment = View.extend({
	        attach: function(view, placeholder) {
	            view.element.find(placeholder).replaceWith(this.render());
	        },

	        detach: function() {
	        }
	    });

	    var transitionRegExp = /^(\w+)(:(\w+))?( (\w+))?$/;

	    function parseTransition(transition) {
	        if (!transition){
	            return {};
	        }

	        var matches = transition.match(transitionRegExp) || [];

	        return {
	            type: matches[1],
	            direction: matches[3],
	            reverse: matches[5] === "reverse"
	        };
	    }

	    var ViewContainer = Observable.extend({
	        init: function(container) {
	            Observable.fn.init.call(this);
	            this.container = container;
	            this.history = [];
	            this.view = null;
	            this.running = false;
	        },

	        after: function() {
	            this.running = false;
	            this.trigger("complete", {view: this.view});
	            this.trigger("after");
	        },

	        end: function() {
	            this.view.showEnd();
	            this.previous.hideEnd();
	            this.after();
	        },

	        show: function(view, transition, locationID) {
	            if (!view.triggerBeforeShow() || (this.view && !this.view.triggerBeforeHide())) {
	                this.trigger("after");
	                return false;
	            }

	            locationID = locationID || view.id;

	            var that = this,
	                current = (view === that.view) ? view.clone() : that.view,
	                history = that.history,
	                previousEntry = history[history.length - 2] || {},
	                back = previousEntry.id === locationID,
	                // If explicit transition is set, it will be with highest priority
	                // Next we will try using the history record transition or the view transition configuration
	                theTransition = transition || ( back ? history[history.length - 1].transition : view.transition ),
	                transitionData = parseTransition(theTransition);

	            if (that.running) {
	                that.effect.stop();
	            }

	            if (theTransition === "none") {
	                theTransition = null;
	            }

	            that.trigger("accepted", { view: view });
	            that.view = view;
	            that.previous = current;
	            that.running = true;

	            if (!back) {
	                history.push({ id: locationID, transition: theTransition });
	            } else {
	                history.pop();
	            }

	            if (!current) {
	                view.showStart();
	                view.showEnd();
	                that.after();
	                return true;
	            }

	            if (!theTransition || !kendo.effects.enabled) {
	                view.showStart();
	                that.end();
	            } else {
	                // hide the view element before init/show - prevents blinks on iPad
	                // the replace effect will remove this class
	                view.element.addClass("k-fx-hidden");
	                view.showStart();
	                // do not reverse the explicit transition
	                if (back && !transition) {
	                    transitionData.reverse = !transitionData.reverse;
	                }

	                that.effect = kendo.fx(view.element).replace(current.element, transitionData.type)
	                    .beforeTransition(function() {
	                        view.beforeTransition("show");
	                        current.beforeTransition("hide");
	                    })
	                    .afterTransition(function() {
	                        view.afterTransition("show");
	                        current.afterTransition("hide");
	                    })
	                    .direction(transitionData.direction)
	                    .setReverse(transitionData.reverse);

	                that.effect.run().then(function() { that.end(); });
	            }

	            return true;
	        }
	    });

	    kendo.ViewContainer = ViewContainer;
	    kendo.Fragment = Fragment;
	    kendo.Layout = Layout;
	    kendo.View = View;
	    kendo.ViewClone = ViewClone;

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));


/***/ }

/******/ });

/***/ }),
/* 144 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./~/@progress/kendo-ui/js/pdf/mixins.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(976);
	module.exports = __webpack_require__(976);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 976:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(977)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($, undefined) {
	    
	kendo.PDFMixin = {
	    extend: function(proto) {
	        proto.events.push("pdfExport");
	        proto.options.pdf = this.options;
	        proto.saveAsPDF = this.saveAsPDF;
	        proto._drawPDF = this._drawPDF;
	        proto._drawPDFShadow = this._drawPDFShadow;
	    },
	    options: {
	        fileName  : "Export.pdf",
	        proxyURL  : "",

	        // paperSize can be an usual name, i.e. "A4", or an array of two Number-s specifying the
	        // width/height in points (1pt = 1/72in), or strings including unit, i.e. "10mm".  Supported
	        // units are "mm", "cm", "in" and "pt".  The default "auto" means paper size is determined
	        // by content.
	        paperSize : "auto",

	        // Export all pages, if applicable
	        allPages: false,

	        // True to reverse the paper dimensions if needed such that width is the larger edge.
	        landscape : false,

	        // An object containing { left, top, bottom, right } margins with units.
	        margin    : null,

	        // Optional information for the PDF Info dictionary; all strings except for the date.
	        title     : null,
	        author    : null,
	        subject   : null,
	        keywords  : null,
	        creator   : "Kendo UI PDF Generator v." + kendo.version,

	        // Creation Date; defaults to new Date()
	        date      : null
	    },

	    saveAsPDF: function() {
	        var progress = new $.Deferred();
	        var promise = progress.promise();
	        var args = { promise: promise };

	        if (this.trigger("pdfExport", args)) {
	            return;
	        }

	        var options = this.options.pdf;
	        options.multiPage = options.multiPage || options.allPages;

	        this._drawPDF(progress)
	        .then(function(root) {
	            return kendo.drawing.exportPDF(root, options);
	        })
	        .done(function(dataURI) {
	            kendo.saveAs({
	                dataURI: dataURI,
	                fileName: options.fileName,
	                proxyURL: options.proxyURL,
	                forceProxy: options.forceProxy,
	                proxyTarget: options.proxyTarget
	            });

	            progress.resolve();
	        })
	        .fail(function(err) {
	            progress.reject(err);
	        });

	        return promise;
	    },

	    _drawPDF: function(progress) {
	        var promise = new $.Deferred();

	        kendo.drawing.drawDOM(this.wrapper)
	        .done(function(group) {
	            var args = {
	                page: group,
	                pageNumber: 1,
	                progress: 1,
	                totalPages: 1
	            };

	            progress.notify(args);
	            promise.resolve(args.page);
	        })
	        .fail(function(err) {
	            promise.reject(err);
	        });

	        return promise;
	    },

	    _drawPDFShadow: function(settings, drawOptions) {
	        settings = settings || {};
	        var wrapper = this.wrapper;
	        var shadow = $("<div class='k-pdf-export-shadow'>");

	        // Content will be allowed to take up to 200" if no width is given.
	        if (settings.width) {
	            shadow.css({
	                width: settings.width,
	                overflow: "visible"
	            });
	        }

	        wrapper.before(shadow);
	        shadow.append(settings.content || wrapper.clone(true, true));

	        var defer = $.Deferred();

	        /* https://github.com/telerik/kendo/issues/4790 -- We need to
	         * allow a small timeout so that the browser finalizes the
	         * layout of any images here.  Another option would be to pass
	         * forcePageBreak: "-" to drawDOM, but that would make it
	         * clone the content as well and look for page breaks;
	         * needless work, so better do it here.
	         */
	        setTimeout(function(){
	            var promise = kendo.drawing.drawDOM(shadow, drawOptions);
	            promise.always(function() {
	                shadow.remove();
	            }).then(function(){
	                defer.resolve.apply(defer, arguments);
	            }).fail(function(){
	                defer.reject.apply(defer, arguments);
	            }).progress(function(){
	                defer.progress.apply(defer, arguments);
	            });
	        }, 15);

	        return defer.promise();
	    }
	};

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(3));

/***/ },

/***/ 977:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ./core */ 66);

/***/ }

/******/ });

/***/ }),
/* 145 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./~/@progress/kendo-ui/js/util/text-metrics.js ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1045);
	module.exports = __webpack_require__(1045);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 506:
/***/ function(module, exports) {

	module.exports = __webpack_require__(/*! ../kendo.core */ 0);

/***/ },

/***/ 1045:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(506)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function ($) {

	window.kendo.util = window.kendo.util || {};

	var LRUCache = kendo.Class.extend({
	    init: function(size) {

	        this._size = size;
	        this._length = 0;
	        this._map = {};
	    },

	    put: function(key, value) {
	        var map = this._map;
	        var entry = { key: key, value: value };

	        map[key] = entry;

	        if (!this._head) {
	            this._head = this._tail = entry;
	        } else {
	            this._tail.newer = entry;
	            entry.older = this._tail;
	            this._tail = entry;
	        }

	        if (this._length >= this._size) {
	            map[this._head.key] = null;
	            this._head = this._head.newer;
	            this._head.older = null;
	        } else {
	            this._length++;
	        }
	    },

	    get: function(key) {
	        var entry = this._map[key];

	        if (entry) {
	            if (entry === this._head && entry !== this._tail) {
	                this._head = entry.newer;
	                this._head.older = null;
	            }

	            if (entry !== this._tail) {
	                if (entry.older) {
	                    entry.older.newer = entry.newer;
	                    entry.newer.older = entry.older;
	                }

	                entry.older = this._tail;
	                entry.newer = null;

	                this._tail.newer = entry;
	                this._tail = entry;
	            }

	            return entry.value;
	        }
	    }
	});

	function objectKey(object) {
	    var parts = [];
	    for (var key in object) {
	        parts.push(key + object[key]);
	    }

	    return parts.sort().join("");
	}

	// Computes FNV-1 hash
	// See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
	function hashKey(str) {
	    // 32-bit FNV-1 offset basis
	    // See http://isthe.com/chongo/tech/comp/fnv/#FNV-param
	    var hash = 0x811C9DC5;

	    for (var i = 0; i < str.length; ++i) {
	        hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
	        hash ^= str.charCodeAt(i);
	    }

	    return hash >>> 0;
	}

	function zeroSize() {
	    return { width: 0, height: 0, baseline: 0 };
	}

	var DEFAULT_OPTIONS = {
	    baselineMarkerSize: 1
	};

	var defaultMeasureBox;

	if (typeof document !== "undefined") {
	    defaultMeasureBox = document.createElement("div");
	    defaultMeasureBox.style.cssText = "position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;" +
	              "padding: 0 !important; margin: 0 !important; border: 0 !important;" +
	              "line-height: normal !important; visibility: hidden !important; white-space: nowrap!important;";
	}

	var TextMetrics = kendo.Class.extend({
	    init: function(options) {

	        this._cache = new LRUCache(1000);
	        this.options = $.extend({}, DEFAULT_OPTIONS, options);
	    },

	    measure: function(text, style, box) {
	        if (!text) {
	            return zeroSize();
	        }

	        var styleKey = objectKey(style);
	        var cacheKey = hashKey(text + styleKey);
	        var cachedResult = this._cache.get(cacheKey);

	        if (cachedResult) {
	            return cachedResult;
	        }

	        var size = zeroSize();
	        var measureBox = box || defaultMeasureBox;
	        var baselineMarker = this._baselineMarker().cloneNode(false);

	        for (var key in style) {
	            var value = style[key];
	            if (typeof value !== "undefined") {
	                measureBox.style[key] = value;
	            }
	        }

	        measureBox.textContent = text;
	        measureBox.appendChild(baselineMarker);
	        document.body.appendChild(measureBox);

	        if (String(text).length) {
	            size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
	            size.height = measureBox.offsetHeight;
	            size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
	        }

	        if (size.width > 0 && size.height > 0) {
	            this._cache.put(cacheKey, size);
	        }

	        measureBox.parentNode.removeChild(measureBox);

	        return size;
	    },

	    _baselineMarker: function() {
	        var marker = document.createElement("div");
	        marker.style.cssText = "display: inline-block; vertical-align: baseline;width: " +
	            this.options.baselineMarkerSize + "px; height: " + this.options.baselineMarkerSize + "px;overflow: hidden;";

	        return marker;
	    }
	});

	TextMetrics.current = new TextMetrics();

	function measureText(text, style, measureBox) {
	    return TextMetrics.current.measure(text, style, measureBox);
	}

	kendo.deepExtend(kendo.util, {
	    LRUCache: LRUCache,
	    TextMetrics: TextMetrics,
	    measureText: measureText,
	    objectKey: objectKey,
	    hashKey: hashKey
	});

	})(window.kendo.jQuery);

	}, __webpack_require__(3));

/***/ }

/******/ });

/***/ }),
/* 146 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thActionBar/thActionBar.component.coffee ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var ActionBarController;

ActionBarController = (function() {

  /*@ngInject */
  ActionBarController.$inject = ["$scope"];
  function ActionBarController($scope) {
    this.$scope = $scope;
    this.checked = false;
  }

  ActionBarController.prototype.$onInit = function() {
    return this._setUpWatch();
  };

  ActionBarController.prototype._setUpWatch = function() {
    return this.$scope.$watch(((function(_this) {
      return function() {
        return _this.delegate.results.allSelected;
      };
    })(this)), (function(_this) {
      return function(newValue) {
        return _this.checked = newValue;
      };
    })(this));
  };

  ActionBarController.prototype.toggleAll = function() {
    return this.$scope.$apply((function(_this) {
      return function() {
        return _this.delegate.toggleAll(_this.checked);
      };
    })(this));
  };

  ActionBarController.prototype.triggerApply = function() {
    return this.delegate.triggerApply(this.selectedAction);
  };

  return ActionBarController;

})();

angular.module('ThemisComponents').component("thActionBar", {
  template: __webpack_require__(/*! ./thActionBar.template.html */ 255),
  transclude: true,
  bindings: {
    delegate: "=?"
  },
  controller: ActionBarController
});


/***/ }),
/* 147 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************!*\
  !*** ./src/lib/thActionBar/thActionBarDelegate.service.coffee ***!
  \****************************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").factory("ActionBarDelegate", ["ViewModel", function(ViewModel) {
  var ActionBarDelegate;
  return ActionBarDelegate = function(options) {
    var availableActions, buttonName, destroy, isDisabled, makeSelectable, onApply, pageCollection, ref, ref1, reset, results, selectingCollection, setUpListeners, toggleAll, triggerApply;
    selectingCollection = false;
    pageCollection = [];
    results = {
      allSelected: false,
      hasSelection: false,
      selectedAction: null,
      processing: false
    };
    buttonName = (ref = options.buttonName) != null ? ref : "Apply", availableActions = options.availableActions, onApply = (ref1 = options.onApply) != null ? ref1 : function() {};
    makeSelectable = function(collection) {
      destroy();
      reset();
      pageCollection = collection.map(function(each) {
        return new ViewModel(each, {
          selected: {
            "default": false,
            evented: true
          }
        });
      });
      setUpListeners();
      return pageCollection;
    };
    toggleAll = function(state) {
      selectingCollection = true;
      pageCollection.forEach(function(vm) {
        return vm.view.selected = state;
      });
      results.allSelected = state;
      return selectingCollection = false;
    };
    setUpListeners = function() {
      return pageCollection.forEach(function(vm) {
        return vm.on("view:changed:selected", function(state) {
          var selectedCount;
          selectedCount = pageCollection.reduce(function(count, vm) {
            if (vm.view.selected) {
              return ++count;
            } else {
              return count;
            }
          }, 0);
          results.hasSelection = selectedCount > 0;
          if (!selectingCollection) {
            return results.allSelected = selectedCount === pageCollection.length;
          }
        });
      });
    };
    destroy = function() {
      pageCollection.forEach(function(vm) {
        return vm.removeAllListeners();
      });
      return pageCollection = [];
    };
    reset = function() {
      results.allSelected = false;
      results.processing = false;
      results.hasSelection = false;
      results.selectedAction = null;
      return pageCollection.forEach(function(vm) {
        return vm.view.selected = false;
      });
    };
    isDisabled = function() {
      var actionsExist;
      actionsExist = !!availableActions;
      if (actionsExist) {
        return results.processing || (!results.selectedAction && actionsExist);
      } else {
        return results.processing;
      }
    };
    triggerApply = function() {
      var ids, values;
      results.processing = true;
      ids = pageCollection.filter(function(vm) {
        return vm.view.selected;
      }).map(function(vm) {
        return vm.model.id;
      });
      values = {
        ids: ids
      };
      if (availableActions != null) {
        values.selectedAction = results.selectedAction.value;
      }
      return onApply(values, reset);
    };
    return {
      availableActions: availableActions,
      buttonName: buttonName,
      isDisabled: isDisabled,
      makeSelectable: makeSelectable,
      results: results,
      toggleAll: toggleAll,
      triggerApply: triggerApply
    };
  };
}]);


/***/ }),
/* 148 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************!*\
  !*** ./src/lib/thActionBarBilling/thActionBarBilling.directive.coffee ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var pluralize;

pluralize = __webpack_require__(/*! pluralize */ 16);

angular.module("ThemisComponents").directive("thActionBarBilling", function() {
  return {
    restrict: "AE",
    scope: {
      delegate: "=",
      itemName: "@",
      buttonName: "@"
    },
    transclude: true,
    bindToController: true,
    controllerAs: "actionBar",
    template: __webpack_require__(/*! ./thActionBarBilling.template.html */ 256),
    controller: ["$scope", "$element", "$attrs", function($scope, $element, $attrs) {
      var itemName;
      this.toggleAll = function() {
        if (this.delegate.results.allSelected) {
          this.delegate.results.actionBarModel.view.selected = true;
          return this.delegate.results.allSelected = true;
        } else {
          return this.delegate.triggerReset();
        }
      };
      this.itemName || (this.itemName = "item");
      itemName = this.itemName.split(" ");
      this.lastWord = itemName.splice(itemName.length - 1).toString();
      this.openingWords = itemName.join(" ");
      this.buttonName || (this.buttonName = "Apply");
      this.isIndeterminate = function() {
        return this.delegate.results.selectedItemCount > 0 && !this.delegate.results.allSelected;
      };
      this.pluralizeItemName = function(count) {
        return pluralize(this.itemName, count);
      };
      this.triggerApply = function() {
        this.delegate.results.processing = true;
        return this.delegate.evaluateOnApplyFunction();
      };
    }]
  };
});


/***/ }),
/* 149 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/lib/thActionBarBilling/thActionBarBillingDelegate.service.coffee ***!
  \******************************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('ActionBarBillingDelegate', ["ViewModel", "SelectableCollection", function(ViewModel, SelectableCollection) {
  var ActionBarBillingDelegate;
  return ActionBarBillingDelegate = function(options) {
    var _attachListener, _attachListenerToNested, _attachListeners, _attachListenersOnCollectionChange, _fetchAllValues, _generateCollectionReferences, _getSelectedItemCount, _initializeDelegate, _resetResultsObject, _returnCollection, _returnSelectedValues, _updateSelectedStatus, _updateSourceOfTruth, availableActions, collectionReferences, evaluateOnApplyFunction, makeSelectable, onApply, ref, results, retrieveIds, sourceOfTruth, triggerReset, updatingSelections;
    if (options == null) {
      options = {};
    }
    retrieveIds = options.retrieveIds, onApply = options.onApply, availableActions = options.availableActions, collectionReferences = options.collectionReferences;
    if (!(onApply instanceof Function)) {
      throw new Error("ActionBarDelegate needs to be passed the following function: onAction");
    }
    if (!(retrieveIds instanceof Function)) {
      throw new Error("ActionBarDelegate needs to be passed the following function: retrieveIds");
    }
    if (!(collectionReferences instanceof Array)) {
      throw new Error("ActionBarDelegate needs to be passed the following array: collectionReferences");
    }
    updatingSelections = false;
    ref = {};
    sourceOfTruth = {};
    results = {};
    results.totalItemCount = 0;
    _initializeDelegate = function() {
      _resetResultsObject(results);
      return _generateCollectionReferences();
    };
    makeSelectable = function(data) {
      var parentModel, selectableCollection;
      parentModel = {
        id: "root"
      };
      parentModel[ref.parents] = data;
      results.totalItemCount = data.meta.totalItems;
      selectableCollection = new SelectableCollection({
        array: [parentModel],
        totalItems: data.meta.totalItems,
        retrieveIds: retrieveIds
      });
      results.actionBarModel = selectableCollection[0];
      results.actionBarModel.view.selected = results.allSelected;
      results.actionBarModel.on("selectableCollection:fetchingIds", function(status) {
        return results.loadingIds = status;
      });
      results.actionBarModel.model[ref.parents].forEach(function(viewModel) {
        if (!results.allSelected) {
          _updateSelectedStatus(viewModel);
        }
        return _attachListeners(viewModel);
      });
      results.actionBarModel.on("selectableCollection:allSelected", function(status) {
        if (!updatingSelections) {
          _updateSourceOfTruth();
        }
        if (!status) {
          results.allSelected = false;
        }
        return results.selectedItemCount = _getSelectedItemCount();
      });
      return results.actionBarModel.model[ref.parents];
    };
    evaluateOnApplyFunction = function() {
      var ref1;
      return onApply({
        trackedCollection: _returnCollection(),
        selectedAction: (ref1 = results.selectedAction) != null ? ref1.value : void 0
      }, function() {
        return triggerReset();
      });
    };
    triggerReset = function() {
      _resetResultsObject(results);
      return sourceOfTruth = {};
    };
    _attachListeners = function(viewModel) {
      var model;
      model = viewModel.model;
      _attachListener(viewModel);
      return Object.keys(model).forEach(function(key) {
        var i, len, ref1, vm;
        if (model[key] instanceof Array) {
          ref1 = model[key];
          for (i = 0, len = ref1.length; i < len; i++) {
            vm = ref1[i];
            _attachListenerToNested(vm);
          }
          return _attachListenersOnCollectionChange(viewModel, model[key]);
        }
      });
    };
    _updateSelectedStatus = function(viewModel) {
      var childOfExistingItem, childOfViewModel, existingItemInSourceOfTruth, hasSelectedChildren, i, j, len, len1, ref1, viewModelChildren;
      existingItemInSourceOfTruth = sourceOfTruth[viewModel.model.id];
      if (existingItemInSourceOfTruth) {
        updatingSelections = true;
        viewModel.view.selected = existingItemInSourceOfTruth.selected;
        if (existingItemInSourceOfTruth.children && viewModel.view.selected === false) {
          viewModelChildren = viewModel.model[ref.children];
          for (i = 0, len = viewModelChildren.length; i < len; i++) {
            childOfViewModel = viewModelChildren[i];
            ref1 = existingItemInSourceOfTruth.children;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              childOfExistingItem = ref1[j];
              hasSelectedChildren = existingItemInSourceOfTruth.children.some(function(each) {
                return each.selected;
              });
              viewModel.view.indeterminate = hasSelectedChildren;
              if (childOfViewModel.model.id === childOfExistingItem.id) {
                childOfViewModel.view.selected = childOfExistingItem.selected;
              }
            }
          }
        }
      }
      return updatingSelections = false;
    };
    _updateSourceOfTruth = function() {
      var _updateChildren, updatedvalues;
      _updateChildren = function(originalItem, updatedItem) {
        if ((originalItem != null) && (originalItem.children != null) && (updatedItem.children != null)) {
          return originalItem.children.forEach(function(child) {
            var childExists, ref1;
            childExists = (ref1 = updatedItem.children) != null ? ref1.some(function(item) {
              return item.id === child.id;
            }) : void 0;
            if (!childExists) {
              if (child.selected) {
                return sourceOfTruth[originalItem.id].children.push(child);
              }
            }
          });
        }
      };
      updatedvalues = results.actionBarModel.model[ref.parents].collectionValues();
      if (updatedvalues != null) {
        return updatedvalues.forEach(function(item) {
          var originalItem, updatedItem;
          originalItem = sourceOfTruth[item.id];
          updatedItem = sourceOfTruth[item.id] = item;
          return _updateChildren(originalItem, updatedItem);
        });
      }
    };
    _attachListenersOnCollectionChange = function(viewModel, collection) {
      return viewModel.on("selectableCollectionUpdated", function() {
        var existingListener, i, len, results1;
        _updateSelectedStatus(this);
        results1 = [];
        for (i = 0, len = collection.length; i < len; i++) {
          viewModel = collection[i];
          existingListener = viewModel.listeners("view:changed:selected")[1];
          if (!existingListener) {
            results1.push(_attachListenerToNested(viewModel));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      });
    };
    _attachListener = function(viewModel) {
      return viewModel.on("view:changed:selected", function(status) {
        if (!updatingSelections) {
          _updateSourceOfTruth();
        }
        if (!status) {
          results.allSelected = false;
        }
        results.selectedItemCount = _getSelectedItemCount();
        if (results.selectedItemCount === results.totalItemCount) {
          results.allSelected = true;
        }
        if (results.allSelected) {
          return results.selectedItemCount = results.totalItemCount;
        }
      });
    };
    _attachListenerToNested = function(viewModel) {
      return viewModel.on("view:changed:selected", function(status) {
        if (!updatingSelections) {
          _updateSourceOfTruth();
        }
        if (!status) {
          results.allSelected = false;
        }
        return results.selectedItemCount = _getSelectedItemCount();
      });
    };
    _getSelectedItemCount = function() {
      var aChildIsSelected, itemCount, key, parent, parentIsSelected, ref1;
      itemCount = 0;
      for (key in sourceOfTruth) {
        parent = sourceOfTruth[key];
        aChildIsSelected = (ref1 = parent.children) != null ? ref1.some(function(child) {
          return child.selected;
        }) : void 0;
        parentIsSelected = parent.selected;
        if (parentIsSelected || aChildIsSelected) {
          ++itemCount;
        }
      }
      return itemCount;
    };
    _generateCollectionReferences = function() {
      var generations, i, index, len, reference, results1;
      generations = {
        0: "parents",
        1: "children"
      };
      results1 = [];
      for (index = i = 0, len = collectionReferences.length; i < len; index = ++i) {
        reference = collectionReferences[index];
        results1.push(ref[generations[index]] = reference);
      }
      return results1;
    };
    _resetResultsObject = function(results) {
      var child, children, i, j, len, len1, parent, ref1;
      if (results.actionBarModel != null) {
        results.actionBarModel.model[ref.parents].resetSelected();
        ref1 = results.actionBarModel.model[ref.parents];
        for (i = 0, len = ref1.length; i < len; i++) {
          parent = ref1[i];
          children = parent.model[ref.children];
          parent.view.selected = false;
          if (children != null) {
            for (j = 0, len1 = children.length; j < len1; j++) {
              child = children[j];
              child.view.selected = false;
            }
          }
        }
      }
      results.selectedItemCount = 0;
      results.availableActions = availableActions;
      results.allSelected = false;
      results.processing = false;
      results.selectedAction = null;
      return results.loadingIds = false;
    };
    _returnCollection = function() {
      var currentPageItems;
      currentPageItems = results.actionBarModel.model[ref.parents].length;
      if (results.selectedItemCount >= currentPageItems) {
        _fetchAllValues();
        return _returnSelectedValues();
      } else {
        return _returnSelectedValues();
      }
    };
    _fetchAllValues = function() {
      var allIdentifiers, childrenIds, key, parent, results1;
      allIdentifiers = results.actionBarModel.model[ref.parents].allIdentifiers;
      results1 = [];
      for (key in sourceOfTruth) {
        parent = sourceOfTruth[key];
        childrenIds = allIdentifiers[parent.id];
        if (parent.children == null) {
          if ((childrenIds != null ? childrenIds.length : void 0) > 0) {
            results1.push(parent.children = childrenIds.map(function(id) {
              return {
                id: id,
                selected: parent.selected
              };
            }));
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };
    _returnSelectedValues = function() {
      var filterUnselected, item, key, onlySelected, selectedItem;
      filterUnselected = function(item, referenceNameIndex) {
        var child, filteredChildCollection, generationName, i, len, ref1, selectedChild, selectedItem;
        generationName = collectionReferences[referenceNameIndex];
        selectedItem = null;
        if (item.children != null) {
          filteredChildCollection = [];
          ref1 = item.children;
          for (i = 0, len = ref1.length; i < len; i++) {
            child = ref1[i];
            selectedChild = filterUnselected(child, referenceNameIndex + 1);
            if (selectedChild != null) {
              filteredChildCollection.push(selectedChild);
            }
          }
          if (filteredChildCollection.length > 0) {
            selectedItem = {
              id: item.id,
              selected: item.selected
            };
            selectedItem[generationName] = filteredChildCollection;
          }
        } else {
          if (item.selected) {
            selectedItem = {
              id: item.id,
              selected: item.selected
            };
          }
        }
        return selectedItem;
      };
      onlySelected = [];
      for (key in sourceOfTruth) {
        item = sourceOfTruth[key];
        selectedItem = filterUnselected(item, 1);
        if (selectedItem != null) {
          onlySelected.push(selectedItem);
        }
      }
      return onlySelected;
    };
    _initializeDelegate();
    return Object.freeze({
      results: results,
      makeSelectable: makeSelectable,
      evaluateOnApplyFunction: evaluateOnApplyFunction,
      triggerReset: triggerReset
    });
  };
}]);


/***/ }),
/* 150 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/lib/thActionBarBilling/thSelectableCollection.service.coffee ***!
  \**************************************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").factory("SelectableCollection", ["$rootScope", "ViewModel", "$q", "$timeout", function($rootScope, ViewModel, $q, $timeout) {
  var SelectableCollection;
  return SelectableCollection = function(params) {
    var _addToTracked, _generateCollection, _isSelected, _makeChildSelectableCollection, _removeFromTracked, _updateIndeterminateState, _updateSelectAllStatus, _updateViewModel, allSelected, array, attachListener, attachParentListener, childrenLookup, clearAll, fetchAllChildrenIdentifiers, parent, processingCollection, ref, ref1, ref2, ref3, retrieveIds, select, selectAll, selectableCollection, selectedCount, totalItems, trackedBy, trackedCollection, unselect;
    if (params == null) {
      params = {};
    }
    array = (ref = params.array) != null ? ref : [], trackedBy = (ref1 = params.trackedBy) != null ? ref1 : "id", totalItems = (ref2 = params.totalItems) != null ? ref2 : array.length, parent = (ref3 = params.parent) != null ? ref3 : null, retrieveIds = params.retrieveIds;
    selectableCollection = [];
    allSelected = false;
    selectedCount = 0;
    processingCollection = false;
    childrenLookup = {};
    trackedCollection = [];
    selectableCollection.parent = parent;
    selectableCollection.loadingIds = false;
    selectableCollection.allIdentifiers = {};
    selectableCollection.resetSelected = function() {
      return trackedCollection.forEach(function(item) {
        item.selected = false;
        return delete item.children;
      });
    };
    selectableCollection.collectionValues = function() {
      var childReturnItems, childSelectableCollection, clonedItem, formattedCollection, i, item, len;
      formattedCollection = [];
      for (i = 0, len = trackedCollection.length; i < len; i++) {
        item = trackedCollection[i];
        childSelectableCollection = childrenLookup[item.id];
        if (childSelectableCollection != null) {
          childReturnItems = childSelectableCollection.collectionValues();
          clonedItem = JSON.parse(JSON.stringify(item));
          clonedItem.children = childReturnItems;
          formattedCollection.push(clonedItem);
        } else {
          formattedCollection.push(item);
        }
      }
      return formattedCollection;
    };
    selectableCollection.addToSelectableCollection = function(array) {
      return _generateCollection(array);
    };
    _generateCollection = function(data) {
      var ref4;
      data.forEach(function(model) {
        var exists, viewModel;
        viewModel = new ViewModel(model, {
          selected: {
            "default": allSelected,
            evented: true
          },
          indeterminate: {
            "default": false,
            evented: true
          }
        });
        model = viewModel.model;
        Object.keys(model).forEach(function(property) {
          var childCollection, identifier;
          if (model[property].collection != null) {
            childCollection = _makeChildSelectableCollection(model[property], viewModel);
            model[property] = childCollection;
            identifier = model[trackedBy];
            return childrenLookup[identifier] = childCollection;
          }
        });
        attachListener(viewModel);
        selectableCollection.push(viewModel);
        exists = trackedCollection.some(function(item) {
          return item.id === viewModel.model.id;
        });
        if (!exists) {
          return trackedCollection.push({
            id: viewModel.model.id,
            selected: allSelected
          });
        }
      });
      return (ref4 = selectableCollection.parent) != null ? ref4.emit("selectableCollectionUpdated") : void 0;
    };
    _makeChildSelectableCollection = function(property, viewModel) {
      var collection, totalItemCount;
      collection = property.collection;
      totalItemCount = property.meta.totalItems;
      return SelectableCollection({
        array: collection,
        parent: viewModel,
        retrieveIds: retrieveIds,
        totalItems: totalItemCount
      });
    };
    _isSelected = function(viewModel) {
      var identifier;
      identifier = viewModel.model[trackedBy];
      return trackedCollection.some(function(item) {
        return item.id === identifier && item.selected;
      });
    };
    _addToTracked = function(viewModel) {
      var existingItem, identifier;
      if (!_isSelected(viewModel)) {
        identifier = viewModel.model[trackedBy];
        existingItem = trackedCollection.find(function(item) {
          return item.id === identifier;
        });
        if (existingItem) {
          return existingItem.selected = true;
        } else {
          return trackedCollection.push({
            id: identifier,
            selected: true
          });
        }
      }
    };
    _removeFromTracked = function(viewModel) {
      var identifier;
      identifier = viewModel.model[trackedBy];
      return trackedCollection.forEach(function(item) {
        if (item.id === identifier) {
          return item.selected = false;
        }
      });
    };
    _updateSelectAllStatus = function() {
      var ref4, ref5;
      selectedCount = trackedCollection.reduce(function(count, item) {
        if (item.selected) {
          return ++count;
        } else {
          return count;
        }
      }, 0);
      if (selectedCount === totalItems) {
        allSelected = true;
        if (!processingCollection) {
          if ((ref4 = selectableCollection.parent) != null) {
            ref4.view.selected = true;
          }
        }
      } else {
        allSelected = false;
        if (!processingCollection) {
          if ((ref5 = selectableCollection.parent) != null) {
            ref5.view.selected = false;
          }
        }
      }
      if (selectableCollection.parent != null) {
        return allSelected = selectableCollection.parent.view.selected;
      }
    };
    _updateViewModel = function(viewModel) {
      return viewModel.view.selected = _isSelected(viewModel);
    };
    select = function(viewModel) {
      _addToTracked(viewModel);
      _updateViewModel(viewModel);
      return _updateSelectAllStatus();
    };
    unselect = function(viewModel) {
      _removeFromTracked(viewModel);
      _updateViewModel(viewModel);
      return _updateSelectAllStatus();
    };
    selectAll = function() {
      processingCollection = true;
      trackedCollection.forEach(function(item) {
        return item.selected = true;
      });
      selectableCollection.forEach(function(viewModel) {
        return select(viewModel);
      });
      return processingCollection = false;
    };
    clearAll = function() {
      processingCollection = true;
      selectableCollection.forEach(function(viewModel) {
        return unselect(viewModel);
      });
      trackedCollection.forEach(function(item) {
        return item.selected = false;
      });
      return processingCollection = false;
    };
    fetchAllChildrenIdentifiers = function(viewObject) {
      return $q(function(resolve, reject) {
        return retrieveIds(viewObject).then(function(identifiers) {
          var children, i, id, key, len;
          trackedCollection = [];
          if (selectableCollection.parent.model.id === "root") {
            if (identifiers instanceof Array) {
              trackedCollection = identifiers.map(function(id) {
                return {
                  id: id,
                  selected: false
                };
              });
            } else {
              for (key in identifiers) {
                id = parseInt(key, 10);
                trackedCollection.push({
                  id: id,
                  selected: false
                });
              }
            }
            selectableCollection.allIdentifiers = identifiers;
          } else {
            for (key in identifiers) {
              children = identifiers[key];
              for (i = 0, len = children.length; i < len; i++) {
                id = children[i];
                trackedCollection.push({
                  id: id,
                  selected: false
                });
              }
            }
          }
          return resolve();
        });
      });
    };
    _updateIndeterminateState = function(viewModel) {
      return $timeout(function() {
        var count, isIndeterminate, ref4;
        count = trackedCollection.reduce(function(count, item) {
          if (item.selected) {
            return ++count;
          } else {
            return count;
          }
        }, 0);
        isIndeterminate = viewModel.view.indeterminate || (count < totalItems && count > 0);
        if ((ref4 = selectableCollection.parent) != null) {
          ref4.view.indeterminate = isIndeterminate;
        }
        return $rootScope.$apply();
      });
    };
    attachParentListener = function() {
      return selectableCollection.parent.on("view:changed:selected", function(selectionState) {
        var viewObject;
        viewObject = this;
        if (!selectionState) {
          if (selectionState !== allSelected) {
            clearAll();
            viewObject.emit("selectableCollection:allSelected", false);
          }
        }
        if (selectionState) {
          viewObject.emit("selectableCollection:fetchingIds", true);
          return fetchAllChildrenIdentifiers(this).then(function() {
            selectAll();
            viewObject.emit("selectableCollection:allSelected", true);
            return viewObject.emit("selectableCollection:fetchingIds", false);
          });
        }
      });
    };
    attachListener = function(viewModel) {
      viewModel.on("view:changed:indeterminate", function(status) {
        return _updateIndeterminateState(this);
      });
      return viewModel.on("view:changed:selected", function(selectionState) {
        if (selectionState) {
          select(viewModel);
        } else {
          unselect(viewModel);
        }
        return _updateIndeterminateState(viewModel);
      });
    };
    _generateCollection(array);
    if (selectableCollection.parent) {
      attachParentListener();
    }
    return selectableCollection;
  };
}]);


/***/ }),
/* 151 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thAlert/thAlertAnchor.directive.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thAlertAnchor", function() {
  return {
    restrict: "E",
    bindToController: true,
    controllerAs: 'alertAnchor',
    template: __webpack_require__(/*! ./thAlertAnchor.template.html */ 257),
    controller: ["AlertManager", function(AlertManager) {
      this.alertMessage = AlertManager.alertMessage;
      this.dismiss = function() {
        return AlertManager.hideAlert();
      };
    }]
  };
});


/***/ }),
/* 152 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/lib/thAlert/thAlertManager.service.coffee ***!
  \*******************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('AlertManager', ["$timeout", function($timeout) {
  var alertMessage, hideAlert, showAlert, showError, showSuccess, showWarning, timeout, timer;
  alertMessage = {};
  timer = '';
  showSuccess = function(message, params) {
    showAlert(message, params);
    return alertMessage.type = 'success';
  };
  showError = function(message, params) {
    showAlert(message, params);
    return alertMessage.type = 'error';
  };
  showWarning = function(message, params) {
    showAlert(message, params);
    return alertMessage.type = 'warning';
  };
  showAlert = function(message, params) {
    if (params == null) {
      params = {};
    }
    alertMessage.message = message;
    return timeout(params.timeout);
  };
  hideAlert = function() {
    alertMessage.message = '';
    return alertMessage.type = '';
  };
  timeout = function(duration) {
    $timeout.cancel(timer);
    if (duration !== 0) {
      duration = duration != null ? duration : 3000;
      return timer = $timeout(function() {
        hideAlert();
        return $timeout.cancel(timer);
      }, duration);
    }
  };
  return {
    showSuccess: showSuccess,
    showError: showError,
    showWarning: showWarning,
    showAlert: showAlert,
    hideAlert: hideAlert,
    alertMessage: alertMessage,
    timeout: timeout
  };
}]);


/***/ }),
/* 153 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thButton/thButton.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var keycode,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

keycode = __webpack_require__(/*! keycode */ 5);

angular.module("ThemisComponents").directive("thButton", function() {
  return {
    restrict: "EA",
    scope: {
      type: "@",
      href: "@",
      loading: "=?",
      ngDisabled: "&?"
    },
    replace: true,
    transclude: true,
    template: function(element, attrs) {
      switch (false) {
        case attrs.href == null:
          return __webpack_require__(/*! ./thButton.anchor.template.html */ 258);
        default:
          return __webpack_require__(/*! ./thButton.button.template.html */ 259);
      }
    },
    bindToController: true,
    controllerAs: "button",
    controller: ["$scope", "$element", "$attrs", function($scope, $element, $attrs) {
      var isSubmit, ref, ref1, type, types;
      this.loading || (this.loading = false);
      if (this.ngDisabled == null) {
        this.ngDisabled = false;
      }
      types = ["standard", "create", "destroy"];
      this.theme = (ref = (ref1 = this.type) != null ? ref1.toLowerCase() : void 0, indexOf.call(types, ref) >= 0) ? "light" : "dark";
      isSubmit = ($attrs.submit != null) || $attrs.type === "submit";
      type = isSubmit ? "submit" : "button";
      $element.attr("type", type);
      this.setDisabled = function() {
        return $element.attr("disabled", "disabled");
      };
      this.setEnabled = function() {
        return $element.removeAttr("disabled");
      };
      $scope.$watch((function(_this) {
        return function() {
          return _this.loading;
        };
      })(this), (function(_this) {
        return function(newValue) {
          if (newValue === false) {
            if ($attrs.disabled === "" || $attrs.disabled === true) {
              return _this.setDisabled();
            } else {
              return _this.setEnabled();
            }
          } else {
            return _this.setDisabled();
          }
        };
      })(this));
      $element.on("keyup", function(event) {
        if (event.keyCode === keycode("Enter" || event.keyCode === keycode("Space"))) {
          return $element.triggerHandler("click");
        }
      });
    }]
  };
});


/***/ }),
/* 154 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thCheckbox/thCheckbox.directive.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var keycode;

keycode = __webpack_require__(/*! keycode */ 5);

angular.module('ThemisComponents').directive("thCheckbox", function() {
  return {
    restrict: "EA",
    replace: true,
    template: __webpack_require__(/*! ./thCheckbox.template.html */ 260),
    scope: {
      name: "@",
      change: "&ngChange",
      checked: "=?ngModel",
      ngRequired: "=",
      ngDisabled: "=",
      indeterminate: "=?"
    },
    bindToController: true,
    controllerAs: "checkbox",
    controller: ["$scope", "$element", function($scope, $element) {
      this.toggle = function() {
        $scope.$apply((function(_this) {
          return function() {
            return _this.checked = !_this.checked;
          };
        })(this));
        if (this.change != null) {
          return this.change();
        }
      };
      $element.on("click", (function(_this) {
        return function() {
          _this.indeterminate = false;
          if (!$element.attr("disabled")) {
            return _this.toggle();
          }
        };
      })(this));
      $element.on("keydown", function(event) {
        if (event.keyCode === keycode("Space")) {
          event.preventDefault();
          return $element.triggerHandler("click");
        }
      });
    }]
  };
});


/***/ }),
/* 155 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thCompile/thCompile.directive.coffee ***!
  \******************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").directive("thCompile", ["$compile", function($compile) {
  return function(scope, element, attrs) {
    return scope.$watch(function(scope) {
      return scope.$eval(attrs.thCompile);
    }, function(value) {
      element.html(value);
      return $compile(element.contents())(scope);
    });
  };
}]);


/***/ }),
/* 156 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/lib/thContentHeader/thContentHeader.directive.coffee ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive('thContentHeader', function() {
  return {
    restrict: "AE",
    scope: {
      title: "@"
    },
    transclude: true,
    controllerAs: 'thContentHeader',
    template: __webpack_require__(/*! ./thContentHeader.template.html */ 261)
  };
});


/***/ }),
/* 157 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/lib/thContextualMessage/thContextualMessage.directive.coffee ***!
  \**************************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').directive("thContextualMessageAnchor", ["ContextualMessageManager", "$document", "$timeout", function(ContextualMessageManager, $document, $timeout) {
  return {
    restrict: "A",
    scope: {},
    link: function($scope, element, attributes) {
      var messageContext;
      messageContext = attributes.thContextualMessageAnchor;
      $scope.messages = ContextualMessageManager.messagesForContext(messageContext);
      return $scope.$watch("messages.length", function(messageCount) {
        var anchorRect, elm, i, left, len, messageElement, ref, top;
        ref = document.querySelectorAll(".thContextualMessage.context-" + messageContext);
        for (i = 0, len = ref.length; i < len; i++) {
          elm = ref[i];
          angular.element(elm).remove();
        }
        if (messageCount > 0) {
          anchorRect = element[0].getBoundingClientRect();
          messageElement = angular.element("<div>\n  " + $scope.messages[0].text + "\n</div>");
          messageElement.addClass("thContextualMessage");
          messageElement.addClass("context-" + messageContext);
          $document.find('body').append(messageElement);
          top = anchorRect.top + anchorRect.height;
          left = anchorRect.left + anchorRect.width / 2 - messageElement[0].clientWidth / 2;
          messageElement.css({
            top: top + "px",
            left: left + "px"
          });
          return ContextualMessageManager.showedMessageForContext(messageContext);
        }
      });
    }
  };
}]);


/***/ }),
/* 158 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************!*\
  !*** ./src/lib/thContextualMessage/thContextualMessage.service.coffee ***!
  \************************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('ContextualMessageManager', ["$timeout", function($timeout) {
  var initializeMessagesForContext, messages, messagesForContext, showMessage, showedMessageForContext;
  messages = {};
  initializeMessagesForContext = function(context) {
    if (messages[context] == null) {
      return messages[context] = [];
    }
  };
  showMessage = function(context, message, timeout) {
    if (timeout == null) {
      timeout = 2000;
    }
    initializeMessagesForContext(context);
    return messages[context].push({
      text: message,
      timeout: timeout
    });
  };
  messagesForContext = function(context) {
    initializeMessagesForContext(context);
    return messages[context];
  };
  showedMessageForContext = function(context) {
    initializeMessagesForContext(context);
    return $timeout(function() {
      return messagesForContext(context).shift();
    }, messagesForContext(context)[0].timeout);
  };
  return {
    showMessage: showMessage,
    showedMessageForContext: showedMessageForContext,
    messagesForContext: messagesForContext
  };
}]);


/***/ }),
/* 159 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thDefaults/thDefaults.service.coffee ***!
  \******************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('thDefaults', function() {
  var defaults, entries, get, set, setBulkKeys, setSingleKey;
  defaults = {
    dateFormat: "yyyy-MM-dd"
  };
  setSingleKey = function(key, value) {
    return defaults[key] = value;
  };
  setBulkKeys = function(collection) {
    return Object.keys(collection).forEach(function(key) {
      var value;
      value = collection[key];
      return setSingleKey(key, value);
    });
  };
  set = function() {
    if ((arguments[0] != null) && (arguments[1] != null) && typeof arguments[0] === "string") {
      return setSingleKey(arguments[0], arguments[1]);
    } else if ((arguments[0] != null) && arguments[0] instanceof Object) {
      return setBulkKeys(arguments[0]);
    } else {
      return new Error("Unknow parameter types.");
    }
  };
  entries = function() {
    return defaults;
  };
  get = function(key) {
    return defaults[key];
  };
  return Object.freeze({
    set: set,
    get: get,
    entries: entries
  });
});


/***/ }),
/* 160 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/lib/thDisclosure/thDisclosureContent.directive.coffee ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var $, close, getActualHeight, open;

$ = __webpack_require__(/*! jquery */ 3);

getActualHeight = function(element) {
  var height, previousCss;
  previousCss = $(element).attr("style");
  $(element).css({
    position: "absolute",
    visibility: "hidden",
    display: "block",
    height: "auto"
  });
  height = $(element).height();
  $(element).attr("style", previousCss != null ? previousCss : "");
  return height;
};

open = function(element) {
  $(element).css({
    height: "auto",
    overflow: "visible"
  });
  return $(element).attr("aria-hidden", "false");
};

close = function(element) {
  $(element).css({
    overflow: "hidden",
    display: "none"
  });
  return $(element).attr("aria-hidden", "true");
};

angular.module("ThemisComponents").directive("thDisclosureContent", ["DisclosureManager", function(DisclosureManager) {
  return {
    restrict: "E",
    transclude: true,
    scope: {
      name: "@"
    },
    template: __webpack_require__(/*! ./thDisclosureContent.template.html */ 267),
    bindToController: true,
    controllerAs: "thDisclosureContent",
    controller: ["$element", "$scope", function($element, $scope) {
      var animateToggle;
      $element.attr("id", $scope.thDisclosureContent.name);
      $element.attr("aria-labelledby", $scope.thDisclosureContent.name + "-toggle");
      animateToggle = (function(_this) {
        return function() {
          var height;
          height = getActualHeight($element);
          if (_this.expanded) {
            $($element).css({
              display: "block"
            });
            $($element).stop().animate({
              height: height + "px"
            }, 300, function() {
              return open($element);
            });
          } else {
            $($element).stop().animate({
              height: "0"
            }, 300, function() {
              return close($element);
            });
          }
          return false;
        };
      })(this);
      this.expanded = false;
      DisclosureManager.registerDisclosureContent(this.name, {
        handleOpen: (function(_this) {
          return function() {
            _this.expanded = true;
            return animateToggle();
          };
        })(this),
        handleClose: (function(_this) {
          return function() {
            _this.expanded = false;
            return animateToggle();
          };
        })(this)
      });
    }]
  };
}]);


/***/ }),
/* 161 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/lib/thDisclosure/thDisclosureManager.service.coffee ***!
  \*****************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('DisclosureManager', function() {
  var close, disclosureContentHandlers, disclosureToggleHandlers, open, stateMap, updateState;
  stateMap = {};
  disclosureToggleHandlers = {};
  disclosureContentHandlers = {};
  open = function(name) {
    stateMap[name] = true;
    if (disclosureToggleHandlers[name] != null) {
      disclosureToggleHandlers[name].handleOpen();
    }
    if (disclosureContentHandlers[name] != null) {
      return disclosureContentHandlers[name].handleOpen();
    }
  };
  close = function(name) {
    stateMap[name] = false;
    if (disclosureToggleHandlers[name] != null) {
      disclosureToggleHandlers[name].handleClose();
    }
    if (disclosureContentHandlers[name] != null) {
      return disclosureContentHandlers[name].handleClose();
    }
  };
  updateState = function(name, state) {
    if (state != null) {
      stateMap[name] = state;
    }
    if (stateMap[name] != null) {
      if (stateMap[name]) {
        return open(name);
      } else {
        return close(name);
      }
    }
  };
  return {
    updateState: updateState,
    registerDisclosureToggle: function(name, handlers) {
      disclosureToggleHandlers[name] = handlers;
      return updateState(name);
    },
    registerDisclosureContent: function(name, handlers) {
      disclosureContentHandlers[name] = handlers;
      return updateState(name);
    }
  };
});


/***/ }),
/* 162 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/lib/thDisclosure/thDisclosureToggle.directive.coffee ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thDisclosureToggle", ["DisclosureManager", function(DisclosureManager) {
  return {
    restrict: "E",
    transclude: true,
    scope: {
      name: "@",
      expanded: "=?",
      ngDisabled: "=?",
      textSide: "@",
      ariaLabel: "@",
      ariaDescribedby: "@",
      tabindex: "@"
    },
    template: __webpack_require__(/*! ./thDisclosureToggle.template.html */ 268),
    bindToController: true,
    controllerAs: 'thDisclosureToggle',
    controller: ["$scope", "$element", function($scope, $element) {
      this.textSide || (this.textSide = "left");
      this.tabindex = "-1";
      this.toggle = (function(_this) {
        return function() {
          if (!_this.ngDisabled) {
            return DisclosureManager.updateState(_this.name, !_this.expanded);
          }
        };
      })(this);
      this.focus = function() {
        return this.tabindex = "0";
      };
      this.blur = function() {
        return this.tabindex = "-1";
      };
      DisclosureManager.registerDisclosureToggle(this.name, {
        handleOpen: (function(_this) {
          return function() {
            return _this.expanded = true;
          };
        })(this),
        handleClose: (function(_this) {
          return function() {
            return _this.expanded = false;
          };
        })(this)
      });
      if (this.expanded != null) {
        $scope.$watch((function(_this) {
          return function() {
            return _this.expanded;
          };
        })(this), (function(_this) {
          return function() {
            return DisclosureManager.updateState(_this.name, _this.expanded);
          };
        })(this));
      } else {
        DisclosureManager.updateState(this.name, false);
      }
    }]
  };
}]);


/***/ }),
/* 163 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/lib/thDropdown/thDivider.directive.coffee ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thDivider", function() {
  return {
    restrict: "E",
    replace: true,
    scope: {},
    template: __webpack_require__(/*! ./thDivider.template.html */ 269)
  };
});


/***/ }),
/* 164 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thDropdown/thDropdown.directive.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var keycode;

keycode = __webpack_require__(/*! keycode */ 5);

angular.module("ThemisComponents").directive("thDropdown", function() {
  return {
    restrict: "E",
    template: __webpack_require__(/*! ./thDropdown.template.html */ 270),
    replace: true,
    controllerAs: "dropdown",
    bindToController: true,
    transclude: true,
    scope: {
      name: "@",
      list: "=?",
      type: "@",
      ariaLabel: "@",
      ariaDescribedby: "@",
      ngDisabled: "=?"
    },
    controller: ["$element", "$attrs", "$timeout", function($element, $attrs, $timeout) {
      var element, focusOptionInDirection, processList, ref;
      this.processedItems = [];
      this.list = (ref = this.list) != null ? ref : [];
      this.visible = false;
      this.currentItemIndex = 0;
      element = $element[0];
      if (this.ariaLabel == null) {
        this.ariaLabel = this.name;
      }
      this.disabledWithAttribute = $attrs.disabled != null;
      this.keyboardToggle = (function(_this) {
        return function(event) {
          if ($attrs.disabled == null) {
            switch (event.keyCode) {
              case keycode('Enter'):
                if (_this.visible === true) {
                  _this.selectOption();
                } else {
                  _this.toggle();
                }
                return event.preventDefault();
              case keycode('Space'):
                if (_this.visible === true) {
                  _this.selectOption();
                } else {
                  _this.toggle();
                }
                return event.preventDefault();
              case keycode('Escape'):
                _this.visible = false;
                angular.element(element).find("button")[0].focus();
                return event.preventDefault();
              case keycode('Down'):
                focusOptionInDirection('down');
                return event.preventDefault();
              case keycode('Up'):
                focusOptionInDirection('up');
                return event.preventDefault();
            }
          }
        };
      })(this);
      this.selectOption = function() {
        return $timeout((function(_this) {
          return function() {
            angular.element(document.activeElement.parentElement).triggerHandler('click');
            _this.visible = !_this.visible;
            return _this.currentItemIndex = 0;
          };
        })(this));
      };
      this.toggle = function() {
        this.visible = !this.visible;
        this.currentItemIndex = 0;
        return $timeout((function(_this) {
          return function() {
            if (_this.visible === false) {
              return element.focus();
            } else {
              return angular.element(document.body).find(".dropdown-menu a")[0].focus();
            }
          };
        })(this));
      };
      this.toggleCaret = function() {
        if (this.visible) {
          return 'fa-caret-up';
        } else {
          return 'fa-caret-down';
        }
      };
      focusOptionInDirection = (function(_this) {
        return function(direction) {
          var index, option;
          index = direction === 'down' ? _this.currentItemIndex + 1 : _this.currentItemIndex - 1;
          option = document.getElementsByClassName("dropdown-item")[index];
          if (option) {
            switch (direction) {
              case 'down':
                _this.currentItemIndex++;
                break;
              case 'up':
                _this.currentItemIndex--;
            }
            return option.focus();
          }
        };
      })(this);
      processList = (function(_this) {
        return function() {
          var i, item, len, ref1, results;
          ref1 = _this.list;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            item = ref1[i];
            if (item.href != null) {
              item.type = "link";
              results.push(_this.processedItems.push(item));
            } else if (item.ngClick != null) {
              item.type = "action";
              results.push(_this.processedItems.push(item));
            } else {
              results.push(_this.processedItems.push(item));
            }
          }
          return results;
        };
      })(this);
      processList();
    }],
    link: function(scope, elem, attr) {
      return elem.on('click', function(event) {
        var adjustedRight, adjustedTop, body, bodyRightPosition, buttonRect, menu, menuWidth;
        menu = elem[0].getElementsByClassName("dropdown-menu")[0];
        if (menu === void 0) {
          return;
        }
        body = angular.element(document.body);
        body.append(menu);
        menuWidth = menu != null ? menu.offsetWidth : void 0;
        bodyRightPosition = document.body.getBoundingClientRect().right;
        buttonRect = elem[0].getBoundingClientRect();
        adjustedTop = buttonRect.top + buttonRect.height + 2;
        adjustedRight = bodyRightPosition - buttonRect.right;
        if (menuWidth > buttonRect.right) {
          return angular.element(menu).css({
            top: adjustedTop,
            right: "inherit"
          });
        } else {
          return angular.element(menu).css({
            top: adjustedTop,
            right: adjustedRight
          });
        }
      });
    }
  };
});


/***/ }),
/* 165 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thDropdown/thItem.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thItem", function() {
  return {
    restrict: "E",
    replace: true,
    require: "^thDropdown",
    scope: {
      href: "@",
      name: "@",
      icon: "@"
    },
    template: function(element, attrs) {
      switch (false) {
        case attrs.href == null:
          return __webpack_require__(/*! ./thItem.link.template.html */ 272);
        default:
          return __webpack_require__(/*! ./thItem.action.template.html */ 271);
      }
    },
    controller: ["$element", "$attrs", function($element, $attrs) {
      if ($attrs.ngClick || $attrs.href === '' || $attrs.href === '#') {
        return $element.on('click', function(e) {
          return e.preventDefault();
        });
      }
    }]
  };
});


/***/ }),
/* 166 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/lib/thError/thError.directive.coffee ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thError", function() {
  return {
    restrict: "E",
    transclude: true,
    template: __webpack_require__(/*! ./thError.template.html */ 273),
    scope: {
      message: "@"
    },
    controllerAs: "ctrl",
    bindToController: true,
    controller: function() {},
    link: function(scope, elm, attr, ctrl, $transclude) {
      return $transclude(function(clone) {
        if (clone.length) {
          return scope.ctrl.message = true;
        }
      });
    }
  };
});


/***/ }),
/* 167 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/lib/thFilter/filters/autocomplete/autocompleteFilter.service.coffee ***!
  \*********************************************************************************/
/***/ (function(module, exports) {

var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

angular.module("ThemisComponents").factory("AutocompleteFilter", ["FilterBase", function(FilterBase) {
  var AutocompleteFilter;
  return AutocompleteFilter = (function(superClass) {
    extend(AutocompleteFilter, superClass);

    function AutocompleteFilter(options, initialState, displayField, trackField) {
      if (options == null) {
        options = {};
      }
      if (displayField == null) {
        displayField = "name";
      }
      if (trackField == null) {
        trackField = "id";
      }
      this.clearState = bind(this.clearState, this);
      this.getState = bind(this.getState, this);
      AutocompleteFilter.__super__.constructor.call(this, options);
      this.placeholder = options.placeholder;
      this.model = null;
      this.displayField = displayField;
      this.trackField = trackField;
      if (initialState) {
        this.model = {};
        this.model[this.displayField] = initialState.name;
        this.model[this.trackField] = initialState.value;
      }
    }

    AutocompleteFilter.prototype.type = "autocomplete";

    AutocompleteFilter.prototype.getState = function() {
      if (this.model) {
        return {
          name: this.model[this.displayField],
          value: this.model[this.trackField]
        };
      } else {
        return null;
      }
    };

    AutocompleteFilter.prototype.clearState = function() {
      return this.model = null;
    };

    return AutocompleteFilter;

  })(FilterBase);
}]);


/***/ }),
/* 168 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/lib/thFilter/filters/autocomplete/index.coffee ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./autocompleteFilter.service */ 167);

__webpack_require__(/*! ./thFilter.autocomplete.directive */ 169);


/***/ }),
/* 169 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/lib/thFilter/filters/autocomplete/thFilter.autocomplete.directive.coffee ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive('thFilterAutocomplete', ["AutocompleteFilter", function(AutocompleteFilter) {
  return {
    restrict: 'E',
    scope: {
      filterSet: '=',
      filterOptions: '=',
      placeholder: '@',
      initialState: "=?"
    },
    bindToController: true,
    controllerAs: 'thFilterAutocomplete',
    template: __webpack_require__(/*! ./thFilter.autocomplete.template.html */ 274),
    controller: ["$scope", "$injector", function($scope, $injector) {
      var ModelClass, dataSource, fieldIdentifier, ref, ref1, ref2, ref3, ref4, ref5, ref6;
      if (!((ref = this.filterOptions.autocompleteOptions) != null ? ref.modelClass : void 0)) {
        throw new Error("thFilterAutocomplete: must specify " + "'modelClass' in autocomplete options.");
      }
      try {
        ModelClass = $injector.get(this.filterOptions.autocompleteOptions.modelClass);
        dataSource = ModelClass.create();
      } catch (error) {
        throw new Error("thFilterAutocomplete: cannot inject class '" + (this.filterOptions.autocompleteOptions.modelClass + "'."));
      }
      fieldIdentifier = ((ref1 = this.filterOptions.autocompleteOptions) != null ? ref1.queryField : void 0) || "query";
      this.displayField = ((ref2 = this.filterOptions.autocompleteOptions) != null ? ref2.displayField : void 0) || "name";
      this.trackField = ((ref3 = this.filterOptions.autocompleteOptions) != null ? ref3.trackField : void 0) || "id";
      this.combobox = ((ref4 = this.filterOptions.autocompleteOptions) != null ? ref4.combobox : void 0) || "false";
      this.multiple = ((ref5 = this.filterOptions.autocompleteOptions) != null ? ref5.multiple : void 0) || "false";
      this.options = {
        displayField: this.displayField,
        trackField: this.trackField,
        dataSource: dataSource,
        rowTemplate: ((ref6 = this.filterOptions.autocompleteOptions) != null ? ref6.rowTemplate : void 0) || void 0
      };
      $scope.$on("thFilter:destroyed", (function(_this) {
        return function() {
          _this.filterSet.remove(_this.filter);
          if (_this.filter.getState() != null) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this));
      $scope.$on("th.filters.clear", (function(_this) {
        return function() {
          return _this.filter.clearState();
        };
      })(this));
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, controller) {
          controller.filter = new AutocompleteFilter(controller.filterOptions, controller.initialState, controller.displayField, controller.trackField);
          return controller.filterSet.push(controller.filter);
        }
      };
    }
  };
}]);


/***/ }),
/* 170 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/lib/thFilter/filters/date/dateFilter.service.coffee ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var moment,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

moment = __webpack_require__(/*! moment */ 1);

angular.module("ThemisComponents").factory("DateFilter", ["FilterBase", function(FilterBase) {
  var DateFilter;
  return DateFilter = (function(superClass) {
    extend(DateFilter, superClass);

    function DateFilter(options, operatorOptions, defaultOperatorIndex, initialState) {
      var ref;
      if (options == null) {
        options = {};
      }
      this.operatorOptions = operatorOptions != null ? operatorOptions : null;
      this.defaultOperatorIndex = defaultOperatorIndex != null ? defaultOperatorIndex : 0;
      this.clearState = bind(this.clearState, this);
      this.getState = bind(this.getState, this);
      DateFilter.__super__.constructor.call(this, options);
      this.placeholder = options.placeholder;
      this.clearState();
      if (this.operatorOptions != null) {
        if (!(this.operatorOptions instanceof Array && this.operatorOptions.length > 0)) {
          throw new Error("DateFilter: must specify operator options of type Array.");
        }
        if ((this.defaultOperatorIndex != null) && this.defaultOperatorIndex >= this.operatorOptions.length) {
          throw new Error("DateFilter: must specify valid default operator index.");
        }
      }
      if (initialState != null) {
        this.model = moment(initialState.value);
        this.operator = (ref = this.operatorOptions) != null ? ref.find(function(item) {
          return item.value === initialState.operator;
        }) : void 0;
        if ((this.operatorOptions != null) && (initialState.operator != null) && (this.operator == null)) {
          throw new Error("DateFilter: must specify valid initial operator.");
        }
      }
    }

    DateFilter.prototype.type = "date";

    DateFilter.prototype.getState = function() {
      var ref, ref1, state;
      if ((ref = this.model) != null ? ref.isValid() : void 0) {
        state = {
          value: this.model.format()
        };
        if (((ref1 = this.operator) != null ? ref1.value : void 0) != null) {
          state.operator = this.operator.value;
        }
        return state;
      } else {
        return null;
      }
    };

    DateFilter.prototype.clearState = function() {
      var ref;
      this.model = null;
      return this.operator = (ref = this.operatorOptions) != null ? ref[this.defaultOperatorIndex] : void 0;
    };

    return DateFilter;

  })(FilterBase);
}]);


/***/ }),
/* 171 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thFilter/filters/date/index.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./dateFilter.service */ 170);

__webpack_require__(/*! ./thFilter.date.directive */ 172);


/***/ }),
/* 172 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************!*\
  !*** ./src/lib/thFilter/filters/date/thFilter.date.directive.coffee ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var moment;

moment = __webpack_require__(/*! moment */ 1);

angular.module("ThemisComponents").directive("thFilterDate", ["DateFilter", function(DateFilter) {
  return {
    restrict: "E",
    scope: {
      filterSet: "=",
      filterOptions: "=",
      operatorOptions: "=?",
      defaultOperatorIndex: "@?",
      placeholder: "@?",
      initialState: "=?"
    },
    bindToController: true,
    controllerAs: "thFilterDate",
    template: __webpack_require__(/*! ./thFilter.date.template.html */ 275),
    controller: ["$scope", function($scope) {
      var ref;
      this.hasOperator = ((ref = this.operatorOptions) != null ? ref.length : void 0) > 0;
      this.onValueChange = (function(_this) {
        return function(newVal) {
          _this.filter.model = newVal;
          return _this.filterSet.onFilterChange();
        };
      })(this);
      this.onOperatorChange = (function(_this) {
        return function() {
          if (_this.filter.model != null) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this);
      $scope.$on("thFilter:destroyed", (function(_this) {
        return function() {
          _this.filterSet.remove(_this.filter);
          if (_this.filter.getState() != null) {
            _this.filterSet.onFilterChange();
          }
        };
      })(this));
      $scope.$on("th.filters.clear", (function(_this) {
        return function() {
          return _this.filter.clearState();
        };
      })(this));
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, controller) {
          controller.filter = new DateFilter(controller.filterOptions, controller.operatorOptions, controller.defaultOperatorIndex, controller.initialState);
          controller.filterSet.push(controller.filter);
        }
      };
    }
  };
}]);


/***/ }),
/* 173 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/lib/thFilter/filters/filterBase.service.coffee ***!
  \************************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").factory("FilterBase", function() {
  var FilterBase;
  return FilterBase = (function() {
    function FilterBase(options) {
      if (options == null) {
        options = {};
      }
      this.fieldIdentifier = options.fieldIdentifier, this.name = options.name, this.metadata = options.metadata;
    }

    FilterBase.prototype.getState = function() {
      throw new Error(("FilterBase: Subclass '" + this.type + "' must implement ") + "'getState'.");
    };

    FilterBase.prototype.getMetadata = function() {
      return this.metadata;
    };

    return FilterBase;

  })();
});


/***/ }),
/* 174 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thFilter/filters/filterSet.service.coffee ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var debounce;

debounce = __webpack_require__(/*! debounce */ 24);

angular.module('ThemisComponents').factory('FilterSet', function() {
  var FilterSet;
  return FilterSet = function(options) {
    var debouncedFilterChange, filterArray, onFilterChange, onInitialized;
    if (options == null) {
      options = {};
    }
    onFilterChange = options.onFilterChange, onInitialized = options.onInitialized;
    if (!(onFilterChange instanceof Function)) {
      throw new Error("FilterSet needs to be passed the following " + "function: onFilterChange: ->");
    }
    debouncedFilterChange = debounce(function() {
      return onFilterChange();
    }, 300);
    filterArray = [];
    filterArray.onFilterChange = debouncedFilterChange;
    filterArray.onInitialized = onInitialized;
    filterArray.remove = function(filterBase) {
      var index;
      index = this.indexOf(filterBase);
      if (index !== -1) {
        return this.splice(index, 1);
      }
    };
    filterArray.getState = function() {
      return this.reduce(function(paramsCollector, filter) {
        var state;
        if (state = filter.getState()) {
          paramsCollector[filter.fieldIdentifier] = state;
        }
        return paramsCollector;
      }, {});
    };
    filterArray.getMetadata = function() {
      return this.reduce(function(paramsCollector, filter) {
        var metadata;
        if (metadata = filter.getMetadata()) {
          paramsCollector[filter.fieldIdentifier] = metadata;
        }
        return paramsCollector;
      }, {});
    };
    return filterArray;
  };
});


/***/ }),
/* 175 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/lib/thFilter/filters/index.coffee ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./autocomplete/ */ 168);

__webpack_require__(/*! ./date/ */ 171);

__webpack_require__(/*! ./input/ */ 176);

__webpack_require__(/*! ./number/ */ 179);

__webpack_require__(/*! ./select/ */ 182);

__webpack_require__(/*! ./time/ */ 185);

__webpack_require__(/*! ./filterBase.service */ 173);

__webpack_require__(/*! ./filterSet.service */ 174);


/***/ }),
/* 176 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thFilter/filters/input/index.coffee ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./inputFilter.service */ 177);

__webpack_require__(/*! ./thFilter.input.directive */ 178);


/***/ }),
/* 177 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/lib/thFilter/filters/input/inputFilter.service.coffee ***!
  \*******************************************************************/
/***/ (function(module, exports) {

var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

angular.module("ThemisComponents").factory("InputFilter", ["FilterBase", function(FilterBase) {
  var InputFilter;
  return InputFilter = (function(superClass) {
    extend(InputFilter, superClass);

    function InputFilter(options, initialState) {
      if (options == null) {
        options = {};
      }
      this.clearState = bind(this.clearState, this);
      this.getState = bind(this.getState, this);
      InputFilter.__super__.constructor.call(this, options);
      this.placeholder = options.placeholder;
      this.model = initialState != null ? initialState.value : void 0;
    }

    InputFilter.prototype.type = "input";

    InputFilter.prototype.getState = function() {
      var ref;
      if (((ref = this.model) != null ? ref.length : void 0) > 0) {
        return {
          value: this.model
        };
      } else {
        return null;
      }
    };

    InputFilter.prototype.clearState = function() {
      return this.model = null;
    };

    return InputFilter;

  })(FilterBase);
}]);


/***/ }),
/* 178 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************************!*\
  !*** ./src/lib/thFilter/filters/input/thFilter.input.directive.coffee ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thFilterInput", ["InputFilter", function(InputFilter) {
  return {
    restrict: "E",
    scope: {
      filterSet: "=",
      filterOptions: "=",
      ignoreBlurEvents: "<?",
      placeholder: "@",
      initialState: "=?"
    },
    bindToController: true,
    controllerAs: "thFilterInput",
    template: __webpack_require__(/*! ./thFilter.input.template.html */ 276),
    controller: ["$scope", function($scope) {
      var enterEventCode, isUpdatedValue, lastValue;
      lastValue = void 0;
      enterEventCode = 13;
      isUpdatedValue = (function(_this) {
        return function() {
          var newValue, ref;
          newValue = (ref = _this.filter.getState()) != null ? ref.value : void 0;
          if (newValue !== lastValue) {
            lastValue = newValue;
            return true;
          }
          return false;
        };
      })(this);
      this.onKeypress = (function(_this) {
        return function(event) {
          if (isUpdatedValue()) {
            if (event.which === enterEventCode) {
              return _this.filterSet.onFilterChange();
            }
          }
        };
      })(this);
      this.onBlur = (function(_this) {
        return function(event) {
          if (isUpdatedValue()) {
            if (!_this.ignoreBlurEvents) {
              return _this.filterSet.onFilterChange();
            }
          }
        };
      })(this);
      this.$onInit = function() {
        var ref;
        lastValue = (ref = this.initialState) != null ? ref.value : void 0;
        return this.ignoreBlurEvents || (this.ignoreBlurEvents = false);
      };
      $scope.$on("thFilter:destroyed", (function(_this) {
        return function() {
          _this.filterSet.remove(_this.filter);
          if (_this.filter.getState() != null) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this));
      $scope.$on("th.filters.clear", (function(_this) {
        return function() {
          return _this.filter.clearState();
        };
      })(this));
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, controller) {
          controller.filter = new InputFilter(controller.filterOptions, controller.initialState);
          return controller.filterSet.push(controller.filter);
        }
      };
    }
  };
}]);


/***/ }),
/* 179 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thFilter/filters/number/index.coffee ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./numberFilter.service */ 180);

__webpack_require__(/*! ./thFilter.number.directive */ 181);


/***/ }),
/* 180 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/lib/thFilter/filters/number/numberFilter.service.coffee ***!
  \*********************************************************************/
/***/ (function(module, exports) {

var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

angular.module("ThemisComponents").factory("NumberFilter", ["FilterBase", function(FilterBase) {
  var NumberFilter;
  return NumberFilter = (function(superClass) {
    extend(NumberFilter, superClass);

    function NumberFilter(options, operatorOptions, defaultOperatorIndex, initialState) {
      if (options == null) {
        options = {};
      }
      if (operatorOptions == null) {
        operatorOptions = [];
      }
      if (defaultOperatorIndex == null) {
        defaultOperatorIndex = 0;
      }
      this.clearState = bind(this.clearState, this);
      this.getState = bind(this.getState, this);
      NumberFilter.__super__.constructor.call(this, options);
      this.placeholder = options.placeholder;
      if (!(operatorOptions instanceof Array && operatorOptions.length > 0)) {
        throw new Error("NumberFilter: must specify operator options of type Array.");
      }
      this.operatorOptions = operatorOptions;
      if (!(defaultOperatorIndex < operatorOptions.length)) {
        throw new Error("NumberFilter: must specify valid default operator index.");
      }
      this.defaultOperatorIndex = defaultOperatorIndex;
      this.clearState();
      if (initialState) {
        this.model = initialState.value;
        this.operator = this.operatorOptions.find(function(item) {
          return item.value === initialState.operator;
        });
      }
    }

    NumberFilter.prototype.type = "number";

    NumberFilter.prototype.getState = function() {
      if (this.model) {
        return {
          value: this.model,
          operator: this.operator.value
        };
      } else {
        return null;
      }
    };

    NumberFilter.prototype.clearState = function() {
      this.model = null;
      return this.operator = this.operatorOptions[this.defaultOperatorIndex];
    };

    return NumberFilter;

  })(FilterBase);
}]);


/***/ }),
/* 181 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/lib/thFilter/filters/number/thFilter.number.directive.coffee ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thFilterNumber", ["NumberFilter", function(NumberFilter) {
  return {
    restrict: "E",
    scope: {
      filterSet: "=",
      filterOptions: "=",
      operatorOptions: "=",
      defaultOperatorIndex: "@",
      initialState: "=?"
    },
    bindToController: true,
    controllerAs: "thFilterNumber",
    template: __webpack_require__(/*! ./thFilter.number.template.html */ 277),
    controller: ["$scope", function($scope) {
      var enterEventCode, isUpdatedValue, lastValue;
      lastValue = void 0;
      enterEventCode = 13;
      isUpdatedValue = (function(_this) {
        return function() {
          var newValue, ref;
          newValue = (ref = _this.filter.getState()) != null ? ref.value : void 0;
          if (newValue !== lastValue) {
            lastValue = newValue;
            return true;
          }
          return false;
        };
      })(this);
      this.onKeypress = function(event) {
        if (isUpdatedValue()) {
          if (event.which === enterEventCode) {
            return this.filterSet.onFilterChange();
          }
        }
      };
      this.onBlur = (function(_this) {
        return function(event) {
          if (isUpdatedValue()) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this);
      this.$onInit = function() {
        var ref;
        return lastValue = (ref = this.initialState) != null ? ref.value : void 0;
      };
      this.onOperatorChange = function() {
        if (this.filter.model != null) {
          return this.filterSet.onFilterChange();
        }
      };
      $scope.$on("thFilter:destroyed", (function(_this) {
        return function() {
          _this.filterSet.remove(_this.filter);
          if (_this.filter.getState() != null) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this));
      $scope.$on("th.filters.clear", (function(_this) {
        return function() {
          return _this.filter.clearState();
        };
      })(this));
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, controller) {
          controller.filter = new NumberFilter(controller.filterOptions, controller.operatorOptions, controller.defaultOperatorIndex, controller.initialState);
          return controller.filterSet.push(controller.filter);
        }
      };
    }
  };
}]);


/***/ }),
/* 182 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thFilter/filters/select/index.coffee ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./selectFilter.service */ 183);

__webpack_require__(/*! ./thFilter.select.directive */ 184);


/***/ }),
/* 183 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/lib/thFilter/filters/select/selectFilter.service.coffee ***!
  \*********************************************************************/
/***/ (function(module, exports) {

var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

angular.module("ThemisComponents").factory("SelectFilter", ["$http", "FilterBase", function($http, FilterBase) {
  var SelectFilter;
  return SelectFilter = (function(superClass) {
    extend(SelectFilter, superClass);

    function SelectFilter(options, selectOptionsOverride, initialState) {
      if (options == null) {
        options = {};
      }
      this.clearState = bind(this.clearState, this);
      this.getState = bind(this.getState, this);
      this.setOption = bind(this.setOption, this);
      SelectFilter.__super__.constructor.call(this, options);
      this.placeholder = options.placeholder;
      this.options = selectOptionsOverride || options.selectOptions || [];
      this.model = null;
      this.nameField = options.selectOptionsNameField || "name";
      this.valueField = options.selectOptionsValueField || "value";
      if (options.selectOptionsUrl != null) {
        this.model = initialState != null ? initialState : null;
        $http({
          method: "GET",
          url: options.selectOptionsUrl
        }).then((function(_this) {
          return function(response) {
            var ref, ref1;
            _this.options = options.selectOptionsCallback ? options.selectOptionsCallback(response.data) : (ref = response.data) != null ? (ref1 = ref.data) != null ? ref1.map(function(item) {
              return {
                name: item[_this.nameField],
                value: item[_this.valueField]
              };
            }) : void 0 : void 0;
            if (initialState != null) {
              return _this.setOption(initialState.value);
            }
          };
        })(this));
      } else {
        if (initialState != null) {
          this.setOption(initialState.value);
        }
      }
    }

    SelectFilter.prototype.type = "select";

    SelectFilter.prototype.setOption = function(value) {
      return this.model = this.options.find(function(item) {
        return item.value === value;
      });
    };

    SelectFilter.prototype.getState = function() {
      if (this.model) {
        return {
          name: this.model.name,
          value: this.model.value
        };
      } else {
        return null;
      }
    };

    SelectFilter.prototype.clearState = function() {
      return this.model = null;
    };

    return SelectFilter;

  })(FilterBase);
}]);


/***/ }),
/* 184 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/lib/thFilter/filters/select/thFilter.select.directive.coffee ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive('thFilterSelect', ["SelectFilter", "$timeout", function(SelectFilter, $timeout) {
  return {
    restrict: 'E',
    scope: {
      filterSet: '=',
      filterOptions: '=',
      options: '=',
      placeholder: '@',
      initialState: '=?'
    },
    bindToController: true,
    controllerAs: 'thFilterSelect',
    template: __webpack_require__(/*! ./thFilter.select.template.html */ 278),
    controller: ["$scope", function($scope) {
      this.onValueChange = function() {
        return $timeout((function(_this) {
          return function() {
            return _this.filterSet.onFilterChange();
          };
        })(this));
      };
      $scope.$on("thFilter:destroyed", (function(_this) {
        return function() {
          _this.filterSet.remove(_this.filter);
          if (_this.filter.getState() != null) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this));
      $scope.$on("th.filters.clear", (function(_this) {
        return function() {
          return _this.filter.clearState();
        };
      })(this));
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, controller) {
          controller.filter = new SelectFilter(controller.filterOptions, controller.options, controller.initialState);
          return controller.filterSet.push(controller.filter);
        }
      };
    }
  };
}]);


/***/ }),
/* 185 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thFilter/filters/time/index.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./timeFilter.service */ 187);

__webpack_require__(/*! ./thFilter.time.directive */ 186);


/***/ }),
/* 186 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************!*\
  !*** ./src/lib/thFilter/filters/time/thFilter.time.directive.coffee ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thFilterTime", ["TimeFilter", "$timeout", function(TimeFilter, $timeout) {
  return {
    restrict: "E",
    scope: {
      filterSet: "=",
      filterOptions: "=",
      ngBlur: "&",
      initialState: "=?"
    },
    bindToController: true,
    controllerAs: "thFilterTime",
    template: __webpack_require__(/*! ./thFilter.time.template.html */ 279),
    controller: ["$scope", "$element", function($scope, $element) {
      var enterEventCode, isUpdatedValue, lastValue, setInvalid, setValid;
      lastValue = void 0;
      enterEventCode = 13;
      this.operatorOptions = [
        {
          name: "Before",
          value: "<"
        }, {
          name: "Exactly",
          value: "="
        }, {
          name: "After",
          value: ">"
        }
      ];
      this.defaultOperatorIndex = 1;
      isUpdatedValue = (function(_this) {
        return function() {
          var newValue;
          newValue = _this.filter.model || void 0;
          if (newValue !== lastValue) {
            lastValue = newValue;
            return true;
          }
          return false;
        };
      })(this);
      setValid = function() {
        return $timeout(function() {
          return $element.querySelectorAll(".th-input-wrapper").removeClass("is-invalid");
        });
      };
      setInvalid = function() {
        return $timeout(function() {
          return $element.querySelectorAll(".th-input-wrapper").addClass("is-invalid");
        });
      };
      this.validateInput = function() {
        if (this.filter.validate()) {
          setValid();
        } else {
          setInvalid();
        }
        if (isUpdatedValue()) {
          return this.filterSet.onFilterChange();
        }
      };
      this.onKeypress = function(event) {
        if (event.which === enterEventCode) {
          return this.validateInput();
        }
      };
      this.onOperatorChange = function() {
        if (this.filter.time) {
          return this.filterSet.onFilterChange();
        }
      };
      this.$onInit = function() {
        var ref;
        return lastValue = (ref = this.initialState) != null ? ref.value : void 0;
      };
      $scope.$on("thFilter:destroyed", (function(_this) {
        return function() {
          _this.filterSet.remove(_this.filter);
          if (_this.filter.getState() != null) {
            return _this.filterSet.onFilterChange();
          }
        };
      })(this));
      $scope.$on("th.filters.clear", (function(_this) {
        return function() {
          setValid();
          return _this.filter.clearState();
        };
      })(this));
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, controller) {
          controller.filter = new TimeFilter(controller.filterOptions, controller.operatorOptions, controller.defaultOperatorIndex, controller.initialState);
          return controller.filterSet.push(controller.filter);
        }
      };
    }
  };
}]);


/***/ }),
/* 187 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/lib/thFilter/filters/time/timeFilter.service.coffee ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var moment,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

moment = __webpack_require__(/*! moment */ 1);

angular.module("ThemisComponents").factory("TimeFilter", ["FilterBase", function(FilterBase) {
  var TimeFilter;
  return TimeFilter = (function(superClass) {
    extend(TimeFilter, superClass);

    function TimeFilter(options, operatorOptions, defaultOperatorIndex, initialState) {
      if (options == null) {
        options = {};
      }
      if (operatorOptions == null) {
        operatorOptions = [];
      }
      if (defaultOperatorIndex == null) {
        defaultOperatorIndex = 0;
      }
      this.clearState = bind(this.clearState, this);
      this.getState = bind(this.getState, this);
      this.validate = bind(this.validate, this);
      TimeFilter.__super__.constructor.call(this, options);
      this.placeholder = options.placeholder;
      if (!(operatorOptions instanceof Array && operatorOptions.length > 0)) {
        throw new Error("TimeFilter: must specify operator options of type Array.");
      }
      this.operatorOptions = operatorOptions;
      if (!(defaultOperatorIndex < operatorOptions.length)) {
        throw new Error("TimeFilter: must specify valid default operator index.");
      }
      this.defaultOperatorIndex = defaultOperatorIndex;
      this.clearState();
      if (initialState) {
        this.model = initialState.value;
        this.operator = this.operatorOptions.find(function(item) {
          return item.value === initialState.operator;
        });
        this.validate();
      }
    }

    TimeFilter.prototype.type = "time";

    TimeFilter.prototype.validate = function() {
      var ref;
      if (((ref = this.model) != null ? ref.length : void 0) > 0) {
        this.time = moment(this.model, ["H:ma", "Hma", "H:m a", "Hm a", "Ha", "H a", "H:m", "Hm", "H"], true);
        if (this.time.isValid()) {
          this.model = this.time.format("h:mm A");
          return true;
        } else {
          this.time = null;
          return false;
        }
      } else {
        this.time = null;
        return true;
      }
    };

    TimeFilter.prototype.getState = function() {
      if (this.time) {
        return {
          value: this.time.format("H:mm"),
          operator: this.operator.value
        };
      } else {
        return null;
      }
    };

    TimeFilter.prototype.clearState = function() {
      this.model = this.time = null;
      return this.operator = this.operatorOptions[this.defaultOperatorIndex];
    };

    return TimeFilter;

  })(FilterBase);
}]);


/***/ }),
/* 188 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/lib/thFilter/thCustomFilterConverter.service.coffee ***!
  \*****************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('CustomFilterConverter', function() {
  var CustomFilterConverter;
  return CustomFilterConverter = (function() {
    function CustomFilterConverter() {}

    CustomFilterConverter.prototype.mapToCustomFilterArray = function(data) {
      throw new Error("'CustomFilterConverter' must implement Function " + "'mapToCustomFilterArray(data)'");
    };

    return CustomFilterConverter;

  })();
});


/***/ }),
/* 189 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/lib/thFilter/thCustomFilterRow.controller.coffee ***!
  \**************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').controller('thCustomFilterRow.controller', ["$timeout", "$scope", "DataSource", function($timeout, $scope, DataSource) {
  this.rowFilterOptions = this.rowSelectValue ? [this.rowSelectValue] : [];
  this.checkboxOptions = [
    {
      name: "Enabled",
      value: "true"
    }, {
      name: "Disabled",
      value: "false"
    }
  ];
  this.numberOperatorOptions = [
    {
      name: "<",
      value: "<"
    }, {
      name: "<=",
      value: "<="
    }, {
      name: "=",
      value: "="
    }, {
      name: ">=",
      value: ">="
    }, {
      name: ">",
      value: ">"
    }
  ];
  this.currencyOperatorOptions = [
    {
      name: "Less than",
      value: "<"
    }, {
      name: "Exactly",
      value: "="
    }, {
      name: "More than",
      value: ">"
    }
  ];
  this.dateOperatorOptions = [
    {
      name: "Before",
      value: "<"
    }, {
      name: "On",
      value: "="
    }, {
      name: "After",
      value: ">"
    }
  ];
  this.broadcastFilterDestroyed = function() {
    return $scope.$broadcast("thFilter:destroyed");
  };
  this.removeRow = (function(_this) {
    return function() {
      _this.onRemoveRow();
      return _this.broadcastFilterDestroyed();
    };
  })(this);
  this.onRowSelectChange = (function(_this) {
    return function(value) {
      return $timeout(function() {
        var currentSelectedType, lastSelectedType;
        _this.initialState = null;
        if (_this.rowFilterOptions.length > 0) {
          lastSelectedType = _this.rowFilterOptions[0][_this.customFieldOptions.trackField];
          currentSelectedType = value != null ? value[_this.customFieldOptions.trackField] : void 0;
          if (lastSelectedType !== currentSelectedType) {
            _this.broadcastFilterDestroyed();
          }
        }
        return _this.rowFilterOptions = _this.rowSelectValue ? [_this.rowSelectValue] : [];
      });
    };
  })(this);
  this.customFieldOptions = {
    autoBind: false,
    displayField: 'name',
    trackField: 'fieldIdentifier',
    filter: "contains",
    dataSource: this.customFilterTypesDataSource
  };
}]);


/***/ }),
/* 190 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/lib/thFilter/thCustomFilterRow.directive.coffee ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./thCustomFilterRow.controller */ 189);

angular.module("ThemisComponents").directive("thCustomFilterRow", function() {
  return {
    restrict: "E",
    require: "^thCustomFilters",
    scope: {
      rowSelectValue: "=",
      initialState: "=?",
      customFilterTypesDataSource: "<",
      filterSet: "=",
      onRemoveRow: "&",
      showSearchHint: "<"
    },
    bindToController: true,
    controllerAs: "thCustomFilterRow",
    template: __webpack_require__(/*! ./thCustomFilterRow.template.html */ 280),
    controller: "thCustomFilterRow.controller"
  };
});


/***/ }),
/* 191 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thFilter/thCustomFilters.component.coffee ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var CustomFilters,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

CustomFilters = (function() {
  CustomFilters.$inject = ["CustomFilterConverter", "$http", "$timeout", "DataSource"];
  var MAX_API_RESULTS;

  MAX_API_RESULTS = 200;


  /*@ngInject */

  function CustomFilters(CustomFilterConverter, $http, $timeout, DataSource) {
    this.CustomFilterConverter = CustomFilterConverter;
    this.$http = $http;
    this.$timeout = $timeout;
    this.DataSource = DataSource;
    this.shouldShowComponent = bind(this.shouldShowComponent, this);
    this.customFilterRows = [];
    this._nextIdentifier = 0;
  }

  CustomFilters.prototype.$onInit = function() {
    var customFilterConverter, customFilterUrl, ref;
    ref = this.thFilterCtrl.options, customFilterUrl = ref.customFilterUrl, customFilterConverter = ref.customFilterConverter;
    this.name = this.thFilterCtrl.options.name;
    this.initialState = this.thFilterCtrl.options.initialState;
    this.customFilterTypes = this.thFilterCtrl.options.customFilterTypes;
    this.customFilterTypesDataSource = null;
    this.filterSet = this.thFilterCtrl.options.filterSet;
    this.showSearchHint = this.thFilterCtrl.options.showSearchHint;
    if (!(this.filterSet instanceof Array)) {
      throw new Error("thCustomFilters: must specify 'filterSet'.");
    }
    if (!(this.customFilterTypes instanceof Array || (customFilterUrl != null))) {
      throw new Error("thCustomFilters: must specify 'customFilterTypes' or 'customFilterUrl'.");
    }
    return this.registerFilterInit(customFilterUrl, customFilterConverter);
  };

  CustomFilters.prototype.addCustomFilterRow = function() {
    return this.customFilterRows.push({
      identifier: this._getNextIdentifier()
    });
  };

  CustomFilters.prototype.registerFilterInit = function(customFilterUrl, customFilterConverter) {
    this.customFilterTypesDataSource = this.DataSource.createDataSource({
      serverFiltering: true,
      schema: {
        data: "data"
      },
      transport: {
        read: (function(_this) {
          return function(e) {
            var customFilterUrlPlusParams, ref, ref1;
            if (customFilterUrl != null) {
              customFilterUrlPlusParams = customFilterUrl;
              if ((ref = e.data) != null ? (ref1 = ref.filter) != null ? ref1.filters[0] : void 0 : void 0) {
                customFilterUrlPlusParams += "&query=" + e.data.filter.filters[0].value;
              }
              return _this.$http.get(customFilterUrlPlusParams).then(function(response) {
                var meta, ref2;
                if (customFilterConverter != null) {
                  if (!(customFilterConverter.constructor.prototype instanceof _this.CustomFilterConverter)) {
                    throw new Error("customFilterConverter must be instance of 'CustomFilterConverter'.");
                  }
                  ref2 = customFilterConverter.mapToCustomFilterArray(response.data), _this.customFilterTypes = ref2[0], meta = ref2[1];
                  _this.showSearchHint = meta.showSearchHint;
                } else {
                  _this.customFilterTypes = response.data;
                  _this.showSearchHint = false;
                }
                return e.success({
                  data: _this.customFilterTypes
                });
              }, function() {
                return e.error();
              });
            } else {
              return e.success({
                data: _this.customFilterTypes
              });
            }
          };
        })(this)
      }
    });
    return this.thFilterCtrl.registerInitPromise(this.getInitialData(this.customFilterTypesDataSource));
  };

  CustomFilters.prototype.getInitialData = function(dataSource) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        return dataSource.fetch().then(function() {
          _this.$timeout(function() {
            return _this._disableServerFilteringIfNoFurtherPagesOfResults(_this.customFilterTypes, dataSource, MAX_API_RESULTS);
          });
          _this.parseParams();
          return resolve();
        }, function() {
          return reject();
        });
      };
    })(this));
  };

  CustomFilters.prototype._disableServerFilteringIfNoFurtherPagesOfResults = function(customFilterTypes, customFilterTypesDataSource, max) {
    if (customFilterTypes.length < max) {
      return customFilterTypesDataSource.options.serverFiltering = false;
    }
  };

  CustomFilters.prototype.removeCustomFilterRow = function(identifier) {
    var index;
    index = this.customFilterRows.findIndex(function(item) {
      return item.identifier === identifier;
    });
    if (!(index > -1)) {
      throw new Error("thCustomFilters: Cannot find custom filter identifier.");
    }
    return this.customFilterRows.splice(index, 1);
  };

  CustomFilters.prototype.parseParams = function() {
    var i, key, len, ref, results, type;
    if (this.initialState) {
      ref = Object.keys(this.initialState);
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        type = this.customFilterTypes.find(function(item) {
          return item.fieldIdentifier === key;
        });
        if (type == null) {
          continue;
        }
        results.push(this.customFilterRows.push({
          identifier: this._getNextIdentifier(),
          type: type,
          initialState: this.initialState[key]
        }));
      }
      return results;
    }
  };

  CustomFilters.prototype._getNextIdentifier = function() {
    var identifier;
    identifier = this._nextIdentifier;
    this._nextIdentifier += 1;
    return identifier.toString();
  };

  CustomFilters.prototype.shouldShowComponent = function() {
    var ref, ref1;
    return ((ref = this.customFilterTypes) != null ? ref.length : void 0) > 0 || ((ref1 = this.customFilterRows) != null ? ref1.length : void 0) > 0;
  };

  return CustomFilters;

})();

angular.module("ThemisComponents").component("thCustomFilters", {
  require: {
    thFilterCtrl: "^thFilter"
  },
  controllerAs: "thCustomFilters",
  template: __webpack_require__(/*! ./thCustomFilters.template.html */ 281),
  controller: CustomFilters
});


/***/ }),
/* 192 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thFilter/thFilter.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thFilter", ["FilterSet", "$q", function(FilterSet, $q) {
  return {
    restrict: "E",
    scope: {
      options: "="
    },
    bindToController: true,
    transclude: true,
    controllerAs: "thFilter",
    template: __webpack_require__(/*! ./thFilter.template.html */ 282),
    controller: ["$scope", "$element", function($scope, $element) {
      this.initPromises = [];
      this.filterSet = this.options.filterSet;
      if (!(this.filterSet instanceof Array)) {
        throw new Error("thFilter: options must specify 'filterSet'.");
      }
      this.registerInitPromise = function(promise) {
        return this.initPromises.push(promise);
      };
      this.clearFilters = function() {
        $scope.$broadcast("th.filters.clear");
        return this.filterSet.onFilterChange();
      };
    }],
    link: function(scope, element, attrs, thFilterController) {
      scope.thFilter.isLoading = true;
      return $q.when(Promise.all(scope.thFilter.initPromises), function() {
        var base;
        scope.thFilter.isLoading = false;
        return typeof (base = scope.thFilter.filterSet).onInitialized === "function" ? base.onInitialized() : void 0;
      }, function() {
        return console.log('thFilter: Some filters were unable to load.');
      });
    }
  };
}]);


/***/ }),
/* 193 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/lib/thFilter/thSearchRow.directive.coffee ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive('thSearchRow', ["InputFilter", "$timeout", function(InputFilter, $timeout) {
  return {
    restrict: 'E',
    require: "^thFilter",
    scope: {
      options: "=",
      fieldIdentifier: "@?"
    },
    bindToController: true,
    controllerAs: 'thSearchRow',
    template: __webpack_require__(/*! ./thSearchRow.template.html */ 283),
    controller: ["$scope", function($scope) {
      this.queryFilterOptions = {
        fieldIdentifier: this.fieldIdentifier || "query",
        placeholder: 'Enter search term...'
      };
    }],
    compile: function() {
      return {
        pre: function(scope, element, attrs, thFilterController) {
          var filterSet, initialState, ref;
          ref = thFilterController != null ? thFilterController.options : void 0, filterSet = ref.filterSet, initialState = ref.initialState;
          if (!(filterSet instanceof Array)) {
            throw new Error("thSearchRow: must specify 'filterSet' attribute.");
          }
          scope.thSearchRow.filterSet = filterSet;
          scope.thSearchRow.initialState = initialState != null ? initialState[scope.thSearchRow.queryFilterOptions.fieldIdentifier] : void 0;
          return thFilterController != null ? thFilterController.registerInitPromise(new Promise(function(resolve) {
            return $timeout(function() {
              return resolve();
            });
          })) : void 0;
        }
      };
    }
  };
}]);


/***/ }),
/* 194 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thFilter/thStaticFilters.directive.coffee ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thStaticFilters", ["FilterSet", "$timeout", function(FilterSet, $timeout) {
  return {
    restrict: "E",
    require: "^thFilter",
    scope: {
      options: "="
    },
    bindToController: true,
    controllerAs: "thStaticFilters",
    template: __webpack_require__(/*! ./thStaticFilters.template.html */ 284),
    controller: function() {},
    compile: function() {
      return {
        pre: function(scope, element, attrs, thFilterController) {
          var filterSet, initialState, ref, staticFilters;
          ref = thFilterController != null ? thFilterController.options : void 0, filterSet = ref.filterSet, staticFilters = ref.staticFilters, initialState = ref.initialState;
          if (!(filterSet instanceof Array)) {
            throw new Error("thStaticFilters: options must specify 'filterSet'.");
          }
          scope.thStaticFilters.filterSet = filterSet;
          if (!(staticFilters instanceof Array)) {
            throw new Error("thStaticFilters: options must specify 'staticFilters'.");
          }
          scope.thStaticFilters.staticFilters = [];
          staticFilters.forEach(function(item) {
            var state;
            state = initialState != null ? initialState[item.fieldIdentifier] : void 0;
            return scope.thStaticFilters.staticFilters.push({
              filterOptions: item,
              initialState: state
            });
          });
          return thFilterController != null ? thFilterController.registerInitPromise(new Promise(function(resolve) {
            return $timeout(function() {
              return resolve();
            });
          })) : void 0;
        }
      };
    }
  };
}]);


/***/ }),
/* 195 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/lib/thInput/thInput.directive.coffee ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thInput", ["Utilities", function(Utilities) {
  return {
    restrict: "EA",
    bindToController: true,
    controllerAs: 'input',
    replace: true,
    require: ["?^form", "thInput"],
    scope: {
      type: '@',
      name: '@',
      icon: '@',
      prefix: '@',
      postfix: '@',
      placeholder: '@',
      condensed: "=",
      ngModel: '=?',
      ngRequired: '=',
      ngDisabled: '=',
      ngBlur: '&',
      ngKeypress: '&',
      ngMinlength: '=',
      ngMaxlength: '=',
      ngPattern: '=',
      min: '=',
      max: '=',
      step: '=',
      ngChange: '&'
    },
    template: __webpack_require__(/*! ./thInput.template.html */ 285),
    controller: function() {
      this.thOnChange = function() {
        return Utilities.onChange(this.ngChange);
      };
    },
    link: function(scope, element, attribute, controllerArray) {
      var controller, fieldName, form, input, ref, ref1;
      form = (ref = controllerArray[0]) != null ? ref : null;
      controller = controllerArray[1];
      fieldName = (ref1 = controller.name) != null ? ref1 : null;
      controller.isInvalid = function() {
        if (!(fieldName && form)) {
          return false;
        }
        return form[fieldName].$invalid && (form[fieldName].$touched || form.$submitted);
      };
      input = element.find("input");
      input.on("focus", function() {
        return element.addClass("has-focus");
      });
      input.on("blur", function() {
        return element.removeClass("has-focus");
      });
    }
  };
}]);


/***/ }),
/* 196 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./src/lib/thLazy/thLazy.component.coffee ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

var LazyController, qs, uuid;

uuid = __webpack_require__(/*! uuid */ 27);

qs = __webpack_require__(/*! qs */ 26);

LazyController = (function() {

  /*@ngInject */
  LazyController.$inject = ["$scope", "LazyManager"];
  function LazyController($scope, LazyManager) {
    this.$scope = $scope;
    this.LazyManager = LazyManager;
    this.resolveFunc = null;
    this.loading = true;
    this.loadError = false;
    this.messageOverride = this.errorMessage != null;
  }

  LazyController.prototype.$onInit = function() {
    var ref;
    this.resolveFunc = (ref = this.metaLoader) != null ? ref.registerWithMetaLoader() : void 0;
    this.LazyManager.addLazyObject(this);
    return this.$scope.$on("$includeContentError", (function(_this) {
      return function() {
        _this.loadError = true;
        _this.loading = false;
        if (_this.resolveFunc) {
          return _this.resolveFunc();
        }
      };
    })(this));
  };

  LazyController.prototype.loadingComplete = function() {
    this.loadError = false;
    this.loading = false;
    if (this.resolveFunc) {
      return this.resolveFunc();
    }
  };

  LazyController.prototype.reload = function() {
    var params, queryString;
    this.loadError = false;
    this.loading = true;
    if (this.src.indexOf('?') !== -1) {
      queryString = this.src.substring(this.src.indexOf('?') + 1);
      params = qs.parse(queryString);
      params.refreshCacheBuster = uuid.v1();
      return this.src = this.src.replace(queryString, qs.stringify(params));
    } else {
      return this.src = this.src + "?refreshCacheBuster=" + uuid.v1();
    }
  };

  return LazyController;

})();

angular.module('ThemisComponents').component("thLazy", {
  template: __webpack_require__(/*! ./thLazy.template.html */ 286),
  controllerAs: "lazy",
  require: {
    metaLoader: "?^thMetaLoader"
  },
  bindings: {
    src: "@",
    name: "@",
    errorMessage: "@"
  },
  controller: LazyController
});


/***/ }),
/* 197 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thLazy/thLazyManager.service.coffee ***!
  \*****************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('LazyManager', function() {
  var addLazyObject, lazyObjects, reload;
  lazyObjects = {};
  reload = function(name) {
    return lazyObjects[name].reload();
  };
  addLazyObject = function(lazyObject) {
    if (lazyObject.name) {
      return lazyObjects[lazyObject.name] = lazyObject;
    }
  };
  return {
    reload: reload,
    addLazyObject: addLazyObject,
    _lazyObjects: lazyObjects
  };
});


/***/ }),
/* 198 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thLazy/thMetaLoader.component.coffee ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var MetaLoader;

MetaLoader = (function() {

  /*@ngInject */
  MetaLoader.$inject = ["$q"];
  function MetaLoader($q) {
    this.$q = $q;
    this.loading = true;
    this.lazyPromises = [];
  }

  MetaLoader.prototype.registerWithMetaLoader = function() {
    var promise, resolveFunc;
    resolveFunc = null;
    promise = this.$q(function(resolve) {
      return resolveFunc = resolve;
    });
    this.lazyPromises.push(promise);
    return resolveFunc;
  };

  MetaLoader.prototype.$postLink = function() {
    return this.$q.all(this.lazyPromises).then((function(_this) {
      return function() {
        return _this.loading = false;
      };
    })(this));
  };

  return MetaLoader;

})();

angular.module('ThemisComponents').component("thMetaLoader", {
  transclude: true,
  controllerAs: "meta",
  template: __webpack_require__(/*! ./thMetaLoader.template.html */ 287),
  controller: MetaLoader
});


/***/ }),
/* 199 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thLoader/thLoader.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thLoader", function() {
  return {
    restrict: "EA",
    template: __webpack_require__(/*! ./thLoader.template.html */ 288),
    transclude: true,
    replace: true,
    controllerAs: 'loader',
    scope: {
      visible: "=?trigger",
      promise: "=",
      timeout: "=",
      size: "@",
      theme: "="
    },
    bindToController: true,
    link: function(scope, element, attrs) {
      var messageElement;
      messageElement = element[0].querySelector(".loading-text");
      return messageElement.innerText || (messageElement.innerText = "Loading...");
    },
    controller: ["$timeout", function($timeout) {
      this.visible || (this.visible = true);
      switch (false) {
        case this.timeout == null:
          $timeout((function(_this) {
            return function() {
              return _this.visible = false;
            };
          })(this), this.timeout);
          break;
        case this.promise == null:
          this.promise["finally"]((function(_this) {
            return function() {
              return _this.visible = false;
            };
          })(this));
      }
    }]
  };
});


/***/ }),
/* 200 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/lib/thModal/thModal.directive.coffee ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thModal", function() {
  return {
    restrict: "EA",
    replace: true,
    controllerAs: "modal",
    bindToController: true,
    scope: {
      modalData: "="
    },
    template: __webpack_require__(/*! ./thModal.template.html */ 289),
    controller: ["ModalManager", function(ModalManager) {
      this.name = this.modalData.name;
      this.content = this.modalData.content;
      this.context = this.modalData.context;
      this.size = this.modalData.size;
      this.dismiss = (function(_this) {
        return function(response) {
          if (_this.size === "fullpage") {
            return ModalManager.dismissWithRejectedPromise(_this.name, response);
          } else {
            return ModalManager.dismiss(_this.name, response);
          }
        };
      })(this);
      this.confirm = function(response) {
        return ModalManager.confirm(this.name, response);
      };
    }]
  };
});


/***/ }),
/* 201 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thModal/thModalAnchor.directive.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module("ThemisComponents").directive("thModalAnchor", function() {
  return {
    restrict: "EA",
    replace: true,
    controllerAs: "anchor",
    bindToController: true,
    template: __webpack_require__(/*! ./thModalAnchor.template.html */ 290),
    controller: ["ModalManager", function(ModalManager) {
      this.modals = ModalManager._modals;
      if (this.modals.length > 0) {
        this.showFullPageModal = this.modals[0].size === "fullpage";
        this.modalLimit = this.showFullPageModal ? 2 : 1;
      }
    }]
  };
});


/***/ }),
/* 202 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/lib/thModal/thModalManager.service.coffee ***!
  \*******************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").factory("ModalManager", ["$http", "$q", function($http, $q) {
  var addModal, confirm, dismiss, dismissWithRejectedPromise, findByName, modals, remove, show;
  modals = [];
  show = function(options) {
    var context, deferred, modalPromise, name, params, path, ref, ref1, ref2, ref3, ref4, ref5, size, template;
    if (options == null) {
      options = {};
    }
    path = (ref = options.path) != null ? ref : "", name = (ref1 = options.name) != null ? ref1 : path, params = (ref2 = options.params) != null ? ref2 : "", context = (ref3 = options.context) != null ? ref3 : {}, template = (ref4 = options.template) != null ? ref4 : null, size = (ref5 = options.size) != null ? ref5 : "medium";
    deferred = $q.defer();
    modalPromise = template != null ? $q.when({
      data: template
    }) : $http({
      url: path,
      method: "GET",
      params: params
    });
    modalPromise.then(function(response) {
      return addModal({
        content: response.data,
        name: name,
        deferred: deferred,
        context: context,
        size: size
      });
    });
    return deferred.promise;
  };
  confirm = function(name, response) {
    var modal;
    modal = findByName(name);
    if (modal != null) {
      modal.deferred.resolve(response);
    }
    return remove(name);
  };
  dismiss = function(name, response) {
    var modal;
    modal = findByName(name);
    return remove(name);
  };
  dismissWithRejectedPromise = function(name, response) {
    var modal;
    modal = findByName(name);
    if (modal != null) {
      modal.deferred.reject(response);
    }
    return remove(name);
  };
  findByName = function(name) {
    var index;
    index = modals.findIndex(function(element) {
      return element.name === name;
    });
    return modals[index];
  };
  remove = function(name) {
    var index;
    index = modals.findIndex(function(element) {
      return element.name === name;
    });
    if (index !== -1) {
      return modals.splice(index, 1);
    }
  };
  addModal = function(arg) {
    var content, context, deferred, name, ref, size;
    content = arg.content, name = arg.name, deferred = arg.deferred, context = arg.context, size = arg.size;
    if (name !== ((ref = modals[0]) != null ? ref.name : void 0)) {
      return modals.push({
        name: name,
        content: content,
        deferred: deferred,
        context: context,
        size: size
      });
    }
  };
  return {
    show: show,
    dismiss: dismiss,
    dismissWithRejectedPromise: dismissWithRejectedPromise,
    confirm: confirm,
    _modals: modals
  };
}]);


/***/ }),
/* 203 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thPlural/thPlural.filter.coffee ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

var plural;

plural = __webpack_require__(/*! pluralize */ 16);

angular.module('ThemisComponents').filter("pluralize", function() {
  return function(string, count) {
    if (string == null) {
      string = "";
    }
    if (count == null) {
      count = 0;
    }
    return plural(string, count);
  };
});


/***/ }),
/* 204 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thPopover/thAddPopover.helper.coffee ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

module.exports = function($compile, $timeout) {
  return function(target, contentCallback) {
    var arrow, dismissPopover, element, getContentPromise, overlay, positionPopover, prepareScope, renderPopover, scope, view;
    element = target.element;
    view = null;
    arrow = null;
    overlay = null;
    scope = getContentPromise = null;
    prepareScope = function(contentScope) {
      scope = contentScope.$new();
      scope.overflow = element.attr('overflow');
      scope.loaded = false;
      scope.content = "";
      return scope.$watch('content', function() {
        return positionPopover();
      });
    };
    positionPopover = function() {
      if (view === null) {
        return;
      }
      return $timeout(function() {
        var anchorRect, arrowOffset, bottom, goalHeight, maxWidth, minInset, minLeft, minRight, top, viewGoalLeft, viewLeft, viewRect, viewWidth;
        view.css({
          width: "auto",
          bottom: "auto"
        });
        minInset = 12;
        arrowOffset = 6;
        anchorRect = element[0].getBoundingClientRect();
        viewRect = view[0].getBoundingClientRect();
        maxWidth = window.innerWidth - minInset * 3;
        viewWidth = scope.loaded ? Math.min(maxWidth, viewRect.width) : 200;
        viewGoalLeft = anchorRect.left + anchorRect.width / 2 - viewWidth / 2 - arrowOffset;
        top = anchorRect.top + anchorRect.height + 10;
        minLeft = minInset;
        viewLeft = Math.max(minLeft, viewGoalLeft);
        minRight = window.innerWidth - viewWidth - minInset * 3;
        if (viewGoalLeft > 0) {
          viewLeft = Math.min(minRight, viewGoalLeft);
        }
        goalHeight = viewRect.height;
        if (goalHeight + top > window.innerHeight) {
          bottom = minInset;
        }
        view.css({
          top: top + "px",
          left: viewLeft + "px",
          width: viewWidth + "px"
        });
        if (bottom != null) {
          view.css({
            bottom: bottom + "px"
          });
        }
        arrow.css({
          top: top + "px",
          left: (anchorRect.left + anchorRect.width / 2 - arrowOffset) + "px"
        });
        overlay.removeClass('th-popover-hidden');
        view.removeClass('th-popover-hidden');
        return arrow.removeClass('th-popover-hidden');
      });
    };
    dismissPopover = function() {
      scope.$$watchers = [];
      if (overlay != null) {
        overlay.remove();
      }
      if (view != null) {
        view.remove();
      }
      return arrow != null ? arrow.remove() : void 0;
    };
    renderPopover = function() {
      var contentScope, ref;
      if (scope == null) {
        ref = contentCallback(), getContentPromise = ref.getContentPromise, contentScope = ref.contentScope;
        if (!(getContentPromise instanceof Function)) {
          throw new Error("renderPopover: contentCallback() must return " + "Function 'getContentPromise'.");
        }
        if (contentScope == null) {
          throw new Error("renderPopover: concentCallback() must return " + "'contentScope'.");
        }
        prepareScope(contentScope);
      }
      return scope.$apply(function() {
        var body;
        if (view == null) {
          view = angular.element(__webpack_require__(/*! ./thPopover.template.html */ 294));
        }
        if (overlay == null) {
          overlay = angular.element(__webpack_require__(/*! ./thPopover.overlay.template.html */ 293));
        }
        if (arrow == null) {
          arrow = angular.element(__webpack_require__(/*! ./thPopover.arrow.template.html */ 292));
        }
        body = angular.element(document.body);
        body.append(overlay);
        body.append(view);
        body.append(arrow);
        overlay.on('click', function() {
          return dismissPopover();
        });
        $compile(view)(scope);
        positionPopover();
        view.on('click', function(event) {
          var blacklist, blacklistSelector, whitelist, whitelistSelector;
          whitelist = ['.chzn-container *', '.th-switch *', '[th-popover-persist]', '.ui-select-choices-row-inner *', '.ui-datepicker-prev', '.ui-datepicker-next'];
          blacklist = ['a', 'a *', 'td[ng-repeat="day in week"] span[ng-click="selectDate(day)"]'];
          whitelistSelector = whitelist.join(', ');
          blacklistSelector = blacklist.join(', ');
          if (!event.target.matches(whitelistSelector) && event.target.matches(blacklist)) {
            return scope.$apply(function() {
              return dismissPopover();
            });
          }
        });
        if (!scope.loaded) {
          return getContentPromise().then(function(content) {
            scope.loaded = true;
            return scope.content = content.data;
          }, function() {
            return dismissPopover();
          });
        }
      });
    };
    return {
      dismissPopover: dismissPopover,
      renderPopover: renderPopover
    };
  };
};


/***/ }),
/* 205 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thPopover/thPopover.directive.coffee ***!
  \******************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').directive("thPopover", ["PopoverManager", function(PopoverManager) {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      var ref;
      if (!(((ref = attributes.thPopover) != null ? ref.length : void 0) > 0)) {
        throw new Error("thPopover: must specify content name.");
      }
      return PopoverManager.attachPopover(element, function() {
        return PopoverManager.getContent(attributes.thPopover);
      });
    }
  };
}]);


/***/ }),
/* 206 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/lib/thPopover/thPopoverContent.directive.coffee ***!
  \*************************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").directive("thPopoverContent", ["PopoverManager", function(PopoverManager) {
  return {
    restrict: "E",
    link: function(scope, element, attributes) {
      var ref;
      if (!(((ref = attributes.name) != null ? ref.length : void 0) > 0)) {
        throw new Error("thPopoverContent: must specify name attribute.");
      }
      PopoverManager.addContent(attributes.name, element[0].innerHTML, scope);
      element.attr('style', 'display: none;');
    }
  };
}]);


/***/ }),
/* 207 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thPopover/thPopoverManager.service.coffee ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').factory('PopoverManager', ["$compile", "$timeout", "$q", function($compile, $timeout, $q) {
  var addContent, addPopoverToTarget, addTarget, attachPopover, contents, getContent, hidePopover, showPopover, targets;
  contents = {};
  targets = {};
  addContent = function(contentName, contentHtml, contentScope) {
    return contents[contentName] = {
      getContentPromise: function() {
        return $q(function(resolve, reject) {
          return resolve({
            data: contentHtml
          });
        });
      },
      contentScope: contentScope
    };
  };
  getContent = function(contentName) {
    if (!document.body.querySelector("[name=" + contentName + "]")) {
      throw new Error("PopoverManager: content '" + contentName + "' not found in document body.");
    }
    if (!contents.hasOwnProperty(contentName)) {
      throw new Error("PopoverManager: content '" + contentName + "' does not exist.");
    }
    return contents[contentName];
  };
  addTarget = function(targetName, element) {
    return targets[targetName] = {
      element: element
    };
  };
  hidePopover = function(targetName) {
    var target;
    if (!targets.hasOwnProperty(targetName)) {
      throw new Error("PopoverManager: target '" + targetName + "' does not exist.");
    }
    target = targets[targetName];
    if (target.dismissPopover != null) {
      return target.dismissPopover();
    }
  };
  showPopover = function(options) {
    var contentCallback, dismissPopover, ref, renderPopover, target, targetName;
    if (options == null) {
      options = {};
    }
    targetName = options.targetName, contentCallback = options.contentCallback;
    if (!targets.hasOwnProperty(targetName)) {
      throw new Error("PopoverManager: target '" + targetName + "' does not exist.");
    }
    if (!(contentCallback instanceof Function)) {
      throw new Error("PopoverManager: options must have Function " + "'contentCallback'.");
    }
    target = targets[targetName];
    if (target.renderPopover == null) {
      ref = addPopoverToTarget(target, contentCallback), dismissPopover = ref.dismissPopover, renderPopover = ref.renderPopover;
      target.renderPopover = renderPopover;
      target.dismissPopover = dismissPopover;
    }
    return $timeout(function() {
      return target.renderPopover();
    });
  };
  attachPopover = function(element, contentCallback) {
    var renderPopover;
    renderPopover = addPopoverToTarget({
      element: element
    }, contentCallback).renderPopover;
    return element.on('click', function() {
      return renderPopover();
    });
  };
  addPopoverToTarget = __webpack_require__(/*! ./thAddPopover.helper */ 204)($compile, $timeout);
  return {
    attachPopover: attachPopover,
    showPopover: showPopover,
    hidePopover: hidePopover,
    addContent: addContent,
    getContent: getContent,
    addTarget: addTarget
  };
}]);


/***/ }),
/* 208 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/lib/thPopover/thPopoverTarget.directive.coffee ***!
  \************************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").directive("thPopoverTarget", ["PopoverManager", function(PopoverManager) {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      var ref;
      if (!(((ref = attributes.thPopoverTarget) != null ? ref.length : void 0) > 0)) {
        throw new Error("thPopoverTarget: must specify name.");
      }
      return PopoverManager.addTarget(attributes.thPopoverTarget, element);
    }
  };
}]);


/***/ }),
/* 209 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/lib/thPopover/thPopoverUrl.directive.coffee ***!
  \*********************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").directive("thPopoverUrl", ["$http", "PopoverManager", function($http, PopoverManager) {
  return {
    restrict: "A",
    link: function(scope, element, attributes) {
      var ref;
      if (!(((ref = attributes.thPopoverUrl) != null ? ref.length : void 0) > 0)) {
        throw new Error("thPopoverUrl: must specify url.");
      }
      return PopoverManager.attachPopover(element, function() {
        return {
          getContentPromise: function() {
            return $http.get(attributes.thPopoverUrl);
          },
          contentScope: scope
        };
      });
    }
  };
}]);


/***/ }),
/* 210 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/lib/thRadioGroup/thRadioButton.directive.coffee ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thRadioButton", function() {
  return {
    require: '^thRadioGroup',
    restrict: "EA",
    replace: true,
    template: __webpack_require__(/*! ./thRadioButton.template.html */ 295),
    scope: {
      value: '@',
      change: '&ngChange'
    },
    link: function(scope, element, attrs, group) {
      scope.group = group;
      group.addButton(scope, attrs['checked'] != null);
      element.on('click', function() {
        return group.selectButton(scope);
      });
    }
  };
});


/***/ }),
/* 211 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/lib/thRadioGroup/thRadioGroup.directive.coffee ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive('thRadioGroup', function() {
  return {
    restrict: 'EA',
    replace: true,
    transclude: true,
    bindToController: true,
    controllerAs: 'radioGroup',
    template: __webpack_require__(/*! ./thRadioGroup.template.html */ 296),
    scope: {
      name: '@',
      change: '&ngChange',
      value: '=ngModel',
      ngRequired: "="
    },
    controller: ["$scope", "$attrs", function($scope, $attrs) {
      var buttons;
      buttons = [];
      this.addButton = function(button, checked) {
        button.checked = $attrs['ngModel'] != null ? this.value === button.value : checked;
        return buttons.push(button);
      };
      $scope.$watch(((function(_this) {
        return function() {
          return _this.value;
        };
      })(this)), function(updatedValue) {
        var button, i, len, results;
        if (!updatedValue) {
          results = [];
          for (i = 0, len = buttons.length; i < len; i++) {
            button = buttons[i];
            results.push(button.checked = false);
          }
          return results;
        }
      });
      this.selectButton = function(buttonToSelect) {
        var button, i, len;
        if (!buttonToSelect.checked) {
          $scope.$apply((function(_this) {
            return function() {
              if ($attrs['ngModel'] != null) {
                return _this.value = buttonToSelect.value;
              }
            };
          })(this));
          if (this.change != null) {
            this.change();
          }
          for (i = 0, len = buttons.length; i < len; i++) {
            button = buttons[i];
            if (button.checked === true) {
              button.change();
            }
          }
          buttonToSelect.change();
          return $scope.$apply(function() {
            var j, len1, results;
            buttonToSelect.checked = true;
            results = [];
            for (j = 0, len1 = buttons.length; j < len1; j++) {
              button = buttons[j];
              if (button !== buttonToSelect) {
                results.push(button.checked = false);
              }
            }
            return results;
          });
        }
      };
    }]
  };
});


/***/ }),
/* 212 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thSelect/thSelect.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thSelect", ["Utilities", function(Utilities) {
  return {
    restrict: "EA",
    template: __webpack_require__(/*! ./thSelect.template.html */ 300),
    controllerAs: "select",
    replace: true,
    bindToController: true,
    transclude: true,
    require: ["?^form", "thSelect"],
    scope: {
      condensed: "=",
      options: "=?",
      ngModel: "=?",
      name: "@",
      ngDisabled: "=",
      ngChange: "&",
      ngRequired: "=",
      placeholder: "@",
      nameField: "@?",
      valueField: "@?"
    },
    controller: ["$scope", "$element", "$attrs", "$transclude", function($scope, $element, $attrs, $transclude) {
      var isOptionElement, isSelected;
      this.selectedText = this.placeholder;
      if (this.ngModel != null) {
        this.selectedText = this.ngModel.name;
      }
      if (this.options == null) {
        this.options = [];
      }
      if (this.nameField == null) {
        this.nameField = "name";
      }
      if (this.valueField == null) {
        this.valueField = "value";
      }
      isSelected = function(element) {
        return element.hasAttribute("selected");
      };
      isOptionElement = function(element) {
        return element.tagName === "OPTION";
      };
      angular.forEach($transclude(), (function(_this) {
        return function(element) {
          var groupName, groupedOptions;
          if (element.tagName === "OPTGROUP") {
            groupName = element.label;
            groupedOptions = angular.element(element).find("option");
            angular.forEach(groupedOptions, function(option) {
              if (isOptionElement(option)) {
                _this.options.push({
                  name: option.text,
                  value: option.value,
                  group: groupName
                });
                if (isSelected(option)) {
                  return _this.ngModel = {
                    name: option.text,
                    value: option.value,
                    group: groupName
                  };
                }
              }
            });
          }
          if (isOptionElement(element)) {
            _this.options.push({
              name: element.text,
              value: element.value
            });
            if (isSelected(element)) {
              return _this.ngModel = {
                name: element.text,
                value: element.value
              };
            }
          }
        };
      })(this));
      this.thOnChange = function() {
        return Utilities.onChange(this.ngChange);
      };
    }],
    link: function(scope, element, attribute, controllerArray) {
      var controller, fieldName, form, i, len, option, options, ref, ref1, select, selectedElementCount, setTextToDarkGrey, setTextToLightGrey, textElement;
      form = (ref = controllerArray[0]) != null ? ref : null;
      controller = controllerArray[1];
      fieldName = (ref1 = controller.name) != null ? ref1 : null;
      controller.isInvalid = function() {
        if (!(fieldName && form)) {
          return false;
        }
        return form[fieldName].$invalid && (form[fieldName].$touched || form.$submitted);
      };
      textElement = element[0].getElementsByClassName("text-wrapper")[0];
      setTextToLightGrey = function() {
        return textElement.className += " light-grey";
      };
      setTextToDarkGrey = function() {
        var classes;
        classes = textElement.className.replace("light-grey", "");
        return textElement.className = classes;
      };
      scope.$watch(function() {
        return controller.ngModel;
      }, function(newValue) {
        if ((newValue != null ? newValue.name : void 0) != null) {
          controller.selectedText = newValue.name;
          return setTextToDarkGrey();
        } else {
          controller.selectedText = controller.placeholder;
          return setTextToLightGrey();
        }
      });
      selectedElementCount = 0;
      options = element.find("option");
      for (i = 0, len = options.length; i < len; i++) {
        option = options[i];
        if (option.hasAttribute("selected")) {
          selectedElementCount++;
        }
      }
      if (selectedElementCount > 1) {
        console.warn(counter + " options are set on a non-multiple select (name: " + attributes.name + "). The last selected option will be used.");
      }
      select = element.find("select");
      select.on("focus", function(event) {
        return event.target.previousElementSibling.classList.add("has-focus");
      });
      select.on("blur", function(event) {
        return event.target.previousElementSibling.classList.remove("has-focus");
      });
    }
  };
}]);


/***/ }),
/* 213 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thSwitch/thSwitch.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thSwitch", function() {
  return {
    restrict: "EA",
    replace: true,
    template: __webpack_require__(/*! ./thSwitch.template.html */ 301),
    scope: {
      name: '@',
      change: '&ngChange',
      state: '=?ngModel',
      ngRequired: "="
    },
    bindToController: true,
    controllerAs: 'switch',
    controller: ["$scope", "$element", function($scope, $element) {
      var ref;
      this.state = (ref = this.state) != null ? ref : false;
      this.toggle = function() {
        $scope.$apply((function(_this) {
          return function() {
            return _this.state = !_this.state;
          };
        })(this));
        if (this.change != null) {
          return this.change();
        }
      };
      $element.on('click', (function(_this) {
        return function() {
          return _this.toggle();
        };
      })(this));
    }]
  };
});


/***/ }),
/* 214 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/lib/thTable/thSimpleTableDelegate.service.coffee ***!
  \**************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('SimpleTableDelegate', ["TableDelegate", "$interpolate", function(TableDelegate, $interpolate) {
  var SimpleTableDelegate, interpolateEnd, interpolateStart;
  interpolateStart = $interpolate.startSymbol();
  interpolateEnd = $interpolate.endSymbol();
  return SimpleTableDelegate = function(options) {
    var checkValidRows, childrenArray, delegate, footers, generateActionsRowTemplate, generateBodyTemplate, generateCellTemplate, generateCellsRowTemplate, generateColTemplate, generateErrorRowTemplate, generateFootersTemplate, generateHeadersTemplate, generateNoDataRowTemplate, generatePaginationTemplate, getObjectReference, headers, ref, ref1;
    if (options == null) {
      options = {};
    }
    delegate = TableDelegate(options);
    headers = (ref = delegate.headers) != null ? ref : [], footers = (ref1 = delegate.footers) != null ? ref1 : [], generatePaginationTemplate = delegate.generatePaginationTemplate;
    generateHeadersTemplate = function() {
      if (!(headers.length > 0)) {
        return "";
      }
      return "<thead>\n  <tr role=\"row\">\n    <th ng-repeat=\"header in thTable.delegate.headers track by $index\"\n        ng-class=\"header.cssClasses()\"\n        ng-if=\"header.visible\"\n        ng-click=\"thTable.delegate.sortData(header)\"\n        tabindex=\"0\"\n        role=\"columnheader\"\n        >\n      " + interpolateStart + "header.name" + interpolateEnd + "\n      <span class=\"th-table-sort-icon\" aria-hidden=\"true\"></span>\n    </th>\n  </tr>\n</thead>";
    };
    generateFootersTemplate = function() {
      if (!(footers.length > 0)) {
        return "";
      }
      return "<tfoot>\n  <tr role=\"row\">\n    <td ng-repeat=\"footer in thTable.delegate.footers track by $index\"\n      ng-class=\"footer.AlignCssClass()\"\n      ng-if=\"footer.visible\"\n      tabindex=\"0\"\n      role=\"columnfooter\"\n      >\n      " + interpolateStart + "footer.value" + interpolateEnd + "\n    </td>\n  </tr>\n</tfoot>";
    };
    generateColTemplate = function() {
      var hasSetWidth;
      hasSetWidth = (headers.filter(function(header) {
        return header.width != null;
      })).length > 0;
      if (!hasSetWidth) {
        return "";
      }
      return headers.map(function(header, index) {
        var width;
        width = header.width ? "style='width: " + header.width + "'" : "";
        return "<col ng-if=\"thTable.delegate.headers[" + index + "].visible\" " + width + ">";
      }).join('');
    };
    generateBodyTemplate = function(rows) {
      var actionsRow, cellsRow, errorRow, noDataRow, numColumns;
      numColumns = childrenArray(rows['cells']).length;
      cellsRow = generateCellsRowTemplate(rows['cells'], rows['actions'] != null);
      actionsRow = generateActionsRowTemplate(rows['actions'], numColumns);
      noDataRow = generateNoDataRowTemplate(rows['no-data'], numColumns);
      errorRow = generateErrorRowTemplate(numColumns);
      return "<tbody>\n  " + noDataRow + "\n  " + errorRow + "\n  " + cellsRow + "\n  " + actionsRow + "\n</tbody>";
    };
    generateCellsRowTemplate = function(cellsRow, hasActionsRow) {
      var cells, ngRepeat, objectReference;
      ngRepeat = hasActionsRow ? "ng-repeat-start" : "ng-repeat";
      objectReference = getObjectReference(cellsRow);
      cells = childrenArray(cellsRow).map(function(cell, index) {
        return generateCellTemplate(cell, index);
      }).join('');
      return "<tr\n  class=\"th-table-cells-row\"\n  " + ngRepeat + "=\"" + objectReference + " in thTable.delegate.getData()\"\n  ng-mouseover=\"thTable.mouseOver($event)\"\n  ng-mouseleave=\"thTable.mouseLeave($event)\"\n  role=\"row\"\n  >\n  " + cells + "\n</tr>";
    };
    generateCellTemplate = function(cell, index) {
      return "<td\n  ng-if=\"thTable.delegate.headers[" + index + "].visible\"\n  role=\"gridcell\"\n  tabindex=\"-1\"\n  >\n  " + cell.innerHTML + "\n</td>";
    };
    generateActionsRowTemplate = function(actionsRow, numColumns) {
      var colspan, ref2, startColumn;
      if (actionsRow == null) {
        return "";
      }
      startColumn = parseInt((ref2 = actionsRow.getAttribute('start-column')) != null ? ref2 : 1, 10);
      colspan = numColumns - startColumn + 1;
      return "<tr\n  class=\"th-table-actions-row\"\n  ng-repeat-end\n  ng-mouseover=\"thTable.mouseOver($event)\"\n  ng-mouseleave=\"thTable.mouseLeave($event)\"\n  ng-if=\"thTable.delegate.headers[" + (startColumn - 1) + "].visible\"\n  role=\"row\"\n  data-column-start=\"" + startColumn + "\"\n  >\n  <td\n    class=\"th-table-actions-cell\"\n    ng-class=\"" + (startColumn - 1) + " == $index ? 'has-actions' : ''\"\n    role=\"gridcell\"\n    ng-repeat=\"header in thTable.delegate.headers track by $index\"\n    tabindex=\"-1\"\n    aria-selected=\"{{focused ? 'true' : 'false'}}\"\n    aria-hidden=\"{{" + (startColumn - 1) + " > $index}}\"\n    ng-if=\"header.visible &&\n           " + (startColumn - 1) + " >= $index &&\n           thTable.delegate.headers[" + (startColumn - 1) + "].visible\"\n    colspan=\"" + interpolateStart + "\n               " + (startColumn - 1) + " == $index ? " + colspan + " : 1\n             " + interpolateEnd + "\"\n    >\n    <span ng-if=\"" + (startColumn - 1) + " == $index\">\n      " + actionsRow.innerHTML + "\n    </span>\n  </td>\n</tr>";
    };
    generateNoDataRowTemplate = function(noDataRow, numColumns) {
      var contents, ref2;
      if (noDataRow == null) {
        noDataRow = {};
      }
      contents = (ref2 = noDataRow.innerHTML) != null ? ref2 : "No Results";
      return "<tr\n  class=\"th-table-no-data-row\"\n  ng-if=\"thTable.delegate.hasNoData()\"\n  role=\"row\"\n  >\n  <td\n    colspan=\"" + numColumns + "\"\n    role=\"gridcell\"\n    >\n    " + contents + "\n  </td>\n</tr>";
    };
    generateErrorRowTemplate = function(numColumns) {
      return "<tr\n  class=\"th-table-error-row\"\n  ng-if=\"thTable.delegate.getError()\"\n  role=\"row\"\n  >\n  <td\n    colspan=\"" + numColumns + "\"\n    role=\"gridcell\"\n    >\n    <th-error>\n      <div>\n        We had trouble loading your content.\n      </div>\n      <div>\n        <a href ng-click=\"thTable.delegate.reload()\">Try again</a>.\n      </div>\n    </th-error>\n  </td>\n</tr>";
    };
    checkValidRows = function(rows) {
      var actionsRow, cellsRow, numColumns, ref2, startColumn;
      if (rows["cells"] == null) {
        throw new Error("A simple table needs a cells row.");
      }
      cellsRow = rows['cells'];
      actionsRow = rows['actions'];
      if ((actionsRow != null) && getObjectReference(actionsRow) !== getObjectReference(cellsRow)) {
        throw new Error("object-reference must be the same" + "for the actions and cells rows.");
      }
      if (actionsRow != null) {
        startColumn = parseInt((ref2 = actionsRow.getAttribute('start-column')) != null ? ref2 : 1, 10);
        numColumns = childrenArray(cellsRow).length;
        if (startColumn > numColumns || startColumn < 1) {
          throw new Error("start-column must have a value between 1 and " + "the total number of cells.");
        }
      }
    };
    childrenArray = function(node) {
      return [].slice.call(node.children);
    };
    getObjectReference = function(row) {
      return row.getAttribute('object-reference') || 'item';
    };
    return Object.freeze(Object.assign({

      /*
       * This is the single required method that a custom delegate must implement.
       * The rest of the interface is inherited from TableDelegate.
       *
       * It receives as input a dictionary of {type: row} pairs, where the value,
       * row, is a <th-table-row type="...">...</th-table-row> DOM element
       * defined inside the <th-table> element.
       *
       * It must return the final table template that gets compiled in th-table's
       * parent scope, extended with the thTable key, which stores this table's
       * controller. This means you can use thTable.delegate in your template to
       * access the delegate's interface.
       */
      generateTableTemplate: function(rows) {
        var cols, pagination, tbody, tfoot, thead;
        if (rows == null) {
          rows = {};
        }
        checkValidRows(rows);
        thead = generateHeadersTemplate();
        tfoot = generateFootersTemplate();
        tbody = generateBodyTemplate(rows);
        pagination = generatePaginationTemplate();
        cols = generateColTemplate();
        return "<div ng-class=\"{'th-table-loading': thTable.delegate.isLoading(),\n                'th-table-blank': thTable.delegate.getData().length === 0}\"\n                >\n  <table\n    class=\"th-table\"\n    role=\"grid\"\n    aria-readonly=\"true\"\n    tabindex=\"0\"\n    >\n    " + cols + "\n    " + thead + "\n    " + tfoot + "\n    " + tbody + "\n  </table>\n\n  " + pagination + "\n\n  <div class=\"th-table-overlay\" ng-if=\"thTable.delegate.isLoading()\">\n    <th-loader class=\"th-table-loader\" size=\"small\">&nbsp;</th-loader>\n  </div>\n</div>";
      }
    }, delegate));
  };
}]);


/***/ }),
/* 215 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/lib/thTable/thTable.directive.coffee ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

var thTableKeyboardNavigation;

thTableKeyboardNavigation = __webpack_require__(/*! ./thTableKeyboardNavigation */ 221);

angular.module("ThemisComponents").directive("thTable", ["$compile", "Table", function($compile, Table) {
  return {
    restrict: "E",
    scope: {
      delegate: "="
    },
    bindToController: true,
    controllerAs: "thTable",
    controller: ["$scope", "$element", function($scope, $element) {
      var getEventRows;
      thTableKeyboardNavigation($element, $scope);
      this.mouseOver = function(event) {
        var eventRows;
        eventRows = getEventRows(event);
        angular.element(eventRows.hoverRow).addClass("th-table-hover-row");
        angular.element(eventRows.partnerRow).addClass("th-table-hover-row");
      };
      this.mouseLeave = function(event) {
        var eventRows;
        eventRows = getEventRows(event);
        angular.element(eventRows.hoverRow).removeClass("th-table-hover-row");
        angular.element(eventRows.partnerRow).removeClass("th-table-hover-row");
      };
      getEventRows = function(event) {
        var $hoverRow, hoverRow, nextRow, partnerRow;
        hoverRow = Array.prototype.slice.call($element[0].querySelectorAll("tr")).find(function(element) {
          return element.contains(event.target);
        });
        $hoverRow = angular.element(hoverRow);
        partnerRow = $hoverRow.hasClass("th-table-cells-row") ? (nextRow = $hoverRow.next(), nextRow.hasClass("th-table-actions-row") ? nextRow : void 0) : $hoverRow.hasClass("th-table-actions-row") ? hoverRow.previousElementSibling : void 0;
        return {
          hoverRow: hoverRow,
          partnerRow: partnerRow
        };
      };
    }],
    compile: function(element, attrs) {
      var table;
      table = Table({
        element: element[0]
      });
      table.clear();
      return {
        post: function(scope, element, attrs, controller) {
          var childScope, compiledTemplate, template;
          table.setDelegate(controller.delegate);
          template = table.generateTableTemplate();
          childScope = scope.$parent.$new(false, scope);
          childScope.thTable = scope.thTable;
          compiledTemplate = $compile(template)(childScope);
          return element.append(compiledTemplate);
        }
      };
    }
  };
}]);


/***/ }),
/* 216 */
/* unknown exports provided */
/* all exports used */
/*!************************************************!*\
  !*** ./src/lib/thTable/thTable.service.coffee ***!
  \************************************************/
/***/ (function(module, exports) {

var Table;

angular.module('ThemisComponents').factory('Table', function() {
  return Table;
});

Table = function(options) {
  var delegate, element, error, getDefinitionErrors, getRowDefinitionErrors, getRows, rows;
  if (options == null) {
    options = {};
  }
  element = options.element;
  delegate = void 0;
  getRowDefinitionErrors = function(row) {
    if (row.tagName !== 'TH-TABLE-ROW') {
      return "The element's children can only be <th-table-row>s.";
    }
    if (!row.hasAttribute('type')) {
      return "<th-table-row>s must have the type attribute defined.";
    }
  };
  getDefinitionErrors = function() {
    var child, error, i, len, ref;
    if (element == null) {
      return "You must pass a raw DOM element to Table.";
    }
    if (element.children.length === 0) {
      return "The element that you passed has no children.";
    }
    ref = element.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (error = getRowDefinitionErrors(child)) {
        return error;
      }
    }
  };
  if (error = getDefinitionErrors()) {
    throw new Error(error);
  }
  getRows = function() {
    var i, len, ref, row, rows, type;
    rows = {};
    ref = element.children;
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      type = row.getAttribute('type');
      rows[type] = row;
    }
    return rows;
  };
  rows = getRows();
  return Object.freeze({
    clear: function() {
      var results;
      results = [];
      while (element.firstChild != null) {
        results.push(element.removeChild(element.firstChild));
      }
      return results;
    },
    setDelegate: function(newDelegate) {
      return delegate = newDelegate;
    },
    generateTableTemplate: function() {
      if (delegate == null) {
        throw new Error("You cannot generate a template " + "before setting a delegate.");
      }
      return delegate.generateTableTemplate(rows);
    }
  });
};


/***/ }),
/* 217 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thTable/thTableCell.directive.coffee ***!
  \******************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').directive('thTableCell', function() {
  return {
    restrict: 'E'
  };
});


/***/ }),
/* 218 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thTable/thTableDelegate.service.coffee ***!
  \********************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").factory("TableDelegate", ["TablePagination", "TableFooter", function(TablePagination, TableFooter) {
  var TableDelegate;
  return TableDelegate = function(options) {
    var currentPage, currentSortHeader, data, error, fetchData, footers, generateFooterColumns, getCurrentPage, getPageSize, headers, loading, pageSize, ref, ref1, reload, setVisibleColumns, tablePagination, updateFooters, updateHeaderSorting, updatePagination;
    if (options == null) {
      options = {};
    }
    headers = (ref = options.headers) != null ? ref : [], footers = (ref1 = options.footers) != null ? ref1 : [], currentPage = options.currentPage, pageSize = options.pageSize, fetchData = options.fetchData;
    if (!(fetchData instanceof Function)) {
      throw new Error("TableDelegate needs to be passed the following function: " + "fetchData: (options, updateData) ->");
    }
    data = [];
    loading = false;
    error = false;
    currentSortHeader = headers.find(function(header) {
      return header.isSortActive();
    });
    reload = function(options) {
      var updateData;
      if (options == null) {
        options = {};
      }
      loading = true;
      error = false;
      if (options.currentPage != null) {
        updatePagination({
          currentPage: options.currentPage
        });
      }
      updateData = function(options) {
        var newData, newError, ref2, totalItems;
        if (options == null) {
          options = {};
        }
        newError = options.error;
        newData = (ref2 = options.data) != null ? ref2 : [];
        totalItems = options.totalItems;
        loading = false;
        if (newError != null) {
          return error = newError;
        } else {
          data = newData;
          if (totalItems != null) {
            return updatePagination({
              totalItems: totalItems
            });
          }
        }
      };
      return fetchData({
        currentPage: getCurrentPage(),
        pageSize: getPageSize(),
        sortHeader: currentSortHeader
      }, updateData);
    };
    tablePagination = TablePagination({
      currentPage: currentPage,
      pageSize: pageSize,
      reload: reload
    });
    updatePagination = tablePagination.updatePagination, getCurrentPage = tablePagination.getCurrentPage, getPageSize = tablePagination.getPageSize;
    updateHeaderSorting = function(newSortHeader) {
      if (newSortHeader.isSortActive()) {
        return newSortHeader.toggleSortDirection();
      } else {
        newSortHeader.activateSort();
        if (currentSortHeader != null) {
          currentSortHeader.deactivateSort();
        }
        return currentSortHeader = newSortHeader;
      }
    };
    setVisibleColumns = function(visibleColumns) {
      if (visibleColumns.length !== headers.length) {
        throw new Error("Array length does not match the number of columns.");
      }
      return visibleColumns.forEach(function(visibility, index) {
        var ref2, ref3;
        if ((ref2 = headers[index]) != null) {
          ref2.visible = visibility;
        }
        return (ref3 = footers[index]) != null ? ref3.visible = visibility : void 0;
      });
    };
    generateFooterColumns = function() {
      var allFooters, footersNeeded, i, results;
      if (!(footers.length > 0)) {
        return [];
      }
      footersNeeded = headers.length;
      allFooters = (function() {
        results = [];
        for (var i = 0; 0 <= footersNeeded ? i < footersNeeded : i > footersNeeded; 0 <= footersNeeded ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map(function() {
        return TableFooter();
      });
      footers.forEach(function(footer) {
        return allFooters[footer.column - 1] = footer.footer;
      });
      return allFooters;
    };
    footers = generateFooterColumns();
    updateFooters = function(footerColumns) {
      return footerColumns.forEach(function(footer) {
        var ref2;
        return (ref2 = footers[footer.column - 1]) != null ? ref2.value = footer.value : void 0;
      });
    };
    reload();
    return Object.freeze({
      headers: headers,
      footers: footers,
      reload: reload,
      setVisibleColumns: setVisibleColumns,
      updateFooters: updateFooters,
      getData: function() {
        return data;
      },
      getError: function() {
        return error;
      },
      isLoading: function() {
        return loading;
      },
      hasNoData: function() {
        return data.length === 0 && !loading && !error;
      },
      sortData: function(header) {
        if (header.sortField == null) {
          return;
        }
        updatePagination({
          currentPage: 1
        });
        updateHeaderSorting(header);
        return reload();
      },
      pages: tablePagination.pages,
      totalRecords: tablePagination.getTotalRecordCount,
      isLastPage: tablePagination.isLastPage,
      isFirstPage: tablePagination.isFirstPage,
      inactivePageLink: tablePagination.inactivePageLink,
      goToNextPage: tablePagination.goToNextPage,
      goToPrevPage: tablePagination.goToPrevPage,
      goToPage: tablePagination.goToPage,
      generatePaginationTemplate: tablePagination.generatePaginationTemplate
    });
  };
}]);


/***/ }),
/* 219 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thTable/thTableFooter.service.coffee ***!
  \******************************************************/
/***/ (function(module, exports) {

var TableFooter;

angular.module("ThemisComponents").factory("TableFooter", function() {
  return TableFooter;
});

TableFooter = function(options) {
  var align, ref, ref1, ref2, value, visible;
  if (options == null) {
    options = {};
  }
  value = (ref = options.value) != null ? ref : "-", align = (ref1 = options.align) != null ? ref1 : "left", visible = (ref2 = options.visible) != null ? ref2 : true;
  if (align !== "left" && align !== "center" && align !== "right") {
    throw new Error("align can be one of: left, center, or right.");
  }
  return {
    value: value,
    visible: visible,
    AlignCssClass: function() {
      return "th-table-align-" + align;
    }
  };
};


/***/ }),
/* 220 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thTable/thTableHeader.service.coffee ***!
  \******************************************************/
/***/ (function(module, exports) {

var TableHeader;

angular.module('ThemisComponents').factory('TableHeader', function() {
  return TableHeader;
});

TableHeader = function(options) {
  var align, name, opposite, ref, ref1, ref2, ref3, ref4, sortActive, sortDirection, sortField, visible, width;
  if (options == null) {
    options = {};
  }
  name = (ref = options.name) != null ? ref : '', sortField = options.sortField, width = options.width, sortActive = (ref1 = options.sortActive) != null ? ref1 : false, sortDirection = (ref2 = options.sortDirection) != null ? ref2 : "ascending", align = (ref3 = options.align) != null ? ref3 : "left", visible = (ref4 = options.visible) != null ? ref4 : true;
  if (sortActive && (sortField == null)) {
    throw new Error("You need to define sortField to enable sorting.");
  }
  if (sortDirection !== "ascending" && sortDirection !== "descending") {
    throw new Error("sortDirection can be either ascending or descending.");
  }
  if (align !== "left" && align !== "center" && align !== "right") {
    throw new Error("align can be one of: left, center, or right.");
  }
  opposite = {
    ascending: "descending",
    descending: "ascending"
  };
  return {
    name: name,
    sortField: sortField,
    width: width,
    visible: visible,
    cssClasses: function() {
      var classes;
      classes = [];
      if (sortField != null) {
        classes.push('th-table-sortable');
      }
      if (sortActive) {
        classes.push("th-table-sort-" + sortDirection);
      } else {
        classes.push("th-table-sort-none");
      }
      classes.push("th-table-align-" + align);
      return classes.join(' ');
    },
    isSortActive: function() {
      return sortActive || false;
    },
    getSortDirection: function() {
      return sortDirection;
    },
    activateSort: function() {
      sortActive = true;
      return sortDirection = "ascending";
    },
    deactivateSort: function() {
      return sortActive = false;
    },
    toggleSortDirection: function() {
      return sortDirection = opposite[sortDirection];
    }
  };
};


/***/ }),
/* 221 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thTable/thTableKeyboardNavigation.coffee ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var keycode;

keycode = __webpack_require__(/*! keycode */ 5);

module.exports = function($element, $scope) {
  var currentColumnIndex;
  currentColumnIndex = void 0;
  return $element.on('keydown', function(event) {
    if (angular.element(event.target)[0].tagName === "TD" || angular.element(event.target)[0].tagName === "TH" || angular.element(event.target)[0].tagName === "A") {
      if (event.keyCode === keycode('Space') || event.keyCode === keycode('Up') || event.keyCode === keycode('Down') || event.keyCode === keycode('Page Up') || event.keyCode === keycode('Page Down') || event.keyCode === keycode('Right') || event.keyCode === keycode('Left') || event.keyCode === keycode('Home') || event.keyCode === keycode('End')) {
        event.preventDefault();
      }
    }
    return setTimeout(function() {
      var actionColumnIndex, cellElement, currentRowIndex, eventElement, firstHorizontalCell, firstLink, firstVerticalCell, hiddenColumns, lastHorizontalCell, lastVerticalCell, nextAnchor, nextCell, nextHorizontalCell, nextVerticalCell, numberOfColumns, previousAnchor, previousPaginationControl, targetRow, toggleCheckbox;
      eventElement = angular.element(event.target)[0];
      numberOfColumns = 0;
      hiddenColumns = [];
      currentRowIndex = eventElement.parentNode.rowIndex;
      actionColumnIndex = angular.element($element.find('tr')[2]).attr('data-column-start') - 1;
      angular.forEach($scope.thTable.delegate.headers, function(header, index) {
        if (header.visible) {
          return numberOfColumns++;
        } else {
          return hiddenColumns.push(index);
        }
      });
      if (!(currentColumnIndex >= 0 && currentColumnIndex < numberOfColumns)) {
        currentColumnIndex = eventElement.cellIndex;
      }
      toggleCheckbox = function() {
        var checkboxElement, currentRow, firstCell;
        currentRow = $element.find('tr')[currentRowIndex];
        firstCell = angular.element(currentRow).find('td')[0];
        checkboxElement = angular.element(firstCell).find('span');
        return angular.element(checkboxElement).triggerHandler('click');
      };
      nextVerticalCell = function(targetRow, cellElement) {
        if (angular.element(targetRow).hasClass('th-table-actions-row')) {
          return targetRow.getElementsByClassName("has-actions")[0];
        } else {
          return angular.element(targetRow).find(cellElement)[currentColumnIndex];
        }
      };
      firstVerticalCell = function() {
        return angular.element($element.find('tr')[1]).find('td')[currentColumnIndex];
      };
      lastVerticalCell = function() {
        var lastRow;
        lastRow = angular.element($element.find('tr')[$element.find('tr').length - 1]);
        if (angular.element(lastRow).hasClass('th-table-actions-row')) {
          lastRow = angular.element($element.find('tr')[$element.find('tr').length - 2]);
        }
        return angular.element(lastRow).find('td')[currentColumnIndex];
      };
      nextHorizontalCell = function(direction) {
        var cellElement, currentRow, i, nextIndex;
        currentRow = $element.find('tr')[currentRowIndex];
        cellElement = currentRowIndex === 0 ? 'th' : 'td';
        if (!angular.element(currentRow).hasClass('th-table-actions-row')) {
          i = eventElement.cellIndex;
          while (i <= (numberOfColumns - 1) && i >= 0) {
            nextIndex = direction === 'right' ? i + 1 : i - 1;
            if (hiddenColumns.indexOf(nextIndex) === -1) {
              currentColumnIndex = direction === 'right' ? eventElement.cellIndex + 1 : eventElement.cellIndex - 1;
              return angular.element(currentRow).find(cellElement)[currentColumnIndex];
              break;
            } else {
              if (direction === 'right') {
                i++;
              } else {
                i--;
              }
            }
          }
        }
      };
      firstHorizontalCell = function() {
        var cellElement, currentRow;
        currentRow = $element.find('tr')[currentRowIndex];
        cellElement = currentRowIndex === 0 ? 'th' : 'td';
        if (!angular.element(currentRow).hasClass('th-table-actions-row')) {
          return angular.element(currentRow).find(cellElement)[0];
        }
      };
      lastHorizontalCell = function() {
        var cellElement, currentRow, lastElementIndex, nextCell;
        currentRow = $element.find('tr')[currentRowIndex];
        cellElement = currentRowIndex === 0 ? 'th' : 'td';
        lastElementIndex = angular.element(currentRow).find(cellElement).length - 1;
        if (!angular.element(currentRow).hasClass('th-table-actions-row')) {
          return nextCell = angular.element(currentRow).find(cellElement)[lastElementIndex];
        }
      };
      if (eventElement.tagName === "TD" || eventElement.tagName === "TH") {
        if (event.keyCode === keycode('Up')) {
          cellElement = currentRowIndex === 1 ? 'th' : 'td';
          targetRow = $element.find('tr')[currentRowIndex - 1];
          nextCell = nextVerticalCell(targetRow, cellElement);
        }
        if (event.keyCode === keycode('Down')) {
          targetRow = $element.find('tr')[currentRowIndex + 1];
          nextCell = nextVerticalCell(targetRow, 'td');
        }
        if (event.keyCode === keycode('Page Up')) {
          nextCell = firstVerticalCell();
        }
        if (event.keyCode === keycode('Page Down')) {
          nextCell = lastVerticalCell();
        }
        if (event.keyCode === keycode('Right')) {
          nextCell = nextHorizontalCell('right');
        }
        if (event.keyCode === keycode('Left')) {
          if (angular.element(eventElement).hasClass('th-table-pagination-link')) {
            previousPaginationControl = eventElement.previousElementSibling;
            if (previousPaginationControl) {
              if (previousPaginationControl.text.replace(/^\s+|\s+$/g, '') === "…") {
                previousPaginationControl = previousPaginationControl.previousElementSibling;
              }
              previousPaginationControl.focus();
            }
          } else {
            nextCell = nextHorizontalCell('left');
          }
        }
        if (event.keyCode === keycode('Home')) {
          nextCell = firstHorizontalCell();
        }
        if (event.keyCode === keycode('End')) {
          nextCell = lastHorizontalCell();
        }
        if (event.keyCode === keycode('Space')) {
          if (eventElement.tagName === "TH") {
            angular.element(event.target).triggerHandler('click');
          }
          if (eventElement.tagName === "TD") {
            toggleCheckbox();
          }
        }
        if (event.keyCode === keycode('Enter')) {
          firstLink = angular.element(eventElement).find('a')[0];
          if (firstLink) {
            firstLink.focus();
          }
        }
      }
      if (eventElement.tagName === "A") {
        if (event.keyCode === keycode('Right')) {
          nextAnchor = eventElement.nextElementSibling;
          if (nextAnchor) {
            if (nextAnchor.text.replace(/^\s+|\s+$/g, '') === "…") {
              nextAnchor = nextAnchor.nextElementSibling;
            }
            nextAnchor.focus();
          }
        }
        if (event.keyCode === keycode('Left')) {
          previousAnchor = eventElement.previousElementSibling;
          if (previousAnchor) {
            if (previousAnchor.text.replace(/^\s+|\s+$/g, '') === "…") {
              previousAnchor = previousAnchor.previousElementSibling;
            }
            previousAnchor.focus();
          }
        }
        if (event.keyCode === keycode('Enter')) {
          angular.element(eventElement).triggerHandler('click');
        }
      }
      if (nextCell) {
        angular.element(eventElement).attr('aria-selected', 'false').attr('tabindex', '-1');
        nextCell.focus();
        return angular.element(nextCell).attr('aria-selected', 'true').attr('tabindex', '0');
      }
    });
  });
};


/***/ }),
/* 222 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thTable/thTablePagination.service.coffee ***!
  \**********************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('TablePagination', ["$interpolate", function($interpolate) {
  var TablePagination, interpolateEnd, interpolateStart;
  interpolateStart = $interpolate.startSymbol();
  interpolateEnd = $interpolate.endSymbol();
  return TablePagination = function(options) {
    var currentPage, ellipsis, maxConsecutivePages, pageSize, paginationEnabled, ref, reload, self, totalItems, totalPages;
    if (options == null) {
      options = {};
    }
    currentPage = (ref = options.currentPage) != null ? ref : 1, pageSize = options.pageSize, reload = options.reload;
    if (currentPage < 1) {
      currentPage = 1;
    }
    totalItems = 0;
    ellipsis = '…';
    maxConsecutivePages = 5;
    totalPages = function() {
      return Math.ceil(totalItems / pageSize);
    };
    paginationEnabled = function() {
      return options.pageSize != null;
    };
    return self = Object.freeze({
      pages: function() {
        var end, i, j, k, l, lastPage, results, results1, results2, results3, start;
        if (!(totalItems > 0)) {
          return [];
        }
        lastPage = totalPages();
        if (lastPage <= maxConsecutivePages + 4) {
          return (function() {
            results = [];
            for (var i = 1; 1 <= lastPage ? i <= lastPage : i >= lastPage; 1 <= lastPage ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this);
        }
        if (maxConsecutivePages % 2 === 0) {
          start = currentPage - maxConsecutivePages / 2 + 1;
          end = currentPage + maxConsecutivePages / 2;
        } else {
          start = currentPage - Math.floor(maxConsecutivePages / 2);
          end = currentPage + Math.floor(maxConsecutivePages / 2);
        }
        if (start < 3) {
          end = Math.max(maxConsecutivePages, end);
          return (function() {
            results1 = [];
            for (var j = 1; 1 <= end ? j <= end : j >= end; 1 <= end ? j++ : j--){ results1.push(j); }
            return results1;
          }).apply(this).concat([ellipsis, lastPage]);
        }
        if (end > lastPage - 2) {
          start = Math.min(lastPage - maxConsecutivePages + 1, start);
          return [1, ellipsis].concat((function() {
            results2 = [];
            for (var k = start; start <= lastPage ? k <= lastPage : k >= lastPage; start <= lastPage ? k++ : k--){ results2.push(k); }
            return results2;
          }).apply(this));
        }
        return [1, ellipsis].concat((function() {
          results3 = [];
          for (var l = start; start <= end ? l <= end : l >= end; start <= end ? l++ : l--){ results3.push(l); }
          return results3;
        }).apply(this)).concat([ellipsis, lastPage]);
      },
      isFirstPage: function() {
        return currentPage === 1;
      },
      isLastPage: function() {
        return currentPage === totalPages();
      },
      inactivePageLink: function(page) {
        return page === currentPage || page === ellipsis;
      },
      goToNextPage: function() {
        return self.goToPage(currentPage + 1);
      },
      goToPrevPage: function() {
        return self.goToPage(currentPage - 1);
      },
      goToPage: function(page) {
        if (page === ellipsis || page === currentPage) {
          return;
        }
        if (page < 1) {
          page = 1;
        } else if (totalPages() !== 0 && page > totalPages()) {
          page = totalPages();
        }
        if (page === currentPage) {
          return;
        }
        currentPage = page;
        return reload();
      },
      generatePaginationTemplate: function() {
        if (!paginationEnabled(options)) {
          return "";
        }
        return "<div\n  class=\"th-table-pagination\"\n  ng-if=\"thTable.delegate.pages().length > 1\"\n  tabindex=\"0\"\n  aria-label=\"Table pagination\"\n  >\n  <a\n    class=\"th-table-pagination-link\"\n    ng-class=\"{'th-table-pagination-inactive-link': thTable.delegate.isFirstPage()}\"\n    ng-click=\"thTable.delegate.goToPrevPage()\"\n    tabindex=\"0\"\n    aria-label=\"Previous page\"\n    >\n    <div class=\"fa fa-chevron-left th-table-pagination-icon-left\"></div>\n    Previous\n  </a>\n\n  <a class=\"th-table-pagination-link\"\n     tabindex=\"-1\"\n     aria-label=\"Page " + interpolateStart + "page" + interpolateEnd + "\"\n     aria-hidden=\"" + interpolateStart + "page == '…'" + interpolateEnd + "\"\n     ng-repeat=\"page in thTable.delegate.pages() track by $index\"\n     ng-click=\"thTable.delegate.goToPage(page)\"\n     ng-class=\"{'th-table-pagination-inactive-link':\n                  thTable.delegate.inactivePageLink(page)}\">\n    " + interpolateStart + "page" + interpolateEnd + "\n  </a>\n\n  <a class=\"th-table-pagination-link\"\n     ng-class=\"{'th-table-pagination-inactive-link': thTable.delegate.isLastPage()}\"\n     ng-click=\"thTable.delegate.goToNextPage()\"\n     tabindex=\"-1\"\n     aria-label=\"Next page\"\n     >\n    Next\n    <div class=\"fa fa-chevron-right th-table-pagination-icon-right\"></div>\n  </a>\n</div>";
      },
      updatePagination: function(options) {
        var ref1, ref2;
        totalItems = (ref1 = options.totalItems) != null ? ref1 : totalItems;
        currentPage = (ref2 = options.currentPage) != null ? ref2 : currentPage;
        if (currentPage < 1) {
          return currentPage = 1;
        } else if (totalPages() !== 0 && currentPage > totalPages()) {
          currentPage = totalPages();
          return reload();
        }
      },
      getCurrentPage: function() {
        return currentPage;
      },
      getPageSize: function() {
        return pageSize;
      },
      getTotalRecordCount: function() {
        return totalItems;
      }
    });
  };
}]);


/***/ }),
/* 223 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thTable/thTableRow.directive.coffee ***!
  \*****************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').directive('thTableRow', function() {
  return {
    restrict: 'E'
  };
});


/***/ }),
/* 224 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thTable/thTableSort.service.coffee ***!
  \****************************************************/
/***/ (function(module, exports) {

var TableSort;

angular.module('ThemisComponents').factory('TableSort', function() {
  return TableSort();
});

TableSort = function() {
  var applySortOrder, compare, getField;
  applySortOrder = function(direction, compareResult) {
    if (direction === "ascending") {
      return compareResult;
    } else {
      return -compareResult;
    }
  };
  compare = function(a, b) {
    if (typeof a === "number") {
      return a - b;
    } else {
      a = a != null ? "" + a : "";
      b = b != null ? "" + b : "";
      return a.localeCompare(b);
    }
  };
  getField = function(object, field) {
    var result;
    if (field === '') {
      return object;
    }
    result = object;
    field.split('.').forEach(function(key) {
      return result = result[key];
    });
    return result;
  };
  return Object.freeze({
    sort: function(data, header) {
      if (!header.isSortActive()) {
        return data;
      }
      return data.sort(function(obj1, obj2) {
        var field1, field2, result;
        field1 = getField(obj1, header.sortField);
        field2 = getField(obj2, header.sortField);
        result = compare(field1, field2);
        return applySortOrder(header.getSortDirection(), result);
      });
    }
  });
};


/***/ }),
/* 225 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thTabset/thTab.directive.coffee ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thTab", function() {
  return {
    require: "^thTabset",
    restrict: "EA",
    template: __webpack_require__(/*! ./thTab.template.html */ 302),
    transclude: true,
    scope: {
      name: "@name",
      ngClick: "&",
      show: "<",
      badge: "<",
      letterSpacing: "<"
    },
    link: function(scope, element, attrs, controller) {
      if (scope.show == null) {
        scope.show = true;
      }
      scope.active = false;
      scope.$watch(function() {
        return scope.show;
      }, function(isVisible) {
        if (isVisible) {
          return controller.setActiveIfOnlyVisibleTab(scope);
        } else {
          return controller.setNextActiveTab(scope);
        }
      });
      scope.ariaControlsID = scope.name.replace(/\s+/g, '-').toLowerCase() + "-tab";
      return controller.addTab(scope);
    }
  };
});


/***/ }),
/* 226 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thTabset/thTabset.directive.coffee ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var keycode,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

keycode = __webpack_require__(/*! keycode */ 5);

angular.module('ThemisComponents').directive("thTabset", function() {
  return {
    restrict: "EA",
    replace: true,
    template: __webpack_require__(/*! ./thTabset.native.template.html */ 303),
    transclude: {
      actionBar: '?thTabActionBar'
    },
    scope: {
      activeTab: "<",
      type: "@"
    },
    controller: ["$scope", "$element", "$timeout", function($scope, $element, $timeout) {
      var acceptableTypes, checkForVisibleTabsLeftToRight, checkForVisibleTabsRightToLeft, ref, tabs;
      tabs = $scope.tabs = [];
      $scope.$watch((function() {
        return $scope.activeTab;
      }), function() {
        return $scope.setActiveTab();
      });
      if ($scope.type) {
        acceptableTypes = ["header", "sub-header"];
        if (ref = $scope.type, indexOf.call(acceptableTypes, ref) < 0) {
          throw new Error("thTabset: invalid 'type'.");
        }
      }
      $scope.processTabChange = function(tabToSelect) {
        $scope.activateTab(tabToSelect);
        if (typeof tabToSelect.ngClick === "function") {
          return tabToSelect.ngClick();
        }
      };
      $scope.activateTab = function(tabToSelect) {
        var j, len, results, tab;
        tabToSelect.active = true;
        results = [];
        for (j = 0, len = tabs.length; j < len; j++) {
          tab = tabs[j];
          if (tab !== tabToSelect) {
            results.push(tab.active = false);
          }
        }
        return results;
      };
      $scope.setActiveTab = function() {
        var j, len, results, tab;
        results = [];
        for (j = 0, len = tabs.length; j < len; j++) {
          tab = tabs[j];
          if (tab.name === $scope.activeTab) {
            results.push($scope.activateTab(tab));
          }
        }
        return results;
      };
      $scope.hasBadge = function(tab) {
        return tab.badge != null;
      };
      this.setActiveIfOnlyVisibleTab = function(tabAdded) {
        var activeTab;
        activeTab = tabs.find(function(tab) {
          return tab.active;
        });
        if (activeTab && !activeTab.show) {
          return $scope.processTabChange(tabAdded);
        }
      };
      this.setNextActiveTab = function(tabRemoved) {
        var idx, tabToActivate;
        idx = tabs.indexOf(tabRemoved);
        if (idx > 0 && tabRemoved.active) {
          tabToActivate = checkForVisibleTabsRightToLeft(idx);
          if (tabToActivate) {
            $scope.processTabChange(tabToActivate);
          }
        }
        if (idx < (tabs.length - 1) && tabRemoved.active) {
          tabToActivate = checkForVisibleTabsLeftToRight(idx);
          if (tabToActivate) {
            return $scope.processTabChange(tabToActivate);
          }
        }
      };
      checkForVisibleTabsRightToLeft = function(idx) {
        var index, j, ref1;
        for (index = j = ref1 = idx - 1; ref1 <= 0 ? j <= 0 : j >= 0; index = ref1 <= 0 ? ++j : --j) {
          if (tabs[index].show) {
            return tabs[index];
          }
        }
      };
      checkForVisibleTabsLeftToRight = function(idx) {
        var index, j, ref1, ref2;
        for (index = j = ref1 = idx + 1, ref2 = tabs.length - 1; ref1 <= ref2 ? j <= ref2 : j >= ref2; index = ref1 <= ref2 ? ++j : --j) {
          if (tabs[index].show) {
            return tabs[index];
          }
        }
      };
      this.addTab = function(tab) {
        if (tabs.length === 0) {
          $scope.activateTab(tab);
        }
        if (tab.name === $scope.activeTab) {
          $scope.activateTab(tab);
        }
        return tabs.push(tab);
      };
      $element.on('keydown', function(event) {
        if (angular.element(event.target).hasClass('tab-name')) {
          if (event.keyCode === keycode('Right') || event.keyCode === keycode('Left') || event.keyCode === keycode('Up') || event.keyCode === keycode('Down')) {
            event.preventDefault();
          }
          return $timeout(function() {
            var firstTab, i, lastTab, nextTab, previousTab, results;
            if (event.keyCode === keycode('Right') || event.keyCode === keycode('Up')) {
              i = 0;
              while (i < $scope.tabs.length) {
                if ($scope.tabs[i].active) {
                  if (i === $scope.tabs.length - 1) {
                    firstTab = $element.find('li')[0];
                    angular.element(firstTab).triggerHandler('click');
                    firstTab.focus();
                  } else {
                    nextTab = $element.find('li')[i + 1];
                    angular.element(nextTab).triggerHandler('click');
                    nextTab.focus();
                  }
                  break;
                } else {
                  i++;
                }
              }
            }
            if (event.keyCode === keycode('Left') || event.keyCode === keycode('Down')) {
              i = 0;
              results = [];
              while (i < $scope.tabs.length) {
                if ($scope.tabs[i].active) {
                  if (i === 0) {
                    lastTab = $element.find('li')[$scope.tabs.length - 1];
                    angular.element(lastTab).triggerHandler('click');
                    lastTab.focus();
                  } else {
                    previousTab = $element.find('li')[i - 1];
                    angular.element(previousTab).triggerHandler('click');
                    previousTab.focus();
                  }
                  break;
                } else {
                  results.push(i++);
                }
              }
              return results;
            }
          });
        }
      });
    }]
  };
});


/***/ }),
/* 227 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thTextarea/thTextarea.directive.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive("thTextarea", ["Utilities", function(Utilities) {
  return {
    restrict: "E",
    bindToController: true,
    controllerAs: 'ctrl',
    require: ["?^form", "thTextarea"],
    scope: {
      placeholder: '@',
      name: '@',
      icon: '@',
      model: '=?ngModel',
      rows: '=',
      ngRequired: '=',
      ngDisabled: '=',
      ngMinlength: '=',
      ngMaxlength: '=',
      ngPattern: '=',
      ngChange: '&'
    },
    template: __webpack_require__(/*! ./thTextarea.template.html */ 304),
    controller: function() {
      this.thOnChange = function() {
        return Utilities.onChange(this.ngChange);
      };
    },
    link: function(scope, element, attribute, controllerArray) {
      var angularClass, className, controller, fieldName, form, i, len, ref, ref1, ref2, textarea;
      form = (ref = controllerArray[0]) != null ? ref : null;
      controller = controllerArray[1];
      fieldName = (ref1 = controller.name) != null ? ref1 : null;
      controller.isInvalid = function() {
        if (!(fieldName && form)) {
          return false;
        }
        return form[fieldName].$invalid && (form[fieldName].$touched || form.$submitted);
      };
      textarea = element.find("textarea");
      if (attribute.expandable === "false") {
        textarea.css("resize", "none");
      }
      angularClass = /(^ng-)/;
      ref2 = element[0].classList;
      for (i = 0, len = ref2.length; i < len; i++) {
        className = ref2[i];
        if (!angularClass.test(className)) {
          textarea.addClass(className);
          element.removeClass(className);
        }
      }
      textarea.on("focus", function() {
        return textarea.addClass("has-focus");
      });
      textarea.on("blur", function() {
        return textarea.removeClass("has-focus");
      });
    }
  };
}]);


/***/ }),
/* 228 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thTruncate/thTruncate.directive.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

angular.module('ThemisComponents').directive('thTruncate', function() {
  return {
    restrict: 'E',
    transclude: true,
    template: __webpack_require__(/*! ./thTruncate.template.html */ 305),
    bindToController: true,
    controllerAs: 'truncate',
    scope: {
      text: '@',
      limit: '=?',
      ngClick: '&'
    },
    controller: ["$scope", function($scope) {
      var truncate;
      this.formattedText = this.text.replace(/\s\s+/g, '');
      this.limit = this.limit || 100;
      this.expanded = false;
      this.hasTruncateControl = this.formattedText.length >= this.limit ? true : false;
      truncate = (function(_this) {
        return function() {
          if (_this.expanded) {
            return _this.formattedText;
          } else {
            return _this.formattedText.substring(0, _this.limit) + (_this.hasTruncateControl ? '...' : '');
          }
        };
      })(this);
      this.toggleTruncation = function() {
        this.expanded = !this.expanded;
        return this.truncatedText = truncate();
      };
      this.truncatedText = truncate();
    }]
  };
});


/***/ }),
/* 229 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thViewModel/thViewModel.service.coffee ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = __webpack_require__(/*! events */ 25);

angular.module('ThemisComponents').factory('ViewModel', function() {
  var ViewModel;
  return ViewModel = (function(superClass) {
    extend(ViewModel, superClass);

    function ViewModel(model, viewProperties) {
      if (viewProperties == null) {
        viewProperties = {};
      }
      this.view = {};
      this.model = model;
      Object.keys(viewProperties).forEach((function(_this) {
        return function(propertyKey) {
          var property, propertyDefault, propertySettings;
          propertySettings = viewProperties[propertyKey];
          propertyDefault = propertySettings["default"];
          if (propertySettings.evented) {
            property = {
              value: propertyDefault
            };
            return Object.defineProperty(_this.view, propertyKey, {
              get: function() {
                return property.value;
              },
              set: function(newValue) {
                if (newValue !== property.value) {
                  property.value = newValue;
                  return _this.emit("view:changed:" + propertyKey, property.value);
                }
              }
            });
          } else {
            return _this.view[propertyKey] = propertyDefault;
          }
        };
      })(this));
    }

    return ViewModel;

  })(EventEmitter);
});


/***/ }),
/* 230 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thWithFocus/thWithFocus.directive.coffee ***!
  \**********************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").directive("withFocus", ["$timeout", function($timeout) {
  return {
    restrict: "A",
    link: function(scope, element) {
      var setFocus, thComponent, thComponentTypes;
      setFocus = function(el) {
        return $timeout((function() {
          return scope.$apply(el[0].focus());
        }), 301);
      };
      thComponentTypes = ["select", "input"];
      thComponent = thComponentTypes.map(function(type) {
        return element.find(type);
      }).find(function(result) {
        return result.length > 0;
      });
      return setFocus(thComponent != null ? thComponent : element);
    }
  };
}]);


/***/ }),
/* 231 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thWithLabel/thWithLabel.directive.coffee ***!
  \**********************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').directive("withLabel", function() {
  return {
    restrict: "A",
    priority: 1,
    link: function(scope, element, attrs) {
      var adjustMarginForRadioInputs, createElementObject, elementObject, label;
      element.wrap('<label class="th-label">');
      label = element.parent();
      scope.$watch(attrs.ngRequired, function(newVal) {
        var labelEl, requiredLabel, wrappedRequiredLabel;
        labelEl = element.parent()[0];
        requiredLabel = labelEl.getElementsByClassName("required-field");
        wrappedRequiredLabel = angular.element(requiredLabel);
        if (newVal) {
          return wrappedRequiredLabel.removeClass("hide");
        } else {
          return wrappedRequiredLabel.addClass("hide");
        }
      });
      adjustMarginForRadioInputs = function(element) {
        var className, isRadioInput, isThCheckbox, isThRadio;
        isThRadio = element.classList.contains("th-radio-button");
        isThCheckbox = element.classList.contains("th-checkbox");
        isRadioInput = element.type === "radio";
        if (isThRadio || isRadioInput) {
          className = "radio-label";
        }
        if (isThCheckbox) {
          className = "th-checkbox-label";
        }
        return label.addClass(className);
      };
      createElementObject = function() {
        var classNames, elementObject, inputTypes, radioGroupEl;
        elementObject = {
          el: null,
          type: "themis",
          inline: false
        };
        radioGroupEl = label[0].getElementsByClassName("th-radio-group");
        if (radioGroupEl.length > 0) {
          return elementObject;
        }
        classNames = ["th-switch", "th-checkbox", "th-radio-button"];
        classNames.map(function(className) {
          var temp;
          temp = label[0].getElementsByClassName(className)[0];
          if (temp != null) {
            return elementObject = {
              el: temp,
              type: "themis",
              inline: true
            };
          }
        });
        if (elementObject.el == null) {
          inputTypes = ["radio", "checkbox"];
          inputTypes.map(function(type) {
            var temp;
            temp = label[0].querySelectorAll("input[type=" + type + "]")[0];
            if (temp != null) {
              return elementObject = {
                el: temp,
                type: "html",
                inline: true
              };
            }
          });
        }
        return elementObject;
      };
      elementObject = createElementObject();
      if (elementObject.inline) {
        label.append("<span class='inline label-text'>" + attrs.withLabel + "</span>");
        adjustMarginForRadioInputs(elementObject.el);
      } else {
        label.prepend("<div class='label-text'>" + attrs.withLabel + "</div>");
      }
      label.prepend("<span class='required-field'>required</span>");
      element.on("click", function(event) {
        event.stopPropagation();
        if (elementObject.type === "themis") {
          return event.preventDefault();
        }
      });
      return label.on("click", function(event) {
        if (elementObject.type === "themis") {
          event.preventDefault();
          return element[0].click();
        }
      });
    }
  };
});


/***/ }),
/* 232 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/lib/thWithLabel/thWithSubtext.directive.coffee ***!
  \************************************************************/
/***/ (function(module, exports) {

angular.module("ThemisComponents").directive("withSubtext", function() {
  return {
    priority: 2,
    restrict: "A",
    link: function(scope, element, attrs) {
      var createElementObject, elementObject, input, label, span, subtextParagraph;
      label = element.parent();
      createElementObject = function() {
        var classNames, elementObject, radioGroupEl;
        elementObject = {
          el: null,
          type: "themis",
          inline: false
        };
        radioGroupEl = label[0].getElementsByClassName("th-radio-group");
        if (radioGroupEl.length > 0) {
          return elementObject;
        }
        classNames = ["select-wrapper", "th-checkbox", "th-radio-button", "th-input-wrapper"];
        classNames.map(function(className) {
          var inline, temp;
          switch (className) {
            case "select-wrapper":
            case "th-input-wrapper":
              inline = false;
              break;
            default:
              inline = true;
          }
          temp = label[0].getElementsByClassName(className)[0];
          if (temp != null) {
            return elementObject = {
              el: temp,
              type: "themis",
              inline: inline
            };
          }
        });
        return elementObject;
      };
      if (attrs.withLabel != null) {
        elementObject = createElementObject();
        if (elementObject.inline) {
          label.addClass('subtext-label');
          span = label[0].getElementsByClassName("label-text");
          label.children().addClass('with-subtext');
          return span[0].innerHTML += "<p class='inline sublabel-text'>" + attrs.withSubtext + "</p>";
        } else {
          label.addClass('subtext-label');
          subtextParagraph = angular.element("<p class='block sublabel-text'>" + attrs.withSubtext + "</p>");
          input = label[0].getElementsByClassName(elementObject.el.className);
          label.children().addClass('with-subtext');
          return angular.element(input).after(subtextParagraph);
        }
      }
    }
  };
});


/***/ }),
/* 233 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/lib/thWithMessages/thMessagesManager.service.coffee ***!
  \*****************************************************************/
/***/ (function(module, exports) {

angular.module('ThemisComponents').factory('MessageService', function() {
  var extendMessages, generateInputSpecificConditional, generateNgMessagesElement;
  generateInputSpecificConditional = function(options) {
    var formName, isInlineEl, modelName;
    formName = options.formName, modelName = options.modelName, isInlineEl = options.isInlineEl;
    if (isInlineEl) {
      return formName + ".$submitted && " + formName + "." + modelName + ".$invalid";
    } else {
      return formName + "." + modelName + ".$invalid &&\n(" + formName + "." + modelName + ".$touched || " + formName + ".$submitted)";
    }
  };
  generateNgMessagesElement = function(options) {
    var conditional, formName, messageWrapper, messages, modelName;
    messages = options.messages, formName = options.formName, modelName = options.modelName;
    if (!(formName && modelName)) {
      return "<div class=\"th-with-message\"></div>";
    }
    conditional = generateInputSpecificConditional(options);
    messageWrapper = "<div class=\"th-with-message\" ng-class=\"{'has-message': " + conditional + "}\">\n  <div\n    ng-messages=\"" + formName + "." + modelName + ".$error\"\n    class=\"message-container\"\n    ng-if=\"" + conditional + "\"\n    >";
    messages = Object.keys(messages).map(function(validityType) {
      return "<span class=\"message-text\" ng-message=\"" + validityType + "\">\n  " + messages[validityType] + "\n</span>";
    }).join("");
    return "" + messageWrapper + messages + "</div></div>";
  };
  extendMessages = function(messages, attrs) {
    var defaultMessages, hasNumberRange, maxLength, maxNumberValue, minLength, minNumberValue, rangeNumberMsg, ref, ref1, ref2, ref3, soloMaxNumberMsg, soloMinNumberMsg;
    minLength = (ref = attrs.ngMinlength) != null ? ref : "";
    maxLength = (ref1 = attrs.ngMaxlength) != null ? ref1 : "";
    minNumberValue = (ref2 = attrs.min) != null ? ref2 : 0;
    maxNumberValue = (ref3 = attrs.max) != null ? ref3 : 0;
    hasNumberRange = (attrs.max != null) && (attrs.min != null);
    soloMinNumberMsg = "Please enter a valid number equal to or greater than " + minNumberValue + ".";
    soloMaxNumberMsg = "Please enter a valid number less than or equal to " + maxNumberValue + ".";
    rangeNumberMsg = "Please enter a number between " + minNumberValue + " and " + maxNumberValue + ".";
    defaultMessages = {
      required: "This field is required.",
      minlength: "Please enter at least " + minLength + " characters.",
      maxlength: "Please enter no more than " + maxLength + " characters.",
      pattern: "Invalid Response.",
      number: "Please enter a number.",
      min: hasNumberRange ? rangeNumberMsg : soloMinNumberMsg,
      max: hasNumberRange ? rangeNumberMsg : soloMaxNumberMsg
    };
    return Object.assign({}, defaultMessages, messages);
  };
  return Object.freeze({
    extendMessages: extendMessages,
    generateNgMessagesElement: generateNgMessagesElement
  });
});


/***/ }),
/* 234 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************!*\
  !*** ./src/lib/thWithMessages/thWithMessages.directive.coffee ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var $;

$ = __webpack_require__(/*! jquery */ 3);

angular.module('ThemisComponents').directive("withMessages", ["$compile", "MessageService", function($compile, MessageService) {
  return {
    restrict: "A",
    priority: 2,
    require: ['?^form', '?^ngModel'],
    link: function(scope, element, attrs, controllersArray) {
      var compiledAndAppendMessageTemplate, formName, initialMessages, isInlineEl, messages, modelName, ref, ref1;
      formName = (ref = controllersArray[0]) != null ? ref.$name : void 0;
      modelName = (ref1 = controllersArray[1]) != null ? ref1.$name : void 0;
      isInlineEl = element.hasClass("th-radio-group" || $(element).find("input:checkbox").length > 0);
      if (modelName == null) {
        throw new Error("with-message: missing model name on input.");
      }
      if (formName == null) {
        throw new Error("with-message: missing form.");
      }
      if (attrs.name == null) {
        throw new Error("with-message: missing field name on input.");
      }
      compiledAndAppendMessageTemplate = function(options) {
        var compiledTemplate, template;
        template = MessageService.generateNgMessagesElement(options);
        compiledTemplate = $compile(template)(scope);
        if (attrs.withLabel != null) {
          return element.parent().append(compiledTemplate);
        } else {
          return element.after(compiledTemplate);
        }
      };
      initialMessages = scope.$eval(attrs.withMessages);
      messages = MessageService.extendMessages(initialMessages, attrs);
      return compiledAndAppendMessageTemplate({
        messages: messages,
        isInlineEl: isInlineEl,
        formName: formName,
        modelName: modelName
      });
    }
  };
}]);


/***/ }),
/* 235 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/lib/services/utilities.service.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Utilities = (function () {
    /* @ngInject */
    Utilities.$inject = ["$timeout"];
    function Utilities($timeout) {
        this.$timeout = $timeout;
    }
    Utilities.prototype.onChange = function (callback) {
        return this.$timeout(function () {
            callback();
        });
    };
    /*
      * Temporarily changes a given element's style and returns
      * its calculated height.
      * Will return 0 if the given parameter is not an element.
      * @param  {element} element Element used to calculate height
      * @return {number}          Height in pixels
    */
    Utilities.prototype.getElementActualHeight = function (element) {
        if (element instanceof Element === false) {
            return 0;
        }
        var previousCss = element.getAttribute("style");
        element.style.position = "absolute";
        element.style.visibility = "hidden";
        element.style.maxHeight = "none";
        element.style.transition = "initial";
        var height = element.offsetHeight;
        element.setAttribute("style", previousCss || "");
        return height;
    };
    return Utilities;
}());
exports.default = Utilities;


/***/ }),
/* 236 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thAutocomplete/autocomplete.component.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var autocomplete_factory_1 = __webpack_require__(/*! ./autocomplete.factory */ 237);
var autocomplete_errors_1 = __webpack_require__(/*! ./autocomplete.errors */ 39);
var AutocompleteController = (function () {
    /* @ngInject */
    AutocompleteController.$inject = ["$scope", "$element", "$timeout", "$attrs", "ValidatorService"];
    function AutocompleteController($scope, $element, $timeout, $attrs, ValidatorService) {
        this.$scope = $scope;
        this.$element = $element;
        this.$timeout = $timeout;
        this.$attrs = $attrs;
        this.ValidatorService = ValidatorService;
        this.neverValidated = true;
    }
    AutocompleteController.prototype.$onInit = function () {
        this.$inputElement = $(this.$element).find("input, select");
        this.validateArgs();
        this.setComponentType();
        this.watchNgModelValueChange();
    };
    AutocompleteController.prototype.$postLink = function () {
        var _this = this;
        this.createAutocomplete();
        this.createValidator();
        this.$element.find("input").on("blur", function () {
            _this.$scope.$apply(function () { return _this.ngModelCtrl.$setTouched(); });
        });
    };
    AutocompleteController.prototype.$onChanges = function (change) {
        var _this = this;
        this.$timeout(function () {
            // FIXME: this previousValue is not undefined check is here because of $timeout
            // inside $onChanges. Will be fixed with the one-way bind ticket: CLIO-45324
            if (change.ngDisabled && typeof change.ngDisabled.previousValue === "boolean") {
                _this.autoComplete.toggleEnabled();
            }
            if (change.ngRequired && typeof change.ngRequired.previousValue === "boolean") {
                if (change.ngRequired.currentValue === true) {
                    _this.ngModelCtrl.$setUntouched();
                }
                else {
                    _this.validator.validateInput(_this.$inputElement[0]);
                }
            }
            // FIXME: This code has been disabled due to not working.
            // Re-enable with ticket CLIO-45890
            // if (change.showSearchHint && typeof change.showSearchHint.previousValue === "boolean") {
            //   this.autoComplete.toggleSearchHint(change.showSearchHint.currentValue);
            // }
        });
    };
    AutocompleteController.prototype.$doCheck = function () {
        // because form submit doesn't have event, and we can't $watch it from component:
        // trigger validation when form submits without touching input, for one time only.
        if (this.neverValidated && this.formIsSubmitted()) {
            this.validator.validateInput(this.$inputElement[0]);
        }
    };
    AutocompleteController.prototype.$onDestroy = function () {
        this.$element.find("input").off("blur");
    };
    AutocompleteController.prototype.createAutocomplete = function () {
        var _this = this;
        this.autoComplete = autocomplete_factory_1.default.createAutocomplete(this.componentType, {
            element: this.$inputElement[0],
            options: this.options,
            placeholder: this.placeholder,
            value: this.ngModel,
            ngDisabled: this.ngDisabled,
            change: function (newValue) {
                _this.$scope.$apply(function () {
                    _this.ngModel = newValue;
                });
                if (_this.onChange) {
                    _this.onChange(newValue);
                }
            },
            close: function () {
                if (_this.ngModelCtrl.$untouched) {
                    _this.$scope.$apply(function () {
                        _this.ngModelCtrl.$setTouched();
                    });
                }
                _this.validator.validateInput(_this.$inputElement[0]);
            },
        });
    };
    AutocompleteController.prototype.createValidator = function () {
        var _this = this;
        this.validator = this.ValidatorService.create({
            element: this.$inputElement[0],
            attrs: this.$attrs,
            customOptions: this.customValidator,
            validateInput: function (e) {
                _this.ngModelCtrl.$setValidity(_this.name, e.valid);
                // if the validation request comes from formCtrl, $apply is already taken care of by angular.
                if (_this.neverValidated && _this.formIsSubmitted()) {
                    _this.neverValidated = false;
                }
                else {
                    _this.$scope.$apply();
                }
            },
        });
    };
    AutocompleteController.prototype.validateArgs = function () {
        if (this.options === null || typeof this.options === "undefined") {
            throw new autocomplete_errors_1.AutocompleteComponentError("You must provide the \"options\" parameter.");
        }
        if ("multiple" in this.$attrs && "combobox" in this.$attrs) {
            throw new autocomplete_errors_1.AutocompleteComponentError("multiple and combobox are mutually exclusive");
        }
    };
    AutocompleteController.prototype.setComponentType = function () {
        this.componentType = "autocomplete";
        if ("multiple" in this.$attrs) {
            this.componentType = "multiple";
        }
        else if ("combobox" in this.$attrs) {
            this.componentType = "combobox";
        }
    };
    AutocompleteController.prototype.formIsSubmitted = function () {
        return this.formCtrl && this.formCtrl.$submitted;
    };
    AutocompleteController.prototype.watchNgModelValueChange = function () {
        var _this = this;
        this.$scope.$watch(function () {
            return _this.ngModel;
        }, function (newModel) {
            // Wait for the current digest cycle to end before triggering the update
            _this.$timeout(function () {
                _this.autoComplete.setValue(newModel);
            });
        });
    };
    return AutocompleteController;
}());
var AutocompleteComponent = {
    template: ["$attrs", function ($attrs) {
            return $attrs.hasOwnProperty("multiple") ? "<select></select>" : "<input />";
        }],
    require: {
        ngModelCtrl: "?ngModel",
        formCtrl: "?^^form",
    },
    bindings: {
        name: "@?",
        ngModel: "=?",
        options: "<",
        onChange: "<?",
        ngDisabled: "<?",
        ngRequired: "<?",
        placeholder: "@?",
        customValidator: "<?",
    },
    controller: AutocompleteController,
};
exports.default = AutocompleteComponent;


/***/ }),
/* 237 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thAutocomplete/autocomplete.factory.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var autocomplete_1 = __webpack_require__(/*! ./providers/autocomplete */ 238);
var combo_box_autocomplete_1 = __webpack_require__(/*! ./providers/combo-box-autocomplete */ 239);
var multi_select_autocomplete_1 = __webpack_require__(/*! ./providers/multi-select-autocomplete */ 240);
var AutocompleteFactory = (function () {
    function AutocompleteFactory() {
    }
    AutocompleteFactory.createAutocomplete = function (type, config) {
        if (type === "combobox") {
            return new combo_box_autocomplete_1.default(config);
        }
        else if (type === "multiple") {
            return new multi_select_autocomplete_1.default(config);
        }
        else {
            return new autocomplete_1.default(config);
        }
    };
    return AutocompleteFactory;
}());
exports.default = AutocompleteFactory;


/***/ }),
/* 238 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thAutocomplete/providers/autocomplete.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var autocomplete_abstract_1 = __webpack_require__(/*! ./autocomplete.abstract */ 40);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.autocomplete.js */ 114);
var Autocomplete = (function (_super) {
    __extends(Autocomplete, _super);
    function Autocomplete(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        return _this;
    }
    Autocomplete.prototype.validateOptions = function () {
        _super.prototype.validateOptions.call(this);
        this.validateValueIsObject();
    };
    Autocomplete.prototype.setInitialValue = function () {
        if (this.config.value) {
            this.initialValue = this.config.value[this.config.options.displayField];
        }
    };
    Autocomplete.prototype.create = function () {
        var _this = this;
        // FIXME: https://themis.atlassian.net/browse/CLIO-46201
        // clear invalid selection only works if popup has already appeared first
        var validSelection;
        var widgetOptions = {
            dataTextField: this.config.options.displayField,
            enable: this.enabled,
            filter: this.config.options.filter,
            dataSource: this.config.options.dataSource,
            minLength: this.config.options.minLength,
            placeholder: this.config.placeholder,
            noDataTemplate: this.config.options.noDataTemplate,
            template: this.config.options.rowTemplate,
            fixedGroupTemplate: "",
            open: function () {
                validSelection = false;
            },
            close: function () {
                if (!validSelection) {
                    _this.kendoComponent.value("");
                }
            },
            select: function (e) {
                validSelection = true;
                if (e.dataItem) {
                    _this.config.change(e.dataItem);
                }
            },
            change: function (component) {
                if (component.sender.value() === "") {
                    _this.config.change(component.sender.value(""));
                }
            },
        };
        this.kendoComponent = new kendo.ui.AutoComplete(this.config.element, widgetOptions);
        this.kendoComponent.value(this.initialValue);
    };
    return Autocomplete;
}(autocomplete_abstract_1.default));
exports.default = Autocomplete;


/***/ }),
/* 239 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/lib/thAutocomplete/providers/combo-box-autocomplete.ts ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var autocomplete_abstract_1 = __webpack_require__(/*! ./autocomplete.abstract */ 40);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.combobox.js */ 118);
var ComboBoxAutocomplete = (function (_super) {
    __extends(ComboBoxAutocomplete, _super);
    function ComboBoxAutocomplete(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        return _this;
    }
    ComboBoxAutocomplete.prototype.validateOptions = function () {
        _super.prototype.validateOptions.call(this);
        this.validateValueIsObject();
    };
    ComboBoxAutocomplete.prototype.setInitialValue = function () {
        if (this.config.value) {
            this.initialValue = this.config.value[this.config.options.displayField];
        }
    };
    ComboBoxAutocomplete.prototype.create = function () {
        var _this = this;
        var widgetOptions = {
            autoBind: this.autoBind,
            dataTextField: this.config.options.displayField,
            dataValueField: this.config.options.trackField,
            enable: this.enabled,
            filter: this.config.options.filter,
            dataSource: this.config.options.dataSource,
            minLength: this.config.options.minLength,
            placeholder: this.config.placeholder,
            noDataTemplate: this.config.options.noDataTemplate,
            template: this.config.options.rowTemplate,
            fixedGroupTemplate: "",
            select: function (e) {
                if (e.dataItem) {
                    _this.config.change(e.dataItem);
                }
            },
            change: function (component) {
                if (component.sender.value() === "" || component.sender.value() &&
                    component.sender.selectedIndex === -1) {
                    _this.config.change(component.sender.value(""));
                }
            },
        };
        this.kendoComponent = new kendo.ui.ComboBox(this.config.element, widgetOptions);
        this.kendoComponent.value(this.initialValue);
        /*
         * When serverFiltering is on, we need to refresh the component so that the initial value
         * displays correctly.
         **/
        if (this.config.options.dataSource.options.serverFiltering) {
            setTimeout(function () { return _this.kendoComponent.refresh(); });
        }
    };
    return ComboBoxAutocomplete;
}(autocomplete_abstract_1.default));
exports.default = ComboBoxAutocomplete;


/***/ }),
/* 240 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/lib/thAutocomplete/providers/multi-select-autocomplete.ts ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var autocomplete_abstract_1 = __webpack_require__(/*! ./autocomplete.abstract */ 40);
var autocomplete_errors_1 = __webpack_require__(/*! ../autocomplete.errors */ 39);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.multiselect.js */ 61);
var MultiSelectAutocomplete = (function (_super) {
    __extends(MultiSelectAutocomplete, _super);
    function MultiSelectAutocomplete(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        return _this;
    }
    MultiSelectAutocomplete.prototype.initializeOptions = function () {
        this.config.options.minLength = this.config.options.minLength || 1;
        _super.prototype.initializeOptions.call(this);
    };
    MultiSelectAutocomplete.prototype.validateOptions = function () {
        _super.prototype.validateOptions.call(this);
        if (this.config.value && this.config.value instanceof Array === false) {
            throw new autocomplete_errors_1.AutocompleteProviderError("options.value. Value \"" + this.config.value + "\" should be an Array of IDs");
        }
    };
    MultiSelectAutocomplete.prototype.setInitialValue = function () {
        if (this.config.value) {
            this.initialValue = this.config.value;
        }
    };
    MultiSelectAutocomplete.prototype.setValue = function (theValue) {
        if (this.kendoComponent) {
            var newValue = theValue ? theValue : "";
            this.kendoComponent.value(newValue);
        }
    };
    MultiSelectAutocomplete.prototype.create = function () {
        var _this = this;
        var widgetOptions = {
            autoBind: this.autoBind,
            dataTextField: this.config.options.displayField,
            dataValueField: this.config.options.trackField,
            enable: this.enabled,
            filter: this.config.options.filter,
            dataSource: this.config.options.dataSource,
            minLength: this.config.options.minLength,
            placeholder: this.config.placeholder,
            noDataTemplate: this.config.options.noDataTemplate,
            itemTemplate: this.config.options.rowTemplate,
            fixedGroupTemplate: "",
            change: function (component) {
                if (component.sender.value().length) {
                    _this.config.change(component.sender.value());
                }
                else {
                    _this.config.change(null);
                }
            },
        };
        this.kendoComponent = new kendo.ui.MultiSelect(this.config.element, widgetOptions);
        this.kendoComponent.value(this.initialValue);
    };
    return MultiSelectAutocomplete;
}(autocomplete_abstract_1.default));
exports.default = MultiSelectAutocomplete;


/***/ }),
/* 241 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thDataTable/data-table.component.ts ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var template = __webpack_require__(/*! ./data-table.template.html */ 262);
var DataTable = (function () {
    /* @ngInject */
    DataTable.$inject = ["DataTableService", "$scope", "$element"];
    function DataTable(DataTableService, $scope, $element) {
        this.DataTableService = DataTableService;
        this.$scope = $scope;
        this.$element = $element;
        this.wholePageSelected = false;
        this.partialPageSelected = false;
        this.showSelectAllBanner = false;
        this.selectionStatusDict = {};
    }
    DataTable.prototype.$onInit = function () {
        if (DataTable.selectAllFunctionality) {
            this.numOfColumns = this.dataTableUserOptions.columns.length;
            this.DataTableService.initializeSelectAllBanner(this.$element, this.$scope);
        }
        this.dataSource = this.dataTableUserOptions.dataSource;
        this.totalDataLength = this.dataSource.data().length;
        this.processedOptions = this.DataTableService.getComponentOptions(this.dataTableUserOptions);
    };
    DataTable.prototype.togglePage = function () {
        var _this = this;
        var currentPageRows = this.dataSource.view();
        currentPageRows.forEach(function (row) {
            _this.selectionStatusDict[row.uid] = _this.wholePageSelected;
        });
        this.onSelectionChangeHandler();
    };
    DataTable.prototype.selectAll = function () {
        var _this = this;
        var data = this.dataSource.data();
        data.forEach(function (row) { return _this.selectionStatusDict[row.uID] = true; });
        this.updatePageSelectionStatuses();
        this.onSelectionChangeHandler();
        this.showSelectAllBanner = false;
    };
    DataTable.prototype.clearSelection = function () {
        this.selectionStatusDict = {};
        this.updatePageSelectionStatuses();
        this.onSelectionChangeHandler();
    };
    DataTable.prototype.rowCheckboxClickHander = function () {
        this.updatePageSelectionStatuses();
        this.onSelectionChangeHandler();
    };
    DataTable.prototype.getSelectedSize = function () {
        var selectedUIDs = this.getSelectedUIDs();
        return selectedUIDs.length;
    };
    DataTable.prototype.onSelectionChangeHandler = function () {
        if (typeof this.dataTableUserOptions.onSelectionChange === "function") {
            this.dataTableUserOptions.onSelectionChange(this.getSelectedUIDs());
        }
    };
    DataTable.prototype.updatePageSelectionStatuses = function () {
        var _this = this;
        var currentPageRows = this.dataSource.view();
        var selectionFilter = function (row) { return _this.selectionStatusDict[row.uid]; };
        var pageSelectedUIDs = currentPageRows.filter(selectionFilter);
        var pageSelectedSize = pageSelectedUIDs.length;
        var pageSize = this.dataSource.pageSize();
        this.wholePageSelected = pageSelectedSize > 0 && pageSelectedSize === pageSize;
        this.partialPageSelected = pageSelectedSize > 0 && pageSelectedSize < pageSize;
        this.showSelectAllBanner = this.wholePageSelected;
    };
    DataTable.prototype.getSelectedUIDs = function () {
        var selectedUIDs = [];
        for (var uID in this.selectionStatusDict) {
            if (this.selectionStatusDict.hasOwnProperty(uID)) {
                if (this.selectionStatusDict[uID]) {
                    selectedUIDs = selectedUIDs.concat([uID]);
                }
            }
        }
        return selectedUIDs;
    };
    return DataTable;
}());
// We can set this to true once we actually want select ALL functionality in (CLIO-45222).
DataTable.selectAllFunctionality = false;
exports.DataTable = DataTable;
var DataTableComponent = {
    template: template,
    bindings: {
        dataTableUserOptions: "<options",
    },
    transclude: true,
    controller: DataTable,
};
exports.DataTableComponent = DataTableComponent;


/***/ }),
/* 242 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/lib/thDataTable/data-table.service.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
__webpack_require__(/*! @progress/kendo-ui/js/kendo.grid.js */ 59);
var selectAllBannerTemplate = __webpack_require__(/*! ./templates/select-all-banner.template.html */ 265);
var pageCheckboxTemplate = __webpack_require__(/*! ./templates/page-checkbox.template.html */ 263);
var rowCheckboxTemplate = __webpack_require__(/*! ./templates/row-checkbox.template.html */ 264);
var DataTableService = (function () {
    /* @ngInject */
    DataTableService.$inject = ["$compile"];
    function DataTableService($compile) {
        this.$compile = $compile;
    }
    DataTableService.prototype.getComponentOptions = function (options) {
        var checkboxColumn = {
            title: pageCheckboxTemplate,
            width: "34px",
            command: {
                template: rowCheckboxTemplate,
            },
        };
        var columnsOptions = options.selectable
            ? [checkboxColumn].concat(options.columns) : options.columns;
        var pageSizeOptions = options.pageable
            ? {
                numeric: false,
                pageSize: 50,
                pageSizes: [50, 100, 150, 200],
                messages: {
                    display: "{0}\u2013{1} of {2}",
                    itemsPerPage: "Results per page",
                    empty: "No results to display",
                },
            }
            : false;
        var kendoOptions = {
            resizable: options.resizable,
            dataSource: options.dataSource,
            pageable: pageSizeOptions,
            columns: columnsOptions,
            selectable: false,
        };
        return kendoOptions;
    };
    DataTableService.prototype.initializeSelectAllBanner = function ($element, $scope) {
        var $selectAllBanner = this.$compile(selectAllBannerTemplate)($scope);
        angular.element($element).find("thead").append($selectAllBanner);
    };
    return DataTableService;
}());
exports.DataTableService = DataTableService;


/***/ }),
/* 243 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thDataTable/toolbar/toolbar.component.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var template = __webpack_require__(/*! ./toolbar.template.html */ 266);
var Toolbar = (function () {
    function Toolbar() {
    }
    return Toolbar;
}());
var ToolbarComponent = {
    template: template,
    require: {
        dataTableCtrl: "^^thDataTable",
    },
    transclude: {
        "bulk": "?bulkActions",
        "custom": "?customActions",
    },
    controller: Toolbar,
};
exports.ToolbarComponent = ToolbarComponent;


/***/ }),
/* 244 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thDatePicker/thDatePicker.component.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(/*! jquery */ 3);
var moment = __webpack_require__(/*! moment */ 1);
var angular = __webpack_require__(/*! angular */ 2);
var DatepickerController = (function () {
    DatepickerController.$inject = ["$scope", "$element", "$attrs", "DatepickerService", "ValidatorService", "thDefaults"];
    function DatepickerController($scope, $element, $attrs, DatepickerService, ValidatorService, thDefaults) {
        this.$scope = $scope;
        this.$element = $element;
        this.$attrs = $attrs;
        this.DatepickerService = DatepickerService;
        this.ValidatorService = ValidatorService;
        this.thDefaults = thDefaults;
        this.neverValidated = true; // for detecting the first change of formCtrl.$submitted
        var oriDateFormat = this.dateFormat || this.thDefaults.get("dateFormat") || "yyyy-mm-dd";
        this.dateFormat = oriDateFormat.replace(/Y/g, "y").replace(/m/g, "M").replace(/D/g, "d");
    }
    DatepickerController.prototype.normalizeDate = function (date, info) {
        if (moment.isMoment(date)) {
            return date.toDate();
        }
        else if (typeof date === "undefined" || date === null) {
            return date;
        }
        throw Error("The value passed into thDatePicker should be a moment object: " + info);
    };
    DatepickerController.prototype.formIsSubmitted = function () {
        return this.formCtrl && this.formCtrl.$submitted;
    };
    DatepickerController.prototype.createDatepicker = function () {
        var _this = this;
        this.datepicker = this.DatepickerService.create({
            element: this.inputElement[0],
            dateFormat: this.dateFormat,
            min: this.normalizeDate(this.min, "min"),
            max: this.normalizeDate(this.max, "max"),
            name: this.name,
            value: this.value,
            ngDisabled: this.ngDisabled,
            change: function (newVal) {
                if (newVal !== null) {
                    newVal = moment(newVal);
                    _this.lastValidDate = newVal;
                }
                if (typeof _this.onChange === "function") {
                    _this.$scope.$apply(function () {
                        _this.onChange(newVal);
                    });
                }
            },
            close: function () {
                if (_this.ngModelCtrl.$untouched) {
                    _this.$scope.$apply(function () {
                        _this.ngModelCtrl.$setTouched();
                    });
                }
                _this.validator.validateInput(_this.inputElement);
            },
        });
    };
    DatepickerController.prototype.createValidator = function () {
        var _this = this;
        this.validator = this.ValidatorService.create({
            element: this.inputElement[0],
            attrs: this.$attrs,
            customOptions: this.customValidator,
            rules: {
                valid: function (ele) {
                    var inputValue = ele[0].value;
                    var modelValue = _this.ngModel;
                    var inputValueIsEmpty = inputValue === "";
                    var ngModelIsValidMoment = modelValue && modelValue.isValid();
                    var inputIsValid = inputValueIsEmpty || ngModelIsValidMoment;
                    if (inputIsValid) {
                        if (inputValueIsEmpty && _this.revertToValid) {
                            _this.revertToLastValidDate();
                        }
                        return true;
                    }
                    if (_this.revertToValid) {
                        _this.revertToLastValidDate();
                        return true;
                    }
                    return false;
                },
            },
            messages: {
                valid: "Not a valid date",
            },
            validateInput: function (e) {
                _this.ngModelCtrl.$setValidity(_this.name, e.valid);
                _this.ngModelCtrl.$setTouched();
                // if the validation request comes from formCtrl, $apply is already taken care of by angular.
                if (_this.neverValidated && _this.formIsSubmitted()) {
                    _this.neverValidated = false;
                }
                else {
                    _this.$scope.$apply();
                }
            },
        });
    };
    DatepickerController.prototype.revertToLastValidDate = function () {
        this.lastValidDate = this.lastValidDate || moment();
        this.datepicker.value(this.lastValidDate.toDate());
    };
    DatepickerController.prototype.$onInit = function () {
        this.inputElement = $(this.$element[0]).find("input");
    };
    DatepickerController.prototype.$postLink = function () {
        var _this = this;
        this.createDatepicker();
        this.createValidator();
        this.inputElement.attr("name", this.name);
        this.inputElement.attr("condensed", this.condensed);
        this.inputElement.attr("placeholder", (this.placeholder || this.dateFormat.toLowerCase()));
        this.inputElement.on("click", function () { return _this.datepicker.open(); });
    };
    DatepickerController.prototype.$doCheck = function () {
        // because form submit doesn't have event, and we can't $watch it from component:
        // trigger validation when form submits without touching input, for one time only.
        if (this.neverValidated && this.formIsSubmitted()) {
            this.validator.validateInput(this.inputElement);
        }
    };
    DatepickerController.prototype.$onChanges = function (changesObj) {
        if (!this.datepicker) {
            if (changesObj.ngModel) {
                this.value = this.normalizeDate(changesObj.ngModel.currentValue, "ng-model");
            }
            return;
        }
        if (changesObj.ngModel) {
            var valuePassedIn = changesObj.ngModel.currentValue;
            var kendoValidDate = this.normalizeDate(valuePassedIn, "kendo value");
            this.datepicker.value(kendoValidDate);
        }
        if (changesObj.min) {
            this.datepicker.min(changesObj.min.currentValue);
        }
        if (changesObj.max) {
            this.datepicker.max(changesObj.max.currentValue);
        }
        if (changesObj.ngDisabled) {
            this.datepicker.enable(!changesObj.ngDisabled.currentValue);
        }
        if (changesObj.condensed) {
            this.inputElement.attr("condensed", this.condensed);
        }
    };
    DatepickerController.prototype.$onDestroy = function () {
        this.inputElement.off("click");
    };
    return DatepickerController;
}());
;
angular.module("ThemisComponents").component("thDatePicker", {
    template: "<input />",
    require: {
        ngModelCtrl: "ngModel",
        formCtrl: "?^^form",
    },
    /**
     * ng-required is not necessary here since class/attr change is dealt with on this ngModel level,
     * and not passed to kendo
     */
    bindings: {
        name: "@?",
        min: "<?",
        max: "<?",
        ngModel: "<",
        onChange: "<?",
        ngDisabled: "<?",
        placeholder: "@?",
        dateFormat: "@?",
        condensed: "@?",
        revertToValid: "<?",
        customValidator: "<?",
    },
    controller: DatepickerController,
});


/***/ }),
/* 245 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thDatePicker/thDatePicker.service.ts ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @progress/kendo-ui/js/kendo.datepicker.js */ 8);
var DatepickerService = (function () {
    function DatepickerService() {
    }
    DatepickerService.prototype.create = function (options) {
        var datepicker = new kendo.ui.DatePicker(options.element, {
            min: options.min,
            max: options.max,
            value: options.value,
            format: options.dateFormat,
            footer: "Today",
            change: function () {
                if (options.change) {
                    options.change(this.value());
                }
            },
            close: options.close,
            open: options.open,
        });
        // calling enable after init, because no corresponding option when creating kendo-datepicker
        datepicker.enable(!options.ngDisabled);
        return datepicker;
    };
    return DatepickerService;
}());
exports.DatepickerService = DatepickerService;


/***/ }),
/* 246 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./src/lib/thGrid/thColumn.component.ts ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var thGridFramework_service_1 = __webpack_require__(/*! ./thGridFramework.service */ 70);
var Column = (function () {
    /* @ngInject */
    Column.$inject = ["$element"];
    function Column($element) {
        this.$element = $element;
        this.thGridFramework = new thGridFramework_service_1.default();
    }
    Column.prototype.$onInit = function () {
        if (typeof this.thRow === "undefined") {
            // Should we also do a check for the direct parent here?
            // Having .frow in the ancester tree isn't enough.
            throw new Error("A thColumn component must have a thGrid component as its parent");
        }
    };
    Column.prototype.$postLink = function () {
        var cssClasses = this.thGridFramework.getColumnClasses({
            columns: this.columns,
            columnsLg: this.columnsLg,
            columnsSm: this.columnsSm,
            columnsXs: this.columnsXs,
            hideLg: this.hideLg,
            hideMd: this.hideMd,
            hideSm: this.hideSm,
            hideXs: this.hideXs,
        });
        this.$element.removeClass();
        (_a = this.$element[0].classList).add.apply(_a, cssClasses.columnClasses);
        var _a;
    };
    return Column;
}());
var ColumnComponent = {
    bindings: {
        columns: "@",
        columnsLg: "@",
        columnsSm: "@",
        columnsXs: "@",
        hideLg: "<",
        hideMd: "<",
        hideSm: "<",
        hideXs: "<",
    },
    controller: Column,
    require: {
        thRow: "^^",
    },
};
exports.default = ColumnComponent;


/***/ }),
/* 247 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./src/lib/thGrid/thGrid.cssClasses.ts ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bootstrapCssClasses = {
    row: {
        row: "row",
        noGutters: "no-gutters",
        alignment: {
            centre: "justify-content-center",
            left: "justify-content-start",
            right: "justify-content-end",
            vcentre: "align-items-center",
        },
    },
    column: {
        column: "col",
        columnsLg: "col-lg-xx",
        columnsMd: "col-md-xx",
        columnsSm: "col-sm-xx",
        columnsXs: "col-xx",
        hideLg: "hidden-lg-up",
        hideMd: "hidden-md-up",
        hideSm: "hidden-sm-down",
        hideXs: "hidden-xs-down",
    },
};
exports.bootstrapCssClasses = bootstrapCssClasses;


/***/ }),
/* 248 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************!*\
  !*** ./src/lib/thGrid/thRow.component.ts ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var thGridFramework_service_1 = __webpack_require__(/*! ./thGridFramework.service */ 70);
var Row = (function () {
    /* @ngInject */
    Row.$inject = ["$element"];
    function Row($element) {
        this.$element = $element;
        this.thGridFramework = new thGridFramework_service_1.default();
    }
    Row.prototype.$postLink = function () {
        var cssClasses = this.thGridFramework.getRowClasses({
            hideGutters: this.hideGutters,
            align: this.align,
        });
        this.$element.removeClass();
        (_a = this.$element[0].classList).add.apply(_a, cssClasses.rowClasses);
        this.$element.wrap("<span class=\"th-row\">");
        var _a;
    };
    return Row;
}());
var RowComponent = {
    bindings: {
        hideGutters: "<",
        align: "@",
    },
    controller: Row,
};
exports.default = RowComponent;


/***/ }),
/* 249 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/lib/thModal/thModalTitlebar/index.ts ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var angular = __webpack_require__(/*! angular */ 2);
var thModalTitlebar_component_1 = __webpack_require__(/*! ./thModalTitlebar.component */ 250);
angular.module("ThemisComponents")
    .component("thModalTitlebar", thModalTitlebar_component_1.ModalTitlebarComponent);


/***/ }),
/* 250 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************************!*\
  !*** ./src/lib/thModal/thModalTitlebar/thModalTitlebar.component.ts ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var template = __webpack_require__(/*! ./thModalTitlebar.template.html */ 291);
var ModalTitlebar = (function () {
    /* @ngInject */
    ModalTitlebar.$inject = ["$element", "$scope", "$q"];
    function ModalTitlebar($element, $scope, $q) {
        this.$element = $element;
        this.$scope = $scope;
        this.$q = $q;
    }
    ModalTitlebar.prototype.$onInit = function () {
        if (typeof this.type === "undefined") {
            this.type = "standard";
        }
        if (typeof this.showCloseButton === "undefined") {
            this.showCloseButton = true;
        }
    };
    ;
    ModalTitlebar.prototype.$postLink = function () {
        this.$element.addClass("type-" + this.type);
    };
    ModalTitlebar.prototype.close = function () {
        var _this = this;
        var beforeClosePromise = this.beforeClosePromise || this.$q.resolve;
        return beforeClosePromise().then(function () {
            if (_this.$scope.$parent.modal) {
                _this.$scope.$parent.modal.dismiss();
            }
        });
    };
    return ModalTitlebar;
}());
exports.ModalTitlebar = ModalTitlebar;
var ModalTitlebarComponent = {
    template: template,
    controller: ModalTitlebar,
    bindings: {
        title: "@",
        type: "@",
        showCloseButton: "<",
        beforeClosePromise: "<?",
    },
};
exports.ModalTitlebarComponent = ModalTitlebarComponent;


/***/ }),
/* 251 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/lib/thScheduler/calendar-entries.service.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var scheduler_data_source_service_1 = __webpack_require__(/*! ../services/scheduler-data-source.service */ 68);
var CalendarEntriesService = (function () {
    function CalendarEntriesService(options, calendarDataSource, verbUrls) {
        var _this = this;
        this.queriedIds = [];
        this.setCalendarDataSource(calendarDataSource);
        this.verbUrls = verbUrls;
        var transportDefaults = {
            create: function (e) {
                _this.createCalendarEntry(e.data)
                    .then(function (response) {
                    e.success({ data: response.data });
                });
            },
            read: function (e) {
                _this.getEntriesForCalendars()
                    .then(function (entries) {
                    e.success({ data: entries });
                }, function (reason) {
                    console.log("reason", reason);
                });
            },
            update: function (e) {
                _this.updateCalendarEntry(e.data.id, e.data)
                    .then(function (response) {
                    e.success({ data: response.data });
                });
            },
            destroy: function (e) {
                _this.deleteRemoteEntry(e.data.id)
                    .then(function () {
                    e.success();
                }, function (reason) {
                    e.error(reason);
                });
            },
        };
        // TODO: #test-needed
        if (options.transport) {
            options.transport = Object.assign({}, transportDefaults, options.transport);
        }
        else {
            options.transport = transportDefaults;
        }
        this.entriesDataSource = new scheduler_data_source_service_1.default().createDataSource(options);
    }
    CalendarEntriesService.prototype.setCalendarDataSource = function (calendarDataSource) {
        var _this = this;
        this.calendarDataSource = calendarDataSource;
        this.calendarDataSource.bind("change", function (e) {
            var visibilityOrColorChanged = (e.action === "itemchange" && (e.field === "visible" || e.field === "color"));
            if (visibilityOrColorChanged) {
                return _this.onVisibilityChanged();
            }
        });
    };
    /**
     * This function essentially repaints the calendar entries
     * after checking if they are cached, implicitly making a request if not
     */
    CalendarEntriesService.prototype.onVisibilityChanged = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ids;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        /**
                         * Just noticed that calling "filter" calls the transport read function
                         * which reloads the entries.
                         */
                        this.entriesDataSource.filter({
                            operator: function (entry) { return (_this.calendarDataSource.isVisible(entry.calendar_id)); },
                        });
                        return [4 /*yield*/, this.calendarDataSource.getIds()];
                    case 1:
                        ids = _a.sent();
                        ids.forEach(function (id) {
                            if (_this.calendarDataSource.isVisible(id)) {
                                if (!_this.queriedIds.find(function (entryId) { return entryId === id; })) {
                                    _this.addEntriesForCalendar(id);
                                }
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    CalendarEntriesService.prototype.getEntriesDataSource = function () {
        return this.entriesDataSource;
    };
    CalendarEntriesService.prototype.getEntriesForCalendar = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var appendCalendarIdToEntry, response, responseData, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appendCalendarIdToEntry = function (entries) {
                            entries.forEach(function (entry) {
                                entry.calendar_id = id;
                            });
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, fetch(this.verbUrls.read(id), {
                                method: "GET",
                                headers: {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json",
                                    "Cache": "no-cache",
                                },
                                credentials: "same-origin",
                            })];
                    case 2:
                        response = _a.sent();
                        if (!response.ok) return [3 /*break*/, 4];
                        this.queriedIds.push(id);
                        return [4 /*yield*/, response.json()];
                    case 3:
                        responseData = _a.sent();
                        appendCalendarIdToEntry(responseData.data);
                        return [2 /*return*/, responseData.data];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        reason_1 = _a.sent();
                        return [2 /*return*/, reason_1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    CalendarEntriesService.prototype.deleteRemoteEntry = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(this.verbUrls.delete(id), {
                            method: "DELETE",
                            headers: {
                                "Accept": "application/json",
                                "Content-Type": "application/json",
                                "Cache": "no-cache",
                            },
                            credentials: "same-origin",
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.ok) {
                            return [2 /*return*/];
                        }
                        throw new Error(response.statusText);
                }
            });
        });
    };
    CalendarEntriesService.prototype.removeEntry = function (entry) {
        var entryInstance = this.entriesDataSource.get(entry.id);
        try {
            /**
             * We need to handle the case when synchronization fails. This (and other functions that
             * call DataSource.sync) should return a promise so we can properly handle the error-case
             * and provide feedback to the user. #should-return-promise
             */
            this.entriesDataSource.remove(entryInstance);
            this.entriesDataSource.sync();
        }
        catch (reason) {
            console.warn(reason);
        }
    };
    /**
     * TODO: Update links
     * @see {@link http://docs.telerik.com/kendo-ui/framework/datasource/overview#to-remote-service|To Remote Service}
     */
    CalendarEntriesService.prototype.prepareForCreate = function (rawData) {
        // the "data" will need replacing with a dynamic key name if we allow custom API nested keys
        /* tslint:disable:max-line-length */
        var models = this.entriesDataSource.reader.data.call(this.entriesDataSource.reader, { data: rawData });
        /* tslint:enable:max-line-length */
        return models;
    };
    CalendarEntriesService.prototype.createCalendarEntry = function (calendarEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var response, reason_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, fetch(this.verbUrls.create(), {
                                method: "POST",
                                headers: {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json",
                                    "Cache": "no-cache",
                                },
                                credentials: "same-origin",
                                body: JSON.stringify({ data: calendarEntry }),
                            })];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        reason_2 = _a.sent();
                        return [2 /*return*/, reason_2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CalendarEntriesService.prototype.updateCalendarEntry = function (calendarEntryId, updatedData) {
        return __awaiter(this, void 0, void 0, function () {
            var response, reason_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, fetch(this.verbUrls.update(calendarEntryId), {
                                method: "PATCH",
                                headers: {
                                    "Accept": "application/json",
                                    "Content-Type": "application/json",
                                    "Cache": "no-cache",
                                },
                                credentials: "same-origin",
                                body: JSON.stringify({ data: updatedData }),
                            })];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        reason_3 = _a.sent();
                        return [2 /*return*/, reason_3];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CalendarEntriesService.prototype.addEntriesForCalendar = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var rawData, entryModels, reason_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getEntriesForCalendar(id)];
                    case 1:
                        rawData = _a.sent();
                        entryModels = this.prepareForCreate(rawData);
                        this.entriesDataSource.pushCreate(entryModels);
                        return [3 /*break*/, 3];
                    case 2:
                        reason_4 = _a.sent();
                        console.warn(reason_4);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CalendarEntriesService.prototype.getEntriesForCalendars = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var ids, entryArrays, entries, reason_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.calendarDataSource.getIds()];
                    case 1:
                        ids = _a.sent();
                        return [4 /*yield*/, Promise.all(ids.map(function (id) { return _this.calendarDataSource.isVisible(id) ? _this.getEntriesForCalendar(id) : null; }))];
                    case 2:
                        entryArrays = _a.sent();
                        entries = [].concat.apply([], entryArrays).filter(function (a) { return a !== null; });
                        return [2 /*return*/, entries];
                    case 3:
                        reason_5 = _a.sent();
                        console.warn(reason_5);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return CalendarEntriesService;
}());
exports.CalendarEntriesService = CalendarEntriesService;
// wrapper factory for injection into an angular service
var CalendarEntriesServiceFactory = (function () {
    function CalendarEntriesServiceFactory() {
    }
    CalendarEntriesServiceFactory.prototype.create = function (options, calendarDataSource, verbUrls) {
        return new CalendarEntriesService(options, calendarDataSource, verbUrls);
    };
    return CalendarEntriesServiceFactory;
}());
exports.CalendarEntriesServiceFactory = CalendarEntriesServiceFactory;


/***/ }),
/* 252 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/lib/thScheduler/calendars/calendar-data-source.service.ts ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_service_1 = __webpack_require__(/*! ../../services/data-source.service */ 67);
var CalendarDataSource = (function () {
    function CalendarDataSource(options) {
        var _this = this;
        this.colors = [
            { val: "#658cda" },
            { val: "#da6666" },
            { val: "#49b050" },
            { val: "#e7804c" },
            { val: "#8c66da" },
            { val: "#c4a882" },
            { val: "#64ad88" },
            { val: "#84aaa5" },
            { val: "#56bfb3" },
            { val: "#e77399" },
            { val: "#bfbf4b" },
            { val: "#8bbf3c" },
            { val: "#b473b4" },
            { val: "#a7a77d" },
            { val: "#f2a53d" },
            { val: "#658cb3" },
            { val: "#be9494" },
            { val: "#a992a9" },
            { val: "#8897a5" },
            { val: "#93a2be" },
        ];
        this._dataSource = new data_source_service_1.default().createDataSource(options);
        // Wrap in a standard promise for now
        this._fetchPromise = new Promise(function (resolve, reject) {
            _this._dataSource.fetch()
                .then(function () { return resolve(); })
                .fail(function () { return reject(); });
        });
    }
    CalendarDataSource.prototype.bind = function (eventName, handler) {
        return this._dataSource.bind(eventName, handler);
    };
    CalendarDataSource.prototype.isVisible = function (id) {
        if (this._dataSource.get(id) !== undefined) {
            return this._dataSource.get(id).get("visible");
        }
        else {
            var err = new Error();
            // TODO: figure out the source of this error. Out of scope for CLIO-45876 (04/04/2017)
            console.warn("Known issue that is being investigated.\n");
            console.warn("Stack trace: " + err.stack);
        }
    };
    CalendarDataSource.prototype.setVisible = function (calendar) {
        this._dataSource.get(calendar.id).set("visible", calendar.visible);
        this._dataSource.sync();
    };
    CalendarDataSource.prototype.getColor = function (id) {
        return this._dataSource.get(id).get("color");
    };
    CalendarDataSource.prototype.setColor = function (calendar) {
        this._dataSource.get(calendar.id).set("color", calendar.color);
        this._dataSource.sync();
    };
    CalendarDataSource.prototype.getPotentialCalendarColors = function () {
        return this.colors;
    };
    CalendarDataSource.prototype.getCalendarsDataSource = function () {
        return this._dataSource;
    };
    CalendarDataSource.prototype.getCalendars = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rawData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._fetchPromise];
                    case 1:
                        _a.sent();
                        rawData = this._dataSource.data();
                        return [2 /*return*/, rawData.map(function (calendar) {
                                return {
                                    id: calendar.id,
                                    name: calendar.name,
                                    visible: calendar.visible,
                                    color: calendar.color,
                                };
                            })];
                }
            });
        });
    };
    CalendarDataSource.prototype.getIds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var calendars;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCalendars()];
                    case 1:
                        calendars = _a.sent();
                        return [2 /*return*/, calendars.map(function (calender) { return calender.id; })];
                }
            });
        });
    };
    CalendarDataSource.prototype.fetch = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCalendars()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return CalendarDataSource;
}());
exports.CalendarDataSource = CalendarDataSource;
// wrapper factory for injection into an angular service
var CalendarDataSourceFactory = (function () {
    function CalendarDataSourceFactory() {
    }
    CalendarDataSourceFactory.prototype.createDataSource = function (options) {
        return new CalendarDataSource(options);
    };
    return CalendarDataSourceFactory;
}());
exports.CalendarDataSourceFactory = CalendarDataSourceFactory;


/***/ }),
/* 253 */
/* unknown exports provided */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/lib/thScheduler/calendars/calendars.component.ts ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var template = __webpack_require__(/*! ./calendars.template.html */ 297);
var colorTemplate = __webpack_require__(/*! ./color.template.html */ 298);
var CalendarsController = (function () {
    function CalendarsController() {
        /**
         * This is only public for testing purposes.
         * TODO: Figure out a way to expose private members
         * to tests so we don't have to make this public.
         */
        this.calendars = [];
        this.colorTooltipOptions = {
            position: "bottom",
            showOn: "click",
            autoHide: false,
        };
        this.colorsTooltipContent = colorTemplate;
        this.colors = this.options.dataSource.getPotentialCalendarColors();
    }
    CalendarsController.prototype.validateArgs = function () {
        if (this.options === null || typeof this.options === "undefined") {
            throw new Error("thCalendars: You must provide the \"options\" parameter.");
        }
        if (this.options.dataSource === null || typeof this.options.dataSource === "undefined") {
            throw new Error("thCalendars: You must provide the \"options.dataSource\" property.");
        }
    };
    CalendarsController.prototype.setCalendars = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.options.dataSource.fetch()];
                    case 1:
                        _a.calendars = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CalendarsController.prototype.$onInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.validateArgs();
                        return [4 /*yield*/, this.setCalendars()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CalendarsController.prototype.toggleVisibility = function (calendar) {
        this.options.dataSource.setVisible(calendar);
    };
    CalendarsController.prototype.setCalendarBeingEdited = function (calendar) {
        this.calendarBeingEdited = calendar;
    };
    CalendarsController.prototype.setColorForCalendarBeingEdited = function (color) {
        if (this.calendarBeingEdited === null || typeof this.calendarBeingEdited === "undefined") {
            throw new Error("thCalendars: called \"setColorForCalendarBeingEdited\" with no active calendar.");
        }
        this.calendarBeingEdited.color = color;
        this.options.dataSource.setColor(this.calendarBeingEdited);
    };
    return CalendarsController;
}());
exports.CalendarsController = CalendarsController;
var CalendarsComponent = {
    template: template,
    bindings: {
        options: "=",
    },
    controller: CalendarsController,
};
exports.CalendarsComponent = CalendarsComponent;


/***/ }),
/* 254 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thScheduler/scheduler.component.ts ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var template = __webpack_require__(/*! ./scheduler.template.html */ 299);
var SchedulerController = (function () {
    function SchedulerController() {
    }
    SchedulerController.prototype.validateArgs = function () {
        if (this.options === null || typeof this.options === "undefined") {
            throw new Error("thScheduler: You must provide the \"options\" parameter.");
        }
        if (this.options.dataSource === null || typeof this.options.dataSource === "undefined") {
            throw new Error("thScheduler: You must provide the \"options.dataSource\" property.");
        }
    };
    SchedulerController.prototype.launchEditEventAction = function (evt) {
        if (typeof this.editEventAction !== "function") {
            console.warn("SchedulerController: Must specify attribute 'edit-event-action' of type function.");
            return;
        }
        evt.preventDefault();
        var calendarEntry = evt.event.toJSON();
        var isNew = evt.event.id === evt.event._defaultId;
        this.editEventAction(calendarEntry, isNew, this.updateCalendarEntry.bind(this));
    };
    /**
     * A somewhat ugly way of accessing the fields for a CalendarEntry that
     * were defined on the schema for the DataSource.
     */
    SchedulerController.prototype.getCalendarEntryFieldNames = function () {
        return Object.keys(this.options.dataSource.reader.reader.model.fields);
    };
    SchedulerController.prototype.updateCalendarEntryFields = function (entryModel, calendarEntry, fieldNames) {
        fieldNames.forEach(function (name) {
            entryModel.set(name, calendarEntry[name]);
        });
    };
    SchedulerController.prototype.createNewCalendarEntry = function (calendarEntry, fieldNames) {
        var newEntry = {
            title: null,
            start: null,
            end: null,
            calendar: {
                id: 2,
            },
        };
        fieldNames
            .filter(function (fieldName) { return fieldName !== "id"; })
            .forEach(function (name) {
            // TODO: This needs to update the nested id property of calendar when we implement the Set Calendar dropdown
            newEntry[name] = calendarEntry[name];
        });
        return newEntry;
    };
    /**
     * This is purely to facilitate demoing whilst we don't have the "Set Calendar" dropdown.
     * Once we can set a calendar, this method will go away.
     * @param entry
     */
    SchedulerController.prototype.setDefaultCalendarId = function (entry) {
        entry.calendar_id = entry.calendar_id === 0 ? 1 : entry.calendar_id;
    };
    SchedulerController.prototype.updateCalendarEntry = function (entry, isNewEntry) {
        var fieldNames = this.getCalendarEntryFieldNames();
        var calendarEntry;
        if (isNewEntry) {
            this.setDefaultCalendarId(entry);
            calendarEntry = this.createNewCalendarEntry(entry, fieldNames);
            this.options.dataSource.add(calendarEntry);
        }
        else {
            calendarEntry = this.options.dataSource.get(entry.id);
            this.updateCalendarEntryFields(calendarEntry, entry, fieldNames);
        }
        this.options.dataSource.sync();
    };
    SchedulerController.prototype.$onInit = function () {
        var _this = this;
        this.validateArgs();
        Object.assign(this.options, {
            views: [
                "agenda",
                "day",
                { type: "week", selected: true },
                "month",
            ],
            edit: function (evt) { return _this.launchEditEventAction(evt); },
        });
    };
    return SchedulerController;
}());
exports.SchedulerController = SchedulerController;
var SchedulerComponent = {
    template: template,
    bindings: {
        options: "<",
        editEventAction: "<?",
    },
    controller: SchedulerController,
};
exports.SchedulerComponent = SchedulerComponent;


/***/ }),
/* 255 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/lib/thActionBar/thActionBar.template.html ***!
  \*******************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"action-bar\">\n  <div class=\"flex-section\">\n    <th-checkbox\n      ng-model=\"$ctrl.checked\"\n      ng-change=\"$ctrl.toggleAll()\"\n      with-label=\"Select Page\"\n      ng-disabled=\"$ctrl.delegate.results.processing\"\n      >\n    </th-checkbox>\n    <div class=\"action-menu\" ng-if=\"$ctrl.delegate.results.hasSelection\">\n      <span ng-if=\"$ctrl.delegate.availableActions\">\n        <th-select\n          ng-model=\"$ctrl.delegate.results.selectedAction\"\n          options=\"$ctrl.delegate.availableActions\"\n          placeholder=\"Action\"\n          condensed=\"true\"\n          ng-disabled=\"$ctrl.delegate.results.processing\"\n          >\n        </th-select>\n      </span>\n      <span class=\"button-wrapper\" ng-class=\"{'margin-left-10': !$ctrl.availableActions}\">\n        <th-button\n          type=\"standard\"\n          ng-click=\"$ctrl.triggerApply()\"\n          ng-disabled=\"$ctrl.delegate.isDisabled()\"\n          loading=\"$ctrl.delegate.results.processing\"\n          >\n          {{$ctrl.delegate.buttonName}}\n        </th-button>\n      </span>\n    </div>\n  </div>\n  <div class=\"flex-section\">\n    <ng-transclude></ng-transclude>\n  </div>\n</div>\n"

/***/ }),
/* 256 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/lib/thActionBarBilling/thActionBarBilling.template.html ***!
  \*********************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"action-bar\">\n\n  <div\n    class=\"flex-section\"\n    ng-class=\"{hidden: actionBar.delegate.results.totalItemCount <= 0}\"\n    >\n    <th-checkbox\n      ng-model=\"actionBar.delegate.results.allSelected\"\n      ng-click=\"actionBar.toggleAll()\"\n      with-label=\"Select All\"\n      ng-disabled=\"actionBar.delegate.results.processing\"\n      indeterminate=\"actionBar.isIndeterminate()\"\n      >\n    </th-checkbox>\n    <th-loader\n      ng-if=\"actionBar.delegate.results.loadingIds\"\n      size=\"mini\"\n      >\n    </th-loader>\n    <div\n      class=\"action-menu\"\n      ng-if=\"actionBar.delegate.results.selectedItemCount > 0\n        && !actionBar.delegate.results.loadingIds\"\n      >\n      <div class=\"action-text\">\n        <strong>{{actionBar.delegate.results.selectedItemCount}}</strong>\n          {{actionBar.openingWords}}\n          {{actionBar.lastWord | pluralize: actionBar.delegate.results.selectedItemCount}}\n          selected.\n      </div>\n      <span ng-if=\"actionBar.delegate.results.availableActions\">\n        <th-select\n          ng-model=\"actionBar.delegate.results.selectedAction\"\n          options=\"actionBar.delegate.results.availableActions\"\n          placeholder=\"Action\"\n          condensed=\"true\"\n          ng-disabled=\"actionBar.delegate.results.processing\"\n          >\n        </th-select>\n      </span>\n      <span class=\"button-wrapper\"\n        ng-class=\"{'margin-left-10': !actionBar.delegate.results.availableActions}\"\n        >\n        <th-button\n          type=\"standard\"\n          ng-click=\"actionBar.triggerApply()\"\n          ng-disabled=\"actionBar.delegate.results.processing ||\n                       (!actionBar.delegate.results.selectedAction &&\n                       !!actionBar.delegate.results.availableActions)\"\n          loading=\"actionBar.delegate.results.processing\"\n          >\n          {{actionBar.buttonName}}\n        </th-button>\n      </span>\n    </div>\n  </div>\n  <div class=\"flex-section\">\n    <ng-transclude></ng-transclude>\n  </div>\n</div>\n"

/***/ }),
/* 257 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thAlert/thAlertAnchor.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<div\n  ng-show=\"alertAnchor.alertMessage.message\"\n  ng-class=\"'th-alert th-alert-' + alertAnchor.alertMessage.type\"\n  >\n  <i\n    class=\"fa alert-icon\"\n    ng-class=\"{ 'fa-check': alertAnchor.alertMessage.type == 'success',\n                'fa-warning': alertAnchor.alertMessage.type == 'error' ||\n                              alertAnchor.alertMessage.type == 'warning' }\"\n    >\n  </i>\n  <p\n    ng-bind-html=\"alertAnchor.alertMessage.message\"\n    >\n    {{alertAnchor.alertMessage.message}}\n  </p>\n  <i\n    class=\"fa fa-times-circle dismiss-icon\"\n    ng-click=\"alertAnchor.dismiss()\"\n    >\n  </i>\n</div>\n"

/***/ }),
/* 258 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thButton/thButton.anchor.template.html ***!
  \********************************************************/
/***/ (function(module, exports) {

module.exports = "<a\n  class=\"th-button {{button.type}}\"\n  aria-disabled=\"{{button.ngDisabled}}\"\n  href=\"{{button.href}}\"\n  role=\"button\"\n  >\n  <span\n    class=\"load-wrapper\"\n    ng-if=\"button.loading\"\n    >\n    <th-loader\n      theme=\"button.theme\"\n      size=\"mini\"\n      >\n    </th-loader>\n  </span>\n  <ng-transclude\n    ng-class=\"button.loading ? 'hide' : 'show'\"\n    >\n  </ng-transclude>\n</a>\n"

/***/ }),
/* 259 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thButton/thButton.button.template.html ***!
  \********************************************************/
/***/ (function(module, exports) {

module.exports = "<button\n  class=\"th-button {{button.type}}\"\n  aria-disabled=\"{{button.ngDisabled}}\"\n  >\n  <span\n    class=\"load-wrapper\"\n    ng-if=\"button.loading\"\n    >\n    <th-loader\n      theme=\"button.theme\"\n      size=\"mini\"\n      >\n    </th-loader>\n  </span>\n  <ng-transclude\n    ng-class=\"button.loading ? 'hide' : 'show'\"\n    >\n  </ng-transclude>\n</button>\n"

/***/ }),
/* 260 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thCheckbox/thCheckbox.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<span\n  class=\"th-checkbox\"\n  ng-class=\"[\n    {disabled: checkbox.ngDisabled},\n    {checked: checkbox.checked && !checkbox.indeterminate},\n    {indeterminate: checkbox.indeterminate}\n  ]\"\n  role=\"checkbox\"\n  aria-checked=\"{{checkbox.checked}}\"\n  tabindex=\"0\"\n  >\n  <input\n    type=\"checkbox\"\n    name=\"{{checkbox.name}}\"\n    ng-model=\"checkbox.checked\"\n    ng-required=\"checkbox.ngRequired\"\n    ng-disabled=\"checkbox.ngDisabled\"\n    value=\"{{checkbox.checked}}\"\n    >\n  <i></i>\n</span>\n"

/***/ }),
/* 261 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/lib/thContentHeader/thContentHeader.template.html ***!
  \***************************************************************/
/***/ (function(module, exports) {

module.exports = "<h1 class=\"th-header-title th-header-flex-item\">{{ title }}</h1>\n<div class=\"th-header-flex-item\"></div>\n<ng-transclude class=\"th-header-flex-item\"></ng-transclude>"

/***/ }),
/* 262 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thDataTable/data-table.template.html ***!
  \******************************************************/
/***/ (function(module, exports) {

module.exports = "<ng-transclude></ng-transclude>\n<kendo-grid options=\"$ctrl.processedOptions\"></kendo-grid>\n"

/***/ }),
/* 263 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/lib/thDataTable/templates/page-checkbox.template.html ***!
  \*******************************************************************/
/***/ (function(module, exports) {

module.exports = "<th-checkbox\n  ng-click=\"$ctrl.togglePage()\"\n  ng-model=\"$ctrl.wholePageSelected\"\n  indeterminate=\"$ctrl.partialPageSelected\"\n  >\n</th-checkbox>\n"

/***/ }),
/* 264 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/lib/thDataTable/templates/row-checkbox.template.html ***!
  \******************************************************************/
/***/ (function(module, exports) {

module.exports = "<th-checkbox\n  ng-model=\"$ctrl.selectionStatusDict[dataItem.uid]\"\n  ng-click=\"$ctrl.rowCheckboxClickHander()\"\n  >\n</th-checkbox>\n"

/***/ }),
/* 265 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/lib/thDataTable/templates/select-all-banner.template.html ***!
  \***********************************************************************/
/***/ (function(module, exports) {

module.exports = "<tr class=\"select-all-banner\" ng-show=\"$ctrl.showSelectAllBanner\">\n  <th colspan=\"{{ $ctrl.numOfColumns }}\">\n    All {{ $ctrl.getSelectedSize() }} rows on this page selected.\n    <a\n      class=\"select-all-rows\"\n      ng-click=\"$ctrl.selectAll()\"\n      >\n      Select all {{ $ctrl.totalDataLength }} rows\n    </a>\n  </th>\n</tr>\n"

/***/ }),
/* 266 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thDataTable/toolbar/toolbar.template.html ***!
  \***********************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"bulk-actions-container\">\n  <!-- custom space -->\n  <div ng-transclude=\"bulk\"></div>\n\n  <div class=\"counter-container\" ng-if=\"$ctrl.dataTableCtrl.getSelectedSize()\">\n    <p>{{$ctrl.dataTableCtrl.getSelectedSize()}} selected</p>\n    <a href=\"#\" ng-click=\"$ctrl.dataTableCtrl.clearSelection()\">Clear</a>\n  </div>\n</div>\n\n<div class=\"tools-container\">\n  <!-- custom space -->\n  <div ng-transclude=\"custom\"></div>\n\n  <!-- common: search bar -->\n  <!-- common: filter toggle button -->\n</div>\n"

/***/ }),
/* 267 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************************!*\
  !*** ./src/lib/thDisclosure/thDisclosureContent.template.html ***!
  \****************************************************************/
/***/ (function(module, exports) {

module.exports = "<ng-transclude></ng-transclude>\n"

/***/ }),
/* 268 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/lib/thDisclosure/thDisclosureToggle.template.html ***!
  \***************************************************************/
/***/ (function(module, exports) {

module.exports = "<a\n  id=\"{{thDisclosureToggle.name}}-toggle\"\n  href\n  ng-click=\"thDisclosureToggle.toggle()\"\n  ng-focus=\"thDisclosureToggle.focus()\"\n  ng-blur=\"thDisclosureToggle.blur()\"\n  aria-controls=\"{{thDisclosureToggle.name}}\"\n  aria-expanded=\"{{thDisclosureToggle.expanded}}\"\n  aria-label=\"{{thDisclosureToggle.ariaLabel}}\"\n  aria-describedby=\"{{thDisclosureToggle.ariaDescribedby}}\"\n  tabindex=\"{{thDisclosureToggle.tabindex}}\"\n  role=\"button\"\n  >\n  <ng-transclude\n    ng-if=\"thDisclosureToggle.textSide == 'left'\"\n    >\n  </ng-transclude>\n  <span\n    class=\"fa fa-caret-right\"\n    ng-class=\"{'fa-caret-right-rotated': thDisclosureToggle.expanded}\"\n    aria-hidden=\"true\"\n    >\n  </span>\n  <ng-transclude\n    ng-if=\"thDisclosureToggle.textSide == 'right'\"\n    >\n  </ng-transclude>\n</a>\n"

/***/ }),
/* 269 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thDropdown/thDivider.template.html ***!
  \****************************************************/
/***/ (function(module, exports) {

module.exports = "<hr class=\"th-divider\" aria-hidden=\"true\"></hr>\n"

/***/ }),
/* 270 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thDropdown/thDropdown.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<div\n  class=\"button-dropdown\"\n  ng-keydown=\"dropdown.keyboardToggle($event)\"\n  >\n  <div\n    class=\"dd-overlay\"\n    ng-click=\"dropdown.toggle()\"\n    ng-if=\"dropdown.visible\"\n    >\n  </div>\n  <button\n    ng-class=\"dropdown.type\"\n    ng-click=\"dropdown.toggle()\"\n    ng-disabled=\"dropdown.disabledWithAttribute || dropdown.ngDisabled\"\n    aria-haspopup=\"true\"\n    aria-owns=\"{{dropdown.name|lowercase}}-listbox\"\n    aria-label=\"{{dropdown.ariaLabel}}\"\n    aria-describedby=\"{{dropdown.ariaDescribedby}}\"\n    tabindex=\"{{dropdown.visible ? '-1' : '0'}}\"\n    >\n    {{dropdown.name}}\n    <i\n      class=\"fa\"\n      ng-class=\"dropdown.toggleCaret()\"\n      >\n    </i>\n  </button>\n  <ul\n    id=\"{{dropdown.name|lowercase}}-listbox\"\n    ng-click=\"dropdown.toggle()\"\n    ng-if=\"dropdown.visible\"\n    class=\"dropdown-menu\"\n    ng-class=\"dropdown.type\"\n    aria-role=\"listbox\"\n    tabindex=\"{{dropdown.visible ? '0' : '-1'}}\"\n    >\n    <ng-switch\n      on=\"item.type\"\n      ng-repeat=\"item in dropdown.processedItems\"\n      >\n      <th-item ng-switch-when='link'\n        name=\"{{item.name}}\"\n        href=\"{{item.href}}\"\n        icon=\"{{item.icon}}\"\n        aria-role=\"option\"\n        ng-class=\"{'selected' : item.selected}\"\n        >\n      </th-item>\n      <th-item ng-switch-when='action'\n        name=\"{{item.name}}\"\n        ng-click=\"item.ngClick()\"\n        icon=\"{{item.icon}}\"\n        aria-role=\"option\"\n        ng-class=\"{'selected' : item.selected}\"\n        >\n      </th-item>\n      <th-divider\n        ng-switch-default\n        aria-hidden=\"true\"\n      >\n      </th-divider>\n    </ng-switch>\n    <ng-transclude></ng-transclude>\n  </ul>\n</div>\n"

/***/ }),
/* 271 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thDropdown/thItem.action.template.html ***!
  \********************************************************/
/***/ (function(module, exports) {

module.exports = "<li>\n  <a class=\"dropdown-item\" href=\"#\">\n    <i ng-if=\"icon\" class=\"fa fa-{{icon}}\"></i>\n    {{name}}\n  </a>\n</li>\n"

/***/ }),
/* 272 */
/* unknown exports provided */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/lib/thDropdown/thItem.link.template.html ***!
  \******************************************************/
/***/ (function(module, exports) {

module.exports = "<li>\n  <a class=\"dropdown-item\" href=\"{{href}}\">\n    <i ng-if=\"icon\" class=\"fa fa-{{icon}}\"></i>\n    {{name}}\n  </a>\n</li>\n"

/***/ }),
/* 273 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/lib/thError/thError.template.html ***!
  \***********************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-error-container\">\n  <i class=\"fa fa-exclamation-triangle\"></i>\n  <span ng-if=\"!ctrl.message\">\n    {{'thError.error' | translate}}<br>{{'thError.instructions' | translate}}\n  </span>\n  <ng-transclude ng-if=\"ctrl.message\"></ng-transclude>\n</div>\n"

/***/ }),
/* 274 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/lib/thFilter/filters/autocomplete/thFilter.autocomplete.template.html ***!
  \***********************************************************************************/
/***/ (function(module, exports) {

module.exports = "<div>\n  <th-autocomplete\n    ng-model=\"thFilterAutocomplete.filter.model\"\n    ng-attr-placeholder=\"{{thFilterAutocomplete.filter.placeholder || thFilterAutocomplete.placeholder || 'Type some text…'}}\"\n    options=\"thFilterAutocomplete.options\"\n    on-change=\"thFilterAutocomplete.filterSet.onFilterChange\"\n    condensed\n    >\n  </th-autocomplete>\n</div>\n"

/***/ }),
/* 275 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/lib/thFilter/filters/date/thFilter.date.template.html ***!
  \*******************************************************************/
/***/ (function(module, exports) {

module.exports = "<div ng-class=\"{inner: thFilterDate.hasOperator}\">\n  <th-select\n    ng-if=\"thFilterDate.hasOperator\"\n    ng-model=\"thFilterDate.filter.operator\"\n    ng-change=\"thFilterDate.onOperatorChange()\"\n    options=\"thFilterDate.filter.operatorOptions\"\n    condensed=\"true\"\n    class=\"operator\"\n    >\n  </th-select>\n  <th-date-picker\n    ng-model=\"thFilterDate.filter.model\"\n    ng-attr-placeholder=\"{{thFilterDate.filter.placeholder || thFilterDate.placeholder || 'Enter filter date…'}}\"\n    on-change=\"thFilterDate.onValueChange\"\n    condensed=\"true\"\n    ng-class=\"{value: thFilterDate.hasOperator}\"\n    >\n  </th-date-picker>\n</div>\n"

/***/ }),
/* 276 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/lib/thFilter/filters/input/thFilter.input.template.html ***!
  \*********************************************************************/
/***/ (function(module, exports) {

module.exports = "<div>\n  <th-input\n    ng-model=\"thFilterInput.filter.model\"\n    ng-attr-placeholder=\"{{thFilterInput.filter.placeholder || thFilterInput.placeholder || 'Enter filter term…'}}\"\n    ng-keypress=\"thFilterInput.onKeypress($event)\"\n    ng-blur=\"thFilterInput.onBlur($event)\"\n    condensed=\"true\"\n    >\n  </th-input>\n</div>\n"

/***/ }),
/* 277 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/lib/thFilter/filters/number/thFilter.number.template.html ***!
  \***********************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"inner\">\n  <th-select\n    ng-model=\"thFilterNumber.filter.operator\"\n    ng-change=\"thFilterNumber.onOperatorChange()\"\n    options=\"thFilterNumber.filter.operatorOptions\"\n    condensed=\"true\"\n    class=\"operator\"\n    >\n  </th-select>\n  <th-input\n    ng-model=\"thFilterNumber.filter.model\"\n    ng-attr-placeholder=\"{{thFilterNumber.filter.placeholder || 'Type a number…'}}\"\n    ng-keypress=\"thFilterNumber.onKeypress($event)\"\n    ng-blur=\"thFilterNumber.onBlur($event)\"\n    condensed=\"true\"\n    class=\"value\"\n    type=\"number\"\n    >\n  </th-input>\n</div>\n"

/***/ }),
/* 278 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/lib/thFilter/filters/select/thFilter.select.template.html ***!
  \***********************************************************************/
/***/ (function(module, exports) {

module.exports = "<div>\n  <th-select\n    ng-model=\"thFilterSelect.filter.model\"\n    ng-change=\"thFilterSelect.onValueChange()\"\n    options=\"thFilterSelect.filter.options\"\n    ng-attr-placeholder=\"{{thFilterSelect.filter.placeholder || thFilterSelect.placeholder || 'Select an option'}}\"\n    condensed=\"true\"\n    >\n  </th-select>\n</div>\n"

/***/ }),
/* 279 */
/* unknown exports provided */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/lib/thFilter/filters/time/thFilter.time.template.html ***!
  \*******************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"inner\">\n  <th-select\n    ng-model=\"thFilterTime.filter.operator\"\n    ng-change=\"thFilterTime.onOperatorChange()\"\n    options=\"thFilterTime.operatorOptions\"\n    condensed=\"true\"\n    class=\"operator\"\n    >\n  </th-select>\n  <th-input\n    ng-model=\"thFilterTime.filter.model\"\n    ng-attr-placeholder=\"{{thFilterTime.filter.placeholder || '4am, 16:13'}}\"\n    ng-keypress=\"thFilterTime.onKeypress($event)\"\n    ng-blur=\"thFilterTime.validateInput()\"\n    condensed=\"true\"\n    class=\"value\"\n    >\n  </th-input>\n</div>\n"

/***/ }),
/* 280 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thFilter/thCustomFilterRow.template.html ***!
  \**********************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\n  <div class=\"field\">\n    <th-autocomplete\n      ng-model=\"thCustomFilterRow.rowSelectValue\"\n      on-change=\"thCustomFilterRow.onRowSelectChange\"\n      options=\"thCustomFilterRow.customFieldOptions\"\n      placeholder=\"Select or search fields…\"\n      show-search-hint=\"thCustomFilterRow.showSearchHint\"\n      condensed=\"true\"\n      icon=\"caret-down\"\n      combobox=\"true\"\n      >\n    </th-autocomplete>\n  </div>\n  <div\n    ng-repeat=\"filter in thCustomFilterRow.rowFilterOptions\"\n    ng-switch on=\"filter.type\"\n    class=\"wide field filter-container\"\n    >\n    <th-filter-select\n      ng-switch-when=\"select\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-select>\n    <th-filter-input\n      ng-switch-when=\"input\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-input>\n    <th-filter-number\n      ng-switch-when=\"number\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      operator-options=\"thCustomFilterRow.numberOperatorOptions\"\n      default-operator-index=\"2\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-number>\n    <th-filter-number\n      ng-switch-when=\"currency\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      operator-options=\"thCustomFilterRow.currencyOperatorOptions\"\n      default-operator-index=\"1\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-number>\n    <th-filter-select\n      ng-switch-when=\"checkbox\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      options=\"thCustomFilterRow.checkboxOptions\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-select>\n    <th-filter-input\n      ng-switch-when=\"email\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      placeholder=\"email@example.com\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-input>\n    <th-filter-input\n      ng-switch-when=\"url\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      placeholder=\"webaddress.com\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-input>\n    <th-filter-autocomplete\n      ng-switch-when=\"autocomplete\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-autocomplete>\n    <th-filter-date\n      ng-switch-when=\"date\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      operator-options=\"thCustomFilterRow.dateOperatorOptions\"\n      default-operator-index=\"1\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-date>\n    <th-filter-time\n      ng-switch-when=\"time\"\n      filter-set=\"thCustomFilterRow.filterSet\"\n      filter-options=\"thCustomFilterRow.rowSelectValue\"\n      initial-state=\"thCustomFilterRow.initialState\"\n      >\n    </th-filter-time>\n  </div>\n  <div class=\"field\">\n    <div class=\"link\" ng-click=\"thCustomFilterRow.removeRow()\">\n      Remove\n    </div>\n  </div>\n</div>\n"

/***/ }),
/* 281 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thFilter/thCustomFilters.template.html ***!
  \********************************************************/
/***/ (function(module, exports) {

module.exports = "<div\n  ng-if=\"thCustomFilters.shouldShowComponent()\"\n  class=\"th-custom-filters\"\n  >\n  <div class=\"custom-filters\">\n    <div class=\"custom-filters-label\">\n      {{thCustomFilters.name}} Custom Fields\n    </div>\n    <th-custom-filter-row\n      ng-repeat=\"row in thCustomFilters.customFilterRows\"\n      row-select-value=\"row.type\"\n      initial-state=\"row.initialState\"\n      custom-filter-types-data-source=\"thCustomFilters.customFilterTypesDataSource\"\n      show-search-hint=\"thCustomFilters.showSearchHint\"\n      filter-set=\"thCustomFilters.filterSet\"\n      on-remove-row=\"thCustomFilters.removeCustomFilterRow(row.identifier)\"\n      >\n    </th-custom-filter-row>\n  </div>\n  <div class=\"link add-custom-filter\" ng-click=\"thCustomFilters.addCustomFilterRow()\">\n    <i class=\"fa right-space fa-plus-circle\"></i>\n    Add {{thCustomFilters.name}} Custom Field\n  </div>\n</div>\n"

/***/ }),
/* 282 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thFilter/thFilter.template.html ***!
  \*************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-filter\" ng-class=\"{'th-filter-loading': thFilter.isLoading}\">\n  <div class=\"th-filter-header\">\n    <div class=\"filter-header-text\">Filters</div>\n    <th-button\n      class=\"clear-filters\"\n      ng-click=\"thFilter.clearFilters()\"\n      type=\"secondary\"\n      >\n      Clear Filters\n    </th-button>\n  </div>\n  <div ng-transclude></div>\n\n  <div class=\"th-filter-overlay\" ng-if=\"thFilter.isLoading\">\n    <th-loader class=\"th-filter-loader\" size=\"small\">&nbsp;</th-loader>\n  </div>\n</div>\n"

/***/ }),
/* 283 */
/* unknown exports provided */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/lib/thFilter/thSearchRow.template.html ***!
  \****************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-search-row\">\n  <div class=\"row\">\n    <div class=\"field\">\n      <th-filter-input\n        filter-set=\"thSearchRow.filterSet\"\n        filter-options=\"thSearchRow.queryFilterOptions\"\n        with-label=\"Search\"\n        ignore-blur-events=\"true\"\n        initial-state=\"thSearchRow.initialState\"\n        >\n      </th-filter-input>\n    </div>\n    <div class=\"bottom field\">\n      <th-button\n        ng-click=\"thSearchRow.filterSet.onFilterChange()\"\n        type=\"default\"\n        >\n        Search\n      </th-button>\n    </div>\n    <div class=\"field\"></div>\n    <div class=\"field\"></div>\n  </div>\n</div>\n"

/***/ }),
/* 284 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thFilter/thStaticFilters.template.html ***!
  \********************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-static-filters\">\n  <div class=\"row\">\n    <div\n      class=\"field\"\n      ng-repeat=\"filter in thStaticFilters.staticFilters track by filter.filterOptions.fieldIdentifier\"\n      ng-switch on=\"filter.filterOptions.type\"\n      >\n      <th-filter-select\n        ng-switch-when=\"select\"\n        class=\"field\"\n        filter-set=\"thStaticFilters.filterSet\"\n        filter-options=\"filter.filterOptions\"\n        with-label=\"{{filter.filterOptions.name}}\"\n        initial-state=\"filter.initialState\"\n        >\n      </th-filter-select>\n      <th-filter-input\n        ng-switch-when=\"input\"\n        class=\"field\"\n        filter-set=\"thStaticFilters.filterSet\"\n        filter-options=\"filter.filterOptions\"\n        with-label=\"{{filter.filterOptions.name}}\"\n        initial-state=\"filter.initialState\"\n        >\n      </th-filter-input>\n      <th-filter-date\n        ng-switch-when=\"date\"\n        class=\"field\"\n        filter-set=\"thStaticFilters.filterSet\"\n        filter-options=\"filter.filterOptions\"\n        with-label=\"{{filter.filterOptions.name}}\"\n        >\n      </th-filter-date>\n      <th-filter-autocomplete\n        ng-switch-when=\"autocomplete\"\n        class=\"field\"\n        filter-set=\"thStaticFilters.filterSet\"\n        filter-options=\"filter.filterOptions\"\n        with-label=\"{{filter.filterOptions.name}}\"\n        initial-state=\"filter.initialState\"\n        >\n      </th-filter-autocomplete>\n    </div>\n  </div>\n</div>\n"

/***/ }),
/* 285 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/lib/thInput/thInput.template.html ***!
  \***********************************************/
/***/ (function(module, exports) {

module.exports = "<span\n  class=\"th-input-wrapper\"\n  ng-class=\"[\n    {'is-invalid': input.isInvalid()},\n    {condensed: input.condensed}\n  ]\"\n  >\n  <span ng-if=\"input.prefix\" class=\"th-input-prefix\">{{input.prefix}}</span>\n  <input\n    ng-model=\"input.ngModel\"\n    class=\"th-input\"\n    ng-class=\"[\n      {'with-icon': input.icon},\n      {'with-prefix': input.prefix},\n      {'with-postfix': input.postfix},\n      {'disabled': input.ngDisabled}\n    ]\"\n    id=\"{{input.id}}\"\n    type=\"{{input.type}}\"\n    name=\"{{input.name}}\"\n    placeholder=\"{{input.placeholder}}\"\n    ng-required=\"input.ngRequired\"\n    ng-disabled=\"input.ngDisabled\"\n    ng-blur=\"input.ngBlur()\"\n    ng-keypress=\"input.ngKeypress\"\n    ng-minlength=\"input.ngMinlength\"\n    ng-maxlength=\"input.ngMaxlength\"\n    ng-pattern=\"input.ngPattern\"\n    ng-attr-min=\"{{input.min}}\"\n    ng-attr-max=\"{{input.max}}\"\n    ng-attr-step=\"{{input.step}}\"\n    ng-change=\"input.thOnChange()\"\n    >\n  <i ng-if=\"input.icon\" class=\"th-input-icon fa fa-{{input.icon}}\"></i>\n  <span ng-if=\"input.postfix\" class=\"th-input-postfix\">{{input.postfix}}</span>\n</span>\n"

/***/ }),
/* 286 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************!*\
  !*** ./src/lib/thLazy/thLazy.template.html ***!
  \*********************************************/
/***/ (function(module, exports) {

module.exports = "<ng-include ng-show=\"!lazy.loading\" onload=\"lazy.loadingComplete()\" src=\"lazy.src\"></ng-include>\n<th-loader trigger=\"lazy.loading\" size=\"small\"></th-loader>\n<th-error ng-if=\"lazy.loadError && !lazy.errorMessage && !lazy.loading\">\n  We had trouble loading your content\n  <br>\n  <a\n    href=\"#\"\n    ng-show=\"lazy.name\"\n    ng-click=\"lazy.reload()\"\n    >\n    Try reloading\n  </a>\n  <span ng-hide=\"lazy.name\">Try reloading</span>\n</th-error>\n<th-error ng-if=\"lazy.loadError && lazy.errorMessage && !lazy.loading\">\n  {{lazy.errorMessage}}\n</th-error>\n"

/***/ }),
/* 287 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/lib/thLazy/thMetaLoader.template.html ***!
  \***************************************************/
/***/ (function(module, exports) {

module.exports = "<div>\n  <th-loader class=\"meta-spinner\" trigger=\"meta.loading\"></th-loader>\n  <div ng-show=\"!meta.loading\">\n    <ng-transclude></ng-transclude>\n  </div>\n</div>\n"

/***/ }),
/* 288 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thLoader/thLoader.template.html ***!
  \*************************************************/
/***/ (function(module, exports) {

module.exports = "<div\n  class=\"th-loader {{loader.theme}}\"\n  ng-show=\"loader.visible\"\n  >\n  <div class=\"progress {{loader.size}}\">\n    <div></div>\n  </div>\n  <p ng-hide=\"loader.size == 'mini'\" class=\"loading-text\" ng-transclude></p>\n</div>\n"

/***/ }),
/* 289 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/lib/thModal/thModal.template.html ***!
  \***********************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-modal {{ modal.name }} {{ modal.size }}\">\n  <div th-compile=\"modal.content\"></div>\n</div>\n"

/***/ }),
/* 290 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thModal/thModalAnchor.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-modal-backdrop\" ng-class=\"{visible: anchor.modals.length > 0}\">\n  <div\n    class=\"th-modal-container\"\n    ng-repeat=\"modal in anchor.modals | limitTo:anchor.modalLimit\"\n    >\n    <div class=\"cell\">\n      <th-modal modal-data=\"modal\"></th-modal>\n    </div>\n  </div>\n</div>\n"

/***/ }),
/* 291 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/lib/thModal/thModalTitlebar/thModalTitlebar.template.html ***!
  \***********************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"titlebar-title\">\n  {{ $ctrl.title }}\n</div>\n<div class=\"titlebar-actions\">\n  <button\n    ng-click=\"$ctrl.close()\"\n    ng-if=\"$ctrl.showCloseButton\"\n    aria-label=\"Close Modal\"\n    >\n\n    <i class=\"fa fa-times\"></i>\n  </button>\n</div>\n"

/***/ }),
/* 292 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/lib/thPopover/thPopover.arrow.template.html ***!
  \*********************************************************/
/***/ (function(module, exports) {

module.exports = "<i class=\"th-popover-arrow th-popover-hidden\"></i>\n"

/***/ }),
/* 293 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thPopover/thPopover.overlay.template.html ***!
  \***********************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-popover-overlay th-popover-hidden\"></div>\n"

/***/ }),
/* 294 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/lib/thPopover/thPopover.template.html ***!
  \***************************************************/
/***/ (function(module, exports) {

module.exports = "<div\n  class=\"th-popover-view th-popover-hidden\"\n  ng-class=\"{\n              loading: !loaded,\n              'overflow-visible': overflow == 'visible',\n              'overflow-hidden': overflow == 'hidden'\n            }\"\n  >\n  <div\n    class=\"th-popover-content\"\n    th-compile=\"content\"\n    ></div>\n</div>\n"

/***/ }),
/* 295 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/lib/thRadioGroup/thRadioButton.template.html ***!
  \**********************************************************/
/***/ (function(module, exports) {

module.exports = "<span\n  class=\"th-radio-button\"\n  ng-class=\"{\n    checked: checked\n    }\"\n  ng-model=\"group.value\"\n  >\n  <input\n    type=\"radio\"\n    name=\"{{group.name}}\"\n    value=\"{{value}}\"\n    ng-checked=\"checked\"\n    ng-required=\"group.ngRequired\"\n    >\n  <i></i>\n</span>\n"

/***/ }),
/* 296 */
/* unknown exports provided */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/lib/thRadioGroup/thRadioGroup.template.html ***!
  \*********************************************************/
/***/ (function(module, exports) {

module.exports = "<ng-transclude class=\"th-radio-group\"></ng-transclude>\n"

/***/ }),
/* 297 */
/* unknown exports provided */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/lib/thScheduler/calendars/calendars.template.html ***!
  \***************************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"d-flex\">\n  <h3>My Calendars</h3>\n</div>\n<ul>\n  <li ng-repeat=\"calendar in $ctrl.calendars\" class=\"d-flex justify-content-between\">\n    <th-checkbox\n      ng-model=\"calendar.visible\"\n      ng-change=\"$ctrl.toggleVisibility(calendar)\"\n      with-label=\"{{calendar.name}}\"\n      ng-style=\"{\n        'background-color': calendar.color,\n        'border-color': calendar.color,\n      }\"\n      >\n    </th-checkbox>\n    <th-button\n      kendo-tooltip\n      k-on-show=\"$ctrl.setCalendarBeingEdited(calendar)\"\n      k-content=\"$ctrl.colorsTooltipContent\"\n      k-options=\"$ctrl.colorTooltipOptions\"\n      class=\"k-group\"\n      type=\"secondary\"\n      >\n      &#9662;\n    </th-button>\n  </li>\n</ul>\n"

/***/ }),
/* 298 */
/* unknown exports provided */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/lib/thScheduler/calendars/color.template.html ***!
  \***********************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"spacing-inset-s\">\n  <ul class=\"d-flex flex-wrap\">\n    <li ng-repeat=\"(key, colorObj) in $ctrl.colors\" class=\"spacing-inset-xs\"\">\n      <div\n        ng-style=\"{\n          'background-color': colorObj.val,\n          width: '25px',\n          height: '25px',\n        }\"\n        ng-click=\"$ctrl.setColorForCalendarBeingEdited(colorObj.val)\"\n        >\n      </div>\n    </li>\n  </ul>\n</div>\n"

/***/ }),
/* 299 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thScheduler/scheduler.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<kendo-scheduler k-options=\"$ctrl.options\">\n  <div class=\"product\" k-event-template data-calendar-id=\"{{dataItem.calendar_id}}\">\n    <h3>{{dataItem.title}}</h3>\n  </div>\n  <th-modal-anchor></th-modal-anchor>\n</kendo-scheduler>\n"

/***/ }),
/* 300 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thSelect/thSelect.template.html ***!
  \*************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"select-wrapper\"\n  ng-class=\"{condensed: select.condensed}\"\n  >\n  <div\n    class=\"text-wrapper\"\n    ng-class=\"[\n      {disabled: select.ngDisabled},\n      {'is-invalid': select.isInvalid()}\n    ]\"\n    >\n    <span class=\"selected-text\">\n      {{select.selectedText}}\n    </span>\n    <i class=\"fa fa-caret-down\"></i>\n  </div>\n  <select\n    ng-disabled=\"select.ngDisabled\"\n    ng-attr-name=\"{{select.name || undefined}}\"\n    ng-model=\"select.ngModel\"\n    ng-change=\"select.thOnChange()\"\n    ng-options=\"option.{{select.nameField}} group by option.group for option in select.options track by option.{{select.valueField}}\"\n    ng-required=\"select.ngRequired\"\n    >\n    <option\n      ng-show=\"select.placeholder\"\n      value=\"\"\n      >\n      {{select.placeholder}}\n    </option>\n  </select>\n</div>\n"

/***/ }),
/* 301 */
/* unknown exports provided */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/lib/thSwitch/thSwitch.template.html ***!
  \*************************************************/
/***/ (function(module, exports) {

module.exports = "<span\n  class=\"th-switch\"\n  ng-class=\"{active: switch.state}\"\n  >\n  <input\n    type=\"checkbox\"\n    name=\"{{switch.name}}\"\n    ng-model=\"switch.state\"\n    ng-required=\"switch.ngRequired\"\n    >\n  <i></i>\n</span>\n"

/***/ }),
/* 302 */
/* unknown exports provided */
/* all exports used */
/*!**********************************************!*\
  !*** ./src/lib/thTabset/thTab.template.html ***!
  \**********************************************/
/***/ (function(module, exports) {

module.exports = "<div\n  id=\"{{ariaControlsID}}\"\n  class=\"th-tab\"\n  ng-if=\"show && active\"\n  tabindex=\"0\"\n  ng-transclude\n  >\n</div>\n"

/***/ }),
/* 303 */
/* unknown exports provided */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/lib/thTabset/thTabset.native.template.html ***!
  \********************************************************/
/***/ (function(module, exports) {

module.exports = "<div class=\"th-tabset {{ type }}\">\n  <ul\n    class=\"th-tab-bar\"\n    role=\"tablist\"\n    >\n    <li\n      ng-click=\"processTabChange(tab)\"\n      ng-repeat=\"tab in tabs\"\n      ng-class=\"{\n        active: tab.active,\n        'letter-spacing': tab.letterSpacing\n      }\"\n      class=\"tab-name\"\n      tabindex=\"{{tab.active ? '0' : '-1'}}\"\n      aria-controls=\"{{tab.ariaControlsID}}\"\n      role=\"tab\"\n      aria-selected=\"{{tab.active}}\"\n      ng-if=\"tab.show\"\n      >\n      {{ tab.name }}\n      <span\n        class=\"th-tab-badge\"\n        ng-if=\"hasBadge(tab)\"\n        aria-label=\"{{ tab.badge }} Items\"\n        >\n        {{ tab.badge }}\n      </span>\n    </li>\n    <div\n      class=\"th-tab-action-bar\"\n      ng-transclude=\"actionBar\"\n      tabindex=\"-1\"\n    >\n    </div>\n  </ul>\n  <div\n    class=\"th-tabset-content\"\n    role=\"tabpanel\"\n    ng-transclude\n    >\n  </div>\n</div>\n"

/***/ }),
/* 304 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thTextarea/thTextarea.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<textarea\n  ng-model=\"ctrl.model\"\n  ng-required=\"ctrl.ngRequired\"\n  ng-disabled=\"ctrl.ngDisabled\"\n  ng-minlength=\"ctrl.ngMinlength\"\n  ng-maxlength=\"ctrl.ngMaxlength\"\n  ng-pattern=\"ctrl.ngPattern\"\n  ng-change=\"ctrl.thOnChange()\"\n  ng-class=\"[\n    {'with-icon': ctrl.icon},\n    {'disabled': ctrl.ngDisabled},\n    {'is-invalid': ctrl.isInvalid()}\n  ]\"\n  ng-attr-name=\"{{ctrl.name}}\"\n  ng-attr-rows=\"{{ctrl.rows}}\"\n  ng-attr-placeholder=\"{{ctrl.placeholder}}\"\n  >\n</textarea>\n<i ng-if=\"ctrl.icon\" class=\"th-textarea-icon fa fa-{{ctrl.icon}}\"></i>\n"

/***/ }),
/* 305 */
/* unknown exports provided */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/lib/thTruncate/thTruncate.template.html ***!
  \*****************************************************/
/***/ (function(module, exports) {

module.exports = "<span\n  ng-class=\"{'expanded':truncate.expanded,\n             'th-truncate':truncate.hasTruncateControl}\"\n  >\n  {{ truncate.truncatedText }}\n</span>\n<a\n  href=\"\"\n  class=\"truncate-control\"\n  ng-click=\"truncate.toggleTruncation()\"\n  ng-if=\"truncate.hasTruncateControl\"\n  >\n  ({{ truncate.expanded ? 'close' : 'more' }})\n</a>\n"

/***/ }),
/* 306 */,
/* 307 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./src/lib/index.coffee ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

var angular, translations;

angular = __webpack_require__(/*! angular */ 2);

translations = __webpack_require__(/*! ../i18n/locale-en.json */ 73);

__webpack_require__(/*! @progress/kendo-ui/js/kendo.core.js */ 0);

__webpack_require__(/*! ../vendor_overrides/@progress/kendo-ui/js/kendo.angular.js */ 111);

__webpack_require__(/*! ../polyfills/ */ 19);

angular.module("ThemisComponents", [__webpack_require__(/*! angular-aria */ 17), __webpack_require__(/*! angular-messages */ 18), __webpack_require__(/*! angular-sanitize */ 20), __webpack_require__(/*! angular-translate */ 72), __webpack_require__(/*! angular-translate-loader-static-files */ 71), "kendo.directives", __webpack_require__(/*! ui-select */ 21)]).config([
  "$translateProvider", function($translateProvider) {
    return $translateProvider.translations("en", translations).preferredLanguage("en").useSanitizeValueStrategy("sanitize");
  }
]);

__webpack_require__(/*! ./services/ */ 104);

__webpack_require__(/*! ./thActionBar/ */ 74);

__webpack_require__(/*! ./thActionBarBilling/ */ 75);

__webpack_require__(/*! ./thAlert/ */ 76);

__webpack_require__(/*! ./thAutocomplete/ */ 105);

__webpack_require__(/*! ./thButton/ */ 77);

__webpack_require__(/*! ./thCheckbox/ */ 78);

__webpack_require__(/*! ./thCompile/ */ 79);

__webpack_require__(/*! ./thContentHeader/ */ 80);

__webpack_require__(/*! ./thContextualMessage/ */ 81);

__webpack_require__(/*! ./thDataTable/ */ 106);

__webpack_require__(/*! ./thDatePicker/ */ 107);

__webpack_require__(/*! ./thDefaults/ */ 82);

__webpack_require__(/*! ./thDisclosure/ */ 83);

__webpack_require__(/*! ./thDropdown/ */ 84);

__webpack_require__(/*! ./thError/ */ 85);

__webpack_require__(/*! ./thFilter/ */ 86);

__webpack_require__(/*! ./thGrid/ */ 108);

__webpack_require__(/*! ./thInput/ */ 87);

__webpack_require__(/*! ./thLazy/ */ 88);

__webpack_require__(/*! ./thLoader/ */ 89);

__webpack_require__(/*! ./thModal/ */ 90);

__webpack_require__(/*! ./thPlural/ */ 91);

__webpack_require__(/*! ./thPopover/ */ 92);

__webpack_require__(/*! ./thRadioGroup/ */ 93);

__webpack_require__(/*! ./thScheduler/ */ 109);

__webpack_require__(/*! ./thSelect/ */ 94);

__webpack_require__(/*! ./thSwitch/ */ 95);

__webpack_require__(/*! ./thTable/ */ 96);

__webpack_require__(/*! ./thTabset/ */ 97);

__webpack_require__(/*! ./thTextarea/ */ 98);

__webpack_require__(/*! ./thTruncate/ */ 99);

__webpack_require__(/*! ./thViewModel/ */ 100);

__webpack_require__(/*! ./thWithFocus/ */ 101);

__webpack_require__(/*! ./thWithLabel/ */ 102);

__webpack_require__(/*! ./thWithMessages/ */ 103);

module.exports = "ThemisComponents";


/***/ })
/******/ ]);
//# sourceMappingURL=debugging/lib-themisui.js.map